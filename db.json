{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/ads.txt","path":"ads.txt","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/anime.min.js","path":"js/src/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/fireworks.js","path":"js/src/fireworks.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/muse.js","path":"js/src/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.all-contributorsrc","hash":"0ca0200bb5cba4cd157f2cb74703c4cb4c29cda5","modified":1550453562792},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1550453562792},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1550453562792},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1550453562792},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1550453562793},{"_id":"themes/next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1550453562795},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1550453562795},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1550453562796},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1550453562796},{"_id":"themes/next/README.md","hash":"943f9fd6ed1781350cdd05a26a1cfad24d035c8b","modified":1550453562796},{"_id":"themes/next/_config.yml","hash":"4849ddae10efedd71a0c3a1e93fbc167ecf9a9ae","modified":1557466804050},{"_id":"themes/next/bower.json","hash":"fd8b18788ca1bdabad013110562e7c4af0c96ff3","modified":1550453562797},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1550453562797},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1550453562810},{"_id":"themes/next/package.json","hash":"311d3d04301b1930058f631624d2a0976408c46a","modified":1550453562852},{"_id":"source/CNAME","hash":"ae8e95740d4cbecd4690c8ce4bc38079a103d75e","modified":1563241904259},{"_id":"source/ads.txt","hash":"d2b2fd45dba097af0f42716dde0b83e9aa959c16","modified":1577866601358},{"_id":"source/robots.txt","hash":"95e1971d2a428993b8859bcdb7a8b6926fac85c5","modified":1552480453638},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"22f2ccc5522563b67c8663849fc1d6cbae93a8ff","modified":1550453562793},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"40b0fd9fdb8586fab98e23f713940e7a2f80e2f9","modified":1550453562794},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"557cc83af06b46418fd4d18e2ddcfd56bd5d69c6","modified":1550453562794},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1550453562795},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1550453562794},{"_id":"themes/next/.github/stale.yml","hash":"a24e464fa77d6687010ffe89af9aa10cb1270efe","modified":1550453562795},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1550453562798},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1550453562798},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1550453562799},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1550453562799},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"721a1aa9feed1b580ab99af8e69ed22699121e88","modified":1550453562802},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1550453562801},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1550453562802},{"_id":"themes/next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1550453562802},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1550453562803},{"_id":"themes/next/languages/de.yml","hash":"641e49587d41bb87e4d5932dc3d975754ded7953","modified":1550453562810},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1550453562810},{"_id":"themes/next/languages/fr.yml","hash":"ebcd1f188af8c3f5ef1f0923e794c839fbfae2d4","modified":1550453562811},{"_id":"themes/next/languages/id.yml","hash":"9709a4dbacc56a1571a96b139b872128d6959e90","modified":1550453562811},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1550453562811},{"_id":"themes/next/languages/it.yml","hash":"4e3adeb10c0fa627935d69ae1783ce0894f5dee5","modified":1550453562812},{"_id":"themes/next/languages/ja.yml","hash":"82afb0a5637ad67065fa5b2624fa56c7c240c3c6","modified":1550453562813},{"_id":"themes/next/languages/ko.yml","hash":"33e065ceb21590b8eb32430a69e76c2f057eb758","modified":1550453562813},{"_id":"themes/next/languages/nl.yml","hash":"060efc260c1c529469d739d97dcee79683e8f411","modified":1550453562813},{"_id":"themes/next/languages/pt-BR.yml","hash":"dc09e290e908744ca28e093dbdd859ca2a20290e","modified":1550453562814},{"_id":"themes/next/languages/pt.yml","hash":"53e2a52b9d5dc20c04080acd4f5b954e8699780f","modified":1550453562814},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1550453562814},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1550453562814},{"_id":"themes/next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1550453562815},{"_id":"themes/next/languages/vi.yml","hash":"e2b3b18359ab41d58c64b2002acfedd60a7505a4","modified":1550453562815},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1550453562815},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1550453562815},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1550453562816},{"_id":"themes/next/layout/_layout.swig","hash":"0dce3d21e65a65d5d50970e9d9d0470ca9e0d38e","modified":1572867525014},{"_id":"themes/next/layout/archive.swig","hash":"4b53070008775ecfd03953bd1b4adfcb0fabcaac","modified":1557457593621},{"_id":"themes/next/layout/category.swig","hash":"f0e3338bfa5efb205d2c28e635e9611f1fff3b55","modified":1550453562850},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1557457584884},{"_id":"themes/next/layout/page.swig","hash":"1d28997ec69d3c236c0dac86cc7a8fbcfdbbb03f","modified":1550453562851},{"_id":"themes/next/layout/post.swig","hash":"af74e97d57cf00cde6f8dbd4364f27910915454e","modified":1550453562851},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1550453562851},{"_id":"themes/next/layout/tag.swig","hash":"7cda2822e50b9fee9848a6b81e6c2d1aca830aeb","modified":1550453562852},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1550453562853},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1550453562854},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1550453562947},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1550453562947},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1550453562947},{"_id":"source/about/index.md","hash":"d0044506bd700c4b023484397ee1f2e607783ec4","modified":1573101291304},{"_id":"source/_posts/C++版本的XXTEA实现.md","hash":"5243b995b70ecece192f9ad638c49062ec48be0d","modified":1557285202517},{"_id":"source/_posts/Git常用命令.md","hash":"065aaa069cbe0e98d7878aec889bb91277180574","modified":1557477238206},{"_id":"source/_posts/OOP中的继承.md","hash":"2b6e72061ec58760e50ab408ea72158f59933b81","modified":1556160865018},{"_id":"source/_posts/Python版本的XXTEA实现.md","hash":"06caa3af404669ca9ecc5697ae04d8ea354b3003","modified":1557284773494},{"_id":"source/_posts/SVN合并操作.md","hash":"0da0cd097f8718dc0f331a8f1a2abbcd29efa1a6","modified":1557477235174},{"_id":"source/_posts/goto语句 VS 函数调用.md","hash":"65170302d94009d1b858ffd5ec6899a149d8afb7","modified":1557475089296},{"_id":"source/_posts/使用VSCode调试C++代码.md","hash":"420c5af54ab9ef76ac0b67cdc22d2b6bcfa6f075","modified":1557307121482},{"_id":"source/_posts/使用VSCode调试JavaScript代码.md","hash":"c5291db79ec92efcc76925927b1abd47193b2bc6","modified":1557477248187},{"_id":"source/_posts/值得收藏的网站.md","hash":"bfd7a9a525dbd2a410fbd9b7cb8e48268112bcf7","modified":1558612521274},{"_id":"source/_posts/图形用户界面 VS 命令行界面.md","hash":"e506756e3a816056c607deea7eef1067002533fe","modified":1557469810257},{"_id":"source/_posts/在Visual Studio中搜索文件名.md","hash":"7e8a5503d1596e8e4ec74bfbd3f2a919baaa35e0","modified":1561381696570},{"_id":"source/_posts/编程语言的分类.md","hash":"d13c498a7fa38cc2e610f4e657bc1e0f790da9eb","modified":1557741775718},{"_id":"source/_posts/解决SVN树冲突.md","hash":"c2c30f2f42f719aaa90158020d99341c47c7746a","modified":1557478601757},{"_id":"source/_posts/软件固有的复杂性.md","hash":"066d33b077e8ae0e33c7107ee0fbfb9f350127cd","modified":1564110991993},{"_id":"source/categories/index.md","hash":"8cbb8f9bcfe59ba70a1aa0c1da2795552494b547","modified":1550453562791},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550453562911},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1550453562806},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1550453562805},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"6ea741f380dc3e90661d12db7e115a94b77643a4","modified":1550453562806},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1550453562808},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1550453562808},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"b17fc344ff61603f83387c0f9b2b2189aae81d50","modified":1550453562808},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"734b371a0dd910eb9fe087f50c95ce35340bb832","modified":1550453562809},{"_id":"themes/next/docs/zh-CN/README.md","hash":"7fb215a0a633384948ac9228ac14617b4a974dbd","modified":1550453562809},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1550453562809},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1550453562803},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1550453562803},{"_id":"themes/next/docs/ru/README.md","hash":"0b69e831b4617f801d9b49e8ce810daacbbee6c1","modified":1550453562804},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1550453562805},{"_id":"themes/next/layout/_custom/custom.swig","hash":"d30f68353e93cc07975919511c310a5a09d6665e","modified":1572867525013},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1550453562816},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1550453562816},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1550453562817},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"891ab67815969dd8736cb22fbbb3f791b8fff4e4","modified":1550453562818},{"_id":"themes/next/layout/_macro/post.swig","hash":"0fd71b1324cceea61a7eec9433f990c4de891324","modified":1553484017523},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"838686a5d2c3ae5c03b69842e931d9efe276e55a","modified":1550453562820},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"6337747816219616916e73bdfd6961a164f872cf","modified":1550453562832},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"c31d54154eed347f603009d2d65f7bf8d9a6885a","modified":1550453562832},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1550453562833},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"68ad21aef6481d014e7ec0b674e469f2f82ea231","modified":1550453562836},{"_id":"themes/next/layout/_partials/comments.swig","hash":"54afb7b78509ed8fac5d23daecc147b0fe615d1d","modified":1550453562820},{"_id":"themes/next/layout/_partials/footer.swig","hash":"f6d0f42414b40b442d79547143449dddf3aa179e","modified":1557458705504},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"710ae10cb6cafc21e40c57dd9b31f0980b030f4b","modified":1550453562821},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1550453562826},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1550453562826},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b315b5885abcbed75debc8049e9fc943d9fafb5c","modified":1550453562842},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"4b93dc7ac0573c402aabcb5c933bbcb893b07c51","modified":1550453562843},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"c80b04aabdeef0e03a08284c82324089710abd45","modified":1550453562846},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"9e00cb9b3fdfe2e2c4877a874d0d3ecb7fd0f3ee","modified":1550453562846},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"7db4ad4a8dd5420dad2f6890f5299945df0af970","modified":1550453562848},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"76f5933925670044ec65b454295ba7e0a8439986","modified":1550453562848},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"d66dec72ea7ad5026260914e3545551645e0ab37","modified":1550453562848},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"c476dc3693a9dd0be2d136a45b0d7fdef55d4d92","modified":1550453562848},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"85ca359866325ce82f5f0f88576fae13a763b5eb","modified":1550453562849},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"f58463133bf8cfef5ff07f686b834ff8cbbe492f","modified":1550453562849},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1550453562853},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"3db90c52bc8af57c6fa4a9dbdc524e1ecdc8b7b1","modified":1550453562853},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1550453562855},{"_id":"themes/next/scripts/tags/button.js","hash":"dba55534ef4a11fb6723ec73e3ef4dcf7589ed9f","modified":1550453562854},{"_id":"themes/next/scripts/tags/exturl.js","hash":"e9dab948e6327b22b4fc0c66cf97f6600a444dd5","modified":1550453562855},{"_id":"themes/next/scripts/tags/full-image.js","hash":"b2ed8de4065c302fac1654f0d3d3ecb5fa6e0f80","modified":1550453562855},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"03575b534303f42c81ba6187ec601a5578913a39","modified":1550453562856},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1550453562857},{"_id":"themes/next/scripts/tags/label.js","hash":"48f68ab33d42e638c2ab5f89f40c34fc2fa1e6dc","modified":1550453562857},{"_id":"themes/next/scripts/tags/note.js","hash":"f1b560d6e63d1b06fd80e12bbac32660125c223c","modified":1550453562857},{"_id":"themes/next/scripts/tags/tabs.js","hash":"ca885c8fa46a76a7b8977730575551622497410b","modified":1550453562858},{"_id":"themes/next/source/css/main.styl","hash":"5e7d28bc539e84f8b03e68df82292f7fc0f2d023","modified":1550453562911},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1550453562911},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"0c920fe1ce2f09c9c7641266ff4155053909ec18","modified":1550453562912},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1550453562913},{"_id":"themes/next/source/images/avatar.png","hash":"2741c4051e98ed6e9402e3264b3b00c723be74fb","modified":1550453562912},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1550453562914},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1550453562913},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1550453562914},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1550453562914},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1550453562914},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1550453562915},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"c3321e9650169793e4d726934d8f326295a6dfa3","modified":1550453562915},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"c26ea7914a8724554946427df0ccad765ffbfce3","modified":1550453562915},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1550453562916},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1550453562916},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1550453562916},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1550453562916},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1550453562917},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1550453562917},{"_id":"source/_posts/Android/ADB常用命令.md","hash":"ade9b469981b7943df6fae0a50ff76870fe573d2","modified":1556161670194},{"_id":"source/_posts/Android/Android开发中的名称缩写.md","hash":"c9bc6095d34c56d89c203024641c34f3e8ff950e","modified":1562591592264},{"_id":"source/_posts/Android/使用logcat查看android系统日志.md","hash":"244a78022b50521f6b19de077f8a15e02bac534c","modified":1556161670193},{"_id":"source/_posts/Android/“此应用专为旧版Android打造，因此可能无法正常运行。请尝试检查更新或与开发者联系”.md","hash":"8d3a37e2192162e256128a9450a3964c0bc96c3e","modified":1562590503671},{"_id":"source/_posts/Android/安卓APP的安装目录.md","hash":"95e96bb65c69c1b178ea47f5cdb0901b04556289","modified":1562931233137},{"_id":"source/_posts/GameDev/心跳机制.md","hash":"065494af5029b316107daf3535f6e2fa591c2737","modified":1559297482212},{"_id":"source/_posts/IOS/IOS打包生成的dSYM文件.md","hash":"4abac4f1b075341cee8e4afd427584bd651c1d57","modified":1563974873018},{"_id":"source/_posts/IOS/获取IOS真机日志.md","hash":"2d956cfce278ed99e0f456439848cfdafd63cf55","modified":1563975049627},{"_id":"source/_posts/IOS/分析IOS上APP的崩溃堆栈.md","hash":"7bea9bbee907350a333fff24afd419c764b9013b","modified":1564050256157},{"_id":"source/_posts/Linux/域名解析系统（DNS）.md","hash":"186528c60ea17af8462d28cec4aded6998dbecd0","modified":1563242432203},{"_id":"source/_posts/Linux/Linux常用命令.md","hash":"e52952950c76e7cb62dfe7e625fae633d9a14e12","modified":1563159256334},{"_id":"source/_posts/Linux/域名邮箱.md","hash":"17dac88848edd67b1e56c8e7895371ca4900b15c","modified":1577276368581},{"_id":"source/_posts/Linux/搭建WordPress网站.md","hash":"85b5277d36cc6209a1d044a09ba91442c766e52c","modified":1563243065007},{"_id":"source/_posts/Lua/Lua中加载代码的方式.md","hash":"6a8ca0de855af6c625d54fa56abf8bcaa70b65fd","modified":1556161560653},{"_id":"source/_posts/Lua/Lua中的Table常见操作.md","hash":"1c1e84eaf25d1e4e5d47a4982abc5decd68b7d7b","modified":1556161560653},{"_id":"source/_posts/Lua/Lua中的String常见操作.md","hash":"4c06a5ba914f0fa8a94cc71fa38cd8023220634e","modified":1556161560653},{"_id":"source/_posts/Lua/Lua官网提供的win平台zip包内容.md","hash":"d6d92ee35733471217cff6a45ce00c5bbc4528a2","modified":1557736655694},{"_id":"source/_posts/Lua/Lua的元表与元方法.md","hash":"b6eadcef191e8c7672b6395db2d98b0582650caf","modified":1556161560653},{"_id":"source/_posts/Lua/Lua遍历Table的几种方式.md","hash":"0521b9749d2c4e09349c6df5f574f64fd4c75f34","modified":1556161560653},{"_id":"source/_posts/Other/2019年的7月内必须减到70kg！.md","hash":"2b22ffeb2254db599cbd44b551b40fe515a4e124","modified":1563159402254},{"_id":"source/_posts/Other/2020年1月1日.md","hash":"dc3c2e45a4c6761aaf94cbddbbeda7f8cec3615c","modified":1577869956628},{"_id":"source/_posts/Other/偈语.md","hash":"cc6b4e5875bd82ad6c9bef0b1e136f59a9eb6c1c","modified":1567429266545},{"_id":"source/_posts/Other/功夫.md","hash":"2954f3d36ba9e075e4b828aa7bbcfb854149aa90","modified":1566992568281},{"_id":"source/_posts/Other/Unknown unknown.md","hash":"f3026352268e4110cfaa9d50e261af1230f2f8fd","modified":1577871799737},{"_id":"source/_posts/Other/拿起，放下。.md","hash":"60a8424f595e69db1bb6e9f3fdff9c1a9dea87bf","modified":1558612521275},{"_id":"source/_posts/Other/时间过的真快啊.md","hash":"f1c98274191fbde2ad5c1b643d2c4bc274013d14","modified":1566994732399},{"_id":"source/_posts/Other/拿到驾照！.md","hash":"f15b0cea473123c3caba496a997cfaf09ec56c4c","modified":1562935631755},{"_id":"source/_posts/cocos2dx/cocos2dx-lua的报错.md","hash":"77adad5f4b4bf0fbfb8ee4f89d8ab88a3a897f14","modified":1574580479566},{"_id":"source/_posts/cocos2dx/cocos2dx的屏幕适配.md","hash":"e46c878457b6894bcec7c9d74ed393da730bdd45","modified":1577866601327},{"_id":"source/_posts/cocos2dx/根据节点名称递归查询UI树上的某个节点.md","hash":"cfb14bcf8539167f68552737960f16137829665a","modified":1574580491521},{"_id":"source/_posts/cocos2dx/使用cocos2dx-lua遇到的一些问题.md","hash":"d700d9be4658d03d4a39355da4de14e1a9ebb905","modified":1574580474014},{"_id":"source/_posts/read/如何学习.md","hash":"3dbac348d2fef78483584b26b154621f00134dda","modified":1577866601358},{"_id":"source/_posts/read/原则.md","hash":"401e97f292d80c89747a7daaa5f634b170fb79c6","modified":1577866601342},{"_id":"source/_posts/read/富爸爸穷爸爸.md","hash":"93cdff643dda468b5fbbd2186db5ffb6a4ea4ae2","modified":1574656066351},{"_id":"source/_posts/read/房债：为什么会出现大衰退，如何避免重蹈覆辙.md","hash":"d4e0a1000c57fd5547a9c7a5b56c39ee9e685319","modified":1575287688502},{"_id":"source/_posts/read/正念：此刻是一支花.md","hash":"3ac99f687ead9675cd53cb6c5ec2f02334eb7755","modified":1576495154635},{"_id":"source/_posts/read/稀缺：我们是如何陷入贫穷与忙碌的.md","hash":"9fdf54f1af5848955a27bc83ee5fc3af3683130b","modified":1574580381411},{"_id":"source/_posts/read/系统之美：决策者的系统思考.md","hash":"4bbce3e0ac261827a128e1f25991690606ea1b1d","modified":1577866601358},{"_id":"source/_posts/read/远见：如何规划职业生涯三大阶段.md","hash":"1b7706874404b014fe7f3cebc91a4b7ce61522ad","modified":1577866601358},{"_id":"source/_posts/read/金融的本质.md","hash":"18fb387bc713dce85829b11077ae28899acb376c","modified":1576470055789},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550453562895},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550453562896},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550453562908},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550453562897},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550453562910},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1550453562817},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"25aea3d764b952f3f6d28ab86d7212d138e892df","modified":1550453562818},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"e0f0a753d4920ffb37ddbc8270515654a0b9b92a","modified":1550453562834},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1550453562834},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1550453562835},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"84018384d00e4a584d613589adae6674a3060a36","modified":1550453562835},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"23c6d15aa2a305f9d29caee1b60cfae84d32fa09","modified":1550453562836},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"b57bf9c865bed0f22157176a8085de168a1aef77","modified":1550453562822},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"4b53a0659a7e800871d8e9a4bd20f7b892a8e29b","modified":1557458086634},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"9524140b2046ed850e3aa69d955a6fc790443255","modified":1552480453639},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"2177da1d3c64abb6b3398f90885cf543ae6fe6da","modified":1550453562823},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1550453562823},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1550453562825},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"39c4ad0e36b7c1260da98ba345f7bd72a2ac0f2e","modified":1550453562823},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"daa6e5b7dbc409d6bf8a031d5413d8229e9c0995","modified":1550453562825},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1550453562825},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"55de88525c05af6053524c78ef4b42b46c3bfb6d","modified":1550453562826},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f331ad02beea8990066d32ad6ec9f859672c3615","modified":1550453562827},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"fc69f1f3950d9b81b0d474735e512053be169e8e","modified":1550453562827},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"0949c72a944b9abd5e5cc654b5556ac9450d431b","modified":1550453562828},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"71b2fb364563cacc6afdf15d1f6876255ae2f9f2","modified":1550453562829},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1550453562828},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1550453562829},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"31245e09ce0465b994cebd94223a531585c4eab4","modified":1550453562830},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c609097b95eb6127c2784f47f2230e6e6efc0be2","modified":1550453562831},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"54b43d406cf37932e7b60f46814e864d31b1842c","modified":1550453562831},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"66d562b3778dbc839f7c00103bd0099c5d61602a","modified":1550453562837},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"83dd7df11b100bae38c9faab9a478f92149a0315","modified":1550453562837},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1550453562838},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"2e1de38f44af00209129d4051b7ae307cb11ad68","modified":1550453562839},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"335005a9f8b36349f0ad0a7beeba6969c55fc7f7","modified":1550453562839},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"53202062267391353d49f269e7eb74eb87d30921","modified":1550453562839},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1550453562840},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"623e73bedef067ac24a398ef27c8197295da872d","modified":1550453562840},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"69d7697cbf423efad54d47dad038a5afc2e02695","modified":1550453562840},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1550453562840},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"a4d752d17ddfc579730401ff3e3dfd4ec290c8de","modified":1550453562841},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1550453562841},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a22d1ea29a5ffe46199ab7d108a291a05af8d5b6","modified":1550453562841},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"6143aa0ed0d9bbe24c5859f66ea0a5611d73ecd2","modified":1550453562841},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"bc3fc9d053b3d1fc0cd3918bf9a629a6f38f6414","modified":1550453562843},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"d685df1516cb138d7a83bac5d7878a1e0fa8bc04","modified":1550453562844},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"8bcc3430241e267a06abfbb4e9ca125838bc5a71","modified":1551079323420},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"0149e803ed7d30163df3b3ba3f578e5584a2e4af","modified":1550453562845},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1a5d94f5779a2ce13abc886dd78e0617f89c34b9","modified":1550453562846},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"bd529bf26f28745eb8ded3be7652d33d55fec8d4","modified":1550453562845},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"bd6d763c1233cd89512c323ce0992daf7f9fd0e5","modified":1550453562846},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"43a20fa0e9ae2f4254f04813f9c619dd36b49ae5","modified":1550453562847},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"ea1c136f960667a0a13b334db497b9b19c41f629","modified":1550453562847},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"6f7217ff64cf67ee239954d3499a3c9e76bad061","modified":1550453562847},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"89e41d4c298d8d70b4d1c833c7e599d089f2b3d4","modified":1550453562849},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"d45ca53af17d1d83fd27f8ed0917a72f0060e1a9","modified":1550453562850},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"078bd2d5815eb23e8c5f74467dc0042babea00ae","modified":1550453562850},{"_id":"themes/next/scripts/filters/after_post_render/exturl.js","hash":"bfa8e5a91d22a5ba22e8f3da337fdb5e8b2600fd","modified":1550453562853},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1569385316385},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1550453562895},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1550453562897},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"d1deb849e697cfb6258b8ab7bfb47e219210ccd9","modified":1550453562897},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e9b0752f08398709e787546a246baca12b4c557f","modified":1550453562908},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1550453562908},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"da7049f3d9a157abe0ecc62611edcf43605ba84d","modified":1550453562909},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e37aab667be94576f6145b61a78cfe87836c68b6","modified":1550453562909},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1550453562945},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1550453562946},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1550453562945},{"_id":"themes/next/source/js/src/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1550453562918},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"c7e2a588b679d46379124141bb2f30bc2f3210e2","modified":1550453562918},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1550453562918},{"_id":"themes/next/source/js/src/anime.min.js","hash":"24013ccd0a09b5c3fef9495e84e4f29d8da773ab","modified":1572867525016},{"_id":"themes/next/source/js/src/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1550453562918},{"_id":"themes/next/source/js/src/fireworks.js","hash":"5b76fa72a85cfb27d54b00128393ece773d65386","modified":1572867525016},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1550453562940},{"_id":"themes/next/source/js/src/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1550453562941},{"_id":"themes/next/source/js/src/motion.js","hash":"e70f961d24e4e61a2df5bf640ab51acee8f1ffbd","modified":1550453562940},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1550453562941},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1550453562942},{"_id":"themes/next/source/js/src/utils.js","hash":"a9d04f6ffea45938a2dca885c23642b9c9cdc3be","modified":1550453562942},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1550453562943},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"bbb788b453236e5b4af7c81df8efcfc6bde08903","modified":1550453562858},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1550453562859},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1550453562860},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1550453562860},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1550453562860},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1550453562868},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1550453562881},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"1a4ac0d119f2126ef8951897338706edce112235","modified":1550453562891},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"5f1e5d7b9d44ef3e6ad442e083753fee76d3b112","modified":1550453562898},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"c0e8647244e1ef106e94c3c8ac4a64bca2677159","modified":1550453562892},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"cb2c0beb69bfc56c0ed86e609bc1c35edb799b99","modified":1550453562892},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"33a74fcd6c38cea356f6d2994a19f46dcfd5d8a4","modified":1550453562893},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1550453562894},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1550453562894},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1550453562902},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"c4bfce1fca9ea5d0fd991d98e08b8e771d33d731","modified":1550453562894},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1550453562903},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4ed12bf17eeb7cd4f22dd01fdd486cda68d169a8","modified":1550453562903},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"9f35b95beb344f4eeca5ca584fbe7206f791372e","modified":1550453562904},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1550453562904},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1550453562899},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"eecb2081ee1eef1e2152c7fea9310366e33b1eac","modified":1550453562899},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1550453562899},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"a80782a6eb3b40da2e14251da49069aff3115d8a","modified":1550453562900},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"b0f58a5076caaeedca0dd27ab2728a7caf3b57c8","modified":1553484017525},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"9f35b95beb344f4eeca5ca584fbe7206f791372e","modified":1550453562901},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"15254414a52f05618c54a2ac7f4635f99077ec30","modified":1550453562901},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"30d61fa31e405fcfe3d2ff6174ccad60be1745f9","modified":1550453562905},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"28f0444ccdc85a34ada651d8ee52479e16311167","modified":1550453562905},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1550453562907},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1550453562907},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"a5395766dfdda81285d0cd3ddebe8e8bc924fa2a","modified":1550453562907},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"11fcaaf7524445a194801e1048ea2fb84b316414","modified":1550453562906},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1550453562907},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"3eea56cc9ce47bb4760930c4c69cebf847a7fbb2","modified":1550453562941},{"_id":"themes/next/source/js/src/schemes/muse.js","hash":"ccc0c5cd4ec6f8159c98990ad83f11a5c0b0234c","modified":1550453562941},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"2df409df04fdb52d7234876a9f6e502edd4e3929","modified":1550453562861},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1550453562861},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1550453562864},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1550453562865},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"48bb741f6bda73b322a25a8fbe37fd3d5e0ff601","modified":1550453562861},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"32bbf059c57677e754a918c927ac63e2d843108f","modified":1550453562864},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1550453562862},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1ec3102ee8f5b8cc0877da1fd109d37470401e7b","modified":1550453562863},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1550453562863},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1550453562864},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1550453562865},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1550453562866},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fa1cea6fcc3f552d57cc7d28380a304859139bf6","modified":1550453562866},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1550453562867},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1550453562867},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"db1df0186a4572844d69d0d7bb974bd120cb64d5","modified":1550453562867},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1550453562868},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"3241c9ae85ca11b6c4e125ac471aa4342ba1ce9c","modified":1550453562868},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1550453562869},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"77da38898bdd99cf8fd3e0ae8cc4d2ac943bcb60","modified":1550453562869},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"8703ff5ebfc76420565b92b1b873e03fb9d9cf15","modified":1550453562870},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"a0e84b21ecc1f69d8d42c83630c1004d3419e3fd","modified":1550453562870},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"7b69c1ad392f8a386854e318d4c8ddeb9ba8d793","modified":1550453562870},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"b6a241626783d2ac115d683fd59ec283af68e5bb","modified":1550453562870},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"2ea91d7b75966d471bf857a9f3fbf87fd01aea90","modified":1550453562871},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1550453562871},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"989b7d718914b5242506947aa5767b3f2480d8f9","modified":1550453562871},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1550453562871},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1550453562872},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1550453562872},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"981795aad232c8bd3f52a0ed8720db696d18a234","modified":1550453562872},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"2e36956c5f8802f703c7ce3893d16323a0e09d4c","modified":1550453562872},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1550453562873},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"2e26e4429c2457b8ca12555426659c2fc65a5cea","modified":1550453562873},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"41858f2dfd34a57d0a2016b1bce08efb61943b7a","modified":1550453562874},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1550453562875},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"4c1705e5c3fbf0e3f5d3fb29edec4a29c87b4c95","modified":1550453562876},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"7e2ba73073daaea0a18c3d67ff137dd683af7011","modified":1550453562877},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"dd5f7057680faefc9306fab3172106f762c1a517","modified":1550453562878},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"b9a19654b6a2685b5426afac8b09cdbd80fae00c","modified":1550453562879},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"4ec203c52db47bca67c229ef1f3693c9d40b4ef9","modified":1550453562879},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"f1fdfd0bc6b66a38581a4fbe096b25aadfc53246","modified":1550453562880},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1550453562881},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1550453562882},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1550453562884},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1550453562883},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"2937e566ad0f3d9adc0865b269fdca62b7576fdd","modified":1550453562885},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"f1640253cbbf71d0c04c34c25bd61045894f98bc","modified":1550453562886},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"30ccc107061dc23943198f087759079161ee24e9","modified":1550453562885},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"f26c32a0c3045e5ae826b983abc3a3c139456663","modified":1550453562887},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1550453562887},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"72cabf6edfd64697e37950cc3e66fbea6ba47b66","modified":1550453562884},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"49913bb2b702d52d77528cd9378126aa67c0082c","modified":1550453562888},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"2a1008f1044b450b806adc166754ba9513e68375","modified":1550453562889},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1550453562889},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1550453562890},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"74412b0bf4ec0d28aedd2e60b27affd4d5cd1452","modified":1550453562890},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3529aae283864fa0f09925ee8217905632e9a930","modified":1550453562890},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1550453562905},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1550453562902},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1550453562902},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1550453562945},{"_id":"public/sitemap.xml","hash":"c007d1087c52387415caf38ed50bb53e6b404868","modified":1577871808925},{"_id":"public/about/index.html","hash":"4dcf39d165f8a6bfb9e33625bda88eeb803c8919","modified":1577871812090},{"_id":"public/categories/index.html","hash":"5ce60def1b7e54cd23cf2606a7445e9b7a81b54c","modified":1577871812090},{"_id":"public/其他/Other/Unknown unknown/index.html","hash":"c74fee9d0e32ae2044c9bf3dd86a6c0b6ee2a489","modified":1577871812103},{"_id":"public/Linux/Linux/域名邮箱/index.html","hash":"07ea01d9edd3e353c9c09aea855e89662767339c","modified":1577871812112},{"_id":"public/cocos2dx/cocos2dx/cocos2dx的屏幕适配/index.html","hash":"3f23f4aa0bb65c716ecb11fa07d7aa892eb4de82","modified":1577871812112},{"_id":"public/cocos2dx/cocos2dx/根据节点名称递归查询UI树上的某个节点/index.html","hash":"1e522d60b966052407dc71d13a5168bc8b89710c","modified":1577871812112},{"_id":"public/cocos2dx/cocos2dx/使用cocos2dx-lua遇到的一些问题/index.html","hash":"6c5d2e60149f6f5830f0351eb2ebb25d4ca985b0","modified":1577871812112},{"_id":"public/其他/Other/偈语/index.html","hash":"1d31f7d34a0e3bd365d953a174bdf5f92bbaf977","modified":1577871812112},{"_id":"public/其他/Other/时间过的真快啊/index.html","hash":"b29a720c5d11a06804b36520e841b54f69acddf4","modified":1577871812112},{"_id":"public/其他/Other/功夫/index.html","hash":"46649f8d77b6562abd9d123c198b30df4afee1a3","modified":1577871812112},{"_id":"public/IOS/IOS/IOS打包生成的dSYM文件/index.html","hash":"4ad7101159c8eadbed60a08a6ed02321971e126b","modified":1577871812112},{"_id":"public/IOS/IOS/获取IOS真机日志/index.html","hash":"83a5d6421943c51bc27649f6ebc07c2e85731f3f","modified":1577871812112},{"_id":"public/Linux/Linux/域名解析系统（DNS）/index.html","hash":"04743b24efcdd8921b66e986c8a8ea3d21e40757","modified":1577871812112},{"_id":"public/Linux/Linux/搭建WordPress网站/index.html","hash":"b9225fab5f965ad99a50490ceebd379880d008e8","modified":1577871812112},{"_id":"public/Android/Android/安卓APP的安装目录/index.html","hash":"8c51255883ba480b62d60cd965070e0915bc27df","modified":1577871812112},{"_id":"public/其他/Other/拿到驾照！/index.html","hash":"4f0568c36e80610d94957e4a5385e3e01234de4a","modified":1577871812112},{"_id":"public/Android/Android/“此应用专为旧版Android打造，因此可能无法正常运行。请尝试检查更新或与开发者联系”/index.html","hash":"bd31baf7a62d5e859bba2ed937ca15d1226be4c6","modified":1577871812112},{"_id":"public/Android/Android/Android开发中的名称缩写/index.html","hash":"8efe28d9fab6f9857aee31872d567c16076b95d7","modified":1577871812112},{"_id":"public/其他/Other/2019年的7月内必须减到70kg！/index.html","hash":"bed6db9b7bb62f8be70fba2c9852716f572f3e84","modified":1577871812112},{"_id":"public/Visual-Studio/在Visual Studio中搜索文件名/index.html","hash":"52aba3e2ae2216fc6687827949c8663605792048","modified":1577871812112},{"_id":"public/游戏开发/GameDev/心跳机制/index.html","hash":"69e9e163bbb5b820ff25e032638c4709cc19af3b","modified":1577871812112},{"_id":"public/cocos2dx/cocos2dx/cocos2dx-lua的报错/index.html","hash":"c5858e039bf5f62a659dfc7698c98f1fcf4cd425","modified":1577871812112},{"_id":"public/其他/Other/拿起，放下。/index.html","hash":"290e942c0695d880978ad966cab46e2c48c24293","modified":1577871812113},{"_id":"public/Lua/Lua/Lua官网提供的win平台zip包内容/index.html","hash":"dd8223ada0e919abcbfde42038cdb2128bdea655","modified":1577871812113},{"_id":"public/软件工程/编程语言的分类/index.html","hash":"9004c4c2961060a8bf7d8ffdef70f13e510f0f24","modified":1577871812113},{"_id":"public/版本控制/解决SVN树冲突/index.html","hash":"ecd918e551fdd01209c8a071bdfb0fc942083bd8","modified":1577871812113},{"_id":"public/C/使用VSCode调试C++代码/index.html","hash":"f9a6817b6fe00d4009f300407ce24c9812310477","modified":1577871812113},{"_id":"public/JavaScript/使用VSCode调试JavaScript代码/index.html","hash":"bc851736cebf5254ab5702a1648b111d666136a3","modified":1577871812113},{"_id":"public/Android/Android/ADB常用命令/index.html","hash":"b371e8c56281bee4394ba22f5b7d736b21771804","modified":1577871812113},{"_id":"public/Lua/Lua/Lua的元表与元方法/index.html","hash":"80c30fdfac8056549a105318f21fe87f99329372","modified":1577871812113},{"_id":"public/Lua/Lua/Lua中加载代码的方式/index.html","hash":"26e3f39641f2cd23a3eee26334f72ef11b9cc936","modified":1577871812113},{"_id":"public/版本控制/Git常用命令/index.html","hash":"aa43f4e94063728a5c00f32204a01cfab41decc1","modified":1577871812113},{"_id":"public/Android/Android/使用logcat查看android系统日志/index.html","hash":"9b12e9dfbd63e1577c374746b69997ea0a706998","modified":1577871812113},{"_id":"public/在类比中学习/图形用户界面 VS 命令行界面/index.html","hash":"ceac0bab95c971c2660123cb63f7ee1e1f2cd59d","modified":1577871812113},{"_id":"public/OOP/OOP中的继承/index.html","hash":"142902b49a9b4ac523284139e9cd70a99c8c5cb7","modified":1577871812113},{"_id":"public/版本控制/SVN合并操作/index.html","hash":"9a72f26fe6227e5a1f2fc2821d382fba2d259596","modified":1577871812113},{"_id":"public/Linux/Linux/Linux常用命令/index.html","hash":"1ff5ecf69b681afd20c765183ca7bed77c97093f","modified":1577871812113},{"_id":"public/categories/C/index.html","hash":"494200098f6c14cd562dea81c41d0ea695fd74fe","modified":1577871812113},{"_id":"public/categories/版本控制/index.html","hash":"ab1361b99072cafa958b02e2d1688f09852b10f5","modified":1577871812113},{"_id":"public/categories/Python/index.html","hash":"40e5e533e37411e73878b5cb5fc5e3a610b6c65f","modified":1577871812114},{"_id":"public/categories/OOP/index.html","hash":"fa76040fdb3f4533832c59908b1afd64defa708d","modified":1577871812114},{"_id":"public/categories/在类比中学习/index.html","hash":"16e72c6cb0ae0237878a7f857dd835028e881fed","modified":1577871812114},{"_id":"public/categories/JavaScript/index.html","hash":"d7ef8aee5df3660db5578e8d53fba3b9520db5ee","modified":1577871812114},{"_id":"public/categories/推荐/index.html","hash":"606cf10613ae3929361114c5ab0795ae443ca4af","modified":1577871812114},{"_id":"public/categories/Visual-Studio/index.html","hash":"89c1c4763acdaa270380a7cb05bb1a7d5d333f73","modified":1577871812114},{"_id":"public/categories/软件工程/index.html","hash":"4c8e1cc18e099ef04bcaef40b0122f3a257ebda7","modified":1577871812114},{"_id":"public/categories/Android/index.html","hash":"c599e86ec6cc7ebf7f95cc2ae448e192f3be4cd2","modified":1577871812114},{"_id":"public/categories/游戏开发/index.html","hash":"0cdbdc751b90b425d8a7a188ff1621709cbc0fa6","modified":1577871812114},{"_id":"public/categories/IOS/index.html","hash":"a9b2e04f82d2ea8d7a1ee770b592a35f7db49e1d","modified":1577871812114},{"_id":"public/categories/Linux/index.html","hash":"ff23ae19bf46da0c02a34ef6c8ad38056cbc9a14","modified":1577871812114},{"_id":"public/categories/Lua/index.html","hash":"cb71ca4e373488fb5487244390fc57b77463c9a0","modified":1577871812114},{"_id":"public/categories/其他/index.html","hash":"ee2d634f06d8355491740136a212793244dc793f","modified":1577871812114},{"_id":"public/categories/cocos2dx/index.html","hash":"be7e61e172de198a107c5dc7bca0922c33b004b1","modified":1577871812114},{"_id":"public/categories/读书/index.html","hash":"4e9a9e76252e389e38d7d93610b094b54c80df65","modified":1577871812114},{"_id":"public/archives/index.html","hash":"1588cb9fffa072ce76996853a0773860f9d48e65","modified":1577871812114},{"_id":"public/archives/page/2/index.html","hash":"5bb631ac8da657e242454192c8c2e27e5d136333","modified":1577871812117},{"_id":"public/archives/page/3/index.html","hash":"8416ecc628a3ef280d27ee4cc4aa79e3ddfb0300","modified":1577871812117},{"_id":"public/archives/page/4/index.html","hash":"193a3081e80c1755e39f97c14bbf4946d8491077","modified":1577871812117},{"_id":"public/archives/page/5/index.html","hash":"3c568497189078c8d7ab988d24c74a7c04d4a2ea","modified":1577871812117},{"_id":"public/archives/page/6/index.html","hash":"0e0866ee03753c04dcd08389eb6c6184c343ba3a","modified":1577871812117},{"_id":"public/archives/2019/index.html","hash":"bbfa139fae3eef92c045aa7fdca7a4923cd49f11","modified":1577871812118},{"_id":"public/archives/2019/page/2/index.html","hash":"012fba745ca009f6be7011892670ba2199e534f4","modified":1577871812118},{"_id":"public/archives/2019/page/3/index.html","hash":"c473a296bea02e0e890f485989d1d76004b62b6d","modified":1577871812118},{"_id":"public/archives/2019/page/4/index.html","hash":"0e4d26c07e35b24230c6a52ef2bcf9b6de6f6c12","modified":1577871812118},{"_id":"public/archives/2019/page/5/index.html","hash":"5f1c695655f0b3ff209f24719173819041237e0d","modified":1577871812118},{"_id":"public/archives/2019/page/6/index.html","hash":"4f3a78fb499b88cf71fd776b357b9e46547e7e34","modified":1577871812118},{"_id":"public/archives/2019/02/index.html","hash":"a0112149d277b4cb0ee343a4b0b1fa943f504f16","modified":1577871812118},{"_id":"public/archives/2019/03/index.html","hash":"58b48ba0b77068f74feb656406f8b7697cbee3ba","modified":1577871812118},{"_id":"public/archives/2019/03/page/2/index.html","hash":"0f3fa3a991a4d19faba9f7bedddc94f24a913e02","modified":1577871812118},{"_id":"public/archives/2019/04/index.html","hash":"ce475168e07e32053f3362bee09e1065f34a24f3","modified":1577871812118},{"_id":"public/archives/2019/05/index.html","hash":"e34f2dbf12940bd4afe72fcf8728b048d4403fd0","modified":1577871812118},{"_id":"public/archives/2019/05/page/2/index.html","hash":"e9d67b3592294406e3a8ef13b882978c8653a450","modified":1577871812118},{"_id":"public/archives/2019/06/index.html","hash":"03a503a1fe9042254e3ca3194436b71d123fc52c","modified":1577871812118},{"_id":"public/archives/2019/07/index.html","hash":"76d878c8b8224194bd6ecf93c1ed9ec0d7d79b77","modified":1577871812118},{"_id":"public/archives/2019/07/page/2/index.html","hash":"029df7ea2e7f93bc2f166791ca1178492f424603","modified":1577871812118},{"_id":"public/archives/2019/08/index.html","hash":"4fe1b96b9cba2eacc7126707cf38c129df1e81b9","modified":1577871812118},{"_id":"public/archives/2019/09/index.html","hash":"df058c80da52f321703356d2e3e04bc61d54fe91","modified":1577871812118},{"_id":"public/archives/2019/11/index.html","hash":"22234d0702c4493d54aa4c6498fe48ebec067af5","modified":1577871812118},{"_id":"public/archives/2019/12/index.html","hash":"12550d6ff903a1404646b2842685ec16b6453a62","modified":1577871812118},{"_id":"public/archives/2020/index.html","hash":"66240e0d8af331bed415ffa807e6a7079d346853","modified":1577871812118},{"_id":"public/archives/2020/01/index.html","hash":"65f9a740fc8580170beefd9796fee6fb3e0ef9de","modified":1577871812118},{"_id":"public/其他/Other/2020年1月1日/index.html","hash":"0a29bf2ef7ed2bd392ad8b49ed1bc4a0f5634e28","modified":1577871812118},{"_id":"public/读书/read/金融的本质/index.html","hash":"e8247cc99b5ba26da39bc5b354e1d88963f005a8","modified":1577871812118},{"_id":"public/读书/read/正念：此刻是一支花/index.html","hash":"14dc98e00d484bad9328a216d37f8d17cbb79895","modified":1577871812118},{"_id":"public/读书/read/原则/index.html","hash":"df2ff40d638e00bc3610dc8b8b50be41a06338a4","modified":1577871812119},{"_id":"public/读书/read/房债：为什么会出现大衰退，如何避免重蹈覆辙/index.html","hash":"2e3ad88b8d823e08d1b9a9c43d40cbf5a0221262","modified":1577871812119},{"_id":"public/读书/read/如何学习/index.html","hash":"ba761a5aece9f2eb202b6ee441709c9c1f54bb76","modified":1577871812119},{"_id":"public/读书/read/系统之美：决策者的系统思考/index.html","hash":"81de282b95fe0ed07b828bb940c5422202f809b4","modified":1577871812119},{"_id":"public/读书/read/远见：如何规划职业生涯三大阶段/index.html","hash":"3b8a2d012e706026549cfb1c3a51687c5ab557b2","modified":1577871812119},{"_id":"public/读书/read/稀缺：我们是如何陷入贫穷与忙碌的/index.html","hash":"fbe34978da4cdf903500735b0dae3eceeaf8db0c","modified":1577871812119},{"_id":"public/读书/read/富爸爸穷爸爸/index.html","hash":"7a52e6b961dd1537f3436f932c0cded165d704d5","modified":1577871812119},{"_id":"public/IOS/IOS/分析IOS上APP的崩溃堆栈/index.html","hash":"184b5a0a0496b4d26c6c819ec4ee5ae845cce523","modified":1577871812119},{"_id":"public/在类比中学习/goto语句 VS 函数调用/index.html","hash":"88447cc8bf06901bad5c806e600dbab79ff4ee5b","modified":1577871812119},{"_id":"public/Python/Python版本的XXTEA实现/index.html","hash":"3586c7e6da0036b033721f0f5a1ba9740766a59c","modified":1577871812119},{"_id":"public/C/C++版本的XXTEA实现/index.html","hash":"f23e53ccb1500d21a8b3f26603afb88dbaeac4f6","modified":1577871812119},{"_id":"public/Lua/Lua/Lua遍历Table的几种方式/index.html","hash":"68655321890268c413d41536af27f3b6d1b0492c","modified":1577871812119},{"_id":"public/Lua/Lua/Lua中的Table常见操作/index.html","hash":"28244c0e1c7bf925b046fb040e0c59792763f702","modified":1577871812119},{"_id":"public/OOP/软件固有的复杂性/index.html","hash":"f92a2b14ede796c6334363e58459b366ef89cb04","modified":1577871812119},{"_id":"public/Lua/Lua/Lua中的String常见操作/index.html","hash":"d5ea730998ebe86781b5354eb1f5620a4a3264f0","modified":1577871812119},{"_id":"public/推荐/值得收藏的网站/index.html","hash":"db5d839b15df6cd5b621e39c6174fda9fbbb19e5","modified":1577871812119},{"_id":"public/index.html","hash":"f49d7844cba57c32d89e13aab6a3477861da3ddf","modified":1577871812119},{"_id":"public/page/2/index.html","hash":"ac9a5cc939f911454ecf51b7352fcc778e6c1e5a","modified":1577871812119},{"_id":"public/page/3/index.html","hash":"30cc77107263ab20b969239d44dbed477de4be0f","modified":1577871812119},{"_id":"public/page/4/index.html","hash":"80c7f4f2db2fa28990f104c73116f329514c2b1e","modified":1577871812119},{"_id":"public/page/5/index.html","hash":"e7a3ba115eee2bc0a2908de90025c9abae65bbca","modified":1577871812119},{"_id":"public/page/6/index.html","hash":"078b2529152760b444865ac22d547ec56c105703","modified":1577871812119},{"_id":"public/ads.txt","hash":"d2b2fd45dba097af0f42716dde0b83e9aa959c16","modified":1577871812119},{"_id":"public/CNAME","hash":"ae8e95740d4cbecd4690c8ce4bc38079a103d75e","modified":1577871812119},{"_id":"public/robots.txt","hash":"95e1971d2a428993b8859bcdb7a8b6926fac85c5","modified":1577871812119},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1577871812119},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1577871812120},{"_id":"public/images/apple-touch-icon-next.png","hash":"0c920fe1ce2f09c9c7641266ff4155053909ec18","modified":1577871812120},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1577871812120},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1577871812120},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1577871812120},{"_id":"public/images/avatar.png","hash":"2741c4051e98ed6e9402e3264b3b00c723be74fb","modified":1577871812120},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1577871812120},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1577871812120},{"_id":"public/images/favicon-16x16-next.png","hash":"c3321e9650169793e4d726934d8f326295a6dfa3","modified":1577871812120},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1577871812120},{"_id":"public/images/favicon-32x32-next.png","hash":"c26ea7914a8724554946427df0ccad765ffbfce3","modified":1577871812120},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1577871812120},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1577871812120},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1577871812120},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1577871812120},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1577871812120},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1577871812120},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1577871812471},{"_id":"public/js/src/fireworks.js","hash":"417b68e2cf2c6de2119c57626f4412105a8457f5","modified":1577871812472},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1577871812472},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1577871812472},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1577871812472},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1577871812472},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1577871812472},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1577871812472},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1577871812472},{"_id":"public/js/src/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1577871812472},{"_id":"public/js/src/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1577871812472},{"_id":"public/css/main.css","hash":"c6e75f2e0655600ef8604f03187589e313c65ee3","modified":1577871812472},{"_id":"public/js/src/anime.min.js","hash":"f9e83481831a2618b30e8f38471ae8d16c2a6f21","modified":1577871812475},{"_id":"public/js/src/motion.js","hash":"7933a30382a84b655238f6e78d42ea1b99af4de6","modified":1577871812475},{"_id":"public/js/src/utils.js","hash":"1e515f5c5e9872b875090481b5bebfbf175d32fe","modified":1577871812475},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1577871812475},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1577871812479},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1577871812479},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1577871812499},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1577871812503}],"Category":[{"name":"C++","_id":"ck4v44v5n0003hcr70yqxkjzz"},{"name":"版本控制","_id":"ck4v44v5r0007hcr7r7rz0e1d"},{"name":"Python","_id":"ck4v44v5v000bhcr70xl9rxmp"},{"name":"OOP","_id":"ck4v44v5y000fhcr7eazblmqx"},{"name":"在类比中学习","_id":"ck4v44v64000nhcr772closo8"},{"name":"JavaScript","_id":"ck4v44v66000rhcr7gn017xzu"},{"name":"推荐","_id":"ck4v44v68000uhcr7p45ztuoj"},{"name":"Visual Studio","_id":"ck4v44v6a000yhcr7qjlfl5hj"},{"name":"软件工程","_id":"ck4v44v6b0011hcr7m3vqsw0l"},{"name":"Android","_id":"ck4v44v7x0017hcr7t57q0hxx"},{"name":"游戏开发","_id":"ck4v44v86001khcr7260fvkbk"},{"name":"IOS","_id":"ck4v44v88001phcr7tgl8yw72"},{"name":"Linux","_id":"ck4v44v8c001whcr742dct7y7"},{"name":"Lua","_id":"ck4v44v8l002chcr71pco93ol"},{"name":"其他","_id":"ck4v44v8z0030hcr7xffn3fi9"},{"name":"cocos2dx","_id":"ck4v44v96003ghcr708lc14ad"},{"name":"读书","_id":"ck4v44v98003ohcr7baf36id2"}],"Data":[],"Page":[{"type":"about","date":"2019-02-16T09:06:30.000Z","_content":"\n---\n\n### 未来属于善用闲暇的人\n**“我们并不创作音乐，而只听身价数百万美元的歌手的白金唱片；**\n**我们不从事艺术创作，只会对拍卖会场上喊得最高价的名画赞叹不已；**\n**我们也不肯冒险贯彻自己的信念，只会每天花几个小时，看演员在虚拟的情境中，假扮出生入死。**\n**这种替代的参与方式，至少暂时粉饰了浪费时间的空洞感。但是跟投注在真实挑战上的专注相比，它实在太薄弱了。从技巧的运用中产生的心流体验，会带来成长；纯属被动的娱乐背后，什么也没有。”**\n\n* *出自米哈里的《心流》*\n\n---\n\n### 对待生命，你不妨大胆冒险点，因为你最终都要失去它。不要辜负它！\n* *在《青年文摘》还是《读者》上看到的来着*\n\n---\n\n### 多一点善意；生活中，你明明是举手之劳，却偏偏不想帮助别人。你明明可以提醒一下别人，却偏偏带着小心机不说\n* *出自知乎某位网友的回答*\n\n---\n\n### 对他人抱有一种友好的态度，本质上，每个人都是心地善良的\n* *还是出自知乎某位网友的回答*\n\n---\n\n### 我们对自己的观感、从生活中得到的快乐，归根到底直接取决于心灵如何过滤与阐释日常体验。我们快乐与否，端视内心是否和谐，与我们控制宇宙的能力毫无关系\n* *强调了人对所处环境的看法而非环境的重要性*\n* *米哈里的《心流》*\n\n---\n\n### 尽人事，听天命；力不尽则憾，命不听则枉。\n* *过程 > 结果。你只管放手去做，至于成不成，不需要过多考虑*\n* *语出清代李汝珍的长篇神魔小说《镜花缘》第六回“**尽人事以听天命**”*\n---\n\n### 时也，命也，运也；非吾之所能也。\n* *把事情的成败归咎于环境，而不是自己。*\n* *出自北宋宰相呂蒙正的一篇散赋《破窑赋》*\n\n---\n\n### “外柔内柔，人辱之；外刚内刚，人毁之；外刚内柔，人轻之；唯有外柔内刚，当成大器。”\n* *电视剧《长安十二时辰》剧中人物**何孚**的台词*\n\n---\n\n---\n\n### 居敬持志为读书之本，循序致精为读书之法。\n* *时年二十七岁的王阳明，在读到朱熹的《上光宗疏》中的这段话时，开始懊悔以前读书虽然勤奋却无所得，都是因为自己过于贪图读书的速度。*\n\n---","source":"about/index.md","raw":"---\ntype: about\ndate: 2019-02-16 17:06:30\n---\n\n---\n\n### 未来属于善用闲暇的人\n**“我们并不创作音乐，而只听身价数百万美元的歌手的白金唱片；**\n**我们不从事艺术创作，只会对拍卖会场上喊得最高价的名画赞叹不已；**\n**我们也不肯冒险贯彻自己的信念，只会每天花几个小时，看演员在虚拟的情境中，假扮出生入死。**\n**这种替代的参与方式，至少暂时粉饰了浪费时间的空洞感。但是跟投注在真实挑战上的专注相比，它实在太薄弱了。从技巧的运用中产生的心流体验，会带来成长；纯属被动的娱乐背后，什么也没有。”**\n\n* *出自米哈里的《心流》*\n\n---\n\n### 对待生命，你不妨大胆冒险点，因为你最终都要失去它。不要辜负它！\n* *在《青年文摘》还是《读者》上看到的来着*\n\n---\n\n### 多一点善意；生活中，你明明是举手之劳，却偏偏不想帮助别人。你明明可以提醒一下别人，却偏偏带着小心机不说\n* *出自知乎某位网友的回答*\n\n---\n\n### 对他人抱有一种友好的态度，本质上，每个人都是心地善良的\n* *还是出自知乎某位网友的回答*\n\n---\n\n### 我们对自己的观感、从生活中得到的快乐，归根到底直接取决于心灵如何过滤与阐释日常体验。我们快乐与否，端视内心是否和谐，与我们控制宇宙的能力毫无关系\n* *强调了人对所处环境的看法而非环境的重要性*\n* *米哈里的《心流》*\n\n---\n\n### 尽人事，听天命；力不尽则憾，命不听则枉。\n* *过程 > 结果。你只管放手去做，至于成不成，不需要过多考虑*\n* *语出清代李汝珍的长篇神魔小说《镜花缘》第六回“**尽人事以听天命**”*\n---\n\n### 时也，命也，运也；非吾之所能也。\n* *把事情的成败归咎于环境，而不是自己。*\n* *出自北宋宰相呂蒙正的一篇散赋《破窑赋》*\n\n---\n\n### “外柔内柔，人辱之；外刚内刚，人毁之；外刚内柔，人轻之；唯有外柔内刚，当成大器。”\n* *电视剧《长安十二时辰》剧中人物**何孚**的台词*\n\n---\n\n---\n\n### 居敬持志为读书之本，循序致精为读书之法。\n* *时年二十七岁的王阳明，在读到朱熹的《上光宗疏》中的这段话时，开始懊悔以前读书虽然勤奋却无所得，都是因为自己过于贪图读书的速度。*\n\n---","updated":"2019-11-07T04:34:51.304Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"ck4v44v5l0001hcr7yq1e0qqk","content":"<hr>\n<h3 id=\"未来属于善用闲暇的人\"><a href=\"#未来属于善用闲暇的人\" class=\"headerlink\" title=\"未来属于善用闲暇的人\"></a>未来属于善用闲暇的人</h3><p><strong>“我们并不创作音乐，而只听身价数百万美元的歌手的白金唱片；</strong><br><strong>我们不从事艺术创作，只会对拍卖会场上喊得最高价的名画赞叹不已；</strong><br><strong>我们也不肯冒险贯彻自己的信念，只会每天花几个小时，看演员在虚拟的情境中，假扮出生入死。</strong><br><strong>这种替代的参与方式，至少暂时粉饰了浪费时间的空洞感。但是跟投注在真实挑战上的专注相比，它实在太薄弱了。从技巧的运用中产生的心流体验，会带来成长；纯属被动的娱乐背后，什么也没有。”</strong></p>\n<ul>\n<li><em>出自米哈里的《心流》</em></li>\n</ul>\n<hr>\n<h3 id=\"对待生命，你不妨大胆冒险点，因为你最终都要失去它。不要辜负它！\"><a href=\"#对待生命，你不妨大胆冒险点，因为你最终都要失去它。不要辜负它！\" class=\"headerlink\" title=\"对待生命，你不妨大胆冒险点，因为你最终都要失去它。不要辜负它！\"></a>对待生命，你不妨大胆冒险点，因为你最终都要失去它。不要辜负它！</h3><ul>\n<li><em>在《青年文摘》还是《读者》上看到的来着</em></li>\n</ul>\n<hr>\n<h3 id=\"多一点善意；生活中，你明明是举手之劳，却偏偏不想帮助别人。你明明可以提醒一下别人，却偏偏带着小心机不说\"><a href=\"#多一点善意；生活中，你明明是举手之劳，却偏偏不想帮助别人。你明明可以提醒一下别人，却偏偏带着小心机不说\" class=\"headerlink\" title=\"多一点善意；生活中，你明明是举手之劳，却偏偏不想帮助别人。你明明可以提醒一下别人，却偏偏带着小心机不说\"></a>多一点善意；生活中，你明明是举手之劳，却偏偏不想帮助别人。你明明可以提醒一下别人，却偏偏带着小心机不说</h3><ul>\n<li><em>出自知乎某位网友的回答</em></li>\n</ul>\n<hr>\n<h3 id=\"对他人抱有一种友好的态度，本质上，每个人都是心地善良的\"><a href=\"#对他人抱有一种友好的态度，本质上，每个人都是心地善良的\" class=\"headerlink\" title=\"对他人抱有一种友好的态度，本质上，每个人都是心地善良的\"></a>对他人抱有一种友好的态度，本质上，每个人都是心地善良的</h3><ul>\n<li><em>还是出自知乎某位网友的回答</em></li>\n</ul>\n<hr>\n<h3 id=\"我们对自己的观感、从生活中得到的快乐，归根到底直接取决于心灵如何过滤与阐释日常体验。我们快乐与否，端视内心是否和谐，与我们控制宇宙的能力毫无关系\"><a href=\"#我们对自己的观感、从生活中得到的快乐，归根到底直接取决于心灵如何过滤与阐释日常体验。我们快乐与否，端视内心是否和谐，与我们控制宇宙的能力毫无关系\" class=\"headerlink\" title=\"我们对自己的观感、从生活中得到的快乐，归根到底直接取决于心灵如何过滤与阐释日常体验。我们快乐与否，端视内心是否和谐，与我们控制宇宙的能力毫无关系\"></a>我们对自己的观感、从生活中得到的快乐，归根到底直接取决于心灵如何过滤与阐释日常体验。我们快乐与否，端视内心是否和谐，与我们控制宇宙的能力毫无关系</h3><ul>\n<li><em>强调了人对所处环境的看法而非环境的重要性</em></li>\n<li><em>米哈里的《心流》</em></li>\n</ul>\n<hr>\n<h3 id=\"尽人事，听天命；力不尽则憾，命不听则枉。\"><a href=\"#尽人事，听天命；力不尽则憾，命不听则枉。\" class=\"headerlink\" title=\"尽人事，听天命；力不尽则憾，命不听则枉。\"></a>尽人事，听天命；力不尽则憾，命不听则枉。</h3><ul>\n<li><em>过程 &gt; 结果。你只管放手去做，至于成不成，不需要过多考虑</em></li>\n<li><em>语出清代李汝珍的长篇神魔小说《镜花缘》第六回“<strong>尽人事以听天命</strong>”</em></li>\n</ul>\n<hr>\n<h3 id=\"时也，命也，运也；非吾之所能也。\"><a href=\"#时也，命也，运也；非吾之所能也。\" class=\"headerlink\" title=\"时也，命也，运也；非吾之所能也。\"></a>时也，命也，运也；非吾之所能也。</h3><ul>\n<li><em>把事情的成败归咎于环境，而不是自己。</em></li>\n<li><em>出自北宋宰相呂蒙正的一篇散赋《破窑赋》</em></li>\n</ul>\n<hr>\n<h3 id=\"“外柔内柔，人辱之；外刚内刚，人毁之；外刚内柔，人轻之；唯有外柔内刚，当成大器。”\"><a href=\"#“外柔内柔，人辱之；外刚内刚，人毁之；外刚内柔，人轻之；唯有外柔内刚，当成大器。”\" class=\"headerlink\" title=\"“外柔内柔，人辱之；外刚内刚，人毁之；外刚内柔，人轻之；唯有外柔内刚，当成大器。”\"></a>“外柔内柔，人辱之；外刚内刚，人毁之；外刚内柔，人轻之；唯有外柔内刚，当成大器。”</h3><ul>\n<li><em>电视剧《长安十二时辰》剧中人物<strong>何孚</strong>的台词</em></li>\n</ul>\n<hr>\n<hr>\n<h3 id=\"居敬持志为读书之本，循序致精为读书之法。\"><a href=\"#居敬持志为读书之本，循序致精为读书之法。\" class=\"headerlink\" title=\"居敬持志为读书之本，循序致精为读书之法。\"></a>居敬持志为读书之本，循序致精为读书之法。</h3><ul>\n<li><em>时年二十七岁的王阳明，在读到朱熹的《上光宗疏》中的这段话时，开始懊悔以前读书虽然勤奋却无所得，都是因为自己过于贪图读书的速度。</em></li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h3 id=\"未来属于善用闲暇的人\"><a href=\"#未来属于善用闲暇的人\" class=\"headerlink\" title=\"未来属于善用闲暇的人\"></a>未来属于善用闲暇的人</h3><p><strong>“我们并不创作音乐，而只听身价数百万美元的歌手的白金唱片；</strong><br><strong>我们不从事艺术创作，只会对拍卖会场上喊得最高价的名画赞叹不已；</strong><br><strong>我们也不肯冒险贯彻自己的信念，只会每天花几个小时，看演员在虚拟的情境中，假扮出生入死。</strong><br><strong>这种替代的参与方式，至少暂时粉饰了浪费时间的空洞感。但是跟投注在真实挑战上的专注相比，它实在太薄弱了。从技巧的运用中产生的心流体验，会带来成长；纯属被动的娱乐背后，什么也没有。”</strong></p>\n<ul>\n<li><em>出自米哈里的《心流》</em></li>\n</ul>\n<hr>\n<h3 id=\"对待生命，你不妨大胆冒险点，因为你最终都要失去它。不要辜负它！\"><a href=\"#对待生命，你不妨大胆冒险点，因为你最终都要失去它。不要辜负它！\" class=\"headerlink\" title=\"对待生命，你不妨大胆冒险点，因为你最终都要失去它。不要辜负它！\"></a>对待生命，你不妨大胆冒险点，因为你最终都要失去它。不要辜负它！</h3><ul>\n<li><em>在《青年文摘》还是《读者》上看到的来着</em></li>\n</ul>\n<hr>\n<h3 id=\"多一点善意；生活中，你明明是举手之劳，却偏偏不想帮助别人。你明明可以提醒一下别人，却偏偏带着小心机不说\"><a href=\"#多一点善意；生活中，你明明是举手之劳，却偏偏不想帮助别人。你明明可以提醒一下别人，却偏偏带着小心机不说\" class=\"headerlink\" title=\"多一点善意；生活中，你明明是举手之劳，却偏偏不想帮助别人。你明明可以提醒一下别人，却偏偏带着小心机不说\"></a>多一点善意；生活中，你明明是举手之劳，却偏偏不想帮助别人。你明明可以提醒一下别人，却偏偏带着小心机不说</h3><ul>\n<li><em>出自知乎某位网友的回答</em></li>\n</ul>\n<hr>\n<h3 id=\"对他人抱有一种友好的态度，本质上，每个人都是心地善良的\"><a href=\"#对他人抱有一种友好的态度，本质上，每个人都是心地善良的\" class=\"headerlink\" title=\"对他人抱有一种友好的态度，本质上，每个人都是心地善良的\"></a>对他人抱有一种友好的态度，本质上，每个人都是心地善良的</h3><ul>\n<li><em>还是出自知乎某位网友的回答</em></li>\n</ul>\n<hr>\n<h3 id=\"我们对自己的观感、从生活中得到的快乐，归根到底直接取决于心灵如何过滤与阐释日常体验。我们快乐与否，端视内心是否和谐，与我们控制宇宙的能力毫无关系\"><a href=\"#我们对自己的观感、从生活中得到的快乐，归根到底直接取决于心灵如何过滤与阐释日常体验。我们快乐与否，端视内心是否和谐，与我们控制宇宙的能力毫无关系\" class=\"headerlink\" title=\"我们对自己的观感、从生活中得到的快乐，归根到底直接取决于心灵如何过滤与阐释日常体验。我们快乐与否，端视内心是否和谐，与我们控制宇宙的能力毫无关系\"></a>我们对自己的观感、从生活中得到的快乐，归根到底直接取决于心灵如何过滤与阐释日常体验。我们快乐与否，端视内心是否和谐，与我们控制宇宙的能力毫无关系</h3><ul>\n<li><em>强调了人对所处环境的看法而非环境的重要性</em></li>\n<li><em>米哈里的《心流》</em></li>\n</ul>\n<hr>\n<h3 id=\"尽人事，听天命；力不尽则憾，命不听则枉。\"><a href=\"#尽人事，听天命；力不尽则憾，命不听则枉。\" class=\"headerlink\" title=\"尽人事，听天命；力不尽则憾，命不听则枉。\"></a>尽人事，听天命；力不尽则憾，命不听则枉。</h3><ul>\n<li><em>过程 &gt; 结果。你只管放手去做，至于成不成，不需要过多考虑</em></li>\n<li><em>语出清代李汝珍的长篇神魔小说《镜花缘》第六回“<strong>尽人事以听天命</strong>”</em></li>\n</ul>\n<hr>\n<h3 id=\"时也，命也，运也；非吾之所能也。\"><a href=\"#时也，命也，运也；非吾之所能也。\" class=\"headerlink\" title=\"时也，命也，运也；非吾之所能也。\"></a>时也，命也，运也；非吾之所能也。</h3><ul>\n<li><em>把事情的成败归咎于环境，而不是自己。</em></li>\n<li><em>出自北宋宰相呂蒙正的一篇散赋《破窑赋》</em></li>\n</ul>\n<hr>\n<h3 id=\"“外柔内柔，人辱之；外刚内刚，人毁之；外刚内柔，人轻之；唯有外柔内刚，当成大器。”\"><a href=\"#“外柔内柔，人辱之；外刚内刚，人毁之；外刚内柔，人轻之；唯有外柔内刚，当成大器。”\" class=\"headerlink\" title=\"“外柔内柔，人辱之；外刚内刚，人毁之；外刚内柔，人轻之；唯有外柔内刚，当成大器。”\"></a>“外柔内柔，人辱之；外刚内刚，人毁之；外刚内柔，人轻之；唯有外柔内刚，当成大器。”</h3><ul>\n<li><em>电视剧《长安十二时辰》剧中人物<strong>何孚</strong>的台词</em></li>\n</ul>\n<hr>\n<hr>\n<h3 id=\"居敬持志为读书之本，循序致精为读书之法。\"><a href=\"#居敬持志为读书之本，循序致精为读书之法。\" class=\"headerlink\" title=\"居敬持志为读书之本，循序致精为读书之法。\"></a>居敬持志为读书之本，循序致精为读书之法。</h3><ul>\n<li><em>时年二十七岁的王阳明，在读到朱熹的《上光宗疏》中的这段话时，开始懊悔以前读书虽然勤奋却无所得，都是因为自己过于贪图读书的速度。</em></li>\n</ul>\n<hr>\n"},{"date":"2019-02-16T09:06:47.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\n#title: 分类\ndate: 2019-02-16 17:06:47\ntype: \"categories\"\n---\n","updated":"2019-02-18T01:32:42.791Z","path":"categories/index.html","title":"","comments":1,"layout":"page","_id":"ck4v44v7f0014hcr7go79vd2z","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"C++版本的XXTEA实现","date":"2019-05-07T16:00:00.000Z","_content":"\n### 算法实现\n---\n\n头文件：xxtea.h\n```\n#ifndef XXTEA_H\n#define XXTEA_H\n\n#include <stddef.h> /* for size_t & NULL declarations */\n\n#if defined(_MSC_VER)\n\ntypedef unsigned __int32 xxtea_long;\n\n#else\n\n#if defined(__FreeBSD__) && __FreeBSD__ < 5\n/* FreeBSD 4 doesn't have stdint.h file */\n#include <inttypes.h>\n#else\n#include <stdint.h>\n#endif\n\ntypedef uint32_t xxtea_long;\n\n#endif /* end of if defined(_MSC_VER) */\n\n#define XXTEA_MX (z >> 5 ^ y << 2) + (y >> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z)\n#define XXTEA_DELTA 0x9e3779b9\n\nunsigned char *xxtea_encrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length);\nunsigned char *xxtea_decrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length);\n\n#endif\n```\n\n源文件：xxtea.cpp\n```\n#include \"xxtea.h\"\n#include <memory.h>\n#include <stdlib.h>\n\nstatic void xxtea_long_encrypt(xxtea_long *v, xxtea_long len, xxtea_long *k)\n{\n    xxtea_long n = len - 1;\n    xxtea_long z = v[n], y = v[0], p, q = 6 + 52 / (n + 1), sum = 0, e;\n    if (n < 1) {\n        return;\n    }\n    while (0 < q--) {\n        sum += XXTEA_DELTA;\n        e = sum >> 2 & 3;\n        for (p = 0; p < n; p++) {\n            y = v[p + 1];\n            z = v[p] += XXTEA_MX;\n        }\n        y = v[0];\n        z = v[n] += XXTEA_MX;\n    }\n}\n\nstatic void xxtea_long_decrypt(xxtea_long *v, xxtea_long len, xxtea_long *k)\n{\n    xxtea_long n = len - 1;\n    xxtea_long z = v[n], y = v[0], p, q = 6 + 52 / (n + 1), sum = q * XXTEA_DELTA, e;\n    if (n < 1) {\n        return;\n    }\n    while (sum != 0) {\n        e = sum >> 2 & 3;\n        for (p = n; p > 0; p--) {\n            z = v[p - 1];\n            y = v[p] -= XXTEA_MX;\n        }\n        z = v[n];\n        y = v[0] -= XXTEA_MX;\n        sum -= XXTEA_DELTA;\n    }\n}\n\nstatic unsigned char *fix_key_length(unsigned char *key, xxtea_long key_len)\n{\n    unsigned char *tmp = (unsigned char *)malloc(16);\n    memcpy(tmp, key, key_len);\n    memset(tmp + key_len, '\\0', 16 - key_len);\n    return tmp;\n}\n\nstatic xxtea_long *xxtea_to_long_array(unsigned char *data, xxtea_long len, int include_length, xxtea_long *ret_len) {\n    xxtea_long i, n, *result;\n    \n    n = len >> 2;\n    n = (((len & 3) == 0) ? n : n + 1);\n    if (include_length) {\n        result = (xxtea_long *)malloc((n + 1) << 2);\n        result[n] = len;\n        *ret_len = n + 1;\n    } else {\n        result = (xxtea_long *)malloc(n << 2);\n        *ret_len = n;\n    }\n    memset(result, 0, n << 2);\n    for (i = 0; i < len; i++) {\n        result[i >> 2] |= (xxtea_long)data[i] << ((i & 3) << 3);\n    }\n    \n    return result;\n}\n\nstatic unsigned char *xxtea_to_byte_array(xxtea_long *data, xxtea_long len, int include_length, xxtea_long *ret_len) {\n    xxtea_long i, n, m;\n    unsigned char *result;\n    \n    n = len << 2;\n    if (include_length) {\n        m = data[len - 1];\n        if ((m < n - 7) || (m > n - 4)) return NULL;\n        n = m;\n    }\n    result = (unsigned char *)malloc(n + 1);\n    for (i = 0; i < n; i++) {\n        result[i] = (unsigned char)((data[i >> 2] >> ((i & 3) << 3)) & 0xff);\n    }\n    result[n] = '\\0';\n    *ret_len = n;\n    \n    return result;\n}\n\nstatic unsigned char *do_xxtea_encrypt(unsigned char *data, xxtea_long len, unsigned char *key, xxtea_long *ret_len) {\n    unsigned char *result;\n    xxtea_long *v, *k, v_len, k_len;\n    \n    v = xxtea_to_long_array(data, len, 1, &v_len);\n    k = xxtea_to_long_array(key, 16, 0, &k_len);\n    xxtea_long_encrypt(v, v_len, k);\n    result = xxtea_to_byte_array(v, v_len, 0, ret_len);\n    free(v);\n    free(k);\n    \n    return result;\n}\n\nstatic unsigned char *do_xxtea_decrypt(unsigned char *data, xxtea_long len, unsigned char *key, xxtea_long *ret_len) {\n    unsigned char *result;\n    xxtea_long *v, *k, v_len, k_len;\n    \n    v = xxtea_to_long_array(data, len, 0, &v_len);\n    k = xxtea_to_long_array(key, 16, 0, &k_len);\n    xxtea_long_decrypt(v, v_len, k);\n    result = xxtea_to_byte_array(v, v_len, 1, ret_len);\n    free(v);\n    free(k);\n    \n    return result;\n}\n\nunsigned char *xxtea_encrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length)\n{\n    unsigned char *result;\n    \n    *ret_length = 0;\n    \n    if (key_len < 16) {\n        unsigned char *key2 = fix_key_length(key, key_len);\n        result = do_xxtea_encrypt(data, data_len, key2, ret_length);\n        free(key2);\n    }\n    else\n    {\n        result = do_xxtea_encrypt(data, data_len, key, ret_length);\n    }\n    \n    return result;\n}\n\nunsigned char *xxtea_decrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length)\n{\n    unsigned char *result;\n    \n    *ret_length = 0;\n    \n    if (key_len < 16) {\n        unsigned char *key2 = fix_key_length(key, key_len);\n        result = do_xxtea_decrypt(data, data_len, key2, ret_length);\n        free(key2);\n    }\n    else\n    {\n        result = do_xxtea_decrypt(data, data_len, key, ret_length);\n    }\n    \n    return result;\n}\n```\n\n### 总结下\n---\n\n* 对比python版本，应该能看出来C++的实现写的挺复杂的\n* python这门语言的抽象能力要比C++高出很多，C++需要关注很多低层次（low level）的细节问题，python作为一门脚本语言则屏蔽了这些需要考虑的细节，极大的减轻了使用者**心智上的负担**\n* 正是因为上面的原因，C++的使用示例写起来也挺麻烦的，也就没写了:)\n\n\n","source":"_posts/C++版本的XXTEA实现.md","raw":"---\ntitle: C++版本的XXTEA实现\ncategories: C++\ndate: 2019-05-08\n---\n\n### 算法实现\n---\n\n头文件：xxtea.h\n```\n#ifndef XXTEA_H\n#define XXTEA_H\n\n#include <stddef.h> /* for size_t & NULL declarations */\n\n#if defined(_MSC_VER)\n\ntypedef unsigned __int32 xxtea_long;\n\n#else\n\n#if defined(__FreeBSD__) && __FreeBSD__ < 5\n/* FreeBSD 4 doesn't have stdint.h file */\n#include <inttypes.h>\n#else\n#include <stdint.h>\n#endif\n\ntypedef uint32_t xxtea_long;\n\n#endif /* end of if defined(_MSC_VER) */\n\n#define XXTEA_MX (z >> 5 ^ y << 2) + (y >> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z)\n#define XXTEA_DELTA 0x9e3779b9\n\nunsigned char *xxtea_encrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length);\nunsigned char *xxtea_decrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length);\n\n#endif\n```\n\n源文件：xxtea.cpp\n```\n#include \"xxtea.h\"\n#include <memory.h>\n#include <stdlib.h>\n\nstatic void xxtea_long_encrypt(xxtea_long *v, xxtea_long len, xxtea_long *k)\n{\n    xxtea_long n = len - 1;\n    xxtea_long z = v[n], y = v[0], p, q = 6 + 52 / (n + 1), sum = 0, e;\n    if (n < 1) {\n        return;\n    }\n    while (0 < q--) {\n        sum += XXTEA_DELTA;\n        e = sum >> 2 & 3;\n        for (p = 0; p < n; p++) {\n            y = v[p + 1];\n            z = v[p] += XXTEA_MX;\n        }\n        y = v[0];\n        z = v[n] += XXTEA_MX;\n    }\n}\n\nstatic void xxtea_long_decrypt(xxtea_long *v, xxtea_long len, xxtea_long *k)\n{\n    xxtea_long n = len - 1;\n    xxtea_long z = v[n], y = v[0], p, q = 6 + 52 / (n + 1), sum = q * XXTEA_DELTA, e;\n    if (n < 1) {\n        return;\n    }\n    while (sum != 0) {\n        e = sum >> 2 & 3;\n        for (p = n; p > 0; p--) {\n            z = v[p - 1];\n            y = v[p] -= XXTEA_MX;\n        }\n        z = v[n];\n        y = v[0] -= XXTEA_MX;\n        sum -= XXTEA_DELTA;\n    }\n}\n\nstatic unsigned char *fix_key_length(unsigned char *key, xxtea_long key_len)\n{\n    unsigned char *tmp = (unsigned char *)malloc(16);\n    memcpy(tmp, key, key_len);\n    memset(tmp + key_len, '\\0', 16 - key_len);\n    return tmp;\n}\n\nstatic xxtea_long *xxtea_to_long_array(unsigned char *data, xxtea_long len, int include_length, xxtea_long *ret_len) {\n    xxtea_long i, n, *result;\n    \n    n = len >> 2;\n    n = (((len & 3) == 0) ? n : n + 1);\n    if (include_length) {\n        result = (xxtea_long *)malloc((n + 1) << 2);\n        result[n] = len;\n        *ret_len = n + 1;\n    } else {\n        result = (xxtea_long *)malloc(n << 2);\n        *ret_len = n;\n    }\n    memset(result, 0, n << 2);\n    for (i = 0; i < len; i++) {\n        result[i >> 2] |= (xxtea_long)data[i] << ((i & 3) << 3);\n    }\n    \n    return result;\n}\n\nstatic unsigned char *xxtea_to_byte_array(xxtea_long *data, xxtea_long len, int include_length, xxtea_long *ret_len) {\n    xxtea_long i, n, m;\n    unsigned char *result;\n    \n    n = len << 2;\n    if (include_length) {\n        m = data[len - 1];\n        if ((m < n - 7) || (m > n - 4)) return NULL;\n        n = m;\n    }\n    result = (unsigned char *)malloc(n + 1);\n    for (i = 0; i < n; i++) {\n        result[i] = (unsigned char)((data[i >> 2] >> ((i & 3) << 3)) & 0xff);\n    }\n    result[n] = '\\0';\n    *ret_len = n;\n    \n    return result;\n}\n\nstatic unsigned char *do_xxtea_encrypt(unsigned char *data, xxtea_long len, unsigned char *key, xxtea_long *ret_len) {\n    unsigned char *result;\n    xxtea_long *v, *k, v_len, k_len;\n    \n    v = xxtea_to_long_array(data, len, 1, &v_len);\n    k = xxtea_to_long_array(key, 16, 0, &k_len);\n    xxtea_long_encrypt(v, v_len, k);\n    result = xxtea_to_byte_array(v, v_len, 0, ret_len);\n    free(v);\n    free(k);\n    \n    return result;\n}\n\nstatic unsigned char *do_xxtea_decrypt(unsigned char *data, xxtea_long len, unsigned char *key, xxtea_long *ret_len) {\n    unsigned char *result;\n    xxtea_long *v, *k, v_len, k_len;\n    \n    v = xxtea_to_long_array(data, len, 0, &v_len);\n    k = xxtea_to_long_array(key, 16, 0, &k_len);\n    xxtea_long_decrypt(v, v_len, k);\n    result = xxtea_to_byte_array(v, v_len, 1, ret_len);\n    free(v);\n    free(k);\n    \n    return result;\n}\n\nunsigned char *xxtea_encrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length)\n{\n    unsigned char *result;\n    \n    *ret_length = 0;\n    \n    if (key_len < 16) {\n        unsigned char *key2 = fix_key_length(key, key_len);\n        result = do_xxtea_encrypt(data, data_len, key2, ret_length);\n        free(key2);\n    }\n    else\n    {\n        result = do_xxtea_encrypt(data, data_len, key, ret_length);\n    }\n    \n    return result;\n}\n\nunsigned char *xxtea_decrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length)\n{\n    unsigned char *result;\n    \n    *ret_length = 0;\n    \n    if (key_len < 16) {\n        unsigned char *key2 = fix_key_length(key, key_len);\n        result = do_xxtea_decrypt(data, data_len, key2, ret_length);\n        free(key2);\n    }\n    else\n    {\n        result = do_xxtea_decrypt(data, data_len, key, ret_length);\n    }\n    \n    return result;\n}\n```\n\n### 总结下\n---\n\n* 对比python版本，应该能看出来C++的实现写的挺复杂的\n* python这门语言的抽象能力要比C++高出很多，C++需要关注很多低层次（low level）的细节问题，python作为一门脚本语言则屏蔽了这些需要考虑的细节，极大的减轻了使用者**心智上的负担**\n* 正是因为上面的原因，C++的使用示例写起来也挺麻烦的，也就没写了:)\n\n\n","slug":"C++版本的XXTEA实现","published":1,"updated":"2019-05-08T03:13:22.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v5h0000hcr7l3elo6j6","content":"<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><hr>\n<p>头文件：xxtea.h<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef XXTEA_H</span><br><span class=\"line\">#define XXTEA_H</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;stddef.h&gt; /* for size_t &amp; NULL declarations */</span><br><span class=\"line\"></span><br><span class=\"line\">#if defined(_MSC_VER)</span><br><span class=\"line\"></span><br><span class=\"line\">typedef unsigned __int32 xxtea_long;</span><br><span class=\"line\"></span><br><span class=\"line\">#else</span><br><span class=\"line\"></span><br><span class=\"line\">#if defined(__FreeBSD__) &amp;&amp; __FreeBSD__ &lt; 5</span><br><span class=\"line\">/* FreeBSD 4 doesn&apos;t have stdint.h file */</span><br><span class=\"line\">#include &lt;inttypes.h&gt;</span><br><span class=\"line\">#else</span><br><span class=\"line\">#include &lt;stdint.h&gt;</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">typedef uint32_t xxtea_long;</span><br><span class=\"line\"></span><br><span class=\"line\">#endif /* end of if defined(_MSC_VER) */</span><br><span class=\"line\"></span><br><span class=\"line\">#define XXTEA_MX (z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[p &amp; 3 ^ e] ^ z)</span><br><span class=\"line\">#define XXTEA_DELTA 0x9e3779b9</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char *xxtea_encrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length);</span><br><span class=\"line\">unsigned char *xxtea_decrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length);</span><br><span class=\"line\"></span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure></p>\n<p>源文件：xxtea.cpp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;xxtea.h&quot;</span><br><span class=\"line\">#include &lt;memory.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">static void xxtea_long_encrypt(xxtea_long *v, xxtea_long len, xxtea_long *k)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    xxtea_long n = len - 1;</span><br><span class=\"line\">    xxtea_long z = v[n], y = v[0], p, q = 6 + 52 / (n + 1), sum = 0, e;</span><br><span class=\"line\">    if (n &lt; 1) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while (0 &lt; q--) &#123;</span><br><span class=\"line\">        sum += XXTEA_DELTA;</span><br><span class=\"line\">        e = sum &gt;&gt; 2 &amp; 3;</span><br><span class=\"line\">        for (p = 0; p &lt; n; p++) &#123;</span><br><span class=\"line\">            y = v[p + 1];</span><br><span class=\"line\">            z = v[p] += XXTEA_MX;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        y = v[0];</span><br><span class=\"line\">        z = v[n] += XXTEA_MX;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static void xxtea_long_decrypt(xxtea_long *v, xxtea_long len, xxtea_long *k)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    xxtea_long n = len - 1;</span><br><span class=\"line\">    xxtea_long z = v[n], y = v[0], p, q = 6 + 52 / (n + 1), sum = q * XXTEA_DELTA, e;</span><br><span class=\"line\">    if (n &lt; 1) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while (sum != 0) &#123;</span><br><span class=\"line\">        e = sum &gt;&gt; 2 &amp; 3;</span><br><span class=\"line\">        for (p = n; p &gt; 0; p--) &#123;</span><br><span class=\"line\">            z = v[p - 1];</span><br><span class=\"line\">            y = v[p] -= XXTEA_MX;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        z = v[n];</span><br><span class=\"line\">        y = v[0] -= XXTEA_MX;</span><br><span class=\"line\">        sum -= XXTEA_DELTA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static unsigned char *fix_key_length(unsigned char *key, xxtea_long key_len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unsigned char *tmp = (unsigned char *)malloc(16);</span><br><span class=\"line\">    memcpy(tmp, key, key_len);</span><br><span class=\"line\">    memset(tmp + key_len, &apos;\\0&apos;, 16 - key_len);</span><br><span class=\"line\">    return tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static xxtea_long *xxtea_to_long_array(unsigned char *data, xxtea_long len, int include_length, xxtea_long *ret_len) &#123;</span><br><span class=\"line\">    xxtea_long i, n, *result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    n = len &gt;&gt; 2;</span><br><span class=\"line\">    n = (((len &amp; 3) == 0) ? n : n + 1);</span><br><span class=\"line\">    if (include_length) &#123;</span><br><span class=\"line\">        result = (xxtea_long *)malloc((n + 1) &lt;&lt; 2);</span><br><span class=\"line\">        result[n] = len;</span><br><span class=\"line\">        *ret_len = n + 1;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        result = (xxtea_long *)malloc(n &lt;&lt; 2);</span><br><span class=\"line\">        *ret_len = n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    memset(result, 0, n &lt;&lt; 2);</span><br><span class=\"line\">    for (i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">        result[i &gt;&gt; 2] |= (xxtea_long)data[i] &lt;&lt; ((i &amp; 3) &lt;&lt; 3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static unsigned char *xxtea_to_byte_array(xxtea_long *data, xxtea_long len, int include_length, xxtea_long *ret_len) &#123;</span><br><span class=\"line\">    xxtea_long i, n, m;</span><br><span class=\"line\">    unsigned char *result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    n = len &lt;&lt; 2;</span><br><span class=\"line\">    if (include_length) &#123;</span><br><span class=\"line\">        m = data[len - 1];</span><br><span class=\"line\">        if ((m &lt; n - 7) || (m &gt; n - 4)) return NULL;</span><br><span class=\"line\">        n = m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result = (unsigned char *)malloc(n + 1);</span><br><span class=\"line\">    for (i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">        result[i] = (unsigned char)((data[i &gt;&gt; 2] &gt;&gt; ((i &amp; 3) &lt;&lt; 3)) &amp; 0xff);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result[n] = &apos;\\0&apos;;</span><br><span class=\"line\">    *ret_len = n;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static unsigned char *do_xxtea_encrypt(unsigned char *data, xxtea_long len, unsigned char *key, xxtea_long *ret_len) &#123;</span><br><span class=\"line\">    unsigned char *result;</span><br><span class=\"line\">    xxtea_long *v, *k, v_len, k_len;</span><br><span class=\"line\">    </span><br><span class=\"line\">    v = xxtea_to_long_array(data, len, 1, &amp;v_len);</span><br><span class=\"line\">    k = xxtea_to_long_array(key, 16, 0, &amp;k_len);</span><br><span class=\"line\">    xxtea_long_encrypt(v, v_len, k);</span><br><span class=\"line\">    result = xxtea_to_byte_array(v, v_len, 0, ret_len);</span><br><span class=\"line\">    free(v);</span><br><span class=\"line\">    free(k);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static unsigned char *do_xxtea_decrypt(unsigned char *data, xxtea_long len, unsigned char *key, xxtea_long *ret_len) &#123;</span><br><span class=\"line\">    unsigned char *result;</span><br><span class=\"line\">    xxtea_long *v, *k, v_len, k_len;</span><br><span class=\"line\">    </span><br><span class=\"line\">    v = xxtea_to_long_array(data, len, 0, &amp;v_len);</span><br><span class=\"line\">    k = xxtea_to_long_array(key, 16, 0, &amp;k_len);</span><br><span class=\"line\">    xxtea_long_decrypt(v, v_len, k);</span><br><span class=\"line\">    result = xxtea_to_byte_array(v, v_len, 1, ret_len);</span><br><span class=\"line\">    free(v);</span><br><span class=\"line\">    free(k);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char *xxtea_encrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unsigned char *result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    *ret_length = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (key_len &lt; 16) &#123;</span><br><span class=\"line\">        unsigned char *key2 = fix_key_length(key, key_len);</span><br><span class=\"line\">        result = do_xxtea_encrypt(data, data_len, key2, ret_length);</span><br><span class=\"line\">        free(key2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        result = do_xxtea_encrypt(data, data_len, key, ret_length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char *xxtea_decrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unsigned char *result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    *ret_length = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (key_len &lt; 16) &#123;</span><br><span class=\"line\">        unsigned char *key2 = fix_key_length(key, key_len);</span><br><span class=\"line\">        result = do_xxtea_decrypt(data, data_len, key2, ret_length);</span><br><span class=\"line\">        free(key2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        result = do_xxtea_decrypt(data, data_len, key, ret_length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结下\"><a href=\"#总结下\" class=\"headerlink\" title=\"总结下\"></a>总结下</h3><hr>\n<ul>\n<li>对比python版本，应该能看出来C++的实现写的挺复杂的</li>\n<li>python这门语言的抽象能力要比C++高出很多，C++需要关注很多低层次（low level）的细节问题，python作为一门脚本语言则屏蔽了这些需要考虑的细节，极大的减轻了使用者<strong>心智上的负担</strong></li>\n<li>正是因为上面的原因，C++的使用示例写起来也挺麻烦的，也就没写了:)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><hr>\n<p>头文件：xxtea.h<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef XXTEA_H</span><br><span class=\"line\">#define XXTEA_H</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;stddef.h&gt; /* for size_t &amp; NULL declarations */</span><br><span class=\"line\"></span><br><span class=\"line\">#if defined(_MSC_VER)</span><br><span class=\"line\"></span><br><span class=\"line\">typedef unsigned __int32 xxtea_long;</span><br><span class=\"line\"></span><br><span class=\"line\">#else</span><br><span class=\"line\"></span><br><span class=\"line\">#if defined(__FreeBSD__) &amp;&amp; __FreeBSD__ &lt; 5</span><br><span class=\"line\">/* FreeBSD 4 doesn&apos;t have stdint.h file */</span><br><span class=\"line\">#include &lt;inttypes.h&gt;</span><br><span class=\"line\">#else</span><br><span class=\"line\">#include &lt;stdint.h&gt;</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">typedef uint32_t xxtea_long;</span><br><span class=\"line\"></span><br><span class=\"line\">#endif /* end of if defined(_MSC_VER) */</span><br><span class=\"line\"></span><br><span class=\"line\">#define XXTEA_MX (z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[p &amp; 3 ^ e] ^ z)</span><br><span class=\"line\">#define XXTEA_DELTA 0x9e3779b9</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char *xxtea_encrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length);</span><br><span class=\"line\">unsigned char *xxtea_decrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length);</span><br><span class=\"line\"></span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure></p>\n<p>源文件：xxtea.cpp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;xxtea.h&quot;</span><br><span class=\"line\">#include &lt;memory.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">static void xxtea_long_encrypt(xxtea_long *v, xxtea_long len, xxtea_long *k)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    xxtea_long n = len - 1;</span><br><span class=\"line\">    xxtea_long z = v[n], y = v[0], p, q = 6 + 52 / (n + 1), sum = 0, e;</span><br><span class=\"line\">    if (n &lt; 1) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while (0 &lt; q--) &#123;</span><br><span class=\"line\">        sum += XXTEA_DELTA;</span><br><span class=\"line\">        e = sum &gt;&gt; 2 &amp; 3;</span><br><span class=\"line\">        for (p = 0; p &lt; n; p++) &#123;</span><br><span class=\"line\">            y = v[p + 1];</span><br><span class=\"line\">            z = v[p] += XXTEA_MX;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        y = v[0];</span><br><span class=\"line\">        z = v[n] += XXTEA_MX;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static void xxtea_long_decrypt(xxtea_long *v, xxtea_long len, xxtea_long *k)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    xxtea_long n = len - 1;</span><br><span class=\"line\">    xxtea_long z = v[n], y = v[0], p, q = 6 + 52 / (n + 1), sum = q * XXTEA_DELTA, e;</span><br><span class=\"line\">    if (n &lt; 1) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while (sum != 0) &#123;</span><br><span class=\"line\">        e = sum &gt;&gt; 2 &amp; 3;</span><br><span class=\"line\">        for (p = n; p &gt; 0; p--) &#123;</span><br><span class=\"line\">            z = v[p - 1];</span><br><span class=\"line\">            y = v[p] -= XXTEA_MX;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        z = v[n];</span><br><span class=\"line\">        y = v[0] -= XXTEA_MX;</span><br><span class=\"line\">        sum -= XXTEA_DELTA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static unsigned char *fix_key_length(unsigned char *key, xxtea_long key_len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unsigned char *tmp = (unsigned char *)malloc(16);</span><br><span class=\"line\">    memcpy(tmp, key, key_len);</span><br><span class=\"line\">    memset(tmp + key_len, &apos;\\0&apos;, 16 - key_len);</span><br><span class=\"line\">    return tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static xxtea_long *xxtea_to_long_array(unsigned char *data, xxtea_long len, int include_length, xxtea_long *ret_len) &#123;</span><br><span class=\"line\">    xxtea_long i, n, *result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    n = len &gt;&gt; 2;</span><br><span class=\"line\">    n = (((len &amp; 3) == 0) ? n : n + 1);</span><br><span class=\"line\">    if (include_length) &#123;</span><br><span class=\"line\">        result = (xxtea_long *)malloc((n + 1) &lt;&lt; 2);</span><br><span class=\"line\">        result[n] = len;</span><br><span class=\"line\">        *ret_len = n + 1;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        result = (xxtea_long *)malloc(n &lt;&lt; 2);</span><br><span class=\"line\">        *ret_len = n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    memset(result, 0, n &lt;&lt; 2);</span><br><span class=\"line\">    for (i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">        result[i &gt;&gt; 2] |= (xxtea_long)data[i] &lt;&lt; ((i &amp; 3) &lt;&lt; 3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static unsigned char *xxtea_to_byte_array(xxtea_long *data, xxtea_long len, int include_length, xxtea_long *ret_len) &#123;</span><br><span class=\"line\">    xxtea_long i, n, m;</span><br><span class=\"line\">    unsigned char *result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    n = len &lt;&lt; 2;</span><br><span class=\"line\">    if (include_length) &#123;</span><br><span class=\"line\">        m = data[len - 1];</span><br><span class=\"line\">        if ((m &lt; n - 7) || (m &gt; n - 4)) return NULL;</span><br><span class=\"line\">        n = m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result = (unsigned char *)malloc(n + 1);</span><br><span class=\"line\">    for (i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">        result[i] = (unsigned char)((data[i &gt;&gt; 2] &gt;&gt; ((i &amp; 3) &lt;&lt; 3)) &amp; 0xff);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result[n] = &apos;\\0&apos;;</span><br><span class=\"line\">    *ret_len = n;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static unsigned char *do_xxtea_encrypt(unsigned char *data, xxtea_long len, unsigned char *key, xxtea_long *ret_len) &#123;</span><br><span class=\"line\">    unsigned char *result;</span><br><span class=\"line\">    xxtea_long *v, *k, v_len, k_len;</span><br><span class=\"line\">    </span><br><span class=\"line\">    v = xxtea_to_long_array(data, len, 1, &amp;v_len);</span><br><span class=\"line\">    k = xxtea_to_long_array(key, 16, 0, &amp;k_len);</span><br><span class=\"line\">    xxtea_long_encrypt(v, v_len, k);</span><br><span class=\"line\">    result = xxtea_to_byte_array(v, v_len, 0, ret_len);</span><br><span class=\"line\">    free(v);</span><br><span class=\"line\">    free(k);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static unsigned char *do_xxtea_decrypt(unsigned char *data, xxtea_long len, unsigned char *key, xxtea_long *ret_len) &#123;</span><br><span class=\"line\">    unsigned char *result;</span><br><span class=\"line\">    xxtea_long *v, *k, v_len, k_len;</span><br><span class=\"line\">    </span><br><span class=\"line\">    v = xxtea_to_long_array(data, len, 0, &amp;v_len);</span><br><span class=\"line\">    k = xxtea_to_long_array(key, 16, 0, &amp;k_len);</span><br><span class=\"line\">    xxtea_long_decrypt(v, v_len, k);</span><br><span class=\"line\">    result = xxtea_to_byte_array(v, v_len, 1, ret_len);</span><br><span class=\"line\">    free(v);</span><br><span class=\"line\">    free(k);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char *xxtea_encrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unsigned char *result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    *ret_length = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (key_len &lt; 16) &#123;</span><br><span class=\"line\">        unsigned char *key2 = fix_key_length(key, key_len);</span><br><span class=\"line\">        result = do_xxtea_encrypt(data, data_len, key2, ret_length);</span><br><span class=\"line\">        free(key2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        result = do_xxtea_encrypt(data, data_len, key, ret_length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char *xxtea_decrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unsigned char *result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    *ret_length = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (key_len &lt; 16) &#123;</span><br><span class=\"line\">        unsigned char *key2 = fix_key_length(key, key_len);</span><br><span class=\"line\">        result = do_xxtea_decrypt(data, data_len, key2, ret_length);</span><br><span class=\"line\">        free(key2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        result = do_xxtea_decrypt(data, data_len, key, ret_length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结下\"><a href=\"#总结下\" class=\"headerlink\" title=\"总结下\"></a>总结下</h3><hr>\n<ul>\n<li>对比python版本，应该能看出来C++的实现写的挺复杂的</li>\n<li>python这门语言的抽象能力要比C++高出很多，C++需要关注很多低层次（low level）的细节问题，python作为一门脚本语言则屏蔽了这些需要考虑的细节，极大的减轻了使用者<strong>心智上的负担</strong></li>\n<li>正是因为上面的原因，C++的使用示例写起来也挺麻烦的，也就没写了:)</li>\n</ul>\n"},{"title":"Git常用命令","date":"2019-03-12T16:00:00.000Z","_content":"\n### 生成ssh key\n---\n我是为了用来访问github上的repo，带.pub的是公钥，不带后缀的使密钥。把公钥内容粘贴到github的账户设置里就可以访问远程repo了,如果本地机器已经有了公钥，注意会提示你是否执行覆盖操作，然后一路回车就行了。\n`ssh-keygen -t rsa -C \"your_email@example.com\"`\n\n### 新建分支\n---\n* 新建分支但不切换（依然停留在当前分支）\n`git branch new_branch_name`\n* 切换分支\n`git checkout new_branch_name`\n* 新建分支并切换\n`git checkout -b new_branch_name`","source":"_posts/Git常用命令.md","raw":"---\ntitle: Git常用命令\ncategories: 版本控制\ndate: 2019-03-13\n---\n\n### 生成ssh key\n---\n我是为了用来访问github上的repo，带.pub的是公钥，不带后缀的使密钥。把公钥内容粘贴到github的账户设置里就可以访问远程repo了,如果本地机器已经有了公钥，注意会提示你是否执行覆盖操作，然后一路回车就行了。\n`ssh-keygen -t rsa -C \"your_email@example.com\"`\n\n### 新建分支\n---\n* 新建分支但不切换（依然停留在当前分支）\n`git branch new_branch_name`\n* 切换分支\n`git checkout new_branch_name`\n* 新建分支并切换\n`git checkout -b new_branch_name`","slug":"Git常用命令","published":1,"updated":"2019-05-10T08:33:58.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v5m0002hcr7hv6x88n8","content":"<h3 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh key\"></a>生成ssh key</h3><hr>\n<p>我是为了用来访问github上的repo，带.pub的是公钥，不带后缀的使密钥。把公钥内容粘贴到github的账户设置里就可以访问远程repo了,如果本地机器已经有了公钥，注意会提示你是否执行覆盖操作，然后一路回车就行了。<br><code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code></p>\n<h3 id=\"新建分支\"><a href=\"#新建分支\" class=\"headerlink\" title=\"新建分支\"></a>新建分支</h3><hr>\n<ul>\n<li>新建分支但不切换（依然停留在当前分支）<br><code>git branch new_branch_name</code></li>\n<li>切换分支<br><code>git checkout new_branch_name</code></li>\n<li>新建分支并切换<br><code>git checkout -b new_branch_name</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh key\"></a>生成ssh key</h3><hr>\n<p>我是为了用来访问github上的repo，带.pub的是公钥，不带后缀的使密钥。把公钥内容粘贴到github的账户设置里就可以访问远程repo了,如果本地机器已经有了公钥，注意会提示你是否执行覆盖操作，然后一路回车就行了。<br><code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code></p>\n<h3 id=\"新建分支\"><a href=\"#新建分支\" class=\"headerlink\" title=\"新建分支\"></a>新建分支</h3><hr>\n<ul>\n<li>新建分支但不切换（依然停留在当前分支）<br><code>git branch new_branch_name</code></li>\n<li>切换分支<br><code>git checkout new_branch_name</code></li>\n<li>新建分支并切换<br><code>git checkout -b new_branch_name</code></li>\n</ul>\n"},{"title":"Python版本的XXTEA实现","date":"2019-05-07T16:00:00.000Z","_content":"\n### 关于xxtea\n---\n* xxtea一种简单、执行快速的加密方式，通常很少的代码量就能实现，缺点就是安全性不高\n* 对称密钥加密的一种：加密解密使用相同的密钥\n* 全称：Tiny Encryption Algorithm（中文：微型加密算法），前身是xtea；xtea的前身又是tea，最新的加强版本就是xxtea了\n\n### 算法实现\n---\n\nxxtea.py\n```\nimport struct  \n  \n_DELTA = 0x9E3779B9  \n  \ndef _long2str(v, w):  \n    n = (len(v) - 1) << 2  \n    if w:  \n        m = v[-1]  \n        if (m < n - 3) or (m > n): return ''  \n        n = m  \n    s = struct.pack('<%iL' % len(v), *v)  \n    return s[0:n] if w else s  \n  \ndef _str2long(s, w):  \n    n = len(s)  \n    m = (4 - (n & 3) & 3) + n  \n    s = s.ljust(m, \"\\0\")  \n    v = list(struct.unpack('<%iL' % (m >> 2), s))  \n    if w: v.append(n)  \n    return v  \n  \ndef encrypt(str, key):  \n    if str == '': return str  \n    v = _str2long(str, True)  \n    k = _str2long(key.ljust(16, \"\\0\"), False)  \n    n = len(v) - 1  \n    z = v[n]  \n    y = v[0]  \n    sum = 0  \n    q = 6 + 52 // (n + 1)  \n    while q > 0:  \n        sum = (sum + _DELTA) & 0xffffffff  \n        e = sum >> 2 & 3  \n        for p in xrange(n):  \n            y = v[p + 1]  \n            v[p] = (v[p] + ((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z))) & 0xffffffff  \n            z = v[p]  \n        y = v[0]  \n        v[n] = (v[n] + ((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4) ^ (sum ^ y) + (k[n & 3 ^ e] ^ z))) & 0xffffffff  \n        z = v[n]  \n        q -= 1  \n    return _long2str(v, False)  \n  \ndef decrypt(str, key):  \n    if str == '': return str  \n    v = _str2long(str, False)  \n    k = _str2long(key.ljust(16, \"\\0\"), False)  \n    n = len(v) - 1  \n    z = v[n]  \n    y = v[0]  \n    q = 6 + 52 // (n + 1)  \n    sum = (q * _DELTA) & 0xffffffff  \n    while (sum != 0):  \n        e = sum >> 2 & 3  \n        for p in xrange(n, 0, -1):  \n            z = v[p - 1]  \n            v[p] = (v[p] - ((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z))) & 0xffffffff  \n            y = v[p]  \n        z = v[n]  \n        v[0] = (v[0] - ((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4) ^ (sum ^ y) + (k[0 & 3 ^ e] ^ z))) & 0xffffffff  \n        y = v[0]  \n        sum = (sum - _DELTA) & 0xffffffff  \n    return _long2str(v, True)  \n  \nif __name__ == \"__main__\":  \n    print decrypt(encrypt('Hello XXTEA!', '16bytelongstring'), '16bytelongstring')  \n```\n\n### 使用\n---\n\ntest.py\n```\n#   导入加密算法\nimport xxtea\n\n#   待加密数据\ndata = \"python\"\n\n#   加密算法使用的密钥\nkey = \"03f0fdcbf5215b45fc790aaf2b965238\"\n\n#   加密：data现在的值：\"#\\xeeo`G{M\\x1b\\x08\\x8e\\x1b\\x87\"\ndata = xxtea.encrypt(data, key)\n\n#   解密：data的值现在恢复成原值：\"python\"\ndata = xxtea.decrypt(data, key)\n\n```\n\n### 为啥写这个\n---\n\n* cocos2dx-lua的客户端lua代码一般是需要进行加密的，否则别人下载客户端解压文件后是可以直接查看lua源码的\n* python操作：`arr[n:]`从第n个元素开始截取数组\n* 这个加密其实是很鸡肋的，想要破解其实也很容易。。。\n","source":"_posts/Python版本的XXTEA实现.md","raw":"---\ntitle: Python版本的XXTEA实现\ncategories: Python\ndate: 2019-05-08\n---\n\n### 关于xxtea\n---\n* xxtea一种简单、执行快速的加密方式，通常很少的代码量就能实现，缺点就是安全性不高\n* 对称密钥加密的一种：加密解密使用相同的密钥\n* 全称：Tiny Encryption Algorithm（中文：微型加密算法），前身是xtea；xtea的前身又是tea，最新的加强版本就是xxtea了\n\n### 算法实现\n---\n\nxxtea.py\n```\nimport struct  \n  \n_DELTA = 0x9E3779B9  \n  \ndef _long2str(v, w):  \n    n = (len(v) - 1) << 2  \n    if w:  \n        m = v[-1]  \n        if (m < n - 3) or (m > n): return ''  \n        n = m  \n    s = struct.pack('<%iL' % len(v), *v)  \n    return s[0:n] if w else s  \n  \ndef _str2long(s, w):  \n    n = len(s)  \n    m = (4 - (n & 3) & 3) + n  \n    s = s.ljust(m, \"\\0\")  \n    v = list(struct.unpack('<%iL' % (m >> 2), s))  \n    if w: v.append(n)  \n    return v  \n  \ndef encrypt(str, key):  \n    if str == '': return str  \n    v = _str2long(str, True)  \n    k = _str2long(key.ljust(16, \"\\0\"), False)  \n    n = len(v) - 1  \n    z = v[n]  \n    y = v[0]  \n    sum = 0  \n    q = 6 + 52 // (n + 1)  \n    while q > 0:  \n        sum = (sum + _DELTA) & 0xffffffff  \n        e = sum >> 2 & 3  \n        for p in xrange(n):  \n            y = v[p + 1]  \n            v[p] = (v[p] + ((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z))) & 0xffffffff  \n            z = v[p]  \n        y = v[0]  \n        v[n] = (v[n] + ((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4) ^ (sum ^ y) + (k[n & 3 ^ e] ^ z))) & 0xffffffff  \n        z = v[n]  \n        q -= 1  \n    return _long2str(v, False)  \n  \ndef decrypt(str, key):  \n    if str == '': return str  \n    v = _str2long(str, False)  \n    k = _str2long(key.ljust(16, \"\\0\"), False)  \n    n = len(v) - 1  \n    z = v[n]  \n    y = v[0]  \n    q = 6 + 52 // (n + 1)  \n    sum = (q * _DELTA) & 0xffffffff  \n    while (sum != 0):  \n        e = sum >> 2 & 3  \n        for p in xrange(n, 0, -1):  \n            z = v[p - 1]  \n            v[p] = (v[p] - ((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z))) & 0xffffffff  \n            y = v[p]  \n        z = v[n]  \n        v[0] = (v[0] - ((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4) ^ (sum ^ y) + (k[0 & 3 ^ e] ^ z))) & 0xffffffff  \n        y = v[0]  \n        sum = (sum - _DELTA) & 0xffffffff  \n    return _long2str(v, True)  \n  \nif __name__ == \"__main__\":  \n    print decrypt(encrypt('Hello XXTEA!', '16bytelongstring'), '16bytelongstring')  \n```\n\n### 使用\n---\n\ntest.py\n```\n#   导入加密算法\nimport xxtea\n\n#   待加密数据\ndata = \"python\"\n\n#   加密算法使用的密钥\nkey = \"03f0fdcbf5215b45fc790aaf2b965238\"\n\n#   加密：data现在的值：\"#\\xeeo`G{M\\x1b\\x08\\x8e\\x1b\\x87\"\ndata = xxtea.encrypt(data, key)\n\n#   解密：data的值现在恢复成原值：\"python\"\ndata = xxtea.decrypt(data, key)\n\n```\n\n### 为啥写这个\n---\n\n* cocos2dx-lua的客户端lua代码一般是需要进行加密的，否则别人下载客户端解压文件后是可以直接查看lua源码的\n* python操作：`arr[n:]`从第n个元素开始截取数组\n* 这个加密其实是很鸡肋的，想要破解其实也很容易。。。\n","slug":"Python版本的XXTEA实现","published":1,"updated":"2019-05-08T03:06:13.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v5p0004hcr7sokxd4mx","content":"<h3 id=\"关于xxtea\"><a href=\"#关于xxtea\" class=\"headerlink\" title=\"关于xxtea\"></a>关于xxtea</h3><hr>\n<ul>\n<li>xxtea一种简单、执行快速的加密方式，通常很少的代码量就能实现，缺点就是安全性不高</li>\n<li>对称密钥加密的一种：加密解密使用相同的密钥</li>\n<li>全称：Tiny Encryption Algorithm（中文：微型加密算法），前身是xtea；xtea的前身又是tea，最新的加强版本就是xxtea了</li>\n</ul>\n<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><hr>\n<p>xxtea.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import struct  </span><br><span class=\"line\">  </span><br><span class=\"line\">_DELTA = 0x9E3779B9  </span><br><span class=\"line\">  </span><br><span class=\"line\">def _long2str(v, w):  </span><br><span class=\"line\">    n = (len(v) - 1) &lt;&lt; 2  </span><br><span class=\"line\">    if w:  </span><br><span class=\"line\">        m = v[-1]  </span><br><span class=\"line\">        if (m &lt; n - 3) or (m &gt; n): return &apos;&apos;  </span><br><span class=\"line\">        n = m  </span><br><span class=\"line\">    s = struct.pack(&apos;&lt;%iL&apos; % len(v), *v)  </span><br><span class=\"line\">    return s[0:n] if w else s  </span><br><span class=\"line\">  </span><br><span class=\"line\">def _str2long(s, w):  </span><br><span class=\"line\">    n = len(s)  </span><br><span class=\"line\">    m = (4 - (n &amp; 3) &amp; 3) + n  </span><br><span class=\"line\">    s = s.ljust(m, &quot;\\0&quot;)  </span><br><span class=\"line\">    v = list(struct.unpack(&apos;&lt;%iL&apos; % (m &gt;&gt; 2), s))  </span><br><span class=\"line\">    if w: v.append(n)  </span><br><span class=\"line\">    return v  </span><br><span class=\"line\">  </span><br><span class=\"line\">def encrypt(str, key):  </span><br><span class=\"line\">    if str == &apos;&apos;: return str  </span><br><span class=\"line\">    v = _str2long(str, True)  </span><br><span class=\"line\">    k = _str2long(key.ljust(16, &quot;\\0&quot;), False)  </span><br><span class=\"line\">    n = len(v) - 1  </span><br><span class=\"line\">    z = v[n]  </span><br><span class=\"line\">    y = v[0]  </span><br><span class=\"line\">    sum = 0  </span><br><span class=\"line\">    q = 6 + 52 // (n + 1)  </span><br><span class=\"line\">    while q &gt; 0:  </span><br><span class=\"line\">        sum = (sum + _DELTA) &amp; 0xffffffff  </span><br><span class=\"line\">        e = sum &gt;&gt; 2 &amp; 3  </span><br><span class=\"line\">        for p in xrange(n):  </span><br><span class=\"line\">            y = v[p + 1]  </span><br><span class=\"line\">            v[p] = (v[p] + ((z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[p &amp; 3 ^ e] ^ z))) &amp; 0xffffffff  </span><br><span class=\"line\">            z = v[p]  </span><br><span class=\"line\">        y = v[0]  </span><br><span class=\"line\">        v[n] = (v[n] + ((z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[n &amp; 3 ^ e] ^ z))) &amp; 0xffffffff  </span><br><span class=\"line\">        z = v[n]  </span><br><span class=\"line\">        q -= 1  </span><br><span class=\"line\">    return _long2str(v, False)  </span><br><span class=\"line\">  </span><br><span class=\"line\">def decrypt(str, key):  </span><br><span class=\"line\">    if str == &apos;&apos;: return str  </span><br><span class=\"line\">    v = _str2long(str, False)  </span><br><span class=\"line\">    k = _str2long(key.ljust(16, &quot;\\0&quot;), False)  </span><br><span class=\"line\">    n = len(v) - 1  </span><br><span class=\"line\">    z = v[n]  </span><br><span class=\"line\">    y = v[0]  </span><br><span class=\"line\">    q = 6 + 52 // (n + 1)  </span><br><span class=\"line\">    sum = (q * _DELTA) &amp; 0xffffffff  </span><br><span class=\"line\">    while (sum != 0):  </span><br><span class=\"line\">        e = sum &gt;&gt; 2 &amp; 3  </span><br><span class=\"line\">        for p in xrange(n, 0, -1):  </span><br><span class=\"line\">            z = v[p - 1]  </span><br><span class=\"line\">            v[p] = (v[p] - ((z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[p &amp; 3 ^ e] ^ z))) &amp; 0xffffffff  </span><br><span class=\"line\">            y = v[p]  </span><br><span class=\"line\">        z = v[n]  </span><br><span class=\"line\">        v[0] = (v[0] - ((z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[0 &amp; 3 ^ e] ^ z))) &amp; 0xffffffff  </span><br><span class=\"line\">        y = v[0]  </span><br><span class=\"line\">        sum = (sum - _DELTA) &amp; 0xffffffff  </span><br><span class=\"line\">    return _long2str(v, True)  </span><br><span class=\"line\">  </span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:  </span><br><span class=\"line\">    print decrypt(encrypt(&apos;Hello XXTEA!&apos;, &apos;16bytelongstring&apos;), &apos;16bytelongstring&apos;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><hr>\n<p>test.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#   导入加密算法</span><br><span class=\"line\">import xxtea</span><br><span class=\"line\"></span><br><span class=\"line\">#   待加密数据</span><br><span class=\"line\">data = &quot;python&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#   加密算法使用的密钥</span><br><span class=\"line\">key = &quot;03f0fdcbf5215b45fc790aaf2b965238&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#   加密：data现在的值：&quot;#\\xeeo`G&#123;M\\x1b\\x08\\x8e\\x1b\\x87&quot;</span><br><span class=\"line\">data = xxtea.encrypt(data, key)</span><br><span class=\"line\"></span><br><span class=\"line\">#   解密：data的值现在恢复成原值：&quot;python&quot;</span><br><span class=\"line\">data = xxtea.decrypt(data, key)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"为啥写这个\"><a href=\"#为啥写这个\" class=\"headerlink\" title=\"为啥写这个\"></a>为啥写这个</h3><hr>\n<ul>\n<li>cocos2dx-lua的客户端lua代码一般是需要进行加密的，否则别人下载客户端解压文件后是可以直接查看lua源码的</li>\n<li>python操作：<code>arr[n:]</code>从第n个元素开始截取数组</li>\n<li>这个加密其实是很鸡肋的，想要破解其实也很容易。。。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于xxtea\"><a href=\"#关于xxtea\" class=\"headerlink\" title=\"关于xxtea\"></a>关于xxtea</h3><hr>\n<ul>\n<li>xxtea一种简单、执行快速的加密方式，通常很少的代码量就能实现，缺点就是安全性不高</li>\n<li>对称密钥加密的一种：加密解密使用相同的密钥</li>\n<li>全称：Tiny Encryption Algorithm（中文：微型加密算法），前身是xtea；xtea的前身又是tea，最新的加强版本就是xxtea了</li>\n</ul>\n<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><hr>\n<p>xxtea.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import struct  </span><br><span class=\"line\">  </span><br><span class=\"line\">_DELTA = 0x9E3779B9  </span><br><span class=\"line\">  </span><br><span class=\"line\">def _long2str(v, w):  </span><br><span class=\"line\">    n = (len(v) - 1) &lt;&lt; 2  </span><br><span class=\"line\">    if w:  </span><br><span class=\"line\">        m = v[-1]  </span><br><span class=\"line\">        if (m &lt; n - 3) or (m &gt; n): return &apos;&apos;  </span><br><span class=\"line\">        n = m  </span><br><span class=\"line\">    s = struct.pack(&apos;&lt;%iL&apos; % len(v), *v)  </span><br><span class=\"line\">    return s[0:n] if w else s  </span><br><span class=\"line\">  </span><br><span class=\"line\">def _str2long(s, w):  </span><br><span class=\"line\">    n = len(s)  </span><br><span class=\"line\">    m = (4 - (n &amp; 3) &amp; 3) + n  </span><br><span class=\"line\">    s = s.ljust(m, &quot;\\0&quot;)  </span><br><span class=\"line\">    v = list(struct.unpack(&apos;&lt;%iL&apos; % (m &gt;&gt; 2), s))  </span><br><span class=\"line\">    if w: v.append(n)  </span><br><span class=\"line\">    return v  </span><br><span class=\"line\">  </span><br><span class=\"line\">def encrypt(str, key):  </span><br><span class=\"line\">    if str == &apos;&apos;: return str  </span><br><span class=\"line\">    v = _str2long(str, True)  </span><br><span class=\"line\">    k = _str2long(key.ljust(16, &quot;\\0&quot;), False)  </span><br><span class=\"line\">    n = len(v) - 1  </span><br><span class=\"line\">    z = v[n]  </span><br><span class=\"line\">    y = v[0]  </span><br><span class=\"line\">    sum = 0  </span><br><span class=\"line\">    q = 6 + 52 // (n + 1)  </span><br><span class=\"line\">    while q &gt; 0:  </span><br><span class=\"line\">        sum = (sum + _DELTA) &amp; 0xffffffff  </span><br><span class=\"line\">        e = sum &gt;&gt; 2 &amp; 3  </span><br><span class=\"line\">        for p in xrange(n):  </span><br><span class=\"line\">            y = v[p + 1]  </span><br><span class=\"line\">            v[p] = (v[p] + ((z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[p &amp; 3 ^ e] ^ z))) &amp; 0xffffffff  </span><br><span class=\"line\">            z = v[p]  </span><br><span class=\"line\">        y = v[0]  </span><br><span class=\"line\">        v[n] = (v[n] + ((z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[n &amp; 3 ^ e] ^ z))) &amp; 0xffffffff  </span><br><span class=\"line\">        z = v[n]  </span><br><span class=\"line\">        q -= 1  </span><br><span class=\"line\">    return _long2str(v, False)  </span><br><span class=\"line\">  </span><br><span class=\"line\">def decrypt(str, key):  </span><br><span class=\"line\">    if str == &apos;&apos;: return str  </span><br><span class=\"line\">    v = _str2long(str, False)  </span><br><span class=\"line\">    k = _str2long(key.ljust(16, &quot;\\0&quot;), False)  </span><br><span class=\"line\">    n = len(v) - 1  </span><br><span class=\"line\">    z = v[n]  </span><br><span class=\"line\">    y = v[0]  </span><br><span class=\"line\">    q = 6 + 52 // (n + 1)  </span><br><span class=\"line\">    sum = (q * _DELTA) &amp; 0xffffffff  </span><br><span class=\"line\">    while (sum != 0):  </span><br><span class=\"line\">        e = sum &gt;&gt; 2 &amp; 3  </span><br><span class=\"line\">        for p in xrange(n, 0, -1):  </span><br><span class=\"line\">            z = v[p - 1]  </span><br><span class=\"line\">            v[p] = (v[p] - ((z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[p &amp; 3 ^ e] ^ z))) &amp; 0xffffffff  </span><br><span class=\"line\">            y = v[p]  </span><br><span class=\"line\">        z = v[n]  </span><br><span class=\"line\">        v[0] = (v[0] - ((z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[0 &amp; 3 ^ e] ^ z))) &amp; 0xffffffff  </span><br><span class=\"line\">        y = v[0]  </span><br><span class=\"line\">        sum = (sum - _DELTA) &amp; 0xffffffff  </span><br><span class=\"line\">    return _long2str(v, True)  </span><br><span class=\"line\">  </span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:  </span><br><span class=\"line\">    print decrypt(encrypt(&apos;Hello XXTEA!&apos;, &apos;16bytelongstring&apos;), &apos;16bytelongstring&apos;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><hr>\n<p>test.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#   导入加密算法</span><br><span class=\"line\">import xxtea</span><br><span class=\"line\"></span><br><span class=\"line\">#   待加密数据</span><br><span class=\"line\">data = &quot;python&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#   加密算法使用的密钥</span><br><span class=\"line\">key = &quot;03f0fdcbf5215b45fc790aaf2b965238&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#   加密：data现在的值：&quot;#\\xeeo`G&#123;M\\x1b\\x08\\x8e\\x1b\\x87&quot;</span><br><span class=\"line\">data = xxtea.encrypt(data, key)</span><br><span class=\"line\"></span><br><span class=\"line\">#   解密：data的值现在恢复成原值：&quot;python&quot;</span><br><span class=\"line\">data = xxtea.decrypt(data, key)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"为啥写这个\"><a href=\"#为啥写这个\" class=\"headerlink\" title=\"为啥写这个\"></a>为啥写这个</h3><hr>\n<ul>\n<li>cocos2dx-lua的客户端lua代码一般是需要进行加密的，否则别人下载客户端解压文件后是可以直接查看lua源码的</li>\n<li>python操作：<code>arr[n:]</code>从第n个元素开始截取数组</li>\n<li>这个加密其实是很鸡肋的，想要破解其实也很容易。。。</li>\n</ul>\n"},{"title":"OOP中的继承","date":"2019-03-08T16:00:00.000Z","_content":"\n### 继承的好处\n---\n* 代码复用：继承父类以后，子类不需要再次编写相同的代码，却能获得和父类相同的行为和数据，多好！简直是空手套白狼，无本万利的事情嘛！另外，要知道维护一份代码与维护两份乃至好几份相同的代码，这两种感受简直天壤之别！\n* 定制、差异化：\n    * 覆盖父类原有行为：你还可以重写某些父类方法，使其名字虽然和父类的方法名一样，但是执行的内容却完全不同，是不是很神奇！\n    * 新增行为和数据：除了以上，你还可以增加父类从来没有的东西：可以是行为或者数据，以使子类在某些方面看上去，与父类完全不同，体现出真正的差异化！\n\n### “型态”为主，而不是“行为”\n---\n虽然继承确实能够带来**代码复用**的好处，但是通常来说，它却不是发挥**代码复用**功能的最佳方式,大量的实践证明最佳方式通常是**组合**\n\n这也不是说**继承**就毫无用武之地了，就像小标题表述的那样，现今面向对象程序设计中，继承并非以继承类别的“行为”为主，而是继承类别的“型态”，使得组件的类型一致，从而易于编写通用代码。\n\n### 继承往往容易被过度使用\n---\n现在要解决一个问题：\n* 问题很简单，可能几行代码就足够了。\n* 也可能稍微复杂，要写一个或几个方法来解决它。\n* 也可能相当复杂，可能需要概括一个抽象概念以写出一个类来处理。\n* 甚至问题的规模相当之大，需要数个类相互协作，而类与类之间可能还需要构成某种层次结构。\n\n针对不同规模的问题，作为一个合格的软件工程师，我们也要懂得如何选取不同口径的武器来解决它。而继承，在面向对象设计领域中算是一个重量级、大口径的武器了。所以，除非你确定这是一个复杂度相当大的问题，否则请不要轻易掏出**继承**这把大口径武器。\n\n### 滥用继承的危害\n---\n类层次结构演变的越深越宽，引发的问题就越致命。一个类越是在类层次结构中越深的地方，就越难理解、维护及修改。因为要理解一个，就需要理解其所有父类。例如，在子类中修改一个看似无害的虚函数，就可能会违背了众多父类中某个父类的假设，从而产生微妙又难以找到的bug。","source":"_posts/OOP中的继承.md","raw":"---\ntitle: OOP中的继承\ncategories: OOP\ndate: 2019-03-09\n---\n\n### 继承的好处\n---\n* 代码复用：继承父类以后，子类不需要再次编写相同的代码，却能获得和父类相同的行为和数据，多好！简直是空手套白狼，无本万利的事情嘛！另外，要知道维护一份代码与维护两份乃至好几份相同的代码，这两种感受简直天壤之别！\n* 定制、差异化：\n    * 覆盖父类原有行为：你还可以重写某些父类方法，使其名字虽然和父类的方法名一样，但是执行的内容却完全不同，是不是很神奇！\n    * 新增行为和数据：除了以上，你还可以增加父类从来没有的东西：可以是行为或者数据，以使子类在某些方面看上去，与父类完全不同，体现出真正的差异化！\n\n### “型态”为主，而不是“行为”\n---\n虽然继承确实能够带来**代码复用**的好处，但是通常来说，它却不是发挥**代码复用**功能的最佳方式,大量的实践证明最佳方式通常是**组合**\n\n这也不是说**继承**就毫无用武之地了，就像小标题表述的那样，现今面向对象程序设计中，继承并非以继承类别的“行为”为主，而是继承类别的“型态”，使得组件的类型一致，从而易于编写通用代码。\n\n### 继承往往容易被过度使用\n---\n现在要解决一个问题：\n* 问题很简单，可能几行代码就足够了。\n* 也可能稍微复杂，要写一个或几个方法来解决它。\n* 也可能相当复杂，可能需要概括一个抽象概念以写出一个类来处理。\n* 甚至问题的规模相当之大，需要数个类相互协作，而类与类之间可能还需要构成某种层次结构。\n\n针对不同规模的问题，作为一个合格的软件工程师，我们也要懂得如何选取不同口径的武器来解决它。而继承，在面向对象设计领域中算是一个重量级、大口径的武器了。所以，除非你确定这是一个复杂度相当大的问题，否则请不要轻易掏出**继承**这把大口径武器。\n\n### 滥用继承的危害\n---\n类层次结构演变的越深越宽，引发的问题就越致命。一个类越是在类层次结构中越深的地方，就越难理解、维护及修改。因为要理解一个，就需要理解其所有父类。例如，在子类中修改一个看似无害的虚函数，就可能会违背了众多父类中某个父类的假设，从而产生微妙又难以找到的bug。","slug":"OOP中的继承","published":1,"updated":"2019-04-25T02:54:25.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v5q0005hcr79e3xd07f","content":"<h3 id=\"继承的好处\"><a href=\"#继承的好处\" class=\"headerlink\" title=\"继承的好处\"></a>继承的好处</h3><hr>\n<ul>\n<li>代码复用：继承父类以后，子类不需要再次编写相同的代码，却能获得和父类相同的行为和数据，多好！简直是空手套白狼，无本万利的事情嘛！另外，要知道维护一份代码与维护两份乃至好几份相同的代码，这两种感受简直天壤之别！</li>\n<li>定制、差异化：<ul>\n<li>覆盖父类原有行为：你还可以重写某些父类方法，使其名字虽然和父类的方法名一样，但是执行的内容却完全不同，是不是很神奇！</li>\n<li>新增行为和数据：除了以上，你还可以增加父类从来没有的东西：可以是行为或者数据，以使子类在某些方面看上去，与父类完全不同，体现出真正的差异化！</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"“型态”为主，而不是“行为”\"><a href=\"#“型态”为主，而不是“行为”\" class=\"headerlink\" title=\"“型态”为主，而不是“行为”\"></a>“型态”为主，而不是“行为”</h3><hr>\n<p>虽然继承确实能够带来<strong>代码复用</strong>的好处，但是通常来说，它却不是发挥<strong>代码复用</strong>功能的最佳方式,大量的实践证明最佳方式通常是<strong>组合</strong></p>\n<p>这也不是说<strong>继承</strong>就毫无用武之地了，就像小标题表述的那样，现今面向对象程序设计中，继承并非以继承类别的“行为”为主，而是继承类别的“型态”，使得组件的类型一致，从而易于编写通用代码。</p>\n<h3 id=\"继承往往容易被过度使用\"><a href=\"#继承往往容易被过度使用\" class=\"headerlink\" title=\"继承往往容易被过度使用\"></a>继承往往容易被过度使用</h3><hr>\n<p>现在要解决一个问题：</p>\n<ul>\n<li>问题很简单，可能几行代码就足够了。</li>\n<li>也可能稍微复杂，要写一个或几个方法来解决它。</li>\n<li>也可能相当复杂，可能需要概括一个抽象概念以写出一个类来处理。</li>\n<li>甚至问题的规模相当之大，需要数个类相互协作，而类与类之间可能还需要构成某种层次结构。</li>\n</ul>\n<p>针对不同规模的问题，作为一个合格的软件工程师，我们也要懂得如何选取不同口径的武器来解决它。而继承，在面向对象设计领域中算是一个重量级、大口径的武器了。所以，除非你确定这是一个复杂度相当大的问题，否则请不要轻易掏出<strong>继承</strong>这把大口径武器。</p>\n<h3 id=\"滥用继承的危害\"><a href=\"#滥用继承的危害\" class=\"headerlink\" title=\"滥用继承的危害\"></a>滥用继承的危害</h3><hr>\n<p>类层次结构演变的越深越宽，引发的问题就越致命。一个类越是在类层次结构中越深的地方，就越难理解、维护及修改。因为要理解一个，就需要理解其所有父类。例如，在子类中修改一个看似无害的虚函数，就可能会违背了众多父类中某个父类的假设，从而产生微妙又难以找到的bug。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"继承的好处\"><a href=\"#继承的好处\" class=\"headerlink\" title=\"继承的好处\"></a>继承的好处</h3><hr>\n<ul>\n<li>代码复用：继承父类以后，子类不需要再次编写相同的代码，却能获得和父类相同的行为和数据，多好！简直是空手套白狼，无本万利的事情嘛！另外，要知道维护一份代码与维护两份乃至好几份相同的代码，这两种感受简直天壤之别！</li>\n<li>定制、差异化：<ul>\n<li>覆盖父类原有行为：你还可以重写某些父类方法，使其名字虽然和父类的方法名一样，但是执行的内容却完全不同，是不是很神奇！</li>\n<li>新增行为和数据：除了以上，你还可以增加父类从来没有的东西：可以是行为或者数据，以使子类在某些方面看上去，与父类完全不同，体现出真正的差异化！</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"“型态”为主，而不是“行为”\"><a href=\"#“型态”为主，而不是“行为”\" class=\"headerlink\" title=\"“型态”为主，而不是“行为”\"></a>“型态”为主，而不是“行为”</h3><hr>\n<p>虽然继承确实能够带来<strong>代码复用</strong>的好处，但是通常来说，它却不是发挥<strong>代码复用</strong>功能的最佳方式,大量的实践证明最佳方式通常是<strong>组合</strong></p>\n<p>这也不是说<strong>继承</strong>就毫无用武之地了，就像小标题表述的那样，现今面向对象程序设计中，继承并非以继承类别的“行为”为主，而是继承类别的“型态”，使得组件的类型一致，从而易于编写通用代码。</p>\n<h3 id=\"继承往往容易被过度使用\"><a href=\"#继承往往容易被过度使用\" class=\"headerlink\" title=\"继承往往容易被过度使用\"></a>继承往往容易被过度使用</h3><hr>\n<p>现在要解决一个问题：</p>\n<ul>\n<li>问题很简单，可能几行代码就足够了。</li>\n<li>也可能稍微复杂，要写一个或几个方法来解决它。</li>\n<li>也可能相当复杂，可能需要概括一个抽象概念以写出一个类来处理。</li>\n<li>甚至问题的规模相当之大，需要数个类相互协作，而类与类之间可能还需要构成某种层次结构。</li>\n</ul>\n<p>针对不同规模的问题，作为一个合格的软件工程师，我们也要懂得如何选取不同口径的武器来解决它。而继承，在面向对象设计领域中算是一个重量级、大口径的武器了。所以，除非你确定这是一个复杂度相当大的问题，否则请不要轻易掏出<strong>继承</strong>这把大口径武器。</p>\n<h3 id=\"滥用继承的危害\"><a href=\"#滥用继承的危害\" class=\"headerlink\" title=\"滥用继承的危害\"></a>滥用继承的危害</h3><hr>\n<p>类层次结构演变的越深越宽，引发的问题就越致命。一个类越是在类层次结构中越深的地方，就越难理解、维护及修改。因为要理解一个，就需要理解其所有父类。例如，在子类中修改一个看似无害的虚函数，就可能会违背了众多父类中某个父类的假设，从而产生微妙又难以找到的bug。</p>\n"},{"title":"SVN的合并操作（svn merge）","date":"2019-02-28T16:00:00.000Z","_content":"\n* 网上搜索了很多关于这个主题的文章，个人觉得最好的就是[这个了](https://www.centos.bz/2017/08/svn-merge-operate/)\n\n* 关于更详细的说明看这里的[中文文档](http://svnbook.red-bean.com/nightly/zh/svn.branchmerge.html)\n\n### 把分支（branch）合并到主干（trunk）\n---\n* 首先到你的trunk根目录下（本地的working copy），更新服务器上最新代码，提交本地还未提交的代码，解决存在的冲突。\n* 鼠标空白处右键，选择\"TortoiseSVN\"选项，然后选择“Merge...”选项\n* 在弹出的“Merge type”界面里：选择“Merger a range of revisions”选项\n* 在弹出的“Merge revision range”界面里：\n    * “URL to merge from”处，选择你想要合并到主干（trunk）的那个分支（branch）的路径\n    * “Revision range to merge”处，选择你想要合并的版本号 （这些都是对分支（branch）的修改产生的版本号）\n    * 点击“下一步（Next）”按钮\n* 在“Merge options”界面里：\n    * 使用默认的合并选项就可以了\n    * 合并之前可以先点击“测试合并（Test merge）”按钮，测试一下合并结果如何\n    * 确保没有问题后，点击“合并（Merge）”按钮进行合并\n    * 如何产生冲突了也不用担心，可以选择手动解决冲突或者撤销此次合并操作\n    * 合并后记得提交合并后的结果\n\n### 把主干（trunk）合并到分支（branch）\n---\n* 操作简直一模一样的：只是把选项“URL to merge from”处，改成选择你要合并到分支（branch）的那个主干（trunk）的路径\n\n### 注意整个合并过程其实可以分解成：**diff + apply**这两个操作的组合\n---\n* **diff**：既可以是指比较同一个tree的不同版本之间的差异（“Merger a range of revisions”），也可以是比较两个tree之间的差异（“2-URL Merges”）\n* **apply**：就是把这些差异应用到那你想要的working copy上","source":"_posts/SVN合并操作.md","raw":"---\ntitle: SVN的合并操作（svn merge）\ncategories: 版本控制\ndate: 2019-03-01\n---\n\n* 网上搜索了很多关于这个主题的文章，个人觉得最好的就是[这个了](https://www.centos.bz/2017/08/svn-merge-operate/)\n\n* 关于更详细的说明看这里的[中文文档](http://svnbook.red-bean.com/nightly/zh/svn.branchmerge.html)\n\n### 把分支（branch）合并到主干（trunk）\n---\n* 首先到你的trunk根目录下（本地的working copy），更新服务器上最新代码，提交本地还未提交的代码，解决存在的冲突。\n* 鼠标空白处右键，选择\"TortoiseSVN\"选项，然后选择“Merge...”选项\n* 在弹出的“Merge type”界面里：选择“Merger a range of revisions”选项\n* 在弹出的“Merge revision range”界面里：\n    * “URL to merge from”处，选择你想要合并到主干（trunk）的那个分支（branch）的路径\n    * “Revision range to merge”处，选择你想要合并的版本号 （这些都是对分支（branch）的修改产生的版本号）\n    * 点击“下一步（Next）”按钮\n* 在“Merge options”界面里：\n    * 使用默认的合并选项就可以了\n    * 合并之前可以先点击“测试合并（Test merge）”按钮，测试一下合并结果如何\n    * 确保没有问题后，点击“合并（Merge）”按钮进行合并\n    * 如何产生冲突了也不用担心，可以选择手动解决冲突或者撤销此次合并操作\n    * 合并后记得提交合并后的结果\n\n### 把主干（trunk）合并到分支（branch）\n---\n* 操作简直一模一样的：只是把选项“URL to merge from”处，改成选择你要合并到分支（branch）的那个主干（trunk）的路径\n\n### 注意整个合并过程其实可以分解成：**diff + apply**这两个操作的组合\n---\n* **diff**：既可以是指比较同一个tree的不同版本之间的差异（“Merger a range of revisions”），也可以是比较两个tree之间的差异（“2-URL Merges”）\n* **apply**：就是把这些差异应用到那你想要的working copy上","slug":"SVN合并操作","published":1,"updated":"2019-05-10T08:33:55.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v5q0006hcr7qg5f7bpv","content":"<ul>\n<li><p>网上搜索了很多关于这个主题的文章，个人觉得最好的就是<a href=\"https://www.centos.bz/2017/08/svn-merge-operate/\" target=\"_blank\" rel=\"noopener\">这个了</a></p>\n</li>\n<li><p>关于更详细的说明看这里的<a href=\"http://svnbook.red-bean.com/nightly/zh/svn.branchmerge.html\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n</li>\n</ul>\n<h3 id=\"把分支（branch）合并到主干（trunk）\"><a href=\"#把分支（branch）合并到主干（trunk）\" class=\"headerlink\" title=\"把分支（branch）合并到主干（trunk）\"></a>把分支（branch）合并到主干（trunk）</h3><hr>\n<ul>\n<li>首先到你的trunk根目录下（本地的working copy），更新服务器上最新代码，提交本地还未提交的代码，解决存在的冲突。</li>\n<li>鼠标空白处右键，选择”TortoiseSVN”选项，然后选择“Merge…”选项</li>\n<li>在弹出的“Merge type”界面里：选择“Merger a range of revisions”选项</li>\n<li>在弹出的“Merge revision range”界面里：<ul>\n<li>“URL to merge from”处，选择你想要合并到主干（trunk）的那个分支（branch）的路径</li>\n<li>“Revision range to merge”处，选择你想要合并的版本号 （这些都是对分支（branch）的修改产生的版本号）</li>\n<li>点击“下一步（Next）”按钮</li>\n</ul>\n</li>\n<li>在“Merge options”界面里：<ul>\n<li>使用默认的合并选项就可以了</li>\n<li>合并之前可以先点击“测试合并（Test merge）”按钮，测试一下合并结果如何</li>\n<li>确保没有问题后，点击“合并（Merge）”按钮进行合并</li>\n<li>如何产生冲突了也不用担心，可以选择手动解决冲突或者撤销此次合并操作</li>\n<li>合并后记得提交合并后的结果</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"把主干（trunk）合并到分支（branch）\"><a href=\"#把主干（trunk）合并到分支（branch）\" class=\"headerlink\" title=\"把主干（trunk）合并到分支（branch）\"></a>把主干（trunk）合并到分支（branch）</h3><hr>\n<ul>\n<li>操作简直一模一样的：只是把选项“URL to merge from”处，改成选择你要合并到分支（branch）的那个主干（trunk）的路径</li>\n</ul>\n<h3 id=\"注意整个合并过程其实可以分解成：diff-apply这两个操作的组合\"><a href=\"#注意整个合并过程其实可以分解成：diff-apply这两个操作的组合\" class=\"headerlink\" title=\"注意整个合并过程其实可以分解成：diff + apply这两个操作的组合\"></a>注意整个合并过程其实可以分解成：<strong>diff + apply</strong>这两个操作的组合</h3><hr>\n<ul>\n<li><strong>diff</strong>：既可以是指比较同一个tree的不同版本之间的差异（“Merger a range of revisions”），也可以是比较两个tree之间的差异（“2-URL Merges”）</li>\n<li><strong>apply</strong>：就是把这些差异应用到那你想要的working copy上</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>网上搜索了很多关于这个主题的文章，个人觉得最好的就是<a href=\"https://www.centos.bz/2017/08/svn-merge-operate/\" target=\"_blank\" rel=\"noopener\">这个了</a></p>\n</li>\n<li><p>关于更详细的说明看这里的<a href=\"http://svnbook.red-bean.com/nightly/zh/svn.branchmerge.html\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n</li>\n</ul>\n<h3 id=\"把分支（branch）合并到主干（trunk）\"><a href=\"#把分支（branch）合并到主干（trunk）\" class=\"headerlink\" title=\"把分支（branch）合并到主干（trunk）\"></a>把分支（branch）合并到主干（trunk）</h3><hr>\n<ul>\n<li>首先到你的trunk根目录下（本地的working copy），更新服务器上最新代码，提交本地还未提交的代码，解决存在的冲突。</li>\n<li>鼠标空白处右键，选择”TortoiseSVN”选项，然后选择“Merge…”选项</li>\n<li>在弹出的“Merge type”界面里：选择“Merger a range of revisions”选项</li>\n<li>在弹出的“Merge revision range”界面里：<ul>\n<li>“URL to merge from”处，选择你想要合并到主干（trunk）的那个分支（branch）的路径</li>\n<li>“Revision range to merge”处，选择你想要合并的版本号 （这些都是对分支（branch）的修改产生的版本号）</li>\n<li>点击“下一步（Next）”按钮</li>\n</ul>\n</li>\n<li>在“Merge options”界面里：<ul>\n<li>使用默认的合并选项就可以了</li>\n<li>合并之前可以先点击“测试合并（Test merge）”按钮，测试一下合并结果如何</li>\n<li>确保没有问题后，点击“合并（Merge）”按钮进行合并</li>\n<li>如何产生冲突了也不用担心，可以选择手动解决冲突或者撤销此次合并操作</li>\n<li>合并后记得提交合并后的结果</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"把主干（trunk）合并到分支（branch）\"><a href=\"#把主干（trunk）合并到分支（branch）\" class=\"headerlink\" title=\"把主干（trunk）合并到分支（branch）\"></a>把主干（trunk）合并到分支（branch）</h3><hr>\n<ul>\n<li>操作简直一模一样的：只是把选项“URL to merge from”处，改成选择你要合并到分支（branch）的那个主干（trunk）的路径</li>\n</ul>\n<h3 id=\"注意整个合并过程其实可以分解成：diff-apply这两个操作的组合\"><a href=\"#注意整个合并过程其实可以分解成：diff-apply这两个操作的组合\" class=\"headerlink\" title=\"注意整个合并过程其实可以分解成：diff + apply这两个操作的组合\"></a>注意整个合并过程其实可以分解成：<strong>diff + apply</strong>这两个操作的组合</h3><hr>\n<ul>\n<li><strong>diff</strong>：既可以是指比较同一个tree的不同版本之间的差异（“Merger a range of revisions”），也可以是比较两个tree之间的差异（“2-URL Merges”）</li>\n<li><strong>apply</strong>：就是把这些差异应用到那你想要的working copy上</li>\n</ul>\n"},{"title":"使用VSCode调试C++代码","date":"2019-05-07T16:00:00.000Z","_content":"\n### 相关配置\n---\n\n* 这里有一份模板：https://github.com/dongtshj/debugCpp\n* **c_cpp_properties.json**：这个文件主要配置一些项目属性，include路径、定义的宏、编译器路径、C/C++版本等\n* **launch.json**：配置启动参数，只不过C++的要比其它脚本语言要复杂些。调试器路径、工作目录、生成目标架构等\n* **tasks.json**：基本上是配置一些生成构建C++程序时的参数，编译器类型、参与编译的源代码文件\n\n\n\n\n\n","source":"_posts/使用VSCode调试C++代码.md","raw":"---\ntitle: 使用VSCode调试C++代码\ncategories: C++\ndate: 2019-05-08\n---\n\n### 相关配置\n---\n\n* 这里有一份模板：https://github.com/dongtshj/debugCpp\n* **c_cpp_properties.json**：这个文件主要配置一些项目属性，include路径、定义的宏、编译器路径、C/C++版本等\n* **launch.json**：配置启动参数，只不过C++的要比其它脚本语言要复杂些。调试器路径、工作目录、生成目标架构等\n* **tasks.json**：基本上是配置一些生成构建C++程序时的参数，编译器类型、参与编译的源代码文件\n\n\n\n\n\n","slug":"使用VSCode调试C++代码","published":1,"updated":"2019-05-08T09:18:41.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v5s0008hcr7gxal1o7b","content":"<h3 id=\"相关配置\"><a href=\"#相关配置\" class=\"headerlink\" title=\"相关配置\"></a>相关配置</h3><hr>\n<ul>\n<li>这里有一份模板：<a href=\"https://github.com/dongtshj/debugCpp\" target=\"_blank\" rel=\"noopener\">https://github.com/dongtshj/debugCpp</a></li>\n<li><strong>c_cpp_properties.json</strong>：这个文件主要配置一些项目属性，include路径、定义的宏、编译器路径、C/C++版本等</li>\n<li><strong>launch.json</strong>：配置启动参数，只不过C++的要比其它脚本语言要复杂些。调试器路径、工作目录、生成目标架构等</li>\n<li><strong>tasks.json</strong>：基本上是配置一些生成构建C++程序时的参数，编译器类型、参与编译的源代码文件</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"相关配置\"><a href=\"#相关配置\" class=\"headerlink\" title=\"相关配置\"></a>相关配置</h3><hr>\n<ul>\n<li>这里有一份模板：<a href=\"https://github.com/dongtshj/debugCpp\" target=\"_blank\" rel=\"noopener\">https://github.com/dongtshj/debugCpp</a></li>\n<li><strong>c_cpp_properties.json</strong>：这个文件主要配置一些项目属性，include路径、定义的宏、编译器路径、C/C++版本等</li>\n<li><strong>launch.json</strong>：配置启动参数，只不过C++的要比其它脚本语言要复杂些。调试器路径、工作目录、生成目标架构等</li>\n<li><strong>tasks.json</strong>：基本上是配置一些生成构建C++程序时的参数，编译器类型、参与编译的源代码文件</li>\n</ul>\n"},{"title":"goto语句 VS 函数调用","date":"2019-05-09T16:00:00.000Z","_content":"\n### 介绍\n---\n\n函数调用操作再熟悉不过了，无论是过程式、函数式还是面向对象式的编程范式里，它随处可见。\n一般来说，调用一个函数需要一个函数调用操作符，大部分编程语言里它是一对小括号：()\n\ngoto语句的话，虽然基本上用不到它，不过大家肯定也很熟悉。因为它经常被当作反面教材来告诫\n新手：不要在你的程序里使用goto语句！否则你的代码会很难维护。\n\n一般新手在经历一段时间之后，确实做到了，有的甚至都忘记怎么使用goto语句了:)\n\n### GOTO语句\n---\n\ngoto语句虽然不适合绝大部分的应用场景，但它也不是毫无用武之地。比如，在实现一个调试器的时候，\n当被调试的代码出现错误或者异常时，此时就需要一个跳转逻辑，在代码出错的地方进行跳转：把现场\n的错误信息及时打印出来以方便调试。注意一点，跳转处下面的代码一般是不会执行的。这是goto与函数\n调用最主要的区别。\n\n在汇编层面来看，goto语句相当于JMP指令：仅仅是简单的跳转，跳转过去的代码执行完就没了，它是不会\n回来继续执行跳转处的下一行的代码的\n\n### 函数调用操作\n---\n\n函数在调用之前，需要将它下一条指令的地址（函数的返回地址）先入栈，以方面函数调用完，回来接着继续\n执行调用处的下一行代码。\n\n### 总结下\n---\n* goto:相当于汇编的jmp指令\n* 函数调用：相当于在执行jmp指令之前，先保存下返回地址（在汇编里这两个操作被抽象成一个专门的指令：call指令）\n\n### 相关的题外话\n---\n\n#### GOTO：脚本异常\n\n当时刚接触脚本语言，开发中从游戏界面的表现上来看没有任何问题。后来我发现控制台里面打印很多error，当时我想啊，这脚本语言也太不安全了吧!都出错了,程序也不闪退或者暂停啥的。我要是不看控制台打印，岂不是都发现不了这个错误！或者除非这个错误导致了很明显的游戏逻辑、UI显示异常才会被发现。\n\n之前做纯粹的C++开发，就像网上调侃的那样，控制台的warning我一般都是视而不见的，除非编译不过，或者崩溃了。我才会尝试在日志中搜寻“error”这类关键字。。。\n\n再说说上面那个使用脚本语言开发的游戏，当时感觉没啥问题了，基本上达到发布的质量了，开发环境控制台也没什么报错了。只不过那个时候项目还缺少一个捕获语言异常的模块，后来折腾很长时间才加上去（H5平台，不成熟，各种坑）。加上去后随便拿几台手机跑一跑，服务器上日志一拉，尼玛成吨的错误！（这里也不全是开发的坑，H5的各个平台不一致也占很大一部分原因）\n\n#### 函数调用：数组越界（缓冲区溢出）\n\n最后说一说函数调用让我记忆深刻的点：数组越界。在一连串的函数调用过程中，堆栈会保存完成的调用信息。出现崩溃，调试器会根据这些信息，给出精确无误的调用堆栈信息，比如最后崩溃在哪一行，崩溃的这一行在哪个函数里，所在函数又是被另外哪个函数调用的，函数中的各个局部变量的值也都完整的保存下来了。这样调试的话就相当方便了。\n\n但是如果是因为数组越界导致的崩溃，那上面的所有保证都会变得不可靠，因为越界时有可能把堆栈里保存的调用信息给覆盖了。这样的话，调试器给出的信息会变得有些不正常：崩溃的行号指示在一个没有代码的空行，或者是简单到不可能出错的一个赋值语句，或者是组成函数体边界的大括号上。简直让人崩溃！\n\n而且数组越界在第一次发生时可能不会崩溃，但在后续的逻辑执行中因第一次越界而导致更多的越界错误，直到其中一个越界错误导致了崩溃，此时程序才被调试器接管或者产生core文件（linux上）之类的。要知道，现在离真正的错误（错误的源头：第一个越界的地方）可能已经十万八千里了。\n\n* 这个时候建议使用版本控制工具，查看下最近改了哪些东西。\n* C/C++没有运行时下标检查，是因为考虑到运行性能问题\n* 个人经验：开发环境中，最好用assert宏对下标进行检查，release时关闭宏就好了，这样既不影响性能又能第一时间发现错误，岂不是一举两得。\n\n\n\n\n\n\n\n\n\n","source":"_posts/goto语句 VS 函数调用.md","raw":"---\ntitle: goto语句 VS 函数调用\ncategories: 在类比中学习\ndate: 2019-05-10\n---\n\n### 介绍\n---\n\n函数调用操作再熟悉不过了，无论是过程式、函数式还是面向对象式的编程范式里，它随处可见。\n一般来说，调用一个函数需要一个函数调用操作符，大部分编程语言里它是一对小括号：()\n\ngoto语句的话，虽然基本上用不到它，不过大家肯定也很熟悉。因为它经常被当作反面教材来告诫\n新手：不要在你的程序里使用goto语句！否则你的代码会很难维护。\n\n一般新手在经历一段时间之后，确实做到了，有的甚至都忘记怎么使用goto语句了:)\n\n### GOTO语句\n---\n\ngoto语句虽然不适合绝大部分的应用场景，但它也不是毫无用武之地。比如，在实现一个调试器的时候，\n当被调试的代码出现错误或者异常时，此时就需要一个跳转逻辑，在代码出错的地方进行跳转：把现场\n的错误信息及时打印出来以方便调试。注意一点，跳转处下面的代码一般是不会执行的。这是goto与函数\n调用最主要的区别。\n\n在汇编层面来看，goto语句相当于JMP指令：仅仅是简单的跳转，跳转过去的代码执行完就没了，它是不会\n回来继续执行跳转处的下一行的代码的\n\n### 函数调用操作\n---\n\n函数在调用之前，需要将它下一条指令的地址（函数的返回地址）先入栈，以方面函数调用完，回来接着继续\n执行调用处的下一行代码。\n\n### 总结下\n---\n* goto:相当于汇编的jmp指令\n* 函数调用：相当于在执行jmp指令之前，先保存下返回地址（在汇编里这两个操作被抽象成一个专门的指令：call指令）\n\n### 相关的题外话\n---\n\n#### GOTO：脚本异常\n\n当时刚接触脚本语言，开发中从游戏界面的表现上来看没有任何问题。后来我发现控制台里面打印很多error，当时我想啊，这脚本语言也太不安全了吧!都出错了,程序也不闪退或者暂停啥的。我要是不看控制台打印，岂不是都发现不了这个错误！或者除非这个错误导致了很明显的游戏逻辑、UI显示异常才会被发现。\n\n之前做纯粹的C++开发，就像网上调侃的那样，控制台的warning我一般都是视而不见的，除非编译不过，或者崩溃了。我才会尝试在日志中搜寻“error”这类关键字。。。\n\n再说说上面那个使用脚本语言开发的游戏，当时感觉没啥问题了，基本上达到发布的质量了，开发环境控制台也没什么报错了。只不过那个时候项目还缺少一个捕获语言异常的模块，后来折腾很长时间才加上去（H5平台，不成熟，各种坑）。加上去后随便拿几台手机跑一跑，服务器上日志一拉，尼玛成吨的错误！（这里也不全是开发的坑，H5的各个平台不一致也占很大一部分原因）\n\n#### 函数调用：数组越界（缓冲区溢出）\n\n最后说一说函数调用让我记忆深刻的点：数组越界。在一连串的函数调用过程中，堆栈会保存完成的调用信息。出现崩溃，调试器会根据这些信息，给出精确无误的调用堆栈信息，比如最后崩溃在哪一行，崩溃的这一行在哪个函数里，所在函数又是被另外哪个函数调用的，函数中的各个局部变量的值也都完整的保存下来了。这样调试的话就相当方便了。\n\n但是如果是因为数组越界导致的崩溃，那上面的所有保证都会变得不可靠，因为越界时有可能把堆栈里保存的调用信息给覆盖了。这样的话，调试器给出的信息会变得有些不正常：崩溃的行号指示在一个没有代码的空行，或者是简单到不可能出错的一个赋值语句，或者是组成函数体边界的大括号上。简直让人崩溃！\n\n而且数组越界在第一次发生时可能不会崩溃，但在后续的逻辑执行中因第一次越界而导致更多的越界错误，直到其中一个越界错误导致了崩溃，此时程序才被调试器接管或者产生core文件（linux上）之类的。要知道，现在离真正的错误（错误的源头：第一个越界的地方）可能已经十万八千里了。\n\n* 这个时候建议使用版本控制工具，查看下最近改了哪些东西。\n* C/C++没有运行时下标检查，是因为考虑到运行性能问题\n* 个人经验：开发环境中，最好用assert宏对下标进行检查，release时关闭宏就好了，这样既不影响性能又能第一时间发现错误，岂不是一举两得。\n\n\n\n\n\n\n\n\n\n","slug":"goto语句 VS 函数调用","published":1,"updated":"2019-05-10T07:58:09.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v5t0009hcr7uf53isc7","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><hr>\n<p>函数调用操作再熟悉不过了，无论是过程式、函数式还是面向对象式的编程范式里，它随处可见。<br>一般来说，调用一个函数需要一个函数调用操作符，大部分编程语言里它是一对小括号：()</p>\n<p>goto语句的话，虽然基本上用不到它，不过大家肯定也很熟悉。因为它经常被当作反面教材来告诫<br>新手：不要在你的程序里使用goto语句！否则你的代码会很难维护。</p>\n<p>一般新手在经历一段时间之后，确实做到了，有的甚至都忘记怎么使用goto语句了:)</p>\n<h3 id=\"GOTO语句\"><a href=\"#GOTO语句\" class=\"headerlink\" title=\"GOTO语句\"></a>GOTO语句</h3><hr>\n<p>goto语句虽然不适合绝大部分的应用场景，但它也不是毫无用武之地。比如，在实现一个调试器的时候，<br>当被调试的代码出现错误或者异常时，此时就需要一个跳转逻辑，在代码出错的地方进行跳转：把现场<br>的错误信息及时打印出来以方便调试。注意一点，跳转处下面的代码一般是不会执行的。这是goto与函数<br>调用最主要的区别。</p>\n<p>在汇编层面来看，goto语句相当于JMP指令：仅仅是简单的跳转，跳转过去的代码执行完就没了，它是不会<br>回来继续执行跳转处的下一行的代码的</p>\n<h3 id=\"函数调用操作\"><a href=\"#函数调用操作\" class=\"headerlink\" title=\"函数调用操作\"></a>函数调用操作</h3><hr>\n<p>函数在调用之前，需要将它下一条指令的地址（函数的返回地址）先入栈，以方面函数调用完，回来接着继续<br>执行调用处的下一行代码。</p>\n<h3 id=\"总结下\"><a href=\"#总结下\" class=\"headerlink\" title=\"总结下\"></a>总结下</h3><hr>\n<ul>\n<li>goto:相当于汇编的jmp指令</li>\n<li>函数调用：相当于在执行jmp指令之前，先保存下返回地址（在汇编里这两个操作被抽象成一个专门的指令：call指令）</li>\n</ul>\n<h3 id=\"相关的题外话\"><a href=\"#相关的题外话\" class=\"headerlink\" title=\"相关的题外话\"></a>相关的题外话</h3><hr>\n<h4 id=\"GOTO：脚本异常\"><a href=\"#GOTO：脚本异常\" class=\"headerlink\" title=\"GOTO：脚本异常\"></a>GOTO：脚本异常</h4><p>当时刚接触脚本语言，开发中从游戏界面的表现上来看没有任何问题。后来我发现控制台里面打印很多error，当时我想啊，这脚本语言也太不安全了吧!都出错了,程序也不闪退或者暂停啥的。我要是不看控制台打印，岂不是都发现不了这个错误！或者除非这个错误导致了很明显的游戏逻辑、UI显示异常才会被发现。</p>\n<p>之前做纯粹的C++开发，就像网上调侃的那样，控制台的warning我一般都是视而不见的，除非编译不过，或者崩溃了。我才会尝试在日志中搜寻“error”这类关键字。。。</p>\n<p>再说说上面那个使用脚本语言开发的游戏，当时感觉没啥问题了，基本上达到发布的质量了，开发环境控制台也没什么报错了。只不过那个时候项目还缺少一个捕获语言异常的模块，后来折腾很长时间才加上去（H5平台，不成熟，各种坑）。加上去后随便拿几台手机跑一跑，服务器上日志一拉，尼玛成吨的错误！（这里也不全是开发的坑，H5的各个平台不一致也占很大一部分原因）</p>\n<h4 id=\"函数调用：数组越界（缓冲区溢出）\"><a href=\"#函数调用：数组越界（缓冲区溢出）\" class=\"headerlink\" title=\"函数调用：数组越界（缓冲区溢出）\"></a>函数调用：数组越界（缓冲区溢出）</h4><p>最后说一说函数调用让我记忆深刻的点：数组越界。在一连串的函数调用过程中，堆栈会保存完成的调用信息。出现崩溃，调试器会根据这些信息，给出精确无误的调用堆栈信息，比如最后崩溃在哪一行，崩溃的这一行在哪个函数里，所在函数又是被另外哪个函数调用的，函数中的各个局部变量的值也都完整的保存下来了。这样调试的话就相当方便了。</p>\n<p>但是如果是因为数组越界导致的崩溃，那上面的所有保证都会变得不可靠，因为越界时有可能把堆栈里保存的调用信息给覆盖了。这样的话，调试器给出的信息会变得有些不正常：崩溃的行号指示在一个没有代码的空行，或者是简单到不可能出错的一个赋值语句，或者是组成函数体边界的大括号上。简直让人崩溃！</p>\n<p>而且数组越界在第一次发生时可能不会崩溃，但在后续的逻辑执行中因第一次越界而导致更多的越界错误，直到其中一个越界错误导致了崩溃，此时程序才被调试器接管或者产生core文件（linux上）之类的。要知道，现在离真正的错误（错误的源头：第一个越界的地方）可能已经十万八千里了。</p>\n<ul>\n<li>这个时候建议使用版本控制工具，查看下最近改了哪些东西。</li>\n<li>C/C++没有运行时下标检查，是因为考虑到运行性能问题</li>\n<li>个人经验：开发环境中，最好用assert宏对下标进行检查，release时关闭宏就好了，这样既不影响性能又能第一时间发现错误，岂不是一举两得。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><hr>\n<p>函数调用操作再熟悉不过了，无论是过程式、函数式还是面向对象式的编程范式里，它随处可见。<br>一般来说，调用一个函数需要一个函数调用操作符，大部分编程语言里它是一对小括号：()</p>\n<p>goto语句的话，虽然基本上用不到它，不过大家肯定也很熟悉。因为它经常被当作反面教材来告诫<br>新手：不要在你的程序里使用goto语句！否则你的代码会很难维护。</p>\n<p>一般新手在经历一段时间之后，确实做到了，有的甚至都忘记怎么使用goto语句了:)</p>\n<h3 id=\"GOTO语句\"><a href=\"#GOTO语句\" class=\"headerlink\" title=\"GOTO语句\"></a>GOTO语句</h3><hr>\n<p>goto语句虽然不适合绝大部分的应用场景，但它也不是毫无用武之地。比如，在实现一个调试器的时候，<br>当被调试的代码出现错误或者异常时，此时就需要一个跳转逻辑，在代码出错的地方进行跳转：把现场<br>的错误信息及时打印出来以方便调试。注意一点，跳转处下面的代码一般是不会执行的。这是goto与函数<br>调用最主要的区别。</p>\n<p>在汇编层面来看，goto语句相当于JMP指令：仅仅是简单的跳转，跳转过去的代码执行完就没了，它是不会<br>回来继续执行跳转处的下一行的代码的</p>\n<h3 id=\"函数调用操作\"><a href=\"#函数调用操作\" class=\"headerlink\" title=\"函数调用操作\"></a>函数调用操作</h3><hr>\n<p>函数在调用之前，需要将它下一条指令的地址（函数的返回地址）先入栈，以方面函数调用完，回来接着继续<br>执行调用处的下一行代码。</p>\n<h3 id=\"总结下\"><a href=\"#总结下\" class=\"headerlink\" title=\"总结下\"></a>总结下</h3><hr>\n<ul>\n<li>goto:相当于汇编的jmp指令</li>\n<li>函数调用：相当于在执行jmp指令之前，先保存下返回地址（在汇编里这两个操作被抽象成一个专门的指令：call指令）</li>\n</ul>\n<h3 id=\"相关的题外话\"><a href=\"#相关的题外话\" class=\"headerlink\" title=\"相关的题外话\"></a>相关的题外话</h3><hr>\n<h4 id=\"GOTO：脚本异常\"><a href=\"#GOTO：脚本异常\" class=\"headerlink\" title=\"GOTO：脚本异常\"></a>GOTO：脚本异常</h4><p>当时刚接触脚本语言，开发中从游戏界面的表现上来看没有任何问题。后来我发现控制台里面打印很多error，当时我想啊，这脚本语言也太不安全了吧!都出错了,程序也不闪退或者暂停啥的。我要是不看控制台打印，岂不是都发现不了这个错误！或者除非这个错误导致了很明显的游戏逻辑、UI显示异常才会被发现。</p>\n<p>之前做纯粹的C++开发，就像网上调侃的那样，控制台的warning我一般都是视而不见的，除非编译不过，或者崩溃了。我才会尝试在日志中搜寻“error”这类关键字。。。</p>\n<p>再说说上面那个使用脚本语言开发的游戏，当时感觉没啥问题了，基本上达到发布的质量了，开发环境控制台也没什么报错了。只不过那个时候项目还缺少一个捕获语言异常的模块，后来折腾很长时间才加上去（H5平台，不成熟，各种坑）。加上去后随便拿几台手机跑一跑，服务器上日志一拉，尼玛成吨的错误！（这里也不全是开发的坑，H5的各个平台不一致也占很大一部分原因）</p>\n<h4 id=\"函数调用：数组越界（缓冲区溢出）\"><a href=\"#函数调用：数组越界（缓冲区溢出）\" class=\"headerlink\" title=\"函数调用：数组越界（缓冲区溢出）\"></a>函数调用：数组越界（缓冲区溢出）</h4><p>最后说一说函数调用让我记忆深刻的点：数组越界。在一连串的函数调用过程中，堆栈会保存完成的调用信息。出现崩溃，调试器会根据这些信息，给出精确无误的调用堆栈信息，比如最后崩溃在哪一行，崩溃的这一行在哪个函数里，所在函数又是被另外哪个函数调用的，函数中的各个局部变量的值也都完整的保存下来了。这样调试的话就相当方便了。</p>\n<p>但是如果是因为数组越界导致的崩溃，那上面的所有保证都会变得不可靠，因为越界时有可能把堆栈里保存的调用信息给覆盖了。这样的话，调试器给出的信息会变得有些不正常：崩溃的行号指示在一个没有代码的空行，或者是简单到不可能出错的一个赋值语句，或者是组成函数体边界的大括号上。简直让人崩溃！</p>\n<p>而且数组越界在第一次发生时可能不会崩溃，但在后续的逻辑执行中因第一次越界而导致更多的越界错误，直到其中一个越界错误导致了崩溃，此时程序才被调试器接管或者产生core文件（linux上）之类的。要知道，现在离真正的错误（错误的源头：第一个越界的地方）可能已经十万八千里了。</p>\n<ul>\n<li>这个时候建议使用版本控制工具，查看下最近改了哪些东西。</li>\n<li>C/C++没有运行时下标检查，是因为考虑到运行性能问题</li>\n<li>个人经验：开发环境中，最好用assert宏对下标进行检查，release时关闭宏就好了，这样既不影响性能又能第一时间发现错误，岂不是一举两得。</li>\n</ul>\n"},{"title":"使用VSCode调试JavaScript代码","date":"2019-05-07T16:00:00.000Z","_content":"\n### 说明\n---\n\n* 这里有现成的模块：https://github.com/dongtshj/debugJS\n* 想要执行、调试JavaScript代码，就需要JavaScript的解释器、调试器程序。这些都集成在了JavaScript引擎之中，而JavaScript引擎一般是集成在浏览器程序之中的，比如Google Chrome（V8引擎）、Mozilla Firefox（SpiderMonkey引擎）\n* 这里是使用VSCode的一款微软开发的名为Debugger for Chrome的插件来完成使用chrome调试JavaScript代码\n\n### 模板项目结构\n---\n\n```\n|---debugJS\n|   |---index.html\n|   |---main.js\n|   |---.vscode\n|   |   |---launch.json\n```\n\n* 要想浏览器执行你的代码，首先需要一个HTML文件，项目里使用的是index.html\n* 然后需要一个.js文件来存放JavaScript代码，项目里使用的是main.js\n* 最后再把.js文件嵌入到HTML文件当中就可以顺利调试、执行了\n* launch.json是用来配置启动参数的，内容如下：\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"chrome\",\n            \"request\": \"launch\",\n            \"name\": \"Launch Chrome\",\n            \"sourceMaps\": true,\n            \"file\": \"${workspaceFolder}/index.html\"\n        },\n    ]\n}\n```\n\n### Python和Lua\n---\n这两个就很简单了，没啥好说的，只要下载对应的VSCode插件就能运行、调试相应的代码了。\n\n\n","source":"_posts/使用VSCode调试JavaScript代码.md","raw":"---\ntitle: 使用VSCode调试JavaScript代码\ncategories: JavaScript\ndate: 2019-05-08\n---\n\n### 说明\n---\n\n* 这里有现成的模块：https://github.com/dongtshj/debugJS\n* 想要执行、调试JavaScript代码，就需要JavaScript的解释器、调试器程序。这些都集成在了JavaScript引擎之中，而JavaScript引擎一般是集成在浏览器程序之中的，比如Google Chrome（V8引擎）、Mozilla Firefox（SpiderMonkey引擎）\n* 这里是使用VSCode的一款微软开发的名为Debugger for Chrome的插件来完成使用chrome调试JavaScript代码\n\n### 模板项目结构\n---\n\n```\n|---debugJS\n|   |---index.html\n|   |---main.js\n|   |---.vscode\n|   |   |---launch.json\n```\n\n* 要想浏览器执行你的代码，首先需要一个HTML文件，项目里使用的是index.html\n* 然后需要一个.js文件来存放JavaScript代码，项目里使用的是main.js\n* 最后再把.js文件嵌入到HTML文件当中就可以顺利调试、执行了\n* launch.json是用来配置启动参数的，内容如下：\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"chrome\",\n            \"request\": \"launch\",\n            \"name\": \"Launch Chrome\",\n            \"sourceMaps\": true,\n            \"file\": \"${workspaceFolder}/index.html\"\n        },\n    ]\n}\n```\n\n### Python和Lua\n---\n这两个就很简单了，没啥好说的，只要下载对应的VSCode插件就能运行、调试相应的代码了。\n\n\n","slug":"使用VSCode调试JavaScript代码","published":1,"updated":"2019-05-10T08:34:08.187Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v5w000chcr7n52p7tz5","content":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><hr>\n<ul>\n<li>这里有现成的模块：<a href=\"https://github.com/dongtshj/debugJS\" target=\"_blank\" rel=\"noopener\">https://github.com/dongtshj/debugJS</a></li>\n<li>想要执行、调试JavaScript代码，就需要JavaScript的解释器、调试器程序。这些都集成在了JavaScript引擎之中，而JavaScript引擎一般是集成在浏览器程序之中的，比如Google Chrome（V8引擎）、Mozilla Firefox（SpiderMonkey引擎）</li>\n<li>这里是使用VSCode的一款微软开发的名为Debugger for Chrome的插件来完成使用chrome调试JavaScript代码</li>\n</ul>\n<h3 id=\"模板项目结构\"><a href=\"#模板项目结构\" class=\"headerlink\" title=\"模板项目结构\"></a>模板项目结构</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|---debugJS</span><br><span class=\"line\">|   |---index.html</span><br><span class=\"line\">|   |---main.js</span><br><span class=\"line\">|   |---.vscode</span><br><span class=\"line\">|   |   |---launch.json</span><br></pre></td></tr></table></figure>\n<ul>\n<li>要想浏览器执行你的代码，首先需要一个HTML文件，项目里使用的是index.html</li>\n<li>然后需要一个.js文件来存放JavaScript代码，项目里使用的是main.js</li>\n<li>最后再把.js文件嵌入到HTML文件当中就可以顺利调试、执行了</li>\n<li>launch.json是用来配置启动参数的，内容如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class=\"line\">    &quot;configurations&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;chrome&quot;,</span><br><span class=\"line\">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class=\"line\">            &quot;name&quot;: &quot;Launch Chrome&quot;,</span><br><span class=\"line\">            &quot;sourceMaps&quot;: true,</span><br><span class=\"line\">            &quot;file&quot;: &quot;$&#123;workspaceFolder&#125;/index.html&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Python和Lua\"><a href=\"#Python和Lua\" class=\"headerlink\" title=\"Python和Lua\"></a>Python和Lua</h3><hr>\n<p>这两个就很简单了，没啥好说的，只要下载对应的VSCode插件就能运行、调试相应的代码了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><hr>\n<ul>\n<li>这里有现成的模块：<a href=\"https://github.com/dongtshj/debugJS\" target=\"_blank\" rel=\"noopener\">https://github.com/dongtshj/debugJS</a></li>\n<li>想要执行、调试JavaScript代码，就需要JavaScript的解释器、调试器程序。这些都集成在了JavaScript引擎之中，而JavaScript引擎一般是集成在浏览器程序之中的，比如Google Chrome（V8引擎）、Mozilla Firefox（SpiderMonkey引擎）</li>\n<li>这里是使用VSCode的一款微软开发的名为Debugger for Chrome的插件来完成使用chrome调试JavaScript代码</li>\n</ul>\n<h3 id=\"模板项目结构\"><a href=\"#模板项目结构\" class=\"headerlink\" title=\"模板项目结构\"></a>模板项目结构</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|---debugJS</span><br><span class=\"line\">|   |---index.html</span><br><span class=\"line\">|   |---main.js</span><br><span class=\"line\">|   |---.vscode</span><br><span class=\"line\">|   |   |---launch.json</span><br></pre></td></tr></table></figure>\n<ul>\n<li>要想浏览器执行你的代码，首先需要一个HTML文件，项目里使用的是index.html</li>\n<li>然后需要一个.js文件来存放JavaScript代码，项目里使用的是main.js</li>\n<li>最后再把.js文件嵌入到HTML文件当中就可以顺利调试、执行了</li>\n<li>launch.json是用来配置启动参数的，内容如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class=\"line\">    &quot;configurations&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;chrome&quot;,</span><br><span class=\"line\">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class=\"line\">            &quot;name&quot;: &quot;Launch Chrome&quot;,</span><br><span class=\"line\">            &quot;sourceMaps&quot;: true,</span><br><span class=\"line\">            &quot;file&quot;: &quot;$&#123;workspaceFolder&#125;/index.html&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Python和Lua\"><a href=\"#Python和Lua\" class=\"headerlink\" title=\"Python和Lua\"></a>Python和Lua</h3><hr>\n<p>这两个就很简单了，没啥好说的，只要下载对应的VSCode插件就能运行、调试相应的代码了。</p>\n"},{"title":"值得收藏的网站","date":"2019-02-24T16:00:00.000Z","_content":"\n## 技术\n---\n* [OpenGL教程](https://learnopengl-cn.github.io)\n* [OpenGL教程](http://ogldev.atspace.co.uk/)\n* [OpenGL教程](http://www.opengl-tutorial.org/cn/)\n* [YouTube上的线性代数教程](https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab)\n* [C++参考手册](https://zh.cppreference.com)\n* [一个GCC编译器的web前端，可以进行C++在线编程](http://cpp.sh/)\n* [微软的C++文档](https://docs.microsoft.com/en-us/cpp/cpp/c-cpp-language-and-standard-libraries?view=vs-2017)\n* [C++用户指南](https://docs.oracle.com/cd/E19205-01/820-1214/index.html)\n* [Linux快速教程](https://linuxtools-rst.readthedocs.io)\n* [GDB教程](https://ftp.gnu.org/old-gnu/Manuals/gdb/html_node/gdb_toc.html)\n* [JavaScript教程](http://bonsaiden.github.io/JavaScript-Garden/zh/)\n* [阮一峰的JavaScript教程](http://javascript.ruanyifeng.com/)\n* [阮一峰的JavaScript ES6教程](http://es6.ruanyifeng.com/)\n* [Lua参考手册](https://cloudwu.github.io/lua53doc/contents.html#contents)\n* [Lua Unofficial FAQ](http://www.luafaq.org/)\n* [gitbook上的Lua教程](https://moonbingbing.gitbooks.io/openresty-best-practices/lua/main.html)\n* [看云上的Lua教程](https://www.kancloud.cn/thinkphp/lua-guide/43808)\n* [IBM中国的技术主题](https://www.ibm.com/developerworks/cn/topics)\n* [现代魔法学院](http://www.nowamagic.net/academy)\n* [游戏编程模式](https://gpp.tkchu.me)\n* [图说设计模式](https://design-patterns.readthedocs.io)\n* [软件架构模式](https://bboyfeiyu.gitbooks.io/software-architecture-patterns)\n* [markdown教程](http://www.markdown.cn/)\n* [git极简教程](http://rogerdudler.github.io/git-guide/index.zh.html)\n* [git教程书](https://git-scm.com/book/zh/)\n* [一位CS科学家关于hash的文章](http://www.partow.net/programming/hashfunctions/)\n* [2007年的一篇关于组件化游戏实体代替传统深度继承树的文章](http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/)\n* [一篇游戏优化的文章](https://www.gamasutra.com/view/feature/1879/the_top_10_myths_of_video_game_.php?print=1)\n* [五花八门的C代码](https://www.ioccc.org/)\n* [让算法呈现可视化的网站](https://visualgo.net/zh)\n* [python入门](http://www.pythondoc.com/pythontutorial3/)\n\n## 工具\n---\n* [在线压缩PDF文件](https://smallpdf.com/cn/compress-pdf)\n* [提供免费域名](https://www.freenom.com/)\n* [提供免费CDN服务](https://www.cloudflare.com/)\n* [测试的IP和端口的可用性](http://port.ping.pe/)\n* [测试节点速度](https://www.speedtest.net/zh-Hans)\n* [GLSL的在线编辑器](https://thebookofshaders.com/edit.php)\n* [wikiHow](https://zh.wikihow.com)\n* [SSH for Win32](http://linuxmafia.com/ssh/win32.html)\n* [免费接受验证码](https://smsreceivefree.com/)\n\n## 其他\n---\n* [中文MUD大全](https://mudchina.github.io/)\n* [SCP基金会](http://scp-wiki-cn.wikidot.com/)\n* [近视](http://myopiacure.blogspot.com/)\n\n## 大佬\n---\n* [云风的BLOG](https://blog.codingnow.com)\n* [叶劲峰](http://miloyip.com)\n\n## 神一般的人物\n---\n* [约翰·卡马克](https://zh.wikipedia.org/wiki/%E7%B4%84%E7%BF%B0%C2%B7%E5%8D%A1%E9%A6%AC%E5%85%8B)\n* [杰森·格雷戈里](https://www.gameenginebook.com/)\n* [余国荔](https://zh.wikipedia.org/wiki/%E4%BD%99%E5%9B%BD%E8%8D%94)","source":"_posts/值得收藏的网站.md","raw":"---\ntitle: 值得收藏的网站\ncategories: 推荐\ndate: 2019-02-25\n---\n\n## 技术\n---\n* [OpenGL教程](https://learnopengl-cn.github.io)\n* [OpenGL教程](http://ogldev.atspace.co.uk/)\n* [OpenGL教程](http://www.opengl-tutorial.org/cn/)\n* [YouTube上的线性代数教程](https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab)\n* [C++参考手册](https://zh.cppreference.com)\n* [一个GCC编译器的web前端，可以进行C++在线编程](http://cpp.sh/)\n* [微软的C++文档](https://docs.microsoft.com/en-us/cpp/cpp/c-cpp-language-and-standard-libraries?view=vs-2017)\n* [C++用户指南](https://docs.oracle.com/cd/E19205-01/820-1214/index.html)\n* [Linux快速教程](https://linuxtools-rst.readthedocs.io)\n* [GDB教程](https://ftp.gnu.org/old-gnu/Manuals/gdb/html_node/gdb_toc.html)\n* [JavaScript教程](http://bonsaiden.github.io/JavaScript-Garden/zh/)\n* [阮一峰的JavaScript教程](http://javascript.ruanyifeng.com/)\n* [阮一峰的JavaScript ES6教程](http://es6.ruanyifeng.com/)\n* [Lua参考手册](https://cloudwu.github.io/lua53doc/contents.html#contents)\n* [Lua Unofficial FAQ](http://www.luafaq.org/)\n* [gitbook上的Lua教程](https://moonbingbing.gitbooks.io/openresty-best-practices/lua/main.html)\n* [看云上的Lua教程](https://www.kancloud.cn/thinkphp/lua-guide/43808)\n* [IBM中国的技术主题](https://www.ibm.com/developerworks/cn/topics)\n* [现代魔法学院](http://www.nowamagic.net/academy)\n* [游戏编程模式](https://gpp.tkchu.me)\n* [图说设计模式](https://design-patterns.readthedocs.io)\n* [软件架构模式](https://bboyfeiyu.gitbooks.io/software-architecture-patterns)\n* [markdown教程](http://www.markdown.cn/)\n* [git极简教程](http://rogerdudler.github.io/git-guide/index.zh.html)\n* [git教程书](https://git-scm.com/book/zh/)\n* [一位CS科学家关于hash的文章](http://www.partow.net/programming/hashfunctions/)\n* [2007年的一篇关于组件化游戏实体代替传统深度继承树的文章](http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/)\n* [一篇游戏优化的文章](https://www.gamasutra.com/view/feature/1879/the_top_10_myths_of_video_game_.php?print=1)\n* [五花八门的C代码](https://www.ioccc.org/)\n* [让算法呈现可视化的网站](https://visualgo.net/zh)\n* [python入门](http://www.pythondoc.com/pythontutorial3/)\n\n## 工具\n---\n* [在线压缩PDF文件](https://smallpdf.com/cn/compress-pdf)\n* [提供免费域名](https://www.freenom.com/)\n* [提供免费CDN服务](https://www.cloudflare.com/)\n* [测试的IP和端口的可用性](http://port.ping.pe/)\n* [测试节点速度](https://www.speedtest.net/zh-Hans)\n* [GLSL的在线编辑器](https://thebookofshaders.com/edit.php)\n* [wikiHow](https://zh.wikihow.com)\n* [SSH for Win32](http://linuxmafia.com/ssh/win32.html)\n* [免费接受验证码](https://smsreceivefree.com/)\n\n## 其他\n---\n* [中文MUD大全](https://mudchina.github.io/)\n* [SCP基金会](http://scp-wiki-cn.wikidot.com/)\n* [近视](http://myopiacure.blogspot.com/)\n\n## 大佬\n---\n* [云风的BLOG](https://blog.codingnow.com)\n* [叶劲峰](http://miloyip.com)\n\n## 神一般的人物\n---\n* [约翰·卡马克](https://zh.wikipedia.org/wiki/%E7%B4%84%E7%BF%B0%C2%B7%E5%8D%A1%E9%A6%AC%E5%85%8B)\n* [杰森·格雷戈里](https://www.gameenginebook.com/)\n* [余国荔](https://zh.wikipedia.org/wiki/%E4%BD%99%E5%9B%BD%E8%8D%94)","slug":"值得收藏的网站","published":1,"updated":"2019-05-23T11:55:21.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v5x000dhcr7teu6tcm5","content":"<h2 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h2><hr>\n<ul>\n<li><a href=\"https://learnopengl-cn.github.io\" target=\"_blank\" rel=\"noopener\">OpenGL教程</a></li>\n<li><a href=\"http://ogldev.atspace.co.uk/\" target=\"_blank\" rel=\"noopener\">OpenGL教程</a></li>\n<li><a href=\"http://www.opengl-tutorial.org/cn/\" target=\"_blank\" rel=\"noopener\">OpenGL教程</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab\" target=\"_blank\" rel=\"noopener\">YouTube上的线性代数教程</a></li>\n<li><a href=\"https://zh.cppreference.com\" target=\"_blank\" rel=\"noopener\">C++参考手册</a></li>\n<li><a href=\"http://cpp.sh/\" target=\"_blank\" rel=\"noopener\">一个GCC编译器的web前端，可以进行C++在线编程</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/cpp/cpp/c-cpp-language-and-standard-libraries?view=vs-2017\" target=\"_blank\" rel=\"noopener\">微软的C++文档</a></li>\n<li><a href=\"https://docs.oracle.com/cd/E19205-01/820-1214/index.html\" target=\"_blank\" rel=\"noopener\">C++用户指南</a></li>\n<li><a href=\"https://linuxtools-rst.readthedocs.io\" target=\"_blank\" rel=\"noopener\">Linux快速教程</a></li>\n<li><a href=\"https://ftp.gnu.org/old-gnu/Manuals/gdb/html_node/gdb_toc.html\" target=\"_blank\" rel=\"noopener\">GDB教程</a></li>\n<li><a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/\" target=\"_blank\" rel=\"noopener\">JavaScript教程</a></li>\n<li><a href=\"http://javascript.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰的JavaScript教程</a></li>\n<li><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰的JavaScript ES6教程</a></li>\n<li><a href=\"https://cloudwu.github.io/lua53doc/contents.html#contents\" target=\"_blank\" rel=\"noopener\">Lua参考手册</a></li>\n<li><a href=\"http://www.luafaq.org/\" target=\"_blank\" rel=\"noopener\">Lua Unofficial FAQ</a></li>\n<li><a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/lua/main.html\" target=\"_blank\" rel=\"noopener\">gitbook上的Lua教程</a></li>\n<li><a href=\"https://www.kancloud.cn/thinkphp/lua-guide/43808\" target=\"_blank\" rel=\"noopener\">看云上的Lua教程</a></li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/topics\" target=\"_blank\" rel=\"noopener\">IBM中国的技术主题</a></li>\n<li><a href=\"http://www.nowamagic.net/academy\" target=\"_blank\" rel=\"noopener\">现代魔法学院</a></li>\n<li><a href=\"https://gpp.tkchu.me\" target=\"_blank\" rel=\"noopener\">游戏编程模式</a></li>\n<li><a href=\"https://design-patterns.readthedocs.io\" target=\"_blank\" rel=\"noopener\">图说设计模式</a></li>\n<li><a href=\"https://bboyfeiyu.gitbooks.io/software-architecture-patterns\" target=\"_blank\" rel=\"noopener\">软件架构模式</a></li>\n<li><a href=\"http://www.markdown.cn/\" target=\"_blank\" rel=\"noopener\">markdown教程</a></li>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\" rel=\"noopener\">git极简教程</a></li>\n<li><a href=\"https://git-scm.com/book/zh/\" target=\"_blank\" rel=\"noopener\">git教程书</a></li>\n<li><a href=\"http://www.partow.net/programming/hashfunctions/\" target=\"_blank\" rel=\"noopener\">一位CS科学家关于hash的文章</a></li>\n<li><a href=\"http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/\" target=\"_blank\" rel=\"noopener\">2007年的一篇关于组件化游戏实体代替传统深度继承树的文章</a></li>\n<li><a href=\"https://www.gamasutra.com/view/feature/1879/the_top_10_myths_of_video_game_.php?print=1\" target=\"_blank\" rel=\"noopener\">一篇游戏优化的文章</a></li>\n<li><a href=\"https://www.ioccc.org/\" target=\"_blank\" rel=\"noopener\">五花八门的C代码</a></li>\n<li><a href=\"https://visualgo.net/zh\" target=\"_blank\" rel=\"noopener\">让算法呈现可视化的网站</a></li>\n<li><a href=\"http://www.pythondoc.com/pythontutorial3/\" target=\"_blank\" rel=\"noopener\">python入门</a></li>\n</ul>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><hr>\n<ul>\n<li><a href=\"https://smallpdf.com/cn/compress-pdf\" target=\"_blank\" rel=\"noopener\">在线压缩PDF文件</a></li>\n<li><a href=\"https://www.freenom.com/\" target=\"_blank\" rel=\"noopener\">提供免费域名</a></li>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">提供免费CDN服务</a></li>\n<li><a href=\"http://port.ping.pe/\" target=\"_blank\" rel=\"noopener\">测试的IP和端口的可用性</a></li>\n<li><a href=\"https://www.speedtest.net/zh-Hans\" target=\"_blank\" rel=\"noopener\">测试节点速度</a></li>\n<li><a href=\"https://thebookofshaders.com/edit.php\" target=\"_blank\" rel=\"noopener\">GLSL的在线编辑器</a></li>\n<li><a href=\"https://zh.wikihow.com\" target=\"_blank\" rel=\"noopener\">wikiHow</a></li>\n<li><a href=\"http://linuxmafia.com/ssh/win32.html\" target=\"_blank\" rel=\"noopener\">SSH for Win32</a></li>\n<li><a href=\"https://smsreceivefree.com/\" target=\"_blank\" rel=\"noopener\">免费接受验证码</a></li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><hr>\n<ul>\n<li><a href=\"https://mudchina.github.io/\" target=\"_blank\" rel=\"noopener\">中文MUD大全</a></li>\n<li><a href=\"http://scp-wiki-cn.wikidot.com/\" target=\"_blank\" rel=\"noopener\">SCP基金会</a></li>\n<li><a href=\"http://myopiacure.blogspot.com/\" target=\"_blank\" rel=\"noopener\">近视</a></li>\n</ul>\n<h2 id=\"大佬\"><a href=\"#大佬\" class=\"headerlink\" title=\"大佬\"></a>大佬</h2><hr>\n<ul>\n<li><a href=\"https://blog.codingnow.com\" target=\"_blank\" rel=\"noopener\">云风的BLOG</a></li>\n<li><a href=\"http://miloyip.com\" target=\"_blank\" rel=\"noopener\">叶劲峰</a></li>\n</ul>\n<h2 id=\"神一般的人物\"><a href=\"#神一般的人物\" class=\"headerlink\" title=\"神一般的人物\"></a>神一般的人物</h2><hr>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E7%B4%84%E7%BF%B0%C2%B7%E5%8D%A1%E9%A6%AC%E5%85%8B\" target=\"_blank\" rel=\"noopener\">约翰·卡马克</a></li>\n<li><a href=\"https://www.gameenginebook.com/\" target=\"_blank\" rel=\"noopener\">杰森·格雷戈里</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E4%BD%99%E5%9B%BD%E8%8D%94\" target=\"_blank\" rel=\"noopener\">余国荔</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h2><hr>\n<ul>\n<li><a href=\"https://learnopengl-cn.github.io\" target=\"_blank\" rel=\"noopener\">OpenGL教程</a></li>\n<li><a href=\"http://ogldev.atspace.co.uk/\" target=\"_blank\" rel=\"noopener\">OpenGL教程</a></li>\n<li><a href=\"http://www.opengl-tutorial.org/cn/\" target=\"_blank\" rel=\"noopener\">OpenGL教程</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab\" target=\"_blank\" rel=\"noopener\">YouTube上的线性代数教程</a></li>\n<li><a href=\"https://zh.cppreference.com\" target=\"_blank\" rel=\"noopener\">C++参考手册</a></li>\n<li><a href=\"http://cpp.sh/\" target=\"_blank\" rel=\"noopener\">一个GCC编译器的web前端，可以进行C++在线编程</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/cpp/cpp/c-cpp-language-and-standard-libraries?view=vs-2017\" target=\"_blank\" rel=\"noopener\">微软的C++文档</a></li>\n<li><a href=\"https://docs.oracle.com/cd/E19205-01/820-1214/index.html\" target=\"_blank\" rel=\"noopener\">C++用户指南</a></li>\n<li><a href=\"https://linuxtools-rst.readthedocs.io\" target=\"_blank\" rel=\"noopener\">Linux快速教程</a></li>\n<li><a href=\"https://ftp.gnu.org/old-gnu/Manuals/gdb/html_node/gdb_toc.html\" target=\"_blank\" rel=\"noopener\">GDB教程</a></li>\n<li><a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/\" target=\"_blank\" rel=\"noopener\">JavaScript教程</a></li>\n<li><a href=\"http://javascript.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰的JavaScript教程</a></li>\n<li><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰的JavaScript ES6教程</a></li>\n<li><a href=\"https://cloudwu.github.io/lua53doc/contents.html#contents\" target=\"_blank\" rel=\"noopener\">Lua参考手册</a></li>\n<li><a href=\"http://www.luafaq.org/\" target=\"_blank\" rel=\"noopener\">Lua Unofficial FAQ</a></li>\n<li><a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/lua/main.html\" target=\"_blank\" rel=\"noopener\">gitbook上的Lua教程</a></li>\n<li><a href=\"https://www.kancloud.cn/thinkphp/lua-guide/43808\" target=\"_blank\" rel=\"noopener\">看云上的Lua教程</a></li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/topics\" target=\"_blank\" rel=\"noopener\">IBM中国的技术主题</a></li>\n<li><a href=\"http://www.nowamagic.net/academy\" target=\"_blank\" rel=\"noopener\">现代魔法学院</a></li>\n<li><a href=\"https://gpp.tkchu.me\" target=\"_blank\" rel=\"noopener\">游戏编程模式</a></li>\n<li><a href=\"https://design-patterns.readthedocs.io\" target=\"_blank\" rel=\"noopener\">图说设计模式</a></li>\n<li><a href=\"https://bboyfeiyu.gitbooks.io/software-architecture-patterns\" target=\"_blank\" rel=\"noopener\">软件架构模式</a></li>\n<li><a href=\"http://www.markdown.cn/\" target=\"_blank\" rel=\"noopener\">markdown教程</a></li>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\" rel=\"noopener\">git极简教程</a></li>\n<li><a href=\"https://git-scm.com/book/zh/\" target=\"_blank\" rel=\"noopener\">git教程书</a></li>\n<li><a href=\"http://www.partow.net/programming/hashfunctions/\" target=\"_blank\" rel=\"noopener\">一位CS科学家关于hash的文章</a></li>\n<li><a href=\"http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/\" target=\"_blank\" rel=\"noopener\">2007年的一篇关于组件化游戏实体代替传统深度继承树的文章</a></li>\n<li><a href=\"https://www.gamasutra.com/view/feature/1879/the_top_10_myths_of_video_game_.php?print=1\" target=\"_blank\" rel=\"noopener\">一篇游戏优化的文章</a></li>\n<li><a href=\"https://www.ioccc.org/\" target=\"_blank\" rel=\"noopener\">五花八门的C代码</a></li>\n<li><a href=\"https://visualgo.net/zh\" target=\"_blank\" rel=\"noopener\">让算法呈现可视化的网站</a></li>\n<li><a href=\"http://www.pythondoc.com/pythontutorial3/\" target=\"_blank\" rel=\"noopener\">python入门</a></li>\n</ul>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><hr>\n<ul>\n<li><a href=\"https://smallpdf.com/cn/compress-pdf\" target=\"_blank\" rel=\"noopener\">在线压缩PDF文件</a></li>\n<li><a href=\"https://www.freenom.com/\" target=\"_blank\" rel=\"noopener\">提供免费域名</a></li>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">提供免费CDN服务</a></li>\n<li><a href=\"http://port.ping.pe/\" target=\"_blank\" rel=\"noopener\">测试的IP和端口的可用性</a></li>\n<li><a href=\"https://www.speedtest.net/zh-Hans\" target=\"_blank\" rel=\"noopener\">测试节点速度</a></li>\n<li><a href=\"https://thebookofshaders.com/edit.php\" target=\"_blank\" rel=\"noopener\">GLSL的在线编辑器</a></li>\n<li><a href=\"https://zh.wikihow.com\" target=\"_blank\" rel=\"noopener\">wikiHow</a></li>\n<li><a href=\"http://linuxmafia.com/ssh/win32.html\" target=\"_blank\" rel=\"noopener\">SSH for Win32</a></li>\n<li><a href=\"https://smsreceivefree.com/\" target=\"_blank\" rel=\"noopener\">免费接受验证码</a></li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><hr>\n<ul>\n<li><a href=\"https://mudchina.github.io/\" target=\"_blank\" rel=\"noopener\">中文MUD大全</a></li>\n<li><a href=\"http://scp-wiki-cn.wikidot.com/\" target=\"_blank\" rel=\"noopener\">SCP基金会</a></li>\n<li><a href=\"http://myopiacure.blogspot.com/\" target=\"_blank\" rel=\"noopener\">近视</a></li>\n</ul>\n<h2 id=\"大佬\"><a href=\"#大佬\" class=\"headerlink\" title=\"大佬\"></a>大佬</h2><hr>\n<ul>\n<li><a href=\"https://blog.codingnow.com\" target=\"_blank\" rel=\"noopener\">云风的BLOG</a></li>\n<li><a href=\"http://miloyip.com\" target=\"_blank\" rel=\"noopener\">叶劲峰</a></li>\n</ul>\n<h2 id=\"神一般的人物\"><a href=\"#神一般的人物\" class=\"headerlink\" title=\"神一般的人物\"></a>神一般的人物</h2><hr>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E7%B4%84%E7%BF%B0%C2%B7%E5%8D%A1%E9%A6%AC%E5%85%8B\" target=\"_blank\" rel=\"noopener\">约翰·卡马克</a></li>\n<li><a href=\"https://www.gameenginebook.com/\" target=\"_blank\" rel=\"noopener\">杰森·格雷戈里</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E4%BD%99%E5%9B%BD%E8%8D%94\" target=\"_blank\" rel=\"noopener\">余国荔</a></li>\n</ul>\n"},{"title":"图形用户界面 VS 命令行界面","date":"2019-03-09T16:00:00.000Z","_content":"\n### 命令行界面（command-line interface，缩写CLI）\n---\n计算机早期时代，在图形用户界面（GUI）得到普及之前，CLI使用相当广泛。也有人叫做CUI（character user interface），字符用户界面。\n说实话，刚开始接触命令行界面时，我真的是很讨厌这种交互方式。试想下，要想使用这种方式操作电脑的话，对你的要求有哪些呢？\n* 最基本的，你要有一定的英文基础吧，光这一点就要刷掉不少潜在的用户了。毕竟这CLI的命令都是英文单词或者缩写组成的，而不是拼音或者中文汉字。\n* 打字的速度和准确度要有，光是记住还不行，你还要输入正确的英文单词形式的命令，即便是少一个字母都不行。想想看多难受。\n* 这种交互方式，对于用户来说可以有无数种输入组合，相比图形界面作为输入方式的一连串按钮来说，出错的可能性简直不要太高。但是换作按钮的话，就那几个按钮。输入的可能性都给你限制死了，你还能折腾出什么错误呢。\n* 另外就是键入英文命令可能会出错的问题，如果换作按钮的话，点错的概率是不是直接下降好几个数量级\n\n难怪普通用户都对这种交互方式敬而远之，通常会觉得只有电影里厉害的黑客才会使用它\n\n### 图形用户界面（Graphical User Interface，缩写GUI）\n---\n我一开始能被计算机所吸引，绝对是因为计算机显示出的绚丽多彩、五颜六色的显示屏所吸引的。太好玩了，电视机虽然也有好看的屏幕。但是和计算机相比，它的显示太死板了，都是预先设定好的，人很难从外界干预或者说和它进行交互。但是计算机就不一样了，动动鼠标，敲打键盘，计算机的显示会立刻做出相应的变化。\n\n倘若用计算机来进行游戏的话，那画面感更容易令人着迷。现在人们常说的用户体验，我想也是针对GUI来说的，软件界面的颜色搭配，按钮布局，动画效果。这些细节都能体现出“体验”二字。\n\n### CLI VS GUI\n---\n难道说CLI真的就一点用处都没有吗？\n当然不是，事实就是在某些应用场合下，CLI有着不可替代的作用！\n* 比如，现在要你去操作一台远程服务器时，我想大多数人立刻想到的就是使用CLI，这就十分方面顺手。而不是来个远程桌面连接，这显的太麻烦了。或者你也可以打个飞的，跑到服务器面前给他接个显示器来用。\n* 相比花里胡哨的图形界面，CLI可以节省更多的计算资源，想想现在还很常见几百兆内存的没有显示设备的Linux服务器配置，但是上哪去找几百兆的Windows设备去？\n* 自动化的能力，在CLI环境下使用脚本可以很容易执行一些自动化的流程，甚至在Windows上也会有人经常使用批处理来处理重复性但又容易出错的工作。这样是换成GUI的话，还要使用类似按键精灵之类的软件来录制一些操作，就显得十分笨拙！\n\n\n### 世界上没有绝对的好，也没有绝对的坏。\n---\n就像CLI不支持鼠标这一特性，似乎显的很遗憾，因为鼠标确确实实能够提供丰富的输入操作，而CLI竟然不支持！\n\n但是换一个角度来看，恰恰是因为它不支持鼠标这一特性，才能够使它在远程操作一台计算机时避免了不必要的麻烦和繁琐的点击操作，可以让用户的双手始终专注于键盘之上！才让CLI有了施展威力的机会。\n\n想想看，弱点在某些环境下竟然又成为了优势！\n\n","source":"_posts/图形用户界面 VS 命令行界面.md","raw":"---\ntitle: 图形用户界面 VS 命令行界面\ncategories: 在类比中学习\ndate: 2019-03-10\n---\n\n### 命令行界面（command-line interface，缩写CLI）\n---\n计算机早期时代，在图形用户界面（GUI）得到普及之前，CLI使用相当广泛。也有人叫做CUI（character user interface），字符用户界面。\n说实话，刚开始接触命令行界面时，我真的是很讨厌这种交互方式。试想下，要想使用这种方式操作电脑的话，对你的要求有哪些呢？\n* 最基本的，你要有一定的英文基础吧，光这一点就要刷掉不少潜在的用户了。毕竟这CLI的命令都是英文单词或者缩写组成的，而不是拼音或者中文汉字。\n* 打字的速度和准确度要有，光是记住还不行，你还要输入正确的英文单词形式的命令，即便是少一个字母都不行。想想看多难受。\n* 这种交互方式，对于用户来说可以有无数种输入组合，相比图形界面作为输入方式的一连串按钮来说，出错的可能性简直不要太高。但是换作按钮的话，就那几个按钮。输入的可能性都给你限制死了，你还能折腾出什么错误呢。\n* 另外就是键入英文命令可能会出错的问题，如果换作按钮的话，点错的概率是不是直接下降好几个数量级\n\n难怪普通用户都对这种交互方式敬而远之，通常会觉得只有电影里厉害的黑客才会使用它\n\n### 图形用户界面（Graphical User Interface，缩写GUI）\n---\n我一开始能被计算机所吸引，绝对是因为计算机显示出的绚丽多彩、五颜六色的显示屏所吸引的。太好玩了，电视机虽然也有好看的屏幕。但是和计算机相比，它的显示太死板了，都是预先设定好的，人很难从外界干预或者说和它进行交互。但是计算机就不一样了，动动鼠标，敲打键盘，计算机的显示会立刻做出相应的变化。\n\n倘若用计算机来进行游戏的话，那画面感更容易令人着迷。现在人们常说的用户体验，我想也是针对GUI来说的，软件界面的颜色搭配，按钮布局，动画效果。这些细节都能体现出“体验”二字。\n\n### CLI VS GUI\n---\n难道说CLI真的就一点用处都没有吗？\n当然不是，事实就是在某些应用场合下，CLI有着不可替代的作用！\n* 比如，现在要你去操作一台远程服务器时，我想大多数人立刻想到的就是使用CLI，这就十分方面顺手。而不是来个远程桌面连接，这显的太麻烦了。或者你也可以打个飞的，跑到服务器面前给他接个显示器来用。\n* 相比花里胡哨的图形界面，CLI可以节省更多的计算资源，想想现在还很常见几百兆内存的没有显示设备的Linux服务器配置，但是上哪去找几百兆的Windows设备去？\n* 自动化的能力，在CLI环境下使用脚本可以很容易执行一些自动化的流程，甚至在Windows上也会有人经常使用批处理来处理重复性但又容易出错的工作。这样是换成GUI的话，还要使用类似按键精灵之类的软件来录制一些操作，就显得十分笨拙！\n\n\n### 世界上没有绝对的好，也没有绝对的坏。\n---\n就像CLI不支持鼠标这一特性，似乎显的很遗憾，因为鼠标确确实实能够提供丰富的输入操作，而CLI竟然不支持！\n\n但是换一个角度来看，恰恰是因为它不支持鼠标这一特性，才能够使它在远程操作一台计算机时避免了不必要的麻烦和繁琐的点击操作，可以让用户的双手始终专注于键盘之上！才让CLI有了施展威力的机会。\n\n想想看，弱点在某些环境下竟然又成为了优势！\n\n","slug":"图形用户界面 VS 命令行界面","published":1,"updated":"2019-05-10T06:30:10.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v5z000ghcr7qmh916g1","content":"<h3 id=\"命令行界面（command-line-interface，缩写CLI）\"><a href=\"#命令行界面（command-line-interface，缩写CLI）\" class=\"headerlink\" title=\"命令行界面（command-line interface，缩写CLI）\"></a>命令行界面（command-line interface，缩写CLI）</h3><hr>\n<p>计算机早期时代，在图形用户界面（GUI）得到普及之前，CLI使用相当广泛。也有人叫做CUI（character user interface），字符用户界面。<br>说实话，刚开始接触命令行界面时，我真的是很讨厌这种交互方式。试想下，要想使用这种方式操作电脑的话，对你的要求有哪些呢？</p>\n<ul>\n<li>最基本的，你要有一定的英文基础吧，光这一点就要刷掉不少潜在的用户了。毕竟这CLI的命令都是英文单词或者缩写组成的，而不是拼音或者中文汉字。</li>\n<li>打字的速度和准确度要有，光是记住还不行，你还要输入正确的英文单词形式的命令，即便是少一个字母都不行。想想看多难受。</li>\n<li>这种交互方式，对于用户来说可以有无数种输入组合，相比图形界面作为输入方式的一连串按钮来说，出错的可能性简直不要太高。但是换作按钮的话，就那几个按钮。输入的可能性都给你限制死了，你还能折腾出什么错误呢。</li>\n<li>另外就是键入英文命令可能会出错的问题，如果换作按钮的话，点错的概率是不是直接下降好几个数量级</li>\n</ul>\n<p>难怪普通用户都对这种交互方式敬而远之，通常会觉得只有电影里厉害的黑客才会使用它</p>\n<h3 id=\"图形用户界面（Graphical-User-Interface，缩写GUI）\"><a href=\"#图形用户界面（Graphical-User-Interface，缩写GUI）\" class=\"headerlink\" title=\"图形用户界面（Graphical User Interface，缩写GUI）\"></a>图形用户界面（Graphical User Interface，缩写GUI）</h3><hr>\n<p>我一开始能被计算机所吸引，绝对是因为计算机显示出的绚丽多彩、五颜六色的显示屏所吸引的。太好玩了，电视机虽然也有好看的屏幕。但是和计算机相比，它的显示太死板了，都是预先设定好的，人很难从外界干预或者说和它进行交互。但是计算机就不一样了，动动鼠标，敲打键盘，计算机的显示会立刻做出相应的变化。</p>\n<p>倘若用计算机来进行游戏的话，那画面感更容易令人着迷。现在人们常说的用户体验，我想也是针对GUI来说的，软件界面的颜色搭配，按钮布局，动画效果。这些细节都能体现出“体验”二字。</p>\n<h3 id=\"CLI-VS-GUI\"><a href=\"#CLI-VS-GUI\" class=\"headerlink\" title=\"CLI VS GUI\"></a>CLI VS GUI</h3><hr>\n<p>难道说CLI真的就一点用处都没有吗？<br>当然不是，事实就是在某些应用场合下，CLI有着不可替代的作用！</p>\n<ul>\n<li>比如，现在要你去操作一台远程服务器时，我想大多数人立刻想到的就是使用CLI，这就十分方面顺手。而不是来个远程桌面连接，这显的太麻烦了。或者你也可以打个飞的，跑到服务器面前给他接个显示器来用。</li>\n<li>相比花里胡哨的图形界面，CLI可以节省更多的计算资源，想想现在还很常见几百兆内存的没有显示设备的Linux服务器配置，但是上哪去找几百兆的Windows设备去？</li>\n<li>自动化的能力，在CLI环境下使用脚本可以很容易执行一些自动化的流程，甚至在Windows上也会有人经常使用批处理来处理重复性但又容易出错的工作。这样是换成GUI的话，还要使用类似按键精灵之类的软件来录制一些操作，就显得十分笨拙！</li>\n</ul>\n<h3 id=\"世界上没有绝对的好，也没有绝对的坏。\"><a href=\"#世界上没有绝对的好，也没有绝对的坏。\" class=\"headerlink\" title=\"世界上没有绝对的好，也没有绝对的坏。\"></a>世界上没有绝对的好，也没有绝对的坏。</h3><hr>\n<p>就像CLI不支持鼠标这一特性，似乎显的很遗憾，因为鼠标确确实实能够提供丰富的输入操作，而CLI竟然不支持！</p>\n<p>但是换一个角度来看，恰恰是因为它不支持鼠标这一特性，才能够使它在远程操作一台计算机时避免了不必要的麻烦和繁琐的点击操作，可以让用户的双手始终专注于键盘之上！才让CLI有了施展威力的机会。</p>\n<p>想想看，弱点在某些环境下竟然又成为了优势！</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"命令行界面（command-line-interface，缩写CLI）\"><a href=\"#命令行界面（command-line-interface，缩写CLI）\" class=\"headerlink\" title=\"命令行界面（command-line interface，缩写CLI）\"></a>命令行界面（command-line interface，缩写CLI）</h3><hr>\n<p>计算机早期时代，在图形用户界面（GUI）得到普及之前，CLI使用相当广泛。也有人叫做CUI（character user interface），字符用户界面。<br>说实话，刚开始接触命令行界面时，我真的是很讨厌这种交互方式。试想下，要想使用这种方式操作电脑的话，对你的要求有哪些呢？</p>\n<ul>\n<li>最基本的，你要有一定的英文基础吧，光这一点就要刷掉不少潜在的用户了。毕竟这CLI的命令都是英文单词或者缩写组成的，而不是拼音或者中文汉字。</li>\n<li>打字的速度和准确度要有，光是记住还不行，你还要输入正确的英文单词形式的命令，即便是少一个字母都不行。想想看多难受。</li>\n<li>这种交互方式，对于用户来说可以有无数种输入组合，相比图形界面作为输入方式的一连串按钮来说，出错的可能性简直不要太高。但是换作按钮的话，就那几个按钮。输入的可能性都给你限制死了，你还能折腾出什么错误呢。</li>\n<li>另外就是键入英文命令可能会出错的问题，如果换作按钮的话，点错的概率是不是直接下降好几个数量级</li>\n</ul>\n<p>难怪普通用户都对这种交互方式敬而远之，通常会觉得只有电影里厉害的黑客才会使用它</p>\n<h3 id=\"图形用户界面（Graphical-User-Interface，缩写GUI）\"><a href=\"#图形用户界面（Graphical-User-Interface，缩写GUI）\" class=\"headerlink\" title=\"图形用户界面（Graphical User Interface，缩写GUI）\"></a>图形用户界面（Graphical User Interface，缩写GUI）</h3><hr>\n<p>我一开始能被计算机所吸引，绝对是因为计算机显示出的绚丽多彩、五颜六色的显示屏所吸引的。太好玩了，电视机虽然也有好看的屏幕。但是和计算机相比，它的显示太死板了，都是预先设定好的，人很难从外界干预或者说和它进行交互。但是计算机就不一样了，动动鼠标，敲打键盘，计算机的显示会立刻做出相应的变化。</p>\n<p>倘若用计算机来进行游戏的话，那画面感更容易令人着迷。现在人们常说的用户体验，我想也是针对GUI来说的，软件界面的颜色搭配，按钮布局，动画效果。这些细节都能体现出“体验”二字。</p>\n<h3 id=\"CLI-VS-GUI\"><a href=\"#CLI-VS-GUI\" class=\"headerlink\" title=\"CLI VS GUI\"></a>CLI VS GUI</h3><hr>\n<p>难道说CLI真的就一点用处都没有吗？<br>当然不是，事实就是在某些应用场合下，CLI有着不可替代的作用！</p>\n<ul>\n<li>比如，现在要你去操作一台远程服务器时，我想大多数人立刻想到的就是使用CLI，这就十分方面顺手。而不是来个远程桌面连接，这显的太麻烦了。或者你也可以打个飞的，跑到服务器面前给他接个显示器来用。</li>\n<li>相比花里胡哨的图形界面，CLI可以节省更多的计算资源，想想现在还很常见几百兆内存的没有显示设备的Linux服务器配置，但是上哪去找几百兆的Windows设备去？</li>\n<li>自动化的能力，在CLI环境下使用脚本可以很容易执行一些自动化的流程，甚至在Windows上也会有人经常使用批处理来处理重复性但又容易出错的工作。这样是换成GUI的话，还要使用类似按键精灵之类的软件来录制一些操作，就显得十分笨拙！</li>\n</ul>\n<h3 id=\"世界上没有绝对的好，也没有绝对的坏。\"><a href=\"#世界上没有绝对的好，也没有绝对的坏。\" class=\"headerlink\" title=\"世界上没有绝对的好，也没有绝对的坏。\"></a>世界上没有绝对的好，也没有绝对的坏。</h3><hr>\n<p>就像CLI不支持鼠标这一特性，似乎显的很遗憾，因为鼠标确确实实能够提供丰富的输入操作，而CLI竟然不支持！</p>\n<p>但是换一个角度来看，恰恰是因为它不支持鼠标这一特性，才能够使它在远程操作一台计算机时避免了不必要的麻烦和繁琐的点击操作，可以让用户的双手始终专注于键盘之上！才让CLI有了施展威力的机会。</p>\n<p>想想看，弱点在某些环境下竟然又成为了优势！</p>\n"},{"title":"在Visual Studio中搜索文件名","date":"2019-06-23T16:00:00.000Z","_content":"\n在VS Code中执行这个操作是用快捷键 `Ctrl + P` 来完成\n\n后来觉得VS Code这个功能确实好用，尤其使用脚本语言开发时，智能跳转好像不太好使。就想宇宙第一的Visual Studio肯定有类似功能吧。\n\n答案是：`Ctrl + ,`\n\n其它Visual Studio的相关搜索快捷键：\n* 全局搜索 `Ctrl + Shift + F`\n* 单个文件内搜索 `Ctrl + F`\n* 跳转到下一个搜索结果：`F3`，上一个：`Shift + F3`","source":"_posts/在Visual Studio中搜索文件名.md","raw":"---\ntitle: 在Visual Studio中搜索文件名\ncategories: Visual Studio\ndate: 2019-06-24\n---\n\n在VS Code中执行这个操作是用快捷键 `Ctrl + P` 来完成\n\n后来觉得VS Code这个功能确实好用，尤其使用脚本语言开发时，智能跳转好像不太好使。就想宇宙第一的Visual Studio肯定有类似功能吧。\n\n答案是：`Ctrl + ,`\n\n其它Visual Studio的相关搜索快捷键：\n* 全局搜索 `Ctrl + Shift + F`\n* 单个文件内搜索 `Ctrl + F`\n* 跳转到下一个搜索结果：`F3`，上一个：`Shift + F3`","slug":"在Visual Studio中搜索文件名","published":1,"updated":"2019-06-24T13:08:16.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v60000ihcr76v6vewqr","content":"<p>在VS Code中执行这个操作是用快捷键 <code>Ctrl + P</code> 来完成</p>\n<p>后来觉得VS Code这个功能确实好用，尤其使用脚本语言开发时，智能跳转好像不太好使。就想宇宙第一的Visual Studio肯定有类似功能吧。</p>\n<p>答案是：<code>Ctrl + ,</code></p>\n<p>其它Visual Studio的相关搜索快捷键：</p>\n<ul>\n<li>全局搜索 <code>Ctrl + Shift + F</code></li>\n<li>单个文件内搜索 <code>Ctrl + F</code></li>\n<li>跳转到下一个搜索结果：<code>F3</code>，上一个：<code>Shift + F3</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>在VS Code中执行这个操作是用快捷键 <code>Ctrl + P</code> 来完成</p>\n<p>后来觉得VS Code这个功能确实好用，尤其使用脚本语言开发时，智能跳转好像不太好使。就想宇宙第一的Visual Studio肯定有类似功能吧。</p>\n<p>答案是：<code>Ctrl + ,</code></p>\n<p>其它Visual Studio的相关搜索快捷键：</p>\n<ul>\n<li>全局搜索 <code>Ctrl + Shift + F</code></li>\n<li>单个文件内搜索 <code>Ctrl + F</code></li>\n<li>跳转到下一个搜索结果：<code>F3</code>，上一个：<code>Shift + F3</code></li>\n</ul>\n"},{"title":"编程语言的分类","date":"2019-05-12T16:00:00.000Z","_content":"\n* 本来打算写的，网上搜到一个2015就已经存在的[文章了](https://www.liuchuo.net/archives/130)。\n* [知乎上的](https://www.zhihu.com/question/19918532)\n* [英文文章](https://www.coursehero.com/file/p5m8e1h/Definition-Trapped-and-Untrapped-Errors-Trapped-errors-make-a-program-halt/)\n","source":"_posts/编程语言的分类.md","raw":"---\ntitle: 编程语言的分类\ncategories: 软件工程\ndate: 2019-05-13\n---\n\n* 本来打算写的，网上搜到一个2015就已经存在的[文章了](https://www.liuchuo.net/archives/130)。\n* [知乎上的](https://www.zhihu.com/question/19918532)\n* [英文文章](https://www.coursehero.com/file/p5m8e1h/Definition-Trapped-and-Untrapped-Errors-Trapped-errors-make-a-program-halt/)\n","slug":"编程语言的分类","published":1,"updated":"2019-05-13T10:02:55.718Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v61000lhcr7vdp1b3i5","content":"<ul>\n<li>本来打算写的，网上搜到一个2015就已经存在的<a href=\"https://www.liuchuo.net/archives/130\" target=\"_blank\" rel=\"noopener\">文章了</a>。</li>\n<li><a href=\"https://www.zhihu.com/question/19918532\" target=\"_blank\" rel=\"noopener\">知乎上的</a></li>\n<li><a href=\"https://www.coursehero.com/file/p5m8e1h/Definition-Trapped-and-Untrapped-Errors-Trapped-errors-make-a-program-halt/\" target=\"_blank\" rel=\"noopener\">英文文章</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>本来打算写的，网上搜到一个2015就已经存在的<a href=\"https://www.liuchuo.net/archives/130\" target=\"_blank\" rel=\"noopener\">文章了</a>。</li>\n<li><a href=\"https://www.zhihu.com/question/19918532\" target=\"_blank\" rel=\"noopener\">知乎上的</a></li>\n<li><a href=\"https://www.coursehero.com/file/p5m8e1h/Definition-Trapped-and-Untrapped-Errors-Trapped-errors-make-a-program-halt/\" target=\"_blank\" rel=\"noopener\">英文文章</a></li>\n</ul>\n"},{"title":"解决SVN树冲突","date":"2019-05-09T16:00:00.000Z","_content":"\n### 介绍\n---\n\n原文在这里:[SVN 树冲突解决详解](https://blog.csdn.net/xgf415/article/details/75196714)，我只是个搬运工。\n\nSVN的冲突有两种类型：\n* 内容冲突：当两名(或更多)开发人员修改了同一个文件中相邻或相同的行时就会发生文件冲突。\n* 当一名开发人员移动、重命名、删除一个文件或文件夹，而另一名开发人员也对它们进行了移动、重命名、删除或者仅仅是修改，在更新时就会发生树冲突。\n\n第一种很常见，但解决起来比较容易（一周几次的样字）。第二种不怎么常见（个把月碰到一次）\n\n### 树冲突类型和解决方法\n---\n\n#### 本地删除，外部更改\n* A（外部）修改文件并将其提交至版本库中\n* B（本地）同时删除了文件\n\nB更新时就会发生树冲突，该文件被标记为冲突。\n\n---\n#### 本地改名，外部更改\n* A（外部）修改文件，并将其提交至版本库中\n* B（本地）同时将文件改名\n\nB更新时，该文件被标记为树冲突。\n\n---\n#### 本地更改，外部删除\n* A（外部）删除了文件，并提交到了版本库\n* B（本地）同时对该文件进行了修改\n\nB更新时，该文件被标记为树冲突。\n\n---\n#### 本地更改，外部改名\n* A（外部）将文件改名，并提交到了版本库\n* B（本地）修改了文件内容\n\nB更新时，该文件被标记为树冲突。\n\n---\n#### 本地删除，外部改名\n* A（外部）将文件改名，然后提交到版本库\n* B（本地）将文件删除\n\nB更新时，该文件被标记为树冲突。\n\n---\n#### 本地改名，外部删除\n* A（外部）将文件删除，然后提交到版本库\n* B（本地）将文件改名\n\n更新时，B的该文件将发生树冲突。\n\n---\n####  本地改名，外部改名\n* （外部）将文件改名，并提交到版本库；\n* （本地）将同文件改名。\n\n更新时，B的该文件将发生树冲突。\n\n\n\n\n\n\n\n\n","source":"_posts/解决SVN树冲突.md","raw":"---\ntitle: 解决SVN树冲突\ncategories: 版本控制\ndate: 2019-05-10\n---\n\n### 介绍\n---\n\n原文在这里:[SVN 树冲突解决详解](https://blog.csdn.net/xgf415/article/details/75196714)，我只是个搬运工。\n\nSVN的冲突有两种类型：\n* 内容冲突：当两名(或更多)开发人员修改了同一个文件中相邻或相同的行时就会发生文件冲突。\n* 当一名开发人员移动、重命名、删除一个文件或文件夹，而另一名开发人员也对它们进行了移动、重命名、删除或者仅仅是修改，在更新时就会发生树冲突。\n\n第一种很常见，但解决起来比较容易（一周几次的样字）。第二种不怎么常见（个把月碰到一次）\n\n### 树冲突类型和解决方法\n---\n\n#### 本地删除，外部更改\n* A（外部）修改文件并将其提交至版本库中\n* B（本地）同时删除了文件\n\nB更新时就会发生树冲突，该文件被标记为冲突。\n\n---\n#### 本地改名，外部更改\n* A（外部）修改文件，并将其提交至版本库中\n* B（本地）同时将文件改名\n\nB更新时，该文件被标记为树冲突。\n\n---\n#### 本地更改，外部删除\n* A（外部）删除了文件，并提交到了版本库\n* B（本地）同时对该文件进行了修改\n\nB更新时，该文件被标记为树冲突。\n\n---\n#### 本地更改，外部改名\n* A（外部）将文件改名，并提交到了版本库\n* B（本地）修改了文件内容\n\nB更新时，该文件被标记为树冲突。\n\n---\n#### 本地删除，外部改名\n* A（外部）将文件改名，然后提交到版本库\n* B（本地）将文件删除\n\nB更新时，该文件被标记为树冲突。\n\n---\n#### 本地改名，外部删除\n* A（外部）将文件删除，然后提交到版本库\n* B（本地）将文件改名\n\n更新时，B的该文件将发生树冲突。\n\n---\n####  本地改名，外部改名\n* （外部）将文件改名，并提交到版本库；\n* （本地）将同文件改名。\n\n更新时，B的该文件将发生树冲突。\n\n\n\n\n\n\n\n\n","slug":"解决SVN树冲突","published":1,"updated":"2019-05-10T08:56:41.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v63000mhcr7cb9rnfk9","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><hr>\n<p>原文在这里:<a href=\"https://blog.csdn.net/xgf415/article/details/75196714\" target=\"_blank\" rel=\"noopener\">SVN 树冲突解决详解</a>，我只是个搬运工。</p>\n<p>SVN的冲突有两种类型：</p>\n<ul>\n<li>内容冲突：当两名(或更多)开发人员修改了同一个文件中相邻或相同的行时就会发生文件冲突。</li>\n<li>当一名开发人员移动、重命名、删除一个文件或文件夹，而另一名开发人员也对它们进行了移动、重命名、删除或者仅仅是修改，在更新时就会发生树冲突。</li>\n</ul>\n<p>第一种很常见，但解决起来比较容易（一周几次的样字）。第二种不怎么常见（个把月碰到一次）</p>\n<h3 id=\"树冲突类型和解决方法\"><a href=\"#树冲突类型和解决方法\" class=\"headerlink\" title=\"树冲突类型和解决方法\"></a>树冲突类型和解决方法</h3><hr>\n<h4 id=\"本地删除，外部更改\"><a href=\"#本地删除，外部更改\" class=\"headerlink\" title=\"本地删除，外部更改\"></a>本地删除，外部更改</h4><ul>\n<li>A（外部）修改文件并将其提交至版本库中</li>\n<li>B（本地）同时删除了文件</li>\n</ul>\n<p>B更新时就会发生树冲突，该文件被标记为冲突。</p>\n<hr>\n<h4 id=\"本地改名，外部更改\"><a href=\"#本地改名，外部更改\" class=\"headerlink\" title=\"本地改名，外部更改\"></a>本地改名，外部更改</h4><ul>\n<li>A（外部）修改文件，并将其提交至版本库中</li>\n<li>B（本地）同时将文件改名</li>\n</ul>\n<p>B更新时，该文件被标记为树冲突。</p>\n<hr>\n<h4 id=\"本地更改，外部删除\"><a href=\"#本地更改，外部删除\" class=\"headerlink\" title=\"本地更改，外部删除\"></a>本地更改，外部删除</h4><ul>\n<li>A（外部）删除了文件，并提交到了版本库</li>\n<li>B（本地）同时对该文件进行了修改</li>\n</ul>\n<p>B更新时，该文件被标记为树冲突。</p>\n<hr>\n<h4 id=\"本地更改，外部改名\"><a href=\"#本地更改，外部改名\" class=\"headerlink\" title=\"本地更改，外部改名\"></a>本地更改，外部改名</h4><ul>\n<li>A（外部）将文件改名，并提交到了版本库</li>\n<li>B（本地）修改了文件内容</li>\n</ul>\n<p>B更新时，该文件被标记为树冲突。</p>\n<hr>\n<h4 id=\"本地删除，外部改名\"><a href=\"#本地删除，外部改名\" class=\"headerlink\" title=\"本地删除，外部改名\"></a>本地删除，外部改名</h4><ul>\n<li>A（外部）将文件改名，然后提交到版本库</li>\n<li>B（本地）将文件删除</li>\n</ul>\n<p>B更新时，该文件被标记为树冲突。</p>\n<hr>\n<h4 id=\"本地改名，外部删除\"><a href=\"#本地改名，外部删除\" class=\"headerlink\" title=\"本地改名，外部删除\"></a>本地改名，外部删除</h4><ul>\n<li>A（外部）将文件删除，然后提交到版本库</li>\n<li>B（本地）将文件改名</li>\n</ul>\n<p>更新时，B的该文件将发生树冲突。</p>\n<hr>\n<h4 id=\"本地改名，外部改名\"><a href=\"#本地改名，外部改名\" class=\"headerlink\" title=\"本地改名，外部改名\"></a>本地改名，外部改名</h4><ul>\n<li>（外部）将文件改名，并提交到版本库；</li>\n<li>（本地）将同文件改名。</li>\n</ul>\n<p>更新时，B的该文件将发生树冲突。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><hr>\n<p>原文在这里:<a href=\"https://blog.csdn.net/xgf415/article/details/75196714\" target=\"_blank\" rel=\"noopener\">SVN 树冲突解决详解</a>，我只是个搬运工。</p>\n<p>SVN的冲突有两种类型：</p>\n<ul>\n<li>内容冲突：当两名(或更多)开发人员修改了同一个文件中相邻或相同的行时就会发生文件冲突。</li>\n<li>当一名开发人员移动、重命名、删除一个文件或文件夹，而另一名开发人员也对它们进行了移动、重命名、删除或者仅仅是修改，在更新时就会发生树冲突。</li>\n</ul>\n<p>第一种很常见，但解决起来比较容易（一周几次的样字）。第二种不怎么常见（个把月碰到一次）</p>\n<h3 id=\"树冲突类型和解决方法\"><a href=\"#树冲突类型和解决方法\" class=\"headerlink\" title=\"树冲突类型和解决方法\"></a>树冲突类型和解决方法</h3><hr>\n<h4 id=\"本地删除，外部更改\"><a href=\"#本地删除，外部更改\" class=\"headerlink\" title=\"本地删除，外部更改\"></a>本地删除，外部更改</h4><ul>\n<li>A（外部）修改文件并将其提交至版本库中</li>\n<li>B（本地）同时删除了文件</li>\n</ul>\n<p>B更新时就会发生树冲突，该文件被标记为冲突。</p>\n<hr>\n<h4 id=\"本地改名，外部更改\"><a href=\"#本地改名，外部更改\" class=\"headerlink\" title=\"本地改名，外部更改\"></a>本地改名，外部更改</h4><ul>\n<li>A（外部）修改文件，并将其提交至版本库中</li>\n<li>B（本地）同时将文件改名</li>\n</ul>\n<p>B更新时，该文件被标记为树冲突。</p>\n<hr>\n<h4 id=\"本地更改，外部删除\"><a href=\"#本地更改，外部删除\" class=\"headerlink\" title=\"本地更改，外部删除\"></a>本地更改，外部删除</h4><ul>\n<li>A（外部）删除了文件，并提交到了版本库</li>\n<li>B（本地）同时对该文件进行了修改</li>\n</ul>\n<p>B更新时，该文件被标记为树冲突。</p>\n<hr>\n<h4 id=\"本地更改，外部改名\"><a href=\"#本地更改，外部改名\" class=\"headerlink\" title=\"本地更改，外部改名\"></a>本地更改，外部改名</h4><ul>\n<li>A（外部）将文件改名，并提交到了版本库</li>\n<li>B（本地）修改了文件内容</li>\n</ul>\n<p>B更新时，该文件被标记为树冲突。</p>\n<hr>\n<h4 id=\"本地删除，外部改名\"><a href=\"#本地删除，外部改名\" class=\"headerlink\" title=\"本地删除，外部改名\"></a>本地删除，外部改名</h4><ul>\n<li>A（外部）将文件改名，然后提交到版本库</li>\n<li>B（本地）将文件删除</li>\n</ul>\n<p>B更新时，该文件被标记为树冲突。</p>\n<hr>\n<h4 id=\"本地改名，外部删除\"><a href=\"#本地改名，外部删除\" class=\"headerlink\" title=\"本地改名，外部删除\"></a>本地改名，外部删除</h4><ul>\n<li>A（外部）将文件删除，然后提交到版本库</li>\n<li>B（本地）将文件改名</li>\n</ul>\n<p>更新时，B的该文件将发生树冲突。</p>\n<hr>\n<h4 id=\"本地改名，外部改名\"><a href=\"#本地改名，外部改名\" class=\"headerlink\" title=\"本地改名，外部改名\"></a>本地改名，外部改名</h4><ul>\n<li>（外部）将文件改名，并提交到版本库；</li>\n<li>（本地）将同文件改名。</li>\n</ul>\n<p>更新时，B的该文件将发生树冲突。</p>\n"},{"title":"软件固有的复杂性","date":"2019-03-09T16:00:00.000Z","_content":"\n### 定义软件的复杂性\n工业级软件的特征是，单个开发者要理解其设计的所有方面非常困难，几乎是不可能的。武断地说，这些系统的复杂性超出了人类智能的范围。不幸的是，我们所说的这种复杂性似乎是所有大型软件系统的基本特征。从根本上来说，我们可以掌握这种复杂性，但不能消除这种复杂性。\n\n![软件开发团队的任务就是制造简单的假象](/images/软件开发团队的任务就是制造简单的假象.PNG)\n\n### 软件的复杂性是一个基本特征，而不是偶然如此\n这种固有的复杂性有4个原因：\n* 问题域的复杂性\n* 管理开发过程的困难性\n* 软件中随处可见的灵活性\n* 刻画离散系统行为的问题\n\n### 问题域的复杂性\n我们在软件中试图解决的问题常常涉及不可避免地复杂性，在其中我们可以发现数不清的竞争性需求，甚至是相反的需求。系统的基本功能已经很难理解了，现在还要加上所有的（常常是隐含的）非功能需求，如可用性、性能、成本、健壮性和可靠性。这种无限制的外部复杂性是导致任意复杂的原因之一。\n\n### 管理开发过程的困难性\n就在几十年前，只有几千行的汇编程序就已经是软件工程能力的极限了，但在今天，常常看到交付系统的代码规模达到几十万甚至几百万行。没有哪一个人能完全理解这样一个系统。所以这就需要启用团队，有更多的开发人员就意味着更复杂的沟通，因此更难以协调，特别是当开发团队在地理上是分散的时候。\n\n### 软件中随处可见的灵活性\n一家造房屋的公司通常不会自己经验林场，砍伐树木以获取原木。我们也很少看见一家建筑公司建造一个现场的钢铁厂，为新的建筑提供定制的大梁，但在软件行业，这种情况却经常发生。软件提供了非常大的灵活性，所以开发者几乎有可能表达任何形式的抽象。但是，这种灵活性变成了一种难以置信的诱人的属性，因为它也迫使开发者打造几乎所有的初级构建模块，高层的抽象将建立在这些初级构建模块之上。建筑行业读原材料的品质有着统一的编码和标准，但软件行业却很少有这种标准。\n\n### 刻画离散系统行为的问题\n如果向空中抛出一个球，我们肯定可以预测出它的路径，因为我们知道在正常情况下，某些物理定律会起作用。如果因为我们在抛球时用的力大了一些，结果它就在飞行到一半的时候突然停下来，然后直接往上冲，那么我们将会感到非常惊奇。但是在一个调试得不太好的模拟球的运动的软件中，类似这样的行为却很容易发生。\n\n在大型应用中，可能有成百上千个变量以及多个控制线程。系统中的这些变量、它们当前的植、当前的地址和每个过程的调用栈一起构成了应用当前的状态。因为我们是在数字计算机上执行软件，所以我们的系统具有离散的状态。与此形成对比的是，像抛球运动这样的模拟系统是连续的系统。“当我们说系统是由连续函数描述的时候，我们是说它不会包含任何隐含的惊奇。输入中的小变化总是会导致输出中相应的小变化”。但对于软件系统来说，系统之外的任何一个事件都有可能让系统进入一个全新的状态，而且，状态与状态之间的转换关系并非总是确定的。当然，这是对系统进行大量测试的主要原因。\n","source":"_posts/软件固有的复杂性.md","raw":"---\ntitle: 软件固有的复杂性\ncategories: OOP\ndate: 2019-03-10\n---\n\n### 定义软件的复杂性\n工业级软件的特征是，单个开发者要理解其设计的所有方面非常困难，几乎是不可能的。武断地说，这些系统的复杂性超出了人类智能的范围。不幸的是，我们所说的这种复杂性似乎是所有大型软件系统的基本特征。从根本上来说，我们可以掌握这种复杂性，但不能消除这种复杂性。\n\n![软件开发团队的任务就是制造简单的假象](/images/软件开发团队的任务就是制造简单的假象.PNG)\n\n### 软件的复杂性是一个基本特征，而不是偶然如此\n这种固有的复杂性有4个原因：\n* 问题域的复杂性\n* 管理开发过程的困难性\n* 软件中随处可见的灵活性\n* 刻画离散系统行为的问题\n\n### 问题域的复杂性\n我们在软件中试图解决的问题常常涉及不可避免地复杂性，在其中我们可以发现数不清的竞争性需求，甚至是相反的需求。系统的基本功能已经很难理解了，现在还要加上所有的（常常是隐含的）非功能需求，如可用性、性能、成本、健壮性和可靠性。这种无限制的外部复杂性是导致任意复杂的原因之一。\n\n### 管理开发过程的困难性\n就在几十年前，只有几千行的汇编程序就已经是软件工程能力的极限了，但在今天，常常看到交付系统的代码规模达到几十万甚至几百万行。没有哪一个人能完全理解这样一个系统。所以这就需要启用团队，有更多的开发人员就意味着更复杂的沟通，因此更难以协调，特别是当开发团队在地理上是分散的时候。\n\n### 软件中随处可见的灵活性\n一家造房屋的公司通常不会自己经验林场，砍伐树木以获取原木。我们也很少看见一家建筑公司建造一个现场的钢铁厂，为新的建筑提供定制的大梁，但在软件行业，这种情况却经常发生。软件提供了非常大的灵活性，所以开发者几乎有可能表达任何形式的抽象。但是，这种灵活性变成了一种难以置信的诱人的属性，因为它也迫使开发者打造几乎所有的初级构建模块，高层的抽象将建立在这些初级构建模块之上。建筑行业读原材料的品质有着统一的编码和标准，但软件行业却很少有这种标准。\n\n### 刻画离散系统行为的问题\n如果向空中抛出一个球，我们肯定可以预测出它的路径，因为我们知道在正常情况下，某些物理定律会起作用。如果因为我们在抛球时用的力大了一些，结果它就在飞行到一半的时候突然停下来，然后直接往上冲，那么我们将会感到非常惊奇。但是在一个调试得不太好的模拟球的运动的软件中，类似这样的行为却很容易发生。\n\n在大型应用中，可能有成百上千个变量以及多个控制线程。系统中的这些变量、它们当前的植、当前的地址和每个过程的调用栈一起构成了应用当前的状态。因为我们是在数字计算机上执行软件，所以我们的系统具有离散的状态。与此形成对比的是，像抛球运动这样的模拟系统是连续的系统。“当我们说系统是由连续函数描述的时候，我们是说它不会包含任何隐含的惊奇。输入中的小变化总是会导致输出中相应的小变化”。但对于软件系统来说，系统之外的任何一个事件都有可能让系统进入一个全新的状态，而且，状态与状态之间的转换关系并非总是确定的。当然，这是对系统进行大量测试的主要原因。\n","slug":"软件固有的复杂性","published":1,"updated":"2019-07-26T03:16:31.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v65000phcr7xd7yys0t","content":"<h3 id=\"定义软件的复杂性\"><a href=\"#定义软件的复杂性\" class=\"headerlink\" title=\"定义软件的复杂性\"></a>定义软件的复杂性</h3><p>工业级软件的特征是，单个开发者要理解其设计的所有方面非常困难，几乎是不可能的。武断地说，这些系统的复杂性超出了人类智能的范围。不幸的是，我们所说的这种复杂性似乎是所有大型软件系统的基本特征。从根本上来说，我们可以掌握这种复杂性，但不能消除这种复杂性。</p>\n<p><img src=\"/images/软件开发团队的任务就是制造简单的假象.PNG\" alt=\"软件开发团队的任务就是制造简单的假象\"></p>\n<h3 id=\"软件的复杂性是一个基本特征，而不是偶然如此\"><a href=\"#软件的复杂性是一个基本特征，而不是偶然如此\" class=\"headerlink\" title=\"软件的复杂性是一个基本特征，而不是偶然如此\"></a>软件的复杂性是一个基本特征，而不是偶然如此</h3><p>这种固有的复杂性有4个原因：</p>\n<ul>\n<li>问题域的复杂性</li>\n<li>管理开发过程的困难性</li>\n<li>软件中随处可见的灵活性</li>\n<li>刻画离散系统行为的问题</li>\n</ul>\n<h3 id=\"问题域的复杂性\"><a href=\"#问题域的复杂性\" class=\"headerlink\" title=\"问题域的复杂性\"></a>问题域的复杂性</h3><p>我们在软件中试图解决的问题常常涉及不可避免地复杂性，在其中我们可以发现数不清的竞争性需求，甚至是相反的需求。系统的基本功能已经很难理解了，现在还要加上所有的（常常是隐含的）非功能需求，如可用性、性能、成本、健壮性和可靠性。这种无限制的外部复杂性是导致任意复杂的原因之一。</p>\n<h3 id=\"管理开发过程的困难性\"><a href=\"#管理开发过程的困难性\" class=\"headerlink\" title=\"管理开发过程的困难性\"></a>管理开发过程的困难性</h3><p>就在几十年前，只有几千行的汇编程序就已经是软件工程能力的极限了，但在今天，常常看到交付系统的代码规模达到几十万甚至几百万行。没有哪一个人能完全理解这样一个系统。所以这就需要启用团队，有更多的开发人员就意味着更复杂的沟通，因此更难以协调，特别是当开发团队在地理上是分散的时候。</p>\n<h3 id=\"软件中随处可见的灵活性\"><a href=\"#软件中随处可见的灵活性\" class=\"headerlink\" title=\"软件中随处可见的灵活性\"></a>软件中随处可见的灵活性</h3><p>一家造房屋的公司通常不会自己经验林场，砍伐树木以获取原木。我们也很少看见一家建筑公司建造一个现场的钢铁厂，为新的建筑提供定制的大梁，但在软件行业，这种情况却经常发生。软件提供了非常大的灵活性，所以开发者几乎有可能表达任何形式的抽象。但是，这种灵活性变成了一种难以置信的诱人的属性，因为它也迫使开发者打造几乎所有的初级构建模块，高层的抽象将建立在这些初级构建模块之上。建筑行业读原材料的品质有着统一的编码和标准，但软件行业却很少有这种标准。</p>\n<h3 id=\"刻画离散系统行为的问题\"><a href=\"#刻画离散系统行为的问题\" class=\"headerlink\" title=\"刻画离散系统行为的问题\"></a>刻画离散系统行为的问题</h3><p>如果向空中抛出一个球，我们肯定可以预测出它的路径，因为我们知道在正常情况下，某些物理定律会起作用。如果因为我们在抛球时用的力大了一些，结果它就在飞行到一半的时候突然停下来，然后直接往上冲，那么我们将会感到非常惊奇。但是在一个调试得不太好的模拟球的运动的软件中，类似这样的行为却很容易发生。</p>\n<p>在大型应用中，可能有成百上千个变量以及多个控制线程。系统中的这些变量、它们当前的植、当前的地址和每个过程的调用栈一起构成了应用当前的状态。因为我们是在数字计算机上执行软件，所以我们的系统具有离散的状态。与此形成对比的是，像抛球运动这样的模拟系统是连续的系统。“当我们说系统是由连续函数描述的时候，我们是说它不会包含任何隐含的惊奇。输入中的小变化总是会导致输出中相应的小变化”。但对于软件系统来说，系统之外的任何一个事件都有可能让系统进入一个全新的状态，而且，状态与状态之间的转换关系并非总是确定的。当然，这是对系统进行大量测试的主要原因。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义软件的复杂性\"><a href=\"#定义软件的复杂性\" class=\"headerlink\" title=\"定义软件的复杂性\"></a>定义软件的复杂性</h3><p>工业级软件的特征是，单个开发者要理解其设计的所有方面非常困难，几乎是不可能的。武断地说，这些系统的复杂性超出了人类智能的范围。不幸的是，我们所说的这种复杂性似乎是所有大型软件系统的基本特征。从根本上来说，我们可以掌握这种复杂性，但不能消除这种复杂性。</p>\n<p><img src=\"/images/软件开发团队的任务就是制造简单的假象.PNG\" alt=\"软件开发团队的任务就是制造简单的假象\"></p>\n<h3 id=\"软件的复杂性是一个基本特征，而不是偶然如此\"><a href=\"#软件的复杂性是一个基本特征，而不是偶然如此\" class=\"headerlink\" title=\"软件的复杂性是一个基本特征，而不是偶然如此\"></a>软件的复杂性是一个基本特征，而不是偶然如此</h3><p>这种固有的复杂性有4个原因：</p>\n<ul>\n<li>问题域的复杂性</li>\n<li>管理开发过程的困难性</li>\n<li>软件中随处可见的灵活性</li>\n<li>刻画离散系统行为的问题</li>\n</ul>\n<h3 id=\"问题域的复杂性\"><a href=\"#问题域的复杂性\" class=\"headerlink\" title=\"问题域的复杂性\"></a>问题域的复杂性</h3><p>我们在软件中试图解决的问题常常涉及不可避免地复杂性，在其中我们可以发现数不清的竞争性需求，甚至是相反的需求。系统的基本功能已经很难理解了，现在还要加上所有的（常常是隐含的）非功能需求，如可用性、性能、成本、健壮性和可靠性。这种无限制的外部复杂性是导致任意复杂的原因之一。</p>\n<h3 id=\"管理开发过程的困难性\"><a href=\"#管理开发过程的困难性\" class=\"headerlink\" title=\"管理开发过程的困难性\"></a>管理开发过程的困难性</h3><p>就在几十年前，只有几千行的汇编程序就已经是软件工程能力的极限了，但在今天，常常看到交付系统的代码规模达到几十万甚至几百万行。没有哪一个人能完全理解这样一个系统。所以这就需要启用团队，有更多的开发人员就意味着更复杂的沟通，因此更难以协调，特别是当开发团队在地理上是分散的时候。</p>\n<h3 id=\"软件中随处可见的灵活性\"><a href=\"#软件中随处可见的灵活性\" class=\"headerlink\" title=\"软件中随处可见的灵活性\"></a>软件中随处可见的灵活性</h3><p>一家造房屋的公司通常不会自己经验林场，砍伐树木以获取原木。我们也很少看见一家建筑公司建造一个现场的钢铁厂，为新的建筑提供定制的大梁，但在软件行业，这种情况却经常发生。软件提供了非常大的灵活性，所以开发者几乎有可能表达任何形式的抽象。但是，这种灵活性变成了一种难以置信的诱人的属性，因为它也迫使开发者打造几乎所有的初级构建模块，高层的抽象将建立在这些初级构建模块之上。建筑行业读原材料的品质有着统一的编码和标准，但软件行业却很少有这种标准。</p>\n<h3 id=\"刻画离散系统行为的问题\"><a href=\"#刻画离散系统行为的问题\" class=\"headerlink\" title=\"刻画离散系统行为的问题\"></a>刻画离散系统行为的问题</h3><p>如果向空中抛出一个球，我们肯定可以预测出它的路径，因为我们知道在正常情况下，某些物理定律会起作用。如果因为我们在抛球时用的力大了一些，结果它就在飞行到一半的时候突然停下来，然后直接往上冲，那么我们将会感到非常惊奇。但是在一个调试得不太好的模拟球的运动的软件中，类似这样的行为却很容易发生。</p>\n<p>在大型应用中，可能有成百上千个变量以及多个控制线程。系统中的这些变量、它们当前的植、当前的地址和每个过程的调用栈一起构成了应用当前的状态。因为我们是在数字计算机上执行软件，所以我们的系统具有离散的状态。与此形成对比的是，像抛球运动这样的模拟系统是连续的系统。“当我们说系统是由连续函数描述的时候，我们是说它不会包含任何隐含的惊奇。输入中的小变化总是会导致输出中相应的小变化”。但对于软件系统来说，系统之外的任何一个事件都有可能让系统进入一个全新的状态，而且，状态与状态之间的转换关系并非总是确定的。当然，这是对系统进行大量测试的主要原因。</p>\n"},{"title":"Android开发中的名称缩写","date":"2019-07-07T16:00:00.000Z","_content":"\n### SDK ( Software Development Kit / 软件开发工具包 )\n----\n\n这是一个覆盖面相当广泛的名词，可以这么说：辅助开发某一类软件的相关文档、API必需资料、范例和工具的集合都可以叫做 \"SDK\"。在安卓开发中我们所说的SDK即为android SDK，它为开发者提供了库文件以及其他开发所用到的工具；一般说的SDK就是开发工具了，再加一个开发IDE，就搭建起一个开发环境了，比如 eclipse + android SDK 的IDE\n\nJava 开发的话也有 Java SDK 。我自己\n\n最常用的就是 Android SDK 中的 adb 这个工具了\n\n### NDK ( Native Development Kit / 本地开发工具包 ) \n---\n\n跟 android SDK 差不多也是一个开发工具包，是用来给安卓手机开发软件用的，但是和 SDK 不同的是它用的是 C 语言，而 android SDK 用的是 Java 语言\n\n### ADT ( Android Developer Tools / 安卓开发工具 )\n---\n\nGoogle 研发的一个插件，集成在 eclipse 中，为安卓开发提供专属开发环境，简单的说 ADT 就是 Android 在 Eclipse 上的开发工具，在 Eclipse 和 SDK 之间起到了一个桥梁的作用\n\n### ANT ( [Apache Ant](https://zh.wikipedia.org/wiki/Apache_Ant) )\n---\n\n是Apache的一个项目管理工具，是一个可将软件编译、测试、部署等步骤联系在一起加以自动化的工具，大多用于Java环境中的软件开发\n\n### JDK ( Java Development Kit / Java软件开发工具包 )\n---\n\nJava核心，包括Java运行环境、类库、Java开发工具，简单的说JDK就是面向Java开发人员使用的SDK\n","source":"_posts/Android/Android开发中的名称缩写.md","raw":"---\ntitle: Android开发中的名称缩写\ncategories: Android\ndate: 2019-07-08\n---\n\n### SDK ( Software Development Kit / 软件开发工具包 )\n----\n\n这是一个覆盖面相当广泛的名词，可以这么说：辅助开发某一类软件的相关文档、API必需资料、范例和工具的集合都可以叫做 \"SDK\"。在安卓开发中我们所说的SDK即为android SDK，它为开发者提供了库文件以及其他开发所用到的工具；一般说的SDK就是开发工具了，再加一个开发IDE，就搭建起一个开发环境了，比如 eclipse + android SDK 的IDE\n\nJava 开发的话也有 Java SDK 。我自己\n\n最常用的就是 Android SDK 中的 adb 这个工具了\n\n### NDK ( Native Development Kit / 本地开发工具包 ) \n---\n\n跟 android SDK 差不多也是一个开发工具包，是用来给安卓手机开发软件用的，但是和 SDK 不同的是它用的是 C 语言，而 android SDK 用的是 Java 语言\n\n### ADT ( Android Developer Tools / 安卓开发工具 )\n---\n\nGoogle 研发的一个插件，集成在 eclipse 中，为安卓开发提供专属开发环境，简单的说 ADT 就是 Android 在 Eclipse 上的开发工具，在 Eclipse 和 SDK 之间起到了一个桥梁的作用\n\n### ANT ( [Apache Ant](https://zh.wikipedia.org/wiki/Apache_Ant) )\n---\n\n是Apache的一个项目管理工具，是一个可将软件编译、测试、部署等步骤联系在一起加以自动化的工具，大多用于Java环境中的软件开发\n\n### JDK ( Java Development Kit / Java软件开发工具包 )\n---\n\nJava核心，包括Java运行环境、类库、Java开发工具，简单的说JDK就是面向Java开发人员使用的SDK\n","slug":"Android/Android开发中的名称缩写","published":1,"updated":"2019-07-08T13:13:12.264Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v7w0015hcr7l7b7j79o","content":"<h3 id=\"SDK-Software-Development-Kit-软件开发工具包\"><a href=\"#SDK-Software-Development-Kit-软件开发工具包\" class=\"headerlink\" title=\"SDK ( Software Development Kit / 软件开发工具包 )\"></a>SDK ( Software Development Kit / 软件开发工具包 )</h3><hr>\n<p>这是一个覆盖面相当广泛的名词，可以这么说：辅助开发某一类软件的相关文档、API必需资料、范例和工具的集合都可以叫做 “SDK”。在安卓开发中我们所说的SDK即为android SDK，它为开发者提供了库文件以及其他开发所用到的工具；一般说的SDK就是开发工具了，再加一个开发IDE，就搭建起一个开发环境了，比如 eclipse + android SDK 的IDE</p>\n<p>Java 开发的话也有 Java SDK 。我自己</p>\n<p>最常用的就是 Android SDK 中的 adb 这个工具了</p>\n<h3 id=\"NDK-Native-Development-Kit-本地开发工具包\"><a href=\"#NDK-Native-Development-Kit-本地开发工具包\" class=\"headerlink\" title=\"NDK ( Native Development Kit / 本地开发工具包 )\"></a>NDK ( Native Development Kit / 本地开发工具包 )</h3><hr>\n<p>跟 android SDK 差不多也是一个开发工具包，是用来给安卓手机开发软件用的，但是和 SDK 不同的是它用的是 C 语言，而 android SDK 用的是 Java 语言</p>\n<h3 id=\"ADT-Android-Developer-Tools-安卓开发工具\"><a href=\"#ADT-Android-Developer-Tools-安卓开发工具\" class=\"headerlink\" title=\"ADT ( Android Developer Tools / 安卓开发工具 )\"></a>ADT ( Android Developer Tools / 安卓开发工具 )</h3><hr>\n<p>Google 研发的一个插件，集成在 eclipse 中，为安卓开发提供专属开发环境，简单的说 ADT 就是 Android 在 Eclipse 上的开发工具，在 Eclipse 和 SDK 之间起到了一个桥梁的作用</p>\n<h3 id=\"ANT-Apache-Ant\"><a href=\"#ANT-Apache-Ant\" class=\"headerlink\" title=\"ANT ( Apache Ant )\"></a>ANT ( <a href=\"https://zh.wikipedia.org/wiki/Apache_Ant\" target=\"_blank\" rel=\"noopener\">Apache Ant</a> )</h3><hr>\n<p>是Apache的一个项目管理工具，是一个可将软件编译、测试、部署等步骤联系在一起加以自动化的工具，大多用于Java环境中的软件开发</p>\n<h3 id=\"JDK-Java-Development-Kit-Java软件开发工具包\"><a href=\"#JDK-Java-Development-Kit-Java软件开发工具包\" class=\"headerlink\" title=\"JDK ( Java Development Kit / Java软件开发工具包 )\"></a>JDK ( Java Development Kit / Java软件开发工具包 )</h3><hr>\n<p>Java核心，包括Java运行环境、类库、Java开发工具，简单的说JDK就是面向Java开发人员使用的SDK</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"SDK-Software-Development-Kit-软件开发工具包\"><a href=\"#SDK-Software-Development-Kit-软件开发工具包\" class=\"headerlink\" title=\"SDK ( Software Development Kit / 软件开发工具包 )\"></a>SDK ( Software Development Kit / 软件开发工具包 )</h3><hr>\n<p>这是一个覆盖面相当广泛的名词，可以这么说：辅助开发某一类软件的相关文档、API必需资料、范例和工具的集合都可以叫做 “SDK”。在安卓开发中我们所说的SDK即为android SDK，它为开发者提供了库文件以及其他开发所用到的工具；一般说的SDK就是开发工具了，再加一个开发IDE，就搭建起一个开发环境了，比如 eclipse + android SDK 的IDE</p>\n<p>Java 开发的话也有 Java SDK 。我自己</p>\n<p>最常用的就是 Android SDK 中的 adb 这个工具了</p>\n<h3 id=\"NDK-Native-Development-Kit-本地开发工具包\"><a href=\"#NDK-Native-Development-Kit-本地开发工具包\" class=\"headerlink\" title=\"NDK ( Native Development Kit / 本地开发工具包 )\"></a>NDK ( Native Development Kit / 本地开发工具包 )</h3><hr>\n<p>跟 android SDK 差不多也是一个开发工具包，是用来给安卓手机开发软件用的，但是和 SDK 不同的是它用的是 C 语言，而 android SDK 用的是 Java 语言</p>\n<h3 id=\"ADT-Android-Developer-Tools-安卓开发工具\"><a href=\"#ADT-Android-Developer-Tools-安卓开发工具\" class=\"headerlink\" title=\"ADT ( Android Developer Tools / 安卓开发工具 )\"></a>ADT ( Android Developer Tools / 安卓开发工具 )</h3><hr>\n<p>Google 研发的一个插件，集成在 eclipse 中，为安卓开发提供专属开发环境，简单的说 ADT 就是 Android 在 Eclipse 上的开发工具，在 Eclipse 和 SDK 之间起到了一个桥梁的作用</p>\n<h3 id=\"ANT-Apache-Ant\"><a href=\"#ANT-Apache-Ant\" class=\"headerlink\" title=\"ANT ( Apache Ant )\"></a>ANT ( <a href=\"https://zh.wikipedia.org/wiki/Apache_Ant\" target=\"_blank\" rel=\"noopener\">Apache Ant</a> )</h3><hr>\n<p>是Apache的一个项目管理工具，是一个可将软件编译、测试、部署等步骤联系在一起加以自动化的工具，大多用于Java环境中的软件开发</p>\n<h3 id=\"JDK-Java-Development-Kit-Java软件开发工具包\"><a href=\"#JDK-Java-Development-Kit-Java软件开发工具包\" class=\"headerlink\" title=\"JDK ( Java Development Kit / Java软件开发工具包 )\"></a>JDK ( Java Development Kit / Java软件开发工具包 )</h3><hr>\n<p>Java核心，包括Java运行环境、类库、Java开发工具，简单的说JDK就是面向Java开发人员使用的SDK</p>\n"},{"title":"ADB常用命令","date":"2019-04-23T16:00:00.000Z","_content":"\n### pull / push\n---\n\n* 从模拟器或设备复制文件\n`adb pull remote local`\n* 将文件复制到模拟器或设备\n`adb push local remote`\n\nlocal 和 remote 指的是开发计算机（本地）和模拟器/设备实例（远程）上目标文件/目录的路径。\n\n### 发送 shell 命令\n---\n\n* 可以选择进入或者不进入模拟器/设备实例上的 adb 远程 shell\n* 要在不进入远程 shell 的情况下发出一个 shell 命令，在命令的前面加上 `adb shell` 即可，像这样： `adb shell shell_command` ，或者直接使用命令 `adb shell` 进入远程 shell 后，再进行其它操作。\n\n### 其它命令\n* `screencap` 截屏： `adb shell screencap /sdcard/screen.png`\n* `screenrecord` 录屏： `adb shell screenrecord /sdcard/demo.mp4`","source":"_posts/Android/ADB常用命令.md","raw":"---\ntitle: ADB常用命令\ncategories: Android\ndate: 2019-04-24\n---\n\n### pull / push\n---\n\n* 从模拟器或设备复制文件\n`adb pull remote local`\n* 将文件复制到模拟器或设备\n`adb push local remote`\n\nlocal 和 remote 指的是开发计算机（本地）和模拟器/设备实例（远程）上目标文件/目录的路径。\n\n### 发送 shell 命令\n---\n\n* 可以选择进入或者不进入模拟器/设备实例上的 adb 远程 shell\n* 要在不进入远程 shell 的情况下发出一个 shell 命令，在命令的前面加上 `adb shell` 即可，像这样： `adb shell shell_command` ，或者直接使用命令 `adb shell` 进入远程 shell 后，再进行其它操作。\n\n### 其它命令\n* `screencap` 截屏： `adb shell screencap /sdcard/screen.png`\n* `screenrecord` 录屏： `adb shell screenrecord /sdcard/demo.mp4`","slug":"Android/ADB常用命令","published":1,"updated":"2019-04-25T03:07:50.194Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v7x0016hcr78cwtf9g0","content":"<h3 id=\"pull-push\"><a href=\"#pull-push\" class=\"headerlink\" title=\"pull / push\"></a>pull / push</h3><hr>\n<ul>\n<li>从模拟器或设备复制文件<br><code>adb pull remote local</code></li>\n<li>将文件复制到模拟器或设备<br><code>adb push local remote</code></li>\n</ul>\n<p>local 和 remote 指的是开发计算机（本地）和模拟器/设备实例（远程）上目标文件/目录的路径。</p>\n<h3 id=\"发送-shell-命令\"><a href=\"#发送-shell-命令\" class=\"headerlink\" title=\"发送 shell 命令\"></a>发送 shell 命令</h3><hr>\n<ul>\n<li>可以选择进入或者不进入模拟器/设备实例上的 adb 远程 shell</li>\n<li>要在不进入远程 shell 的情况下发出一个 shell 命令，在命令的前面加上 <code>adb shell</code> 即可，像这样： <code>adb shell shell_command</code> ，或者直接使用命令 <code>adb shell</code> 进入远程 shell 后，再进行其它操作。</li>\n</ul>\n<h3 id=\"其它命令\"><a href=\"#其它命令\" class=\"headerlink\" title=\"其它命令\"></a>其它命令</h3><ul>\n<li><code>screencap</code> 截屏： <code>adb shell screencap /sdcard/screen.png</code></li>\n<li><code>screenrecord</code> 录屏： <code>adb shell screenrecord /sdcard/demo.mp4</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"pull-push\"><a href=\"#pull-push\" class=\"headerlink\" title=\"pull / push\"></a>pull / push</h3><hr>\n<ul>\n<li>从模拟器或设备复制文件<br><code>adb pull remote local</code></li>\n<li>将文件复制到模拟器或设备<br><code>adb push local remote</code></li>\n</ul>\n<p>local 和 remote 指的是开发计算机（本地）和模拟器/设备实例（远程）上目标文件/目录的路径。</p>\n<h3 id=\"发送-shell-命令\"><a href=\"#发送-shell-命令\" class=\"headerlink\" title=\"发送 shell 命令\"></a>发送 shell 命令</h3><hr>\n<ul>\n<li>可以选择进入或者不进入模拟器/设备实例上的 adb 远程 shell</li>\n<li>要在不进入远程 shell 的情况下发出一个 shell 命令，在命令的前面加上 <code>adb shell</code> 即可，像这样： <code>adb shell shell_command</code> ，或者直接使用命令 <code>adb shell</code> 进入远程 shell 后，再进行其它操作。</li>\n</ul>\n<h3 id=\"其它命令\"><a href=\"#其它命令\" class=\"headerlink\" title=\"其它命令\"></a>其它命令</h3><ul>\n<li><code>screencap</code> 截屏： <code>adb shell screencap /sdcard/screen.png</code></li>\n<li><code>screenrecord</code> 录屏： <code>adb shell screenrecord /sdcard/demo.mp4</code></li>\n</ul>\n"},{"title":"使用logcat查看android系统日志","date":"2019-03-12T16:00:00.000Z","_content":"\n对我这个做游戏开发的来说，在android平台上通常会遇到的棘手情况如下\n* 安卓游戏程序通常通过JNI技术调用游戏的C++代码，所以在eclipse或者android studio上根本没法断点调试\n* 可能会遇到开发环境下（win32）运行正常，但是打包后在android上跑时就会出现问题\n* SDK相关模块的调试只能在真机上进行调试\n\n### android系统日志\n---\n这个时候只能靠低效的查看日志来定位问题了，还好android的系统在遇到错误时，打印出来的堆栈信息相当完整，也能打印出编程语言提供的log类函数的输出。\n\n* 这个日志有个好处就是即使当时没有输出系统日志，你也可以在随后的时间里打印出以前的日志来分析问题\n* 但是，请注意，android的系统日志是存在一个环形缓冲区上的，所以当测试在真机上重现出一个不常见的bug时，最好不要让测试继续再操作这台设备，以防导致问题的日志被后续日志覆盖。\n\n### 查看android系统日志\n---\n我之前都是开着eclipse或者android studio，然后手机使用数据线连着计算机。这样就可以在IED的logcat窗口里查看手机运行时的系统日志了。后来发现使用adb可以在WLAN环境下远程获取手机的系统日志！也可以选择实时打印。\n\n### 常用的操作\n---\n* 查看adb当前连接的设备\n`adb devices`\n* 使用logcat输出日志\n`adb logcat`\n* 输出的日志将会带上打印日志时的时间\n`adb logcat -v time`\n* 将日志重定向到一个文件中\n`adb logcat -v time > log.txt`\n\n### release_print而不是print\n---\n我发现cocos2dx-lua里的print打印的日志，使用logcat竟然输出不了，换成release_print才行。\n\n### 使用adb把命令发往指定的设备\n---\n开发的pc通过USB连接多台安卓设备或者pc上运行多个安卓模拟器时，执行\n`adb devices`\n命令查看，发现list of devices attached列表下有多台设备地址。这个时候直接执行像`adb logcat`是不行的，因为adb不知道你是要往哪台设备发送命令。所以需要加上参数指定哪台设备\n`adb -s 127.0.0.1:21503 logcat`\n才行\n","source":"_posts/Android/使用logcat查看android系统日志.md","raw":"---\ntitle: 使用logcat查看android系统日志\ncategories: Android\ndate: 2019-03-13\n---\n\n对我这个做游戏开发的来说，在android平台上通常会遇到的棘手情况如下\n* 安卓游戏程序通常通过JNI技术调用游戏的C++代码，所以在eclipse或者android studio上根本没法断点调试\n* 可能会遇到开发环境下（win32）运行正常，但是打包后在android上跑时就会出现问题\n* SDK相关模块的调试只能在真机上进行调试\n\n### android系统日志\n---\n这个时候只能靠低效的查看日志来定位问题了，还好android的系统在遇到错误时，打印出来的堆栈信息相当完整，也能打印出编程语言提供的log类函数的输出。\n\n* 这个日志有个好处就是即使当时没有输出系统日志，你也可以在随后的时间里打印出以前的日志来分析问题\n* 但是，请注意，android的系统日志是存在一个环形缓冲区上的，所以当测试在真机上重现出一个不常见的bug时，最好不要让测试继续再操作这台设备，以防导致问题的日志被后续日志覆盖。\n\n### 查看android系统日志\n---\n我之前都是开着eclipse或者android studio，然后手机使用数据线连着计算机。这样就可以在IED的logcat窗口里查看手机运行时的系统日志了。后来发现使用adb可以在WLAN环境下远程获取手机的系统日志！也可以选择实时打印。\n\n### 常用的操作\n---\n* 查看adb当前连接的设备\n`adb devices`\n* 使用logcat输出日志\n`adb logcat`\n* 输出的日志将会带上打印日志时的时间\n`adb logcat -v time`\n* 将日志重定向到一个文件中\n`adb logcat -v time > log.txt`\n\n### release_print而不是print\n---\n我发现cocos2dx-lua里的print打印的日志，使用logcat竟然输出不了，换成release_print才行。\n\n### 使用adb把命令发往指定的设备\n---\n开发的pc通过USB连接多台安卓设备或者pc上运行多个安卓模拟器时，执行\n`adb devices`\n命令查看，发现list of devices attached列表下有多台设备地址。这个时候直接执行像`adb logcat`是不行的，因为adb不知道你是要往哪台设备发送命令。所以需要加上参数指定哪台设备\n`adb -s 127.0.0.1:21503 logcat`\n才行\n","slug":"Android/使用logcat查看android系统日志","published":1,"updated":"2019-04-25T03:07:50.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v7x0018hcr7k3iym3ie","content":"<p>对我这个做游戏开发的来说，在android平台上通常会遇到的棘手情况如下</p>\n<ul>\n<li>安卓游戏程序通常通过JNI技术调用游戏的C++代码，所以在eclipse或者android studio上根本没法断点调试</li>\n<li>可能会遇到开发环境下（win32）运行正常，但是打包后在android上跑时就会出现问题</li>\n<li>SDK相关模块的调试只能在真机上进行调试</li>\n</ul>\n<h3 id=\"android系统日志\"><a href=\"#android系统日志\" class=\"headerlink\" title=\"android系统日志\"></a>android系统日志</h3><hr>\n<p>这个时候只能靠低效的查看日志来定位问题了，还好android的系统在遇到错误时，打印出来的堆栈信息相当完整，也能打印出编程语言提供的log类函数的输出。</p>\n<ul>\n<li>这个日志有个好处就是即使当时没有输出系统日志，你也可以在随后的时间里打印出以前的日志来分析问题</li>\n<li>但是，请注意，android的系统日志是存在一个环形缓冲区上的，所以当测试在真机上重现出一个不常见的bug时，最好不要让测试继续再操作这台设备，以防导致问题的日志被后续日志覆盖。</li>\n</ul>\n<h3 id=\"查看android系统日志\"><a href=\"#查看android系统日志\" class=\"headerlink\" title=\"查看android系统日志\"></a>查看android系统日志</h3><hr>\n<p>我之前都是开着eclipse或者android studio，然后手机使用数据线连着计算机。这样就可以在IED的logcat窗口里查看手机运行时的系统日志了。后来发现使用adb可以在WLAN环境下远程获取手机的系统日志！也可以选择实时打印。</p>\n<h3 id=\"常用的操作\"><a href=\"#常用的操作\" class=\"headerlink\" title=\"常用的操作\"></a>常用的操作</h3><hr>\n<ul>\n<li>查看adb当前连接的设备<br><code>adb devices</code></li>\n<li>使用logcat输出日志<br><code>adb logcat</code></li>\n<li>输出的日志将会带上打印日志时的时间<br><code>adb logcat -v time</code></li>\n<li>将日志重定向到一个文件中<br><code>adb logcat -v time &gt; log.txt</code></li>\n</ul>\n<h3 id=\"release-print而不是print\"><a href=\"#release-print而不是print\" class=\"headerlink\" title=\"release_print而不是print\"></a>release_print而不是print</h3><hr>\n<p>我发现cocos2dx-lua里的print打印的日志，使用logcat竟然输出不了，换成release_print才行。</p>\n<h3 id=\"使用adb把命令发往指定的设备\"><a href=\"#使用adb把命令发往指定的设备\" class=\"headerlink\" title=\"使用adb把命令发往指定的设备\"></a>使用adb把命令发往指定的设备</h3><hr>\n<p>开发的pc通过USB连接多台安卓设备或者pc上运行多个安卓模拟器时，执行<br><code>adb devices</code><br>命令查看，发现list of devices attached列表下有多台设备地址。这个时候直接执行像<code>adb logcat</code>是不行的，因为adb不知道你是要往哪台设备发送命令。所以需要加上参数指定哪台设备<br><code>adb -s 127.0.0.1:21503 logcat</code><br>才行</p>\n","site":{"data":{}},"excerpt":"","more":"<p>对我这个做游戏开发的来说，在android平台上通常会遇到的棘手情况如下</p>\n<ul>\n<li>安卓游戏程序通常通过JNI技术调用游戏的C++代码，所以在eclipse或者android studio上根本没法断点调试</li>\n<li>可能会遇到开发环境下（win32）运行正常，但是打包后在android上跑时就会出现问题</li>\n<li>SDK相关模块的调试只能在真机上进行调试</li>\n</ul>\n<h3 id=\"android系统日志\"><a href=\"#android系统日志\" class=\"headerlink\" title=\"android系统日志\"></a>android系统日志</h3><hr>\n<p>这个时候只能靠低效的查看日志来定位问题了，还好android的系统在遇到错误时，打印出来的堆栈信息相当完整，也能打印出编程语言提供的log类函数的输出。</p>\n<ul>\n<li>这个日志有个好处就是即使当时没有输出系统日志，你也可以在随后的时间里打印出以前的日志来分析问题</li>\n<li>但是，请注意，android的系统日志是存在一个环形缓冲区上的，所以当测试在真机上重现出一个不常见的bug时，最好不要让测试继续再操作这台设备，以防导致问题的日志被后续日志覆盖。</li>\n</ul>\n<h3 id=\"查看android系统日志\"><a href=\"#查看android系统日志\" class=\"headerlink\" title=\"查看android系统日志\"></a>查看android系统日志</h3><hr>\n<p>我之前都是开着eclipse或者android studio，然后手机使用数据线连着计算机。这样就可以在IED的logcat窗口里查看手机运行时的系统日志了。后来发现使用adb可以在WLAN环境下远程获取手机的系统日志！也可以选择实时打印。</p>\n<h3 id=\"常用的操作\"><a href=\"#常用的操作\" class=\"headerlink\" title=\"常用的操作\"></a>常用的操作</h3><hr>\n<ul>\n<li>查看adb当前连接的设备<br><code>adb devices</code></li>\n<li>使用logcat输出日志<br><code>adb logcat</code></li>\n<li>输出的日志将会带上打印日志时的时间<br><code>adb logcat -v time</code></li>\n<li>将日志重定向到一个文件中<br><code>adb logcat -v time &gt; log.txt</code></li>\n</ul>\n<h3 id=\"release-print而不是print\"><a href=\"#release-print而不是print\" class=\"headerlink\" title=\"release_print而不是print\"></a>release_print而不是print</h3><hr>\n<p>我发现cocos2dx-lua里的print打印的日志，使用logcat竟然输出不了，换成release_print才行。</p>\n<h3 id=\"使用adb把命令发往指定的设备\"><a href=\"#使用adb把命令发往指定的设备\" class=\"headerlink\" title=\"使用adb把命令发往指定的设备\"></a>使用adb把命令发往指定的设备</h3><hr>\n<p>开发的pc通过USB连接多台安卓设备或者pc上运行多个安卓模拟器时，执行<br><code>adb devices</code><br>命令查看，发现list of devices attached列表下有多台设备地址。这个时候直接执行像<code>adb logcat</code>是不行的，因为adb不知道你是要往哪台设备发送命令。所以需要加上参数指定哪台设备<br><code>adb -s 127.0.0.1:21503 logcat</code><br>才行</p>\n"},{"title":"安卓APP的安装目录","date":"2019-07-11T16:00:00.000Z","_content":"\n### 原由\n---\n\n在调试安卓APP涉及到缓存文件这块时，发现对APP文件的读写位置不太了解。就去网上查了查，然后总结（抄袭）一下吧（前人总结的确实已经够好了）。\n\n### 涉及到的目录如下\n---\n\n* `system/app`：系统自带的应用程序，无法删除\n* `data/app`：用户程序安装的目录，有删除权限。安装时把apk文件复制到此目录\n* `data/data`：存放应用程序的数据\n* `data/dalvik-cache`：将apk中的dex文件安装到dalvik-cache目录下(dex文件是dalvik虚拟机的可执行文件,其大小约为原始apk文件大小的四分之一)\n\n### 安装与卸载过程\n---\n\n* **APP的安装** ：复制APK安装包到data/app目录下，解压并扫描安装包，把dex文件(Dalvik字节码)保存到dalvik-cache目录，并data/data目录下创建对应的应用数据目录\n* **APP的卸载** ：删除安装过程中在上述三个目录下创建的文件及目录\n\n**注意：没有Root的手机是看不到data目录下的内容的**\n\n","source":"_posts/Android/安卓APP的安装目录.md","raw":"---\ntitle: 安卓APP的安装目录\ncategories: Android\ndate: 2019-07-12\n---\n\n### 原由\n---\n\n在调试安卓APP涉及到缓存文件这块时，发现对APP文件的读写位置不太了解。就去网上查了查，然后总结（抄袭）一下吧（前人总结的确实已经够好了）。\n\n### 涉及到的目录如下\n---\n\n* `system/app`：系统自带的应用程序，无法删除\n* `data/app`：用户程序安装的目录，有删除权限。安装时把apk文件复制到此目录\n* `data/data`：存放应用程序的数据\n* `data/dalvik-cache`：将apk中的dex文件安装到dalvik-cache目录下(dex文件是dalvik虚拟机的可执行文件,其大小约为原始apk文件大小的四分之一)\n\n### 安装与卸载过程\n---\n\n* **APP的安装** ：复制APK安装包到data/app目录下，解压并扫描安装包，把dex文件(Dalvik字节码)保存到dalvik-cache目录，并data/data目录下创建对应的应用数据目录\n* **APP的卸载** ：删除安装过程中在上述三个目录下创建的文件及目录\n\n**注意：没有Root的手机是看不到data目录下的内容的**\n\n","slug":"Android/安卓APP的安装目录","published":1,"updated":"2019-07-12T11:33:53.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v7y0019hcr7ciovef0v","content":"<h3 id=\"原由\"><a href=\"#原由\" class=\"headerlink\" title=\"原由\"></a>原由</h3><hr>\n<p>在调试安卓APP涉及到缓存文件这块时，发现对APP文件的读写位置不太了解。就去网上查了查，然后总结（抄袭）一下吧（前人总结的确实已经够好了）。</p>\n<h3 id=\"涉及到的目录如下\"><a href=\"#涉及到的目录如下\" class=\"headerlink\" title=\"涉及到的目录如下\"></a>涉及到的目录如下</h3><hr>\n<ul>\n<li><code>system/app</code>：系统自带的应用程序，无法删除</li>\n<li><code>data/app</code>：用户程序安装的目录，有删除权限。安装时把apk文件复制到此目录</li>\n<li><code>data/data</code>：存放应用程序的数据</li>\n<li><code>data/dalvik-cache</code>：将apk中的dex文件安装到dalvik-cache目录下(dex文件是dalvik虚拟机的可执行文件,其大小约为原始apk文件大小的四分之一)</li>\n</ul>\n<h3 id=\"安装与卸载过程\"><a href=\"#安装与卸载过程\" class=\"headerlink\" title=\"安装与卸载过程\"></a>安装与卸载过程</h3><hr>\n<ul>\n<li><strong>APP的安装</strong> ：复制APK安装包到data/app目录下，解压并扫描安装包，把dex文件(Dalvik字节码)保存到dalvik-cache目录，并data/data目录下创建对应的应用数据目录</li>\n<li><strong>APP的卸载</strong> ：删除安装过程中在上述三个目录下创建的文件及目录</li>\n</ul>\n<p><strong>注意：没有Root的手机是看不到data目录下的内容的</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"原由\"><a href=\"#原由\" class=\"headerlink\" title=\"原由\"></a>原由</h3><hr>\n<p>在调试安卓APP涉及到缓存文件这块时，发现对APP文件的读写位置不太了解。就去网上查了查，然后总结（抄袭）一下吧（前人总结的确实已经够好了）。</p>\n<h3 id=\"涉及到的目录如下\"><a href=\"#涉及到的目录如下\" class=\"headerlink\" title=\"涉及到的目录如下\"></a>涉及到的目录如下</h3><hr>\n<ul>\n<li><code>system/app</code>：系统自带的应用程序，无法删除</li>\n<li><code>data/app</code>：用户程序安装的目录，有删除权限。安装时把apk文件复制到此目录</li>\n<li><code>data/data</code>：存放应用程序的数据</li>\n<li><code>data/dalvik-cache</code>：将apk中的dex文件安装到dalvik-cache目录下(dex文件是dalvik虚拟机的可执行文件,其大小约为原始apk文件大小的四分之一)</li>\n</ul>\n<h3 id=\"安装与卸载过程\"><a href=\"#安装与卸载过程\" class=\"headerlink\" title=\"安装与卸载过程\"></a>安装与卸载过程</h3><hr>\n<ul>\n<li><strong>APP的安装</strong> ：复制APK安装包到data/app目录下，解压并扫描安装包，把dex文件(Dalvik字节码)保存到dalvik-cache目录，并data/data目录下创建对应的应用数据目录</li>\n<li><strong>APP的卸载</strong> ：删除安装过程中在上述三个目录下创建的文件及目录</li>\n</ul>\n<p><strong>注意：没有Root的手机是看不到data目录下的内容的</strong></p>\n"},{"title":"心跳机制","date":"2019-05-30T16:00:00.000Z","_content":"\n### 心跳（HeartBeat）\n---\n\n在计算机领域中，有很多概念和机制的命名，都参考了现实生活中已有的事物或者概念，两者之间一般都具有共同或者相似的行为。\n\n例如：\n* 容器\n* 树\n* 迭代器/游标\n* 父类、子类\n* 神经网络\n* 心跳\n\n### 为何需要心跳机制\n---\n\n* C/S架构的软件，采用长连接时，通常并不会一直都会有数据传输的。连接处于空闲状态的时间占有相当比例。如果客户端发生崩溃、断网等异常情况时，除非在此连接上继续发送数据产生错误返回，否则服务器无法得知客户端真的出现异常情况了。想要及时得知这一情况并做相应处理的话，就需要心跳机制。\n* 另一方面，app经常需要和服务器及时同步一些数据，也可以通过心跳包发送过去。\n\n### TCP内置的KeepAlive保活机制\n---\n\n* 7,200,000 ms：TCP默认的心跳间隔时间是2个小时！，这在绝大多数APP中是无法忍受的。\n* 这就要提出另外一个问题：心跳间隔时间的不合理设置，可能会因为短暂的网络波动而断开健康的TCP连接。\n\n### 实践中的疑虑\n---\n\n参与开发中的一个项目，心跳的间隔时间是8秒。检测到玩家断线时，客户端会有断线重连的提示。\n\n现在遇到这样的bug：\n\n流程如下：\n\n玩家点击某个按钮 => 发送消息至服务器 => 服务器处理后，返回消息给客户端 => 客户端做出对应的UI表现\n\n玩家反馈：\n\n点击按钮没有任何反应，没有断线重连提示，服务器日志没有查到这位玩家发送的消息日志。\n\n我猜想：\n\n玩家在点击按钮的时候，正好网络波动网络消息没有发出去，他没有看见断线重连的提示，是因为：短暂之后（8秒之内）网络又好了。也就是说恰好网络波动只是出现在两次心跳之间，而没有被客户端检测到。所以玩家觉得网络没有任何问题（依据是客户端的断线重连提示），服务器日志却又查不到发送网络消息的日志。\n\n\n\n","source":"_posts/GameDev/心跳机制.md","raw":"---\ntitle: 心跳机制\ncategories: 游戏开发\ndate: 2019-05-31\n---\n\n### 心跳（HeartBeat）\n---\n\n在计算机领域中，有很多概念和机制的命名，都参考了现实生活中已有的事物或者概念，两者之间一般都具有共同或者相似的行为。\n\n例如：\n* 容器\n* 树\n* 迭代器/游标\n* 父类、子类\n* 神经网络\n* 心跳\n\n### 为何需要心跳机制\n---\n\n* C/S架构的软件，采用长连接时，通常并不会一直都会有数据传输的。连接处于空闲状态的时间占有相当比例。如果客户端发生崩溃、断网等异常情况时，除非在此连接上继续发送数据产生错误返回，否则服务器无法得知客户端真的出现异常情况了。想要及时得知这一情况并做相应处理的话，就需要心跳机制。\n* 另一方面，app经常需要和服务器及时同步一些数据，也可以通过心跳包发送过去。\n\n### TCP内置的KeepAlive保活机制\n---\n\n* 7,200,000 ms：TCP默认的心跳间隔时间是2个小时！，这在绝大多数APP中是无法忍受的。\n* 这就要提出另外一个问题：心跳间隔时间的不合理设置，可能会因为短暂的网络波动而断开健康的TCP连接。\n\n### 实践中的疑虑\n---\n\n参与开发中的一个项目，心跳的间隔时间是8秒。检测到玩家断线时，客户端会有断线重连的提示。\n\n现在遇到这样的bug：\n\n流程如下：\n\n玩家点击某个按钮 => 发送消息至服务器 => 服务器处理后，返回消息给客户端 => 客户端做出对应的UI表现\n\n玩家反馈：\n\n点击按钮没有任何反应，没有断线重连提示，服务器日志没有查到这位玩家发送的消息日志。\n\n我猜想：\n\n玩家在点击按钮的时候，正好网络波动网络消息没有发出去，他没有看见断线重连的提示，是因为：短暂之后（8秒之内）网络又好了。也就是说恰好网络波动只是出现在两次心跳之间，而没有被客户端检测到。所以玩家觉得网络没有任何问题（依据是客户端的断线重连提示），服务器日志却又查不到发送网络消息的日志。\n\n\n\n","slug":"GameDev/心跳机制","published":1,"updated":"2019-05-31T10:11:22.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v7z001ahcr7sqhg315x","content":"<h3 id=\"心跳（HeartBeat）\"><a href=\"#心跳（HeartBeat）\" class=\"headerlink\" title=\"心跳（HeartBeat）\"></a>心跳（HeartBeat）</h3><hr>\n<p>在计算机领域中，有很多概念和机制的命名，都参考了现实生活中已有的事物或者概念，两者之间一般都具有共同或者相似的行为。</p>\n<p>例如：</p>\n<ul>\n<li>容器</li>\n<li>树</li>\n<li>迭代器/游标</li>\n<li>父类、子类</li>\n<li>神经网络</li>\n<li>心跳</li>\n</ul>\n<h3 id=\"为何需要心跳机制\"><a href=\"#为何需要心跳机制\" class=\"headerlink\" title=\"为何需要心跳机制\"></a>为何需要心跳机制</h3><hr>\n<ul>\n<li>C/S架构的软件，采用长连接时，通常并不会一直都会有数据传输的。连接处于空闲状态的时间占有相当比例。如果客户端发生崩溃、断网等异常情况时，除非在此连接上继续发送数据产生错误返回，否则服务器无法得知客户端真的出现异常情况了。想要及时得知这一情况并做相应处理的话，就需要心跳机制。</li>\n<li>另一方面，app经常需要和服务器及时同步一些数据，也可以通过心跳包发送过去。</li>\n</ul>\n<h3 id=\"TCP内置的KeepAlive保活机制\"><a href=\"#TCP内置的KeepAlive保活机制\" class=\"headerlink\" title=\"TCP内置的KeepAlive保活机制\"></a>TCP内置的KeepAlive保活机制</h3><hr>\n<ul>\n<li>7,200,000 ms：TCP默认的心跳间隔时间是2个小时！，这在绝大多数APP中是无法忍受的。</li>\n<li>这就要提出另外一个问题：心跳间隔时间的不合理设置，可能会因为短暂的网络波动而断开健康的TCP连接。</li>\n</ul>\n<h3 id=\"实践中的疑虑\"><a href=\"#实践中的疑虑\" class=\"headerlink\" title=\"实践中的疑虑\"></a>实践中的疑虑</h3><hr>\n<p>参与开发中的一个项目，心跳的间隔时间是8秒。检测到玩家断线时，客户端会有断线重连的提示。</p>\n<p>现在遇到这样的bug：</p>\n<p>流程如下：</p>\n<p>玩家点击某个按钮 =&gt; 发送消息至服务器 =&gt; 服务器处理后，返回消息给客户端 =&gt; 客户端做出对应的UI表现</p>\n<p>玩家反馈：</p>\n<p>点击按钮没有任何反应，没有断线重连提示，服务器日志没有查到这位玩家发送的消息日志。</p>\n<p>我猜想：</p>\n<p>玩家在点击按钮的时候，正好网络波动网络消息没有发出去，他没有看见断线重连的提示，是因为：短暂之后（8秒之内）网络又好了。也就是说恰好网络波动只是出现在两次心跳之间，而没有被客户端检测到。所以玩家觉得网络没有任何问题（依据是客户端的断线重连提示），服务器日志却又查不到发送网络消息的日志。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"心跳（HeartBeat）\"><a href=\"#心跳（HeartBeat）\" class=\"headerlink\" title=\"心跳（HeartBeat）\"></a>心跳（HeartBeat）</h3><hr>\n<p>在计算机领域中，有很多概念和机制的命名，都参考了现实生活中已有的事物或者概念，两者之间一般都具有共同或者相似的行为。</p>\n<p>例如：</p>\n<ul>\n<li>容器</li>\n<li>树</li>\n<li>迭代器/游标</li>\n<li>父类、子类</li>\n<li>神经网络</li>\n<li>心跳</li>\n</ul>\n<h3 id=\"为何需要心跳机制\"><a href=\"#为何需要心跳机制\" class=\"headerlink\" title=\"为何需要心跳机制\"></a>为何需要心跳机制</h3><hr>\n<ul>\n<li>C/S架构的软件，采用长连接时，通常并不会一直都会有数据传输的。连接处于空闲状态的时间占有相当比例。如果客户端发生崩溃、断网等异常情况时，除非在此连接上继续发送数据产生错误返回，否则服务器无法得知客户端真的出现异常情况了。想要及时得知这一情况并做相应处理的话，就需要心跳机制。</li>\n<li>另一方面，app经常需要和服务器及时同步一些数据，也可以通过心跳包发送过去。</li>\n</ul>\n<h3 id=\"TCP内置的KeepAlive保活机制\"><a href=\"#TCP内置的KeepAlive保活机制\" class=\"headerlink\" title=\"TCP内置的KeepAlive保活机制\"></a>TCP内置的KeepAlive保活机制</h3><hr>\n<ul>\n<li>7,200,000 ms：TCP默认的心跳间隔时间是2个小时！，这在绝大多数APP中是无法忍受的。</li>\n<li>这就要提出另外一个问题：心跳间隔时间的不合理设置，可能会因为短暂的网络波动而断开健康的TCP连接。</li>\n</ul>\n<h3 id=\"实践中的疑虑\"><a href=\"#实践中的疑虑\" class=\"headerlink\" title=\"实践中的疑虑\"></a>实践中的疑虑</h3><hr>\n<p>参与开发中的一个项目，心跳的间隔时间是8秒。检测到玩家断线时，客户端会有断线重连的提示。</p>\n<p>现在遇到这样的bug：</p>\n<p>流程如下：</p>\n<p>玩家点击某个按钮 =&gt; 发送消息至服务器 =&gt; 服务器处理后，返回消息给客户端 =&gt; 客户端做出对应的UI表现</p>\n<p>玩家反馈：</p>\n<p>点击按钮没有任何反应，没有断线重连提示，服务器日志没有查到这位玩家发送的消息日志。</p>\n<p>我猜想：</p>\n<p>玩家在点击按钮的时候，正好网络波动网络消息没有发出去，他没有看见断线重连的提示，是因为：短暂之后（8秒之内）网络又好了。也就是说恰好网络波动只是出现在两次心跳之间，而没有被客户端检测到。所以玩家觉得网络没有任何问题（依据是客户端的断线重连提示），服务器日志却又查不到发送网络消息的日志。</p>\n"},{"title":"“此应用专为旧版Android打造，因此可能无法正常运行。请尝试检查更新或与开发者联系”","date":"2019-07-07T16:00:00.000Z","_content":"\n### 说明\n正在开发的游戏在 android 9 上出现过这个提示，但是只要用户忽略（点击提示框上的 “确定” 按钮）这个弹框就能正常进入游戏，所以也就没管它了。后来出现一例直接闪退的。。。\n\n### 解决方法\n\n* 如果你是使用 eclipse 打包 apk 的话（比如我现在就是用  eclipse 的，虽然自己也摸索过 Android Studio ）。请编辑[应用清单文件](https://developer.android.com/guide/topics/manifest/manifest-intro.html?hl=zh-cn) AndroidManifest.xml 里的 uses-sdk 字段，增加 `android:targetSdkVersion=\"22\" ` 这样一对键值对（按照网上的说法，键值对的值只要大于等于17就行，我参考公司其他项目设置成了22）进去，然后重新打包就行了。\n\n* 如果你使用 Android Studio 打包 apk 的话，请参考[这篇文章](https://blog.csdn.net/qiaoquan3/article/details/70185693)\n","source":"_posts/Android/“此应用专为旧版Android打造，因此可能无法正常运行。请尝试检查更新或与开发者联系”.md","raw":"---\ntitle: “此应用专为旧版Android打造，因此可能无法正常运行。请尝试检查更新或与开发者联系”\ncategories: Android\ndate: 2019-07-08\n---\n\n### 说明\n正在开发的游戏在 android 9 上出现过这个提示，但是只要用户忽略（点击提示框上的 “确定” 按钮）这个弹框就能正常进入游戏，所以也就没管它了。后来出现一例直接闪退的。。。\n\n### 解决方法\n\n* 如果你是使用 eclipse 打包 apk 的话（比如我现在就是用  eclipse 的，虽然自己也摸索过 Android Studio ）。请编辑[应用清单文件](https://developer.android.com/guide/topics/manifest/manifest-intro.html?hl=zh-cn) AndroidManifest.xml 里的 uses-sdk 字段，增加 `android:targetSdkVersion=\"22\" ` 这样一对键值对（按照网上的说法，键值对的值只要大于等于17就行，我参考公司其他项目设置成了22）进去，然后重新打包就行了。\n\n* 如果你使用 Android Studio 打包 apk 的话，请参考[这篇文章](https://blog.csdn.net/qiaoquan3/article/details/70185693)\n","slug":"Android/“此应用专为旧版Android打造，因此可能无法正常运行。请尝试检查更新或与开发者联系”","published":1,"updated":"2019-07-08T12:55:03.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v80001chcr7gm68x6p4","content":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>正在开发的游戏在 android 9 上出现过这个提示，但是只要用户忽略（点击提示框上的 “确定” 按钮）这个弹框就能正常进入游戏，所以也就没管它了。后来出现一例直接闪退的。。。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><ul>\n<li><p>如果你是使用 eclipse 打包 apk 的话（比如我现在就是用  eclipse 的，虽然自己也摸索过 Android Studio ）。请编辑<a href=\"https://developer.android.com/guide/topics/manifest/manifest-intro.html?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">应用清单文件</a> AndroidManifest.xml 里的 uses-sdk 字段，增加 <code>android:targetSdkVersion=&quot;22&quot;</code> 这样一对键值对（按照网上的说法，键值对的值只要大于等于17就行，我参考公司其他项目设置成了22）进去，然后重新打包就行了。</p>\n</li>\n<li><p>如果你使用 Android Studio 打包 apk 的话，请参考<a href=\"https://blog.csdn.net/qiaoquan3/article/details/70185693\" target=\"_blank\" rel=\"noopener\">这篇文章</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>正在开发的游戏在 android 9 上出现过这个提示，但是只要用户忽略（点击提示框上的 “确定” 按钮）这个弹框就能正常进入游戏，所以也就没管它了。后来出现一例直接闪退的。。。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><ul>\n<li><p>如果你是使用 eclipse 打包 apk 的话（比如我现在就是用  eclipse 的，虽然自己也摸索过 Android Studio ）。请编辑<a href=\"https://developer.android.com/guide/topics/manifest/manifest-intro.html?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">应用清单文件</a> AndroidManifest.xml 里的 uses-sdk 字段，增加 <code>android:targetSdkVersion=&quot;22&quot;</code> 这样一对键值对（按照网上的说法，键值对的值只要大于等于17就行，我参考公司其他项目设置成了22）进去，然后重新打包就行了。</p>\n</li>\n<li><p>如果你使用 Android Studio 打包 apk 的话，请参考<a href=\"https://blog.csdn.net/qiaoquan3/article/details/70185693\" target=\"_blank\" rel=\"noopener\">这篇文章</a></p>\n</li>\n</ul>\n"},{"title":"获取IOS真机日志","date":"2019-07-23T16:00:00.000Z","_content":"\n### 为何要纠结这个IOS真机日志呢？\n---\n\n* `android` 和 `ios` 比较，我自然是更熟悉 `android`，还不是因为 `android` 开源免费又便宜😂\n* `android` 随手可得的模拟器、开发工具。换作 `ios` 的话，你得先买个 `Mac` 先\n* `android` 的系统日志功能，我经常使用它来调试一些真机上才会出现的 `bug`，确实方便易用，没有这个系统日志，那我基本上就是个无头苍蝇了\n* 于是我就想啊：`android` 都有的这个方便开发者调试的功能，那 `ios` 上一定也有吧？\n* 今天，这个问题的答案终于被我验证了！确实有的！并且想要查看这个日志，并不需要一定在Mac上或者借助XCode（不过XCode确实附带了一些功能，可以让这些日志更有条理的展现在你面前）\n\n### 在XCode上查看真机日志\n---\n\n#### 查看实时日志\n手机通过数据线连上 `Mac`，打开 `XCode`，通过 `Window` -> `Devices and Simulators` -> `Open Console` 就可以查看手机系统的实时日志了\n#### 以前（非实时）的日志\n和上面同样的方式，最后一步选择 `View Device Logs` 就可以，*注意这里面是可以看到系统记录的APP的崩溃日志的*，至于崩溃日志的格式信息，自己可以打开看下，除了包含一些必要的标识信息之外，还有一个崩溃堆栈的信息。不过我看了下，这些崩溃的堆栈信息基本上都是十六进制形式的，对我好像并没有什么卵用。也许能通过什么方式，比如像使用符号表那样找到对应的代码文件和行数，这个等以后用上的时候再研究吧。\n\n### 使用iTool工具在Win32平台上查看真机日志\n---\n\n* 手机连上 `Win32` 电脑，等待 `iTool` 检测到,然后选择 `工具箱`，再选择里面的 `实时日志` 或者 `崩溃日志` 就可以查看了\n\n\n\n### 参考：\n* https://apple.stackovernet.com/cn/q/44097\n* https://wiki.appcelerator.org/display/guides2/Native+iOS+Debugging+and+Testing+Tools#NativeiOSDebuggingandTestingTools-Viewcrashlogsonadevice\n* https://www.jianshu.com/p/75aad79c55a6\n* https://blog.csdn.net/jasonblog/article/details/19031517\n* http://www.cocoachina.com/articles/6677\n\n\n","source":"_posts/IOS/获取IOS真机日志.md","raw":"---\ntitle: 获取IOS真机日志\ncategories: IOS\ndate: 2019-07-24\n---\n\n### 为何要纠结这个IOS真机日志呢？\n---\n\n* `android` 和 `ios` 比较，我自然是更熟悉 `android`，还不是因为 `android` 开源免费又便宜😂\n* `android` 随手可得的模拟器、开发工具。换作 `ios` 的话，你得先买个 `Mac` 先\n* `android` 的系统日志功能，我经常使用它来调试一些真机上才会出现的 `bug`，确实方便易用，没有这个系统日志，那我基本上就是个无头苍蝇了\n* 于是我就想啊：`android` 都有的这个方便开发者调试的功能，那 `ios` 上一定也有吧？\n* 今天，这个问题的答案终于被我验证了！确实有的！并且想要查看这个日志，并不需要一定在Mac上或者借助XCode（不过XCode确实附带了一些功能，可以让这些日志更有条理的展现在你面前）\n\n### 在XCode上查看真机日志\n---\n\n#### 查看实时日志\n手机通过数据线连上 `Mac`，打开 `XCode`，通过 `Window` -> `Devices and Simulators` -> `Open Console` 就可以查看手机系统的实时日志了\n#### 以前（非实时）的日志\n和上面同样的方式，最后一步选择 `View Device Logs` 就可以，*注意这里面是可以看到系统记录的APP的崩溃日志的*，至于崩溃日志的格式信息，自己可以打开看下，除了包含一些必要的标识信息之外，还有一个崩溃堆栈的信息。不过我看了下，这些崩溃的堆栈信息基本上都是十六进制形式的，对我好像并没有什么卵用。也许能通过什么方式，比如像使用符号表那样找到对应的代码文件和行数，这个等以后用上的时候再研究吧。\n\n### 使用iTool工具在Win32平台上查看真机日志\n---\n\n* 手机连上 `Win32` 电脑，等待 `iTool` 检测到,然后选择 `工具箱`，再选择里面的 `实时日志` 或者 `崩溃日志` 就可以查看了\n\n\n\n### 参考：\n* https://apple.stackovernet.com/cn/q/44097\n* https://wiki.appcelerator.org/display/guides2/Native+iOS+Debugging+and+Testing+Tools#NativeiOSDebuggingandTestingTools-Viewcrashlogsonadevice\n* https://www.jianshu.com/p/75aad79c55a6\n* https://blog.csdn.net/jasonblog/article/details/19031517\n* http://www.cocoachina.com/articles/6677\n\n\n","slug":"IOS/获取IOS真机日志","published":1,"updated":"2019-07-24T13:30:49.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v81001dhcr7p7ltbkw4","content":"<h3 id=\"为何要纠结这个IOS真机日志呢？\"><a href=\"#为何要纠结这个IOS真机日志呢？\" class=\"headerlink\" title=\"为何要纠结这个IOS真机日志呢？\"></a>为何要纠结这个IOS真机日志呢？</h3><hr>\n<ul>\n<li><code>android</code> 和 <code>ios</code> 比较，我自然是更熟悉 <code>android</code>，还不是因为 <code>android</code> 开源免费又便宜😂</li>\n<li><code>android</code> 随手可得的模拟器、开发工具。换作 <code>ios</code> 的话，你得先买个 <code>Mac</code> 先</li>\n<li><code>android</code> 的系统日志功能，我经常使用它来调试一些真机上才会出现的 <code>bug</code>，确实方便易用，没有这个系统日志，那我基本上就是个无头苍蝇了</li>\n<li>于是我就想啊：<code>android</code> 都有的这个方便开发者调试的功能，那 <code>ios</code> 上一定也有吧？</li>\n<li>今天，这个问题的答案终于被我验证了！确实有的！并且想要查看这个日志，并不需要一定在Mac上或者借助XCode（不过XCode确实附带了一些功能，可以让这些日志更有条理的展现在你面前）</li>\n</ul>\n<h3 id=\"在XCode上查看真机日志\"><a href=\"#在XCode上查看真机日志\" class=\"headerlink\" title=\"在XCode上查看真机日志\"></a>在XCode上查看真机日志</h3><hr>\n<h4 id=\"查看实时日志\"><a href=\"#查看实时日志\" class=\"headerlink\" title=\"查看实时日志\"></a>查看实时日志</h4><p>手机通过数据线连上 <code>Mac</code>，打开 <code>XCode</code>，通过 <code>Window</code> -&gt; <code>Devices and Simulators</code> -&gt; <code>Open Console</code> 就可以查看手机系统的实时日志了</p>\n<h4 id=\"以前（非实时）的日志\"><a href=\"#以前（非实时）的日志\" class=\"headerlink\" title=\"以前（非实时）的日志\"></a>以前（非实时）的日志</h4><p>和上面同样的方式，最后一步选择 <code>View Device Logs</code> 就可以，<em>注意这里面是可以看到系统记录的APP的崩溃日志的</em>，至于崩溃日志的格式信息，自己可以打开看下，除了包含一些必要的标识信息之外，还有一个崩溃堆栈的信息。不过我看了下，这些崩溃的堆栈信息基本上都是十六进制形式的，对我好像并没有什么卵用。也许能通过什么方式，比如像使用符号表那样找到对应的代码文件和行数，这个等以后用上的时候再研究吧。</p>\n<h3 id=\"使用iTool工具在Win32平台上查看真机日志\"><a href=\"#使用iTool工具在Win32平台上查看真机日志\" class=\"headerlink\" title=\"使用iTool工具在Win32平台上查看真机日志\"></a>使用iTool工具在Win32平台上查看真机日志</h3><hr>\n<ul>\n<li>手机连上 <code>Win32</code> 电脑，等待 <code>iTool</code> 检测到,然后选择 <code>工具箱</code>，再选择里面的 <code>实时日志</code> 或者 <code>崩溃日志</code> 就可以查看了</li>\n</ul>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><ul>\n<li><a href=\"https://apple.stackovernet.com/cn/q/44097\" target=\"_blank\" rel=\"noopener\">https://apple.stackovernet.com/cn/q/44097</a></li>\n<li><a href=\"https://wiki.appcelerator.org/display/guides2/Native+iOS+Debugging+and+Testing+Tools#NativeiOSDebuggingandTestingTools-Viewcrashlogsonadevice\" target=\"_blank\" rel=\"noopener\">https://wiki.appcelerator.org/display/guides2/Native+iOS+Debugging+and+Testing+Tools#NativeiOSDebuggingandTestingTools-Viewcrashlogsonadevice</a></li>\n<li><a href=\"https://www.jianshu.com/p/75aad79c55a6\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/75aad79c55a6</a></li>\n<li><a href=\"https://blog.csdn.net/jasonblog/article/details/19031517\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jasonblog/article/details/19031517</a></li>\n<li><a href=\"http://www.cocoachina.com/articles/6677\" target=\"_blank\" rel=\"noopener\">http://www.cocoachina.com/articles/6677</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"为何要纠结这个IOS真机日志呢？\"><a href=\"#为何要纠结这个IOS真机日志呢？\" class=\"headerlink\" title=\"为何要纠结这个IOS真机日志呢？\"></a>为何要纠结这个IOS真机日志呢？</h3><hr>\n<ul>\n<li><code>android</code> 和 <code>ios</code> 比较，我自然是更熟悉 <code>android</code>，还不是因为 <code>android</code> 开源免费又便宜😂</li>\n<li><code>android</code> 随手可得的模拟器、开发工具。换作 <code>ios</code> 的话，你得先买个 <code>Mac</code> 先</li>\n<li><code>android</code> 的系统日志功能，我经常使用它来调试一些真机上才会出现的 <code>bug</code>，确实方便易用，没有这个系统日志，那我基本上就是个无头苍蝇了</li>\n<li>于是我就想啊：<code>android</code> 都有的这个方便开发者调试的功能，那 <code>ios</code> 上一定也有吧？</li>\n<li>今天，这个问题的答案终于被我验证了！确实有的！并且想要查看这个日志，并不需要一定在Mac上或者借助XCode（不过XCode确实附带了一些功能，可以让这些日志更有条理的展现在你面前）</li>\n</ul>\n<h3 id=\"在XCode上查看真机日志\"><a href=\"#在XCode上查看真机日志\" class=\"headerlink\" title=\"在XCode上查看真机日志\"></a>在XCode上查看真机日志</h3><hr>\n<h4 id=\"查看实时日志\"><a href=\"#查看实时日志\" class=\"headerlink\" title=\"查看实时日志\"></a>查看实时日志</h4><p>手机通过数据线连上 <code>Mac</code>，打开 <code>XCode</code>，通过 <code>Window</code> -&gt; <code>Devices and Simulators</code> -&gt; <code>Open Console</code> 就可以查看手机系统的实时日志了</p>\n<h4 id=\"以前（非实时）的日志\"><a href=\"#以前（非实时）的日志\" class=\"headerlink\" title=\"以前（非实时）的日志\"></a>以前（非实时）的日志</h4><p>和上面同样的方式，最后一步选择 <code>View Device Logs</code> 就可以，<em>注意这里面是可以看到系统记录的APP的崩溃日志的</em>，至于崩溃日志的格式信息，自己可以打开看下，除了包含一些必要的标识信息之外，还有一个崩溃堆栈的信息。不过我看了下，这些崩溃的堆栈信息基本上都是十六进制形式的，对我好像并没有什么卵用。也许能通过什么方式，比如像使用符号表那样找到对应的代码文件和行数，这个等以后用上的时候再研究吧。</p>\n<h3 id=\"使用iTool工具在Win32平台上查看真机日志\"><a href=\"#使用iTool工具在Win32平台上查看真机日志\" class=\"headerlink\" title=\"使用iTool工具在Win32平台上查看真机日志\"></a>使用iTool工具在Win32平台上查看真机日志</h3><hr>\n<ul>\n<li>手机连上 <code>Win32</code> 电脑，等待 <code>iTool</code> 检测到,然后选择 <code>工具箱</code>，再选择里面的 <code>实时日志</code> 或者 <code>崩溃日志</code> 就可以查看了</li>\n</ul>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><ul>\n<li><a href=\"https://apple.stackovernet.com/cn/q/44097\" target=\"_blank\" rel=\"noopener\">https://apple.stackovernet.com/cn/q/44097</a></li>\n<li><a href=\"https://wiki.appcelerator.org/display/guides2/Native+iOS+Debugging+and+Testing+Tools#NativeiOSDebuggingandTestingTools-Viewcrashlogsonadevice\" target=\"_blank\" rel=\"noopener\">https://wiki.appcelerator.org/display/guides2/Native+iOS+Debugging+and+Testing+Tools#NativeiOSDebuggingandTestingTools-Viewcrashlogsonadevice</a></li>\n<li><a href=\"https://www.jianshu.com/p/75aad79c55a6\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/75aad79c55a6</a></li>\n<li><a href=\"https://blog.csdn.net/jasonblog/article/details/19031517\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jasonblog/article/details/19031517</a></li>\n<li><a href=\"http://www.cocoachina.com/articles/6677\" target=\"_blank\" rel=\"noopener\">http://www.cocoachina.com/articles/6677</a></li>\n</ul>\n"},{"title":"IOS打包生成的dSYM文件","date":"2019-07-23T16:00:00.000Z","_content":"\n### dSYM文件\n---\n\n需要这个文件是因为：bugly需要每次IOS打包生成的dSYM文件，以提取对应的符号表。当bugly记录到APP崩溃时，根据这个符号表可以还原成人类可读的崩溃堆栈信息。没有这个符号表时，bugly后台看到的只是一些十六进制的内存地址；而有了这个符号表就可以还原成崩溃发生在哪个代码文件的哪一行。这样定位问题就非常方便了（某些崩溃即使在有符号表的情况下，依然是一堆十六进制符号。。。）\n\n### 定位dSYM文件\n---\n\n#### 那么问题来了，IOS打包后这个文件生成的位置在哪呢？\n*因为参考了bugly的[官方文档](https://bugly.qq.com/docs/user-guide/symbol-configuration-ios/?v=20180709165613)，我被这个问题耗了不少时间！*根据bugly官方文档说明，这个文件可以这样找到：\n* 打开项目的XCode工程\n* 在`Products`文件夹下，找到`Test.app`\n* 右键，选择`Show in Finder`，这样就能找到dSYM文件了\n\n问题是，我发现这个文件在每次打包（`Window` -> `Archive`）时，并不会自动生成。于是Google一下，发现release模式下是会默认生成这个文件，而debug模式下则不会。\n\n我想啊，难道我们项目打包都是用的debug？\n\n那不太可能吧，不过实在没办法。照网上说法：选中XCode工程的 `target` -> `Build Setting` -> `Debug Information Fromat`，在 `Release` 项选择 `DWARF with dSYM File` 。\n\n* 问题是，我这样设置了，Archive后还是没有生成新的dSYM文件\n* 旁边同事说试试删掉旧的dSYM文件呢？我删了后，依旧不会生成新的dSYM文件\n* 最后我发现，执行XCode工程的 `Products` -> `Clean` 命令，然后再执行 `Products` -> `Build` 命令。构建结束后，确实生成了新的dSYM文件\n\n但是呢，问题又来了。提取这个dSYM文件里的符号表上传到bugly后，发现和APP的崩溃堆栈根本对不上，也就是不匹配的意思；这说明这里生成的dSYM文件并不是我需要的那个dSYM文件！\n\n#### 真正需要的dSYM文件位置\n我也是搜遍了大半个互联网，终于找到了一个对我真正有用的[文章](https://www.jianshu.com/p/6fa16720f7b5)。在XCode工程中，选择 `Window` -> `Organizer` -> `Archives` ，右键选择 `Show in Finder` ，再显示包内容，打开dSYMs文件夹，里面就有打包（`Window` -> `Archive`）对应生成的 `Test.app.dSYM` 文件了: )","source":"_posts/IOS/IOS打包生成的dSYM文件.md","raw":"---\ntitle: IOS打包生成的dSYM文件\ncategories: IOS\ndate: 2019-07-24\n---\n\n### dSYM文件\n---\n\n需要这个文件是因为：bugly需要每次IOS打包生成的dSYM文件，以提取对应的符号表。当bugly记录到APP崩溃时，根据这个符号表可以还原成人类可读的崩溃堆栈信息。没有这个符号表时，bugly后台看到的只是一些十六进制的内存地址；而有了这个符号表就可以还原成崩溃发生在哪个代码文件的哪一行。这样定位问题就非常方便了（某些崩溃即使在有符号表的情况下，依然是一堆十六进制符号。。。）\n\n### 定位dSYM文件\n---\n\n#### 那么问题来了，IOS打包后这个文件生成的位置在哪呢？\n*因为参考了bugly的[官方文档](https://bugly.qq.com/docs/user-guide/symbol-configuration-ios/?v=20180709165613)，我被这个问题耗了不少时间！*根据bugly官方文档说明，这个文件可以这样找到：\n* 打开项目的XCode工程\n* 在`Products`文件夹下，找到`Test.app`\n* 右键，选择`Show in Finder`，这样就能找到dSYM文件了\n\n问题是，我发现这个文件在每次打包（`Window` -> `Archive`）时，并不会自动生成。于是Google一下，发现release模式下是会默认生成这个文件，而debug模式下则不会。\n\n我想啊，难道我们项目打包都是用的debug？\n\n那不太可能吧，不过实在没办法。照网上说法：选中XCode工程的 `target` -> `Build Setting` -> `Debug Information Fromat`，在 `Release` 项选择 `DWARF with dSYM File` 。\n\n* 问题是，我这样设置了，Archive后还是没有生成新的dSYM文件\n* 旁边同事说试试删掉旧的dSYM文件呢？我删了后，依旧不会生成新的dSYM文件\n* 最后我发现，执行XCode工程的 `Products` -> `Clean` 命令，然后再执行 `Products` -> `Build` 命令。构建结束后，确实生成了新的dSYM文件\n\n但是呢，问题又来了。提取这个dSYM文件里的符号表上传到bugly后，发现和APP的崩溃堆栈根本对不上，也就是不匹配的意思；这说明这里生成的dSYM文件并不是我需要的那个dSYM文件！\n\n#### 真正需要的dSYM文件位置\n我也是搜遍了大半个互联网，终于找到了一个对我真正有用的[文章](https://www.jianshu.com/p/6fa16720f7b5)。在XCode工程中，选择 `Window` -> `Organizer` -> `Archives` ，右键选择 `Show in Finder` ，再显示包内容，打开dSYMs文件夹，里面就有打包（`Window` -> `Archive`）对应生成的 `Test.app.dSYM` 文件了: )","slug":"IOS/IOS打包生成的dSYM文件","published":1,"updated":"2019-07-24T13:27:53.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v84001ghcr7shqoydpi","content":"<h3 id=\"dSYM文件\"><a href=\"#dSYM文件\" class=\"headerlink\" title=\"dSYM文件\"></a>dSYM文件</h3><hr>\n<p>需要这个文件是因为：bugly需要每次IOS打包生成的dSYM文件，以提取对应的符号表。当bugly记录到APP崩溃时，根据这个符号表可以还原成人类可读的崩溃堆栈信息。没有这个符号表时，bugly后台看到的只是一些十六进制的内存地址；而有了这个符号表就可以还原成崩溃发生在哪个代码文件的哪一行。这样定位问题就非常方便了（某些崩溃即使在有符号表的情况下，依然是一堆十六进制符号。。。）</p>\n<h3 id=\"定位dSYM文件\"><a href=\"#定位dSYM文件\" class=\"headerlink\" title=\"定位dSYM文件\"></a>定位dSYM文件</h3><hr>\n<h4 id=\"那么问题来了，IOS打包后这个文件生成的位置在哪呢？\"><a href=\"#那么问题来了，IOS打包后这个文件生成的位置在哪呢？\" class=\"headerlink\" title=\"那么问题来了，IOS打包后这个文件生成的位置在哪呢？\"></a>那么问题来了，IOS打包后这个文件生成的位置在哪呢？</h4><p><em>因为参考了bugly的<a href=\"https://bugly.qq.com/docs/user-guide/symbol-configuration-ios/?v=20180709165613\" target=\"_blank\" rel=\"noopener\">官方文档</a>，我被这个问题耗了不少时间！</em>根据bugly官方文档说明，这个文件可以这样找到：</p>\n<ul>\n<li>打开项目的XCode工程</li>\n<li>在<code>Products</code>文件夹下，找到<code>Test.app</code></li>\n<li>右键，选择<code>Show in Finder</code>，这样就能找到dSYM文件了</li>\n</ul>\n<p>问题是，我发现这个文件在每次打包（<code>Window</code> -&gt; <code>Archive</code>）时，并不会自动生成。于是Google一下，发现release模式下是会默认生成这个文件，而debug模式下则不会。</p>\n<p>我想啊，难道我们项目打包都是用的debug？</p>\n<p>那不太可能吧，不过实在没办法。照网上说法：选中XCode工程的 <code>target</code> -&gt; <code>Build Setting</code> -&gt; <code>Debug Information Fromat</code>，在 <code>Release</code> 项选择 <code>DWARF with dSYM File</code> 。</p>\n<ul>\n<li>问题是，我这样设置了，Archive后还是没有生成新的dSYM文件</li>\n<li>旁边同事说试试删掉旧的dSYM文件呢？我删了后，依旧不会生成新的dSYM文件</li>\n<li>最后我发现，执行XCode工程的 <code>Products</code> -&gt; <code>Clean</code> 命令，然后再执行 <code>Products</code> -&gt; <code>Build</code> 命令。构建结束后，确实生成了新的dSYM文件</li>\n</ul>\n<p>但是呢，问题又来了。提取这个dSYM文件里的符号表上传到bugly后，发现和APP的崩溃堆栈根本对不上，也就是不匹配的意思；这说明这里生成的dSYM文件并不是我需要的那个dSYM文件！</p>\n<h4 id=\"真正需要的dSYM文件位置\"><a href=\"#真正需要的dSYM文件位置\" class=\"headerlink\" title=\"真正需要的dSYM文件位置\"></a>真正需要的dSYM文件位置</h4><p>我也是搜遍了大半个互联网，终于找到了一个对我真正有用的<a href=\"https://www.jianshu.com/p/6fa16720f7b5\" target=\"_blank\" rel=\"noopener\">文章</a>。在XCode工程中，选择 <code>Window</code> -&gt; <code>Organizer</code> -&gt; <code>Archives</code> ，右键选择 <code>Show in Finder</code> ，再显示包内容，打开dSYMs文件夹，里面就有打包（<code>Window</code> -&gt; <code>Archive</code>）对应生成的 <code>Test.app.dSYM</code> 文件了: )</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"dSYM文件\"><a href=\"#dSYM文件\" class=\"headerlink\" title=\"dSYM文件\"></a>dSYM文件</h3><hr>\n<p>需要这个文件是因为：bugly需要每次IOS打包生成的dSYM文件，以提取对应的符号表。当bugly记录到APP崩溃时，根据这个符号表可以还原成人类可读的崩溃堆栈信息。没有这个符号表时，bugly后台看到的只是一些十六进制的内存地址；而有了这个符号表就可以还原成崩溃发生在哪个代码文件的哪一行。这样定位问题就非常方便了（某些崩溃即使在有符号表的情况下，依然是一堆十六进制符号。。。）</p>\n<h3 id=\"定位dSYM文件\"><a href=\"#定位dSYM文件\" class=\"headerlink\" title=\"定位dSYM文件\"></a>定位dSYM文件</h3><hr>\n<h4 id=\"那么问题来了，IOS打包后这个文件生成的位置在哪呢？\"><a href=\"#那么问题来了，IOS打包后这个文件生成的位置在哪呢？\" class=\"headerlink\" title=\"那么问题来了，IOS打包后这个文件生成的位置在哪呢？\"></a>那么问题来了，IOS打包后这个文件生成的位置在哪呢？</h4><p><em>因为参考了bugly的<a href=\"https://bugly.qq.com/docs/user-guide/symbol-configuration-ios/?v=20180709165613\" target=\"_blank\" rel=\"noopener\">官方文档</a>，我被这个问题耗了不少时间！</em>根据bugly官方文档说明，这个文件可以这样找到：</p>\n<ul>\n<li>打开项目的XCode工程</li>\n<li>在<code>Products</code>文件夹下，找到<code>Test.app</code></li>\n<li>右键，选择<code>Show in Finder</code>，这样就能找到dSYM文件了</li>\n</ul>\n<p>问题是，我发现这个文件在每次打包（<code>Window</code> -&gt; <code>Archive</code>）时，并不会自动生成。于是Google一下，发现release模式下是会默认生成这个文件，而debug模式下则不会。</p>\n<p>我想啊，难道我们项目打包都是用的debug？</p>\n<p>那不太可能吧，不过实在没办法。照网上说法：选中XCode工程的 <code>target</code> -&gt; <code>Build Setting</code> -&gt; <code>Debug Information Fromat</code>，在 <code>Release</code> 项选择 <code>DWARF with dSYM File</code> 。</p>\n<ul>\n<li>问题是，我这样设置了，Archive后还是没有生成新的dSYM文件</li>\n<li>旁边同事说试试删掉旧的dSYM文件呢？我删了后，依旧不会生成新的dSYM文件</li>\n<li>最后我发现，执行XCode工程的 <code>Products</code> -&gt; <code>Clean</code> 命令，然后再执行 <code>Products</code> -&gt; <code>Build</code> 命令。构建结束后，确实生成了新的dSYM文件</li>\n</ul>\n<p>但是呢，问题又来了。提取这个dSYM文件里的符号表上传到bugly后，发现和APP的崩溃堆栈根本对不上，也就是不匹配的意思；这说明这里生成的dSYM文件并不是我需要的那个dSYM文件！</p>\n<h4 id=\"真正需要的dSYM文件位置\"><a href=\"#真正需要的dSYM文件位置\" class=\"headerlink\" title=\"真正需要的dSYM文件位置\"></a>真正需要的dSYM文件位置</h4><p>我也是搜遍了大半个互联网，终于找到了一个对我真正有用的<a href=\"https://www.jianshu.com/p/6fa16720f7b5\" target=\"_blank\" rel=\"noopener\">文章</a>。在XCode工程中，选择 <code>Window</code> -&gt; <code>Organizer</code> -&gt; <code>Archives</code> ，右键选择 <code>Show in Finder</code> ，再显示包内容，打开dSYMs文件夹，里面就有打包（<code>Window</code> -&gt; <code>Archive</code>）对应生成的 <code>Test.app.dSYM</code> 文件了: )</p>\n"},{"title":"域名解析系统（DNS）","date":"2019-07-14T16:00:00.000Z","_content":"\n### 摘要\n---\n\n* 周末才做的一个网站，现在趁热打铁，把一些相关的知识点都记录下来\n* 网站搭建好后，别人想要访问你这个网站，那肯定是要用到域名的，这时就需要给网站一个好记的域名\n* 域名和网站服务器IP的关系，就好像一个人的名字和身份证号码一样，就是为了方便记忆。只不过域名不会重复，但是人的名字是经常重复的\n\n### 记录类型\n---\n\n* **A记录（IPv4主机记录）**：将域名映射到一个IPv4的地址上\n* **CNAME记录（别名记录）**：将某个别名指向到某个A记录上，这样就不需要再为某个新名字另外创建一条新的A记录\n* **AAAA记录（IPv6主机记录）**：将域名映射到一个IPv6的地址上\n\n记录类型还有很多其他类型，常用的其实也就上面3个里的前两个。\n\n### 域名前缀\n---\n\n* **www**：解析后的域名为 `www.example.com`\n* **@**：解析后的域名为 `example.com` ，不用加 `www` 前缀就能访问\n* **\\***：泛解析，匹配其他所有域名 `*.example.com`\n* **mail**：将域名解析为 `mail.example.com`，通常用于解析邮箱服务器\n* **二级域名**：`abc.example.com`\n* **手机网站**：`m.example.com`\n* **显性URL**：不支持泛解析（泛解析：将所有子域名解析到同一地址）\n\n### 实际应用\n---\n\n现在本网站通过添加**CNAME记录**，增加了一个新的域名：`dongshijin.com` 😄\n\n\n\n","source":"_posts/Linux/域名解析系统（DNS）.md","raw":"---\ntitle: 域名解析系统（DNS）\ncategories: Linux\ndate: 2019-07-15\n---\n\n### 摘要\n---\n\n* 周末才做的一个网站，现在趁热打铁，把一些相关的知识点都记录下来\n* 网站搭建好后，别人想要访问你这个网站，那肯定是要用到域名的，这时就需要给网站一个好记的域名\n* 域名和网站服务器IP的关系，就好像一个人的名字和身份证号码一样，就是为了方便记忆。只不过域名不会重复，但是人的名字是经常重复的\n\n### 记录类型\n---\n\n* **A记录（IPv4主机记录）**：将域名映射到一个IPv4的地址上\n* **CNAME记录（别名记录）**：将某个别名指向到某个A记录上，这样就不需要再为某个新名字另外创建一条新的A记录\n* **AAAA记录（IPv6主机记录）**：将域名映射到一个IPv6的地址上\n\n记录类型还有很多其他类型，常用的其实也就上面3个里的前两个。\n\n### 域名前缀\n---\n\n* **www**：解析后的域名为 `www.example.com`\n* **@**：解析后的域名为 `example.com` ，不用加 `www` 前缀就能访问\n* **\\***：泛解析，匹配其他所有域名 `*.example.com`\n* **mail**：将域名解析为 `mail.example.com`，通常用于解析邮箱服务器\n* **二级域名**：`abc.example.com`\n* **手机网站**：`m.example.com`\n* **显性URL**：不支持泛解析（泛解析：将所有子域名解析到同一地址）\n\n### 实际应用\n---\n\n现在本网站通过添加**CNAME记录**，增加了一个新的域名：`dongshijin.com` 😄\n\n\n\n","slug":"Linux/域名解析系统（DNS）","published":1,"updated":"2019-07-16T02:00:32.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v85001ihcr7n5vhj006","content":"<h3 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><hr>\n<ul>\n<li>周末才做的一个网站，现在趁热打铁，把一些相关的知识点都记录下来</li>\n<li>网站搭建好后，别人想要访问你这个网站，那肯定是要用到域名的，这时就需要给网站一个好记的域名</li>\n<li>域名和网站服务器IP的关系，就好像一个人的名字和身份证号码一样，就是为了方便记忆。只不过域名不会重复，但是人的名字是经常重复的</li>\n</ul>\n<h3 id=\"记录类型\"><a href=\"#记录类型\" class=\"headerlink\" title=\"记录类型\"></a>记录类型</h3><hr>\n<ul>\n<li><strong>A记录（IPv4主机记录）</strong>：将域名映射到一个IPv4的地址上</li>\n<li><strong>CNAME记录（别名记录）</strong>：将某个别名指向到某个A记录上，这样就不需要再为某个新名字另外创建一条新的A记录</li>\n<li><strong>AAAA记录（IPv6主机记录）</strong>：将域名映射到一个IPv6的地址上</li>\n</ul>\n<p>记录类型还有很多其他类型，常用的其实也就上面3个里的前两个。</p>\n<h3 id=\"域名前缀\"><a href=\"#域名前缀\" class=\"headerlink\" title=\"域名前缀\"></a>域名前缀</h3><hr>\n<ul>\n<li><strong>www</strong>：解析后的域名为 <code>www.example.com</code></li>\n<li><strong>@</strong>：解析后的域名为 <code>example.com</code> ，不用加 <code>www</code> 前缀就能访问</li>\n<li><strong>*</strong>：泛解析，匹配其他所有域名 <code>*.example.com</code></li>\n<li><strong>mail</strong>：将域名解析为 <code>mail.example.com</code>，通常用于解析邮箱服务器</li>\n<li><strong>二级域名</strong>：<code>abc.example.com</code></li>\n<li><strong>手机网站</strong>：<code>m.example.com</code></li>\n<li><strong>显性URL</strong>：不支持泛解析（泛解析：将所有子域名解析到同一地址）</li>\n</ul>\n<h3 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h3><hr>\n<p>现在本网站通过添加<strong>CNAME记录</strong>，增加了一个新的域名：<code>dongshijin.com</code> 😄</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><hr>\n<ul>\n<li>周末才做的一个网站，现在趁热打铁，把一些相关的知识点都记录下来</li>\n<li>网站搭建好后，别人想要访问你这个网站，那肯定是要用到域名的，这时就需要给网站一个好记的域名</li>\n<li>域名和网站服务器IP的关系，就好像一个人的名字和身份证号码一样，就是为了方便记忆。只不过域名不会重复，但是人的名字是经常重复的</li>\n</ul>\n<h3 id=\"记录类型\"><a href=\"#记录类型\" class=\"headerlink\" title=\"记录类型\"></a>记录类型</h3><hr>\n<ul>\n<li><strong>A记录（IPv4主机记录）</strong>：将域名映射到一个IPv4的地址上</li>\n<li><strong>CNAME记录（别名记录）</strong>：将某个别名指向到某个A记录上，这样就不需要再为某个新名字另外创建一条新的A记录</li>\n<li><strong>AAAA记录（IPv6主机记录）</strong>：将域名映射到一个IPv6的地址上</li>\n</ul>\n<p>记录类型还有很多其他类型，常用的其实也就上面3个里的前两个。</p>\n<h3 id=\"域名前缀\"><a href=\"#域名前缀\" class=\"headerlink\" title=\"域名前缀\"></a>域名前缀</h3><hr>\n<ul>\n<li><strong>www</strong>：解析后的域名为 <code>www.example.com</code></li>\n<li><strong>@</strong>：解析后的域名为 <code>example.com</code> ，不用加 <code>www</code> 前缀就能访问</li>\n<li><strong>*</strong>：泛解析，匹配其他所有域名 <code>*.example.com</code></li>\n<li><strong>mail</strong>：将域名解析为 <code>mail.example.com</code>，通常用于解析邮箱服务器</li>\n<li><strong>二级域名</strong>：<code>abc.example.com</code></li>\n<li><strong>手机网站</strong>：<code>m.example.com</code></li>\n<li><strong>显性URL</strong>：不支持泛解析（泛解析：将所有子域名解析到同一地址）</li>\n</ul>\n<h3 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h3><hr>\n<p>现在本网站通过添加<strong>CNAME记录</strong>，增加了一个新的域名：<code>dongshijin.com</code> 😄</p>\n"},{"title":"Linux常用命令","date":"2019-02-20T16:00:00.000Z","_content":"\n### 从一台Linux远程机器登录到另一台Linux远程机器\n---\n* 完整的命令格式\n`ssh [-l login_name] [-p port] [user@]hostname `\n* 最常用的形式\n`ssh root@192.168.0.1`\n* 退出登录\n`exit`\n\n### 从一台Linux远程机器拷贝文件到另一台Linux远程机器\n---\n这里使用scp命令，它是secure copy的缩写，中文名：安全拷贝，关于这个命令的更详细的介绍[**点这里**](https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/scp.html)\n#### 复制到远程\n* 复制文件\n`scp local_file remote_username@remote_ip:remote_file`\n* 复制文件到目录\n`scp local_file remote_username@remote_ip:remote_folder`\n* 复制目录\n`scp -r local_folder remote_username@remote_ip:remote_folder`\n\n#### 从远程复制\n从远程复制到本地的scp命令与上面的命令一样，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。\n* 复制文件\n`scp root@10.6.159.147:/opt/soft/demo.tar /opt/soft/`\n* 复制目录\n`scp -r root@10.6.159.147:/opt/soft/test /opt/soft/`\n\n### 移动/重命名文件\n---\n`mv [options] SourceFile/SourceDirectory TargetFile/TargetDirectory`\n* 重命名文件\n`mv test.log test1.txt`\n* 移动当前目录下的所有文件或目录到上层目录\n`mv * ../`\n\n### 删除文件/文件夹命令\n---\n`rm [options] file/directory`\n* 删除文件\n`rm testFile.txt`\n* 删除目录：-r表示递归删除，删除目录时必须要加上这个选项\n`rm -r testDirectory`","source":"_posts/Linux/Linux常用命令.md","raw":"---\ntitle: Linux常用命令\ncategories: Linux\ndate: 2019-02-21\n---\n\n### 从一台Linux远程机器登录到另一台Linux远程机器\n---\n* 完整的命令格式\n`ssh [-l login_name] [-p port] [user@]hostname `\n* 最常用的形式\n`ssh root@192.168.0.1`\n* 退出登录\n`exit`\n\n### 从一台Linux远程机器拷贝文件到另一台Linux远程机器\n---\n这里使用scp命令，它是secure copy的缩写，中文名：安全拷贝，关于这个命令的更详细的介绍[**点这里**](https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/scp.html)\n#### 复制到远程\n* 复制文件\n`scp local_file remote_username@remote_ip:remote_file`\n* 复制文件到目录\n`scp local_file remote_username@remote_ip:remote_folder`\n* 复制目录\n`scp -r local_folder remote_username@remote_ip:remote_folder`\n\n#### 从远程复制\n从远程复制到本地的scp命令与上面的命令一样，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。\n* 复制文件\n`scp root@10.6.159.147:/opt/soft/demo.tar /opt/soft/`\n* 复制目录\n`scp -r root@10.6.159.147:/opt/soft/test /opt/soft/`\n\n### 移动/重命名文件\n---\n`mv [options] SourceFile/SourceDirectory TargetFile/TargetDirectory`\n* 重命名文件\n`mv test.log test1.txt`\n* 移动当前目录下的所有文件或目录到上层目录\n`mv * ../`\n\n### 删除文件/文件夹命令\n---\n`rm [options] file/directory`\n* 删除文件\n`rm testFile.txt`\n* 删除目录：-r表示递归删除，删除目录时必须要加上这个选项\n`rm -r testDirectory`","slug":"Linux/Linux常用命令","published":1,"updated":"2019-07-15T02:54:16.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v86001lhcr729opb2im","content":"<h3 id=\"从一台Linux远程机器登录到另一台Linux远程机器\"><a href=\"#从一台Linux远程机器登录到另一台Linux远程机器\" class=\"headerlink\" title=\"从一台Linux远程机器登录到另一台Linux远程机器\"></a>从一台Linux远程机器登录到另一台Linux远程机器</h3><hr>\n<ul>\n<li>完整的命令格式<br><code>ssh [-l login_name] [-p port] [user@]hostname</code></li>\n<li>最常用的形式<br><code>ssh root@192.168.0.1</code></li>\n<li>退出登录<br><code>exit</code></li>\n</ul>\n<h3 id=\"从一台Linux远程机器拷贝文件到另一台Linux远程机器\"><a href=\"#从一台Linux远程机器拷贝文件到另一台Linux远程机器\" class=\"headerlink\" title=\"从一台Linux远程机器拷贝文件到另一台Linux远程机器\"></a>从一台Linux远程机器拷贝文件到另一台Linux远程机器</h3><hr>\n<p>这里使用scp命令，它是secure copy的缩写，中文名：安全拷贝，关于这个命令的更详细的介绍<a href=\"https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/scp.html\" target=\"_blank\" rel=\"noopener\"><strong>点这里</strong></a></p>\n<h4 id=\"复制到远程\"><a href=\"#复制到远程\" class=\"headerlink\" title=\"复制到远程\"></a>复制到远程</h4><ul>\n<li>复制文件<br><code>scp local_file remote_username@remote_ip:remote_file</code></li>\n<li>复制文件到目录<br><code>scp local_file remote_username@remote_ip:remote_folder</code></li>\n<li>复制目录<br><code>scp -r local_folder remote_username@remote_ip:remote_folder</code></li>\n</ul>\n<h4 id=\"从远程复制\"><a href=\"#从远程复制\" class=\"headerlink\" title=\"从远程复制\"></a>从远程复制</h4><p>从远程复制到本地的scp命令与上面的命令一样，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。</p>\n<ul>\n<li>复制文件<br><code>scp root@10.6.159.147:/opt/soft/demo.tar /opt/soft/</code></li>\n<li>复制目录<br><code>scp -r root@10.6.159.147:/opt/soft/test /opt/soft/</code></li>\n</ul>\n<h3 id=\"移动-重命名文件\"><a href=\"#移动-重命名文件\" class=\"headerlink\" title=\"移动/重命名文件\"></a>移动/重命名文件</h3><hr>\n<p><code>mv [options] SourceFile/SourceDirectory TargetFile/TargetDirectory</code></p>\n<ul>\n<li>重命名文件<br><code>mv test.log test1.txt</code></li>\n<li>移动当前目录下的所有文件或目录到上层目录<br><code>mv * ../</code></li>\n</ul>\n<h3 id=\"删除文件-文件夹命令\"><a href=\"#删除文件-文件夹命令\" class=\"headerlink\" title=\"删除文件/文件夹命令\"></a>删除文件/文件夹命令</h3><hr>\n<p><code>rm [options] file/directory</code></p>\n<ul>\n<li>删除文件<br><code>rm testFile.txt</code></li>\n<li>删除目录：-r表示递归删除，删除目录时必须要加上这个选项<br><code>rm -r testDirectory</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"从一台Linux远程机器登录到另一台Linux远程机器\"><a href=\"#从一台Linux远程机器登录到另一台Linux远程机器\" class=\"headerlink\" title=\"从一台Linux远程机器登录到另一台Linux远程机器\"></a>从一台Linux远程机器登录到另一台Linux远程机器</h3><hr>\n<ul>\n<li>完整的命令格式<br><code>ssh [-l login_name] [-p port] [user@]hostname</code></li>\n<li>最常用的形式<br><code>ssh root@192.168.0.1</code></li>\n<li>退出登录<br><code>exit</code></li>\n</ul>\n<h3 id=\"从一台Linux远程机器拷贝文件到另一台Linux远程机器\"><a href=\"#从一台Linux远程机器拷贝文件到另一台Linux远程机器\" class=\"headerlink\" title=\"从一台Linux远程机器拷贝文件到另一台Linux远程机器\"></a>从一台Linux远程机器拷贝文件到另一台Linux远程机器</h3><hr>\n<p>这里使用scp命令，它是secure copy的缩写，中文名：安全拷贝，关于这个命令的更详细的介绍<a href=\"https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/scp.html\" target=\"_blank\" rel=\"noopener\"><strong>点这里</strong></a></p>\n<h4 id=\"复制到远程\"><a href=\"#复制到远程\" class=\"headerlink\" title=\"复制到远程\"></a>复制到远程</h4><ul>\n<li>复制文件<br><code>scp local_file remote_username@remote_ip:remote_file</code></li>\n<li>复制文件到目录<br><code>scp local_file remote_username@remote_ip:remote_folder</code></li>\n<li>复制目录<br><code>scp -r local_folder remote_username@remote_ip:remote_folder</code></li>\n</ul>\n<h4 id=\"从远程复制\"><a href=\"#从远程复制\" class=\"headerlink\" title=\"从远程复制\"></a>从远程复制</h4><p>从远程复制到本地的scp命令与上面的命令一样，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。</p>\n<ul>\n<li>复制文件<br><code>scp root@10.6.159.147:/opt/soft/demo.tar /opt/soft/</code></li>\n<li>复制目录<br><code>scp -r root@10.6.159.147:/opt/soft/test /opt/soft/</code></li>\n</ul>\n<h3 id=\"移动-重命名文件\"><a href=\"#移动-重命名文件\" class=\"headerlink\" title=\"移动/重命名文件\"></a>移动/重命名文件</h3><hr>\n<p><code>mv [options] SourceFile/SourceDirectory TargetFile/TargetDirectory</code></p>\n<ul>\n<li>重命名文件<br><code>mv test.log test1.txt</code></li>\n<li>移动当前目录下的所有文件或目录到上层目录<br><code>mv * ../</code></li>\n</ul>\n<h3 id=\"删除文件-文件夹命令\"><a href=\"#删除文件-文件夹命令\" class=\"headerlink\" title=\"删除文件/文件夹命令\"></a>删除文件/文件夹命令</h3><hr>\n<p><code>rm [options] file/directory</code></p>\n<ul>\n<li>删除文件<br><code>rm testFile.txt</code></li>\n<li>删除目录：-r表示递归删除，删除目录时必须要加上这个选项<br><code>rm -r testDirectory</code></li>\n</ul>\n"},{"title":"域名邮箱","date":"2019-12-24T16:00:00.000Z","_content":"\n自己注册了一个域名，比如`dongshijin.com`。\n\n现在我想使用这个后缀作为我自己的邮箱。比如我想我的邮箱地址是：email[圈A]dongshijin.com。\n\n为了防止垃圾有邮件，我使用[圈A]替代了@ 。\n\n可以通过三种方式建立，自己域名作为邮箱地址的后缀：\n* 自己搭建个邮件服务器\n* 使用企业邮箱\n* 使用域名邮箱。\n\n这里使用腾讯的域名邮箱：`https://domain.mail.qq.com/`，其它类似的，阿里，网易也都有免费的\n\n过程很简单：\n* 打开上面的网址，登陆自己qq。点击创建域名邮箱\n* 输入自己的域名，点击下一步\n* 登录自己购买域名的服务商后台，添加一个cname记录和一个mx记录，然后提交验证。等一会就可以生效了！\n\n\n\n\n\n","source":"_posts/Linux/域名邮箱.md","raw":"---\ntitle: 域名邮箱\ncategories: Linux\ndate: 2019-12-25\n---\n\n自己注册了一个域名，比如`dongshijin.com`。\n\n现在我想使用这个后缀作为我自己的邮箱。比如我想我的邮箱地址是：email[圈A]dongshijin.com。\n\n为了防止垃圾有邮件，我使用[圈A]替代了@ 。\n\n可以通过三种方式建立，自己域名作为邮箱地址的后缀：\n* 自己搭建个邮件服务器\n* 使用企业邮箱\n* 使用域名邮箱。\n\n这里使用腾讯的域名邮箱：`https://domain.mail.qq.com/`，其它类似的，阿里，网易也都有免费的\n\n过程很简单：\n* 打开上面的网址，登陆自己qq。点击创建域名邮箱\n* 输入自己的域名，点击下一步\n* 登录自己购买域名的服务商后台，添加一个cname记录和一个mx记录，然后提交验证。等一会就可以生效了！\n\n\n\n\n\n","slug":"Linux/域名邮箱","published":1,"updated":"2019-12-25T12:19:28.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v87001nhcr71datwjwi","content":"<p>自己注册了一个域名，比如<code>dongshijin.com</code>。</p>\n<p>现在我想使用这个后缀作为我自己的邮箱。比如我想我的邮箱地址是：email[圈A]dongshijin.com。</p>\n<p>为了防止垃圾有邮件，我使用[圈A]替代了@ 。</p>\n<p>可以通过三种方式建立，自己域名作为邮箱地址的后缀：</p>\n<ul>\n<li>自己搭建个邮件服务器</li>\n<li>使用企业邮箱</li>\n<li>使用域名邮箱。</li>\n</ul>\n<p>这里使用腾讯的域名邮箱：<code>https://domain.mail.qq.com/</code>，其它类似的，阿里，网易也都有免费的</p>\n<p>过程很简单：</p>\n<ul>\n<li>打开上面的网址，登陆自己qq。点击创建域名邮箱</li>\n<li>输入自己的域名，点击下一步</li>\n<li>登录自己购买域名的服务商后台，添加一个cname记录和一个mx记录，然后提交验证。等一会就可以生效了！</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>自己注册了一个域名，比如<code>dongshijin.com</code>。</p>\n<p>现在我想使用这个后缀作为我自己的邮箱。比如我想我的邮箱地址是：email[圈A]dongshijin.com。</p>\n<p>为了防止垃圾有邮件，我使用[圈A]替代了@ 。</p>\n<p>可以通过三种方式建立，自己域名作为邮箱地址的后缀：</p>\n<ul>\n<li>自己搭建个邮件服务器</li>\n<li>使用企业邮箱</li>\n<li>使用域名邮箱。</li>\n</ul>\n<p>这里使用腾讯的域名邮箱：<code>https://domain.mail.qq.com/</code>，其它类似的，阿里，网易也都有免费的</p>\n<p>过程很简单：</p>\n<ul>\n<li>打开上面的网址，登陆自己qq。点击创建域名邮箱</li>\n<li>输入自己的域名，点击下一步</li>\n<li>登录自己购买域名的服务商后台，添加一个cname记录和一个mx记录，然后提交验证。等一会就可以生效了！</li>\n</ul>\n"},{"title":"搭建WordPress网站","date":"2019-07-13T16:00:00.000Z","_content":"\n### 为何会写这篇文章？\n---\n\n* 2018年，兴趣使然，搭建过一次。今天再次尝试，好多步骤都忘了😓！\n* 再次尝试，这回是因为别人想让我帮他建一个网站\n* 我自己其实也有建一些网站的想法\n* 所以，好好记录这次的搭建过程吧\n\n### [LAMP环境](https://wiwiwiki.kfd.me/wiki/LAMP)（Linux + Apache + MySQL + PHP）\n---\n\n* 上面是网站服务器运行的基本环境，Apache可以使用Nginx代替，MySQL可以使用MariaDB代替，PHP也可以使用Perl和Python代替\n* 我刚开始的时候竟然把这个环境都给忘了！直接上传了wordpress文件到服务器上，然后就使用浏览器访问了。折腾好长时间，才想起还有这个基础运行环境都没有搭建好呢。这就好像你把一个人放到外星上，食物、水各种生活必需品都给备好了。人还是活不了，最后发现上面竟然没有空气！\n* 我是用的环境是：Ubuntu 16.04 + Nginx + MySQL + PHP7\n\n### [“著名的5分钟安装”](https://codex.wordpress.org/zh-cn:%E5%AE%89%E8%A3%85_WordPress#.E8.91.97.E5.90.8D.E7.9A.845.E5.88.86.E5.AE.89.E8.A3.85)\n---\n\n* 就是这个官方的“著名的5分钟安装”教程，害的我把LAMP环境都给忘了。。。所谓的5分钟安装的前提条件，是你的服务器已经配置好上面的LAMP环境了\n* 剩下的工作就很简单了，其实就是上传wordpress压缩包到你的web服务器上，然后改改配置就行了\n* 互联网上真的是有超级多的wordpress安装教程，但是有问题的教程也有很多很多。。。这就要考验你的耐心了，只能不断的试错！还好在google的帮助下，我找到了一个详细又靠谱的[教程](https://segmentfault.com/a/1190000013035065)，感谢作者！\n\n### 一些需要注意的地方\n---\n\n* 修改Nginx的配置文件`/etc/nginx/sites-available/default`时，注意把index.php字段添加进去\n* 一些网站文件的访问权限要注意设置一下，否则浏览器会提示没有权限访问\n* 创建数据库时，注意创建用户、密码、配置权限之类的（我一客户端开发对这些都不熟，感觉犯一些低级错误。。。）\n* 本周末两天主要就干了这些事。好了，剩下的就是发挥你的创意去填充网站的内容了\n","source":"_posts/Linux/搭建WordPress网站.md","raw":"---\ntitle: 搭建WordPress网站\ncategories: Linux\ndate: 2019-07-14\n---\n\n### 为何会写这篇文章？\n---\n\n* 2018年，兴趣使然，搭建过一次。今天再次尝试，好多步骤都忘了😓！\n* 再次尝试，这回是因为别人想让我帮他建一个网站\n* 我自己其实也有建一些网站的想法\n* 所以，好好记录这次的搭建过程吧\n\n### [LAMP环境](https://wiwiwiki.kfd.me/wiki/LAMP)（Linux + Apache + MySQL + PHP）\n---\n\n* 上面是网站服务器运行的基本环境，Apache可以使用Nginx代替，MySQL可以使用MariaDB代替，PHP也可以使用Perl和Python代替\n* 我刚开始的时候竟然把这个环境都给忘了！直接上传了wordpress文件到服务器上，然后就使用浏览器访问了。折腾好长时间，才想起还有这个基础运行环境都没有搭建好呢。这就好像你把一个人放到外星上，食物、水各种生活必需品都给备好了。人还是活不了，最后发现上面竟然没有空气！\n* 我是用的环境是：Ubuntu 16.04 + Nginx + MySQL + PHP7\n\n### [“著名的5分钟安装”](https://codex.wordpress.org/zh-cn:%E5%AE%89%E8%A3%85_WordPress#.E8.91.97.E5.90.8D.E7.9A.845.E5.88.86.E5.AE.89.E8.A3.85)\n---\n\n* 就是这个官方的“著名的5分钟安装”教程，害的我把LAMP环境都给忘了。。。所谓的5分钟安装的前提条件，是你的服务器已经配置好上面的LAMP环境了\n* 剩下的工作就很简单了，其实就是上传wordpress压缩包到你的web服务器上，然后改改配置就行了\n* 互联网上真的是有超级多的wordpress安装教程，但是有问题的教程也有很多很多。。。这就要考验你的耐心了，只能不断的试错！还好在google的帮助下，我找到了一个详细又靠谱的[教程](https://segmentfault.com/a/1190000013035065)，感谢作者！\n\n### 一些需要注意的地方\n---\n\n* 修改Nginx的配置文件`/etc/nginx/sites-available/default`时，注意把index.php字段添加进去\n* 一些网站文件的访问权限要注意设置一下，否则浏览器会提示没有权限访问\n* 创建数据库时，注意创建用户、密码、配置权限之类的（我一客户端开发对这些都不熟，感觉犯一些低级错误。。。）\n* 本周末两天主要就干了这些事。好了，剩下的就是发挥你的创意去填充网站的内容了\n","slug":"Linux/搭建WordPress网站","published":1,"updated":"2019-07-16T02:11:05.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v88001qhcr7tvd1xhlh","content":"<h3 id=\"为何会写这篇文章？\"><a href=\"#为何会写这篇文章？\" class=\"headerlink\" title=\"为何会写这篇文章？\"></a>为何会写这篇文章？</h3><hr>\n<ul>\n<li>2018年，兴趣使然，搭建过一次。今天再次尝试，好多步骤都忘了😓！</li>\n<li>再次尝试，这回是因为别人想让我帮他建一个网站</li>\n<li>我自己其实也有建一些网站的想法</li>\n<li>所以，好好记录这次的搭建过程吧</li>\n</ul>\n<h3 id=\"LAMP环境（Linux-Apache-MySQL-PHP）\"><a href=\"#LAMP环境（Linux-Apache-MySQL-PHP）\" class=\"headerlink\" title=\"LAMP环境（Linux + Apache + MySQL + PHP）\"></a><a href=\"https://wiwiwiki.kfd.me/wiki/LAMP\" target=\"_blank\" rel=\"noopener\">LAMP环境</a>（Linux + Apache + MySQL + PHP）</h3><hr>\n<ul>\n<li>上面是网站服务器运行的基本环境，Apache可以使用Nginx代替，MySQL可以使用MariaDB代替，PHP也可以使用Perl和Python代替</li>\n<li>我刚开始的时候竟然把这个环境都给忘了！直接上传了wordpress文件到服务器上，然后就使用浏览器访问了。折腾好长时间，才想起还有这个基础运行环境都没有搭建好呢。这就好像你把一个人放到外星上，食物、水各种生活必需品都给备好了。人还是活不了，最后发现上面竟然没有空气！</li>\n<li>我是用的环境是：Ubuntu 16.04 + Nginx + MySQL + PHP7</li>\n</ul>\n<h3 id=\"“著名的5分钟安装”\"><a href=\"#“著名的5分钟安装”\" class=\"headerlink\" title=\"“著名的5分钟安装”\"></a><a href=\"https://codex.wordpress.org/zh-cn:%E5%AE%89%E8%A3%85_WordPress#.E8.91.97.E5.90.8D.E7.9A.845.E5.88.86.E5.AE.89.E8.A3.85\" target=\"_blank\" rel=\"noopener\">“著名的5分钟安装”</a></h3><hr>\n<ul>\n<li>就是这个官方的“著名的5分钟安装”教程，害的我把LAMP环境都给忘了。。。所谓的5分钟安装的前提条件，是你的服务器已经配置好上面的LAMP环境了</li>\n<li>剩下的工作就很简单了，其实就是上传wordpress压缩包到你的web服务器上，然后改改配置就行了</li>\n<li>互联网上真的是有超级多的wordpress安装教程，但是有问题的教程也有很多很多。。。这就要考验你的耐心了，只能不断的试错！还好在google的帮助下，我找到了一个详细又靠谱的<a href=\"https://segmentfault.com/a/1190000013035065\" target=\"_blank\" rel=\"noopener\">教程</a>，感谢作者！</li>\n</ul>\n<h3 id=\"一些需要注意的地方\"><a href=\"#一些需要注意的地方\" class=\"headerlink\" title=\"一些需要注意的地方\"></a>一些需要注意的地方</h3><hr>\n<ul>\n<li>修改Nginx的配置文件<code>/etc/nginx/sites-available/default</code>时，注意把index.php字段添加进去</li>\n<li>一些网站文件的访问权限要注意设置一下，否则浏览器会提示没有权限访问</li>\n<li>创建数据库时，注意创建用户、密码、配置权限之类的（我一客户端开发对这些都不熟，感觉犯一些低级错误。。。）</li>\n<li>本周末两天主要就干了这些事。好了，剩下的就是发挥你的创意去填充网站的内容了</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"为何会写这篇文章？\"><a href=\"#为何会写这篇文章？\" class=\"headerlink\" title=\"为何会写这篇文章？\"></a>为何会写这篇文章？</h3><hr>\n<ul>\n<li>2018年，兴趣使然，搭建过一次。今天再次尝试，好多步骤都忘了😓！</li>\n<li>再次尝试，这回是因为别人想让我帮他建一个网站</li>\n<li>我自己其实也有建一些网站的想法</li>\n<li>所以，好好记录这次的搭建过程吧</li>\n</ul>\n<h3 id=\"LAMP环境（Linux-Apache-MySQL-PHP）\"><a href=\"#LAMP环境（Linux-Apache-MySQL-PHP）\" class=\"headerlink\" title=\"LAMP环境（Linux + Apache + MySQL + PHP）\"></a><a href=\"https://wiwiwiki.kfd.me/wiki/LAMP\" target=\"_blank\" rel=\"noopener\">LAMP环境</a>（Linux + Apache + MySQL + PHP）</h3><hr>\n<ul>\n<li>上面是网站服务器运行的基本环境，Apache可以使用Nginx代替，MySQL可以使用MariaDB代替，PHP也可以使用Perl和Python代替</li>\n<li>我刚开始的时候竟然把这个环境都给忘了！直接上传了wordpress文件到服务器上，然后就使用浏览器访问了。折腾好长时间，才想起还有这个基础运行环境都没有搭建好呢。这就好像你把一个人放到外星上，食物、水各种生活必需品都给备好了。人还是活不了，最后发现上面竟然没有空气！</li>\n<li>我是用的环境是：Ubuntu 16.04 + Nginx + MySQL + PHP7</li>\n</ul>\n<h3 id=\"“著名的5分钟安装”\"><a href=\"#“著名的5分钟安装”\" class=\"headerlink\" title=\"“著名的5分钟安装”\"></a><a href=\"https://codex.wordpress.org/zh-cn:%E5%AE%89%E8%A3%85_WordPress#.E8.91.97.E5.90.8D.E7.9A.845.E5.88.86.E5.AE.89.E8.A3.85\" target=\"_blank\" rel=\"noopener\">“著名的5分钟安装”</a></h3><hr>\n<ul>\n<li>就是这个官方的“著名的5分钟安装”教程，害的我把LAMP环境都给忘了。。。所谓的5分钟安装的前提条件，是你的服务器已经配置好上面的LAMP环境了</li>\n<li>剩下的工作就很简单了，其实就是上传wordpress压缩包到你的web服务器上，然后改改配置就行了</li>\n<li>互联网上真的是有超级多的wordpress安装教程，但是有问题的教程也有很多很多。。。这就要考验你的耐心了，只能不断的试错！还好在google的帮助下，我找到了一个详细又靠谱的<a href=\"https://segmentfault.com/a/1190000013035065\" target=\"_blank\" rel=\"noopener\">教程</a>，感谢作者！</li>\n</ul>\n<h3 id=\"一些需要注意的地方\"><a href=\"#一些需要注意的地方\" class=\"headerlink\" title=\"一些需要注意的地方\"></a>一些需要注意的地方</h3><hr>\n<ul>\n<li>修改Nginx的配置文件<code>/etc/nginx/sites-available/default</code>时，注意把index.php字段添加进去</li>\n<li>一些网站文件的访问权限要注意设置一下，否则浏览器会提示没有权限访问</li>\n<li>创建数据库时，注意创建用户、密码、配置权限之类的（我一客户端开发对这些都不熟，感觉犯一些低级错误。。。）</li>\n<li>本周末两天主要就干了这些事。好了，剩下的就是发挥你的创意去填充网站的内容了</li>\n</ul>\n"},{"title":"Lua中加载代码的方式","date":"2019-03-15T16:00:00.000Z","_content":"\n### load (chunk [, chunkname [, mode [, env]]])\n---\n**加载一个代码块，参数chunk可以是字符串或者函数**\n```\nload(\"print(\\\"dongtshj.github.io\\\")\")\n> function: 0109b970 （一个函数地址）\n\nload(\"print(\\\"dongtshj.github.io\\\")\")()\n> dongtshj.github.io （表达式加上了()表示调用了函数）\n```\n\n### loadfile ([filename [, mode [, env]]])\n---\n**和load类似，不过是从文件或标准输入中获取代码块**\n\n**loadfile从硬盘上加载lua文件，并把它编译成lua代码块**\n\n假设test.lua文件内容如下：\n`print(\"dongtshj.github.io\")`\n那么有：\n```\nloadfile(\"test.lua\")\n> function: 00634ef8 （一个函数地址）\n\nloadfile(\"test.lua\")()\n> dongtshj.github.io\n```\n\n### dofile ([filename])\n---\n**和loadfile类似，只不过它打开并执行了文件中的Lua代码块**\n\n还是拿上面那个test.lua文件举例\n```\ndofile(\"test.lua\")\n> dongtshj.github.io\n```\n\n### require\n---\n* require是用来加载**Lua模块**的，而不单单是.lua文件。Lua模块可以是一般的.Lua文件，但也可以是.dll或者.so文件\n* require会把加载起来的模块缓存起来，所以再次加载同名模块时，只是把首次加载的缓存返回了。如果你确实想要重新加载的话，请先清除缓存\n* require具体的功能取决于package.loaders（Lua 5.1）或者package.searchers（Lua 5.2/5.3）\n\n### import\n---\nLua标准库里并没有这个函数，一般是项目自身框架提供的功能性函数，所以它的功能取决于具体的实现\n\n\n参考：\n[What's the difference between loadfile, require, and import](https://stackoverflow.com/questions/34235540/whats-the-difference-between-loadfile-require-and-import)\n\n","source":"_posts/Lua/Lua中加载代码的方式.md","raw":"---\ntitle: Lua中加载代码的方式\ncategories: Lua\ndate: 2019-03-16\n---\n\n### load (chunk [, chunkname [, mode [, env]]])\n---\n**加载一个代码块，参数chunk可以是字符串或者函数**\n```\nload(\"print(\\\"dongtshj.github.io\\\")\")\n> function: 0109b970 （一个函数地址）\n\nload(\"print(\\\"dongtshj.github.io\\\")\")()\n> dongtshj.github.io （表达式加上了()表示调用了函数）\n```\n\n### loadfile ([filename [, mode [, env]]])\n---\n**和load类似，不过是从文件或标准输入中获取代码块**\n\n**loadfile从硬盘上加载lua文件，并把它编译成lua代码块**\n\n假设test.lua文件内容如下：\n`print(\"dongtshj.github.io\")`\n那么有：\n```\nloadfile(\"test.lua\")\n> function: 00634ef8 （一个函数地址）\n\nloadfile(\"test.lua\")()\n> dongtshj.github.io\n```\n\n### dofile ([filename])\n---\n**和loadfile类似，只不过它打开并执行了文件中的Lua代码块**\n\n还是拿上面那个test.lua文件举例\n```\ndofile(\"test.lua\")\n> dongtshj.github.io\n```\n\n### require\n---\n* require是用来加载**Lua模块**的，而不单单是.lua文件。Lua模块可以是一般的.Lua文件，但也可以是.dll或者.so文件\n* require会把加载起来的模块缓存起来，所以再次加载同名模块时，只是把首次加载的缓存返回了。如果你确实想要重新加载的话，请先清除缓存\n* require具体的功能取决于package.loaders（Lua 5.1）或者package.searchers（Lua 5.2/5.3）\n\n### import\n---\nLua标准库里并没有这个函数，一般是项目自身框架提供的功能性函数，所以它的功能取决于具体的实现\n\n\n参考：\n[What's the difference between loadfile, require, and import](https://stackoverflow.com/questions/34235540/whats-the-difference-between-loadfile-require-and-import)\n\n","slug":"Lua/Lua中加载代码的方式","published":1,"updated":"2019-04-25T03:06:00.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v89001rhcr7ypszayrw","content":"<h3 id=\"load-chunk-chunkname-mode-env\"><a href=\"#load-chunk-chunkname-mode-env\" class=\"headerlink\" title=\"load (chunk [, chunkname [, mode [, env]]])\"></a>load (chunk [, chunkname [, mode [, env]]])</h3><hr>\n<p><strong>加载一个代码块，参数chunk可以是字符串或者函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">load(&quot;print(\\&quot;dongtshj.github.io\\&quot;)&quot;)</span><br><span class=\"line\">&gt; function: 0109b970 （一个函数地址）</span><br><span class=\"line\"></span><br><span class=\"line\">load(&quot;print(\\&quot;dongtshj.github.io\\&quot;)&quot;)()</span><br><span class=\"line\">&gt; dongtshj.github.io （表达式加上了()表示调用了函数）</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"loadfile-filename-mode-env\"><a href=\"#loadfile-filename-mode-env\" class=\"headerlink\" title=\"loadfile ([filename [, mode [, env]]])\"></a>loadfile ([filename [, mode [, env]]])</h3><hr>\n<p><strong>和load类似，不过是从文件或标准输入中获取代码块</strong></p>\n<p><strong>loadfile从硬盘上加载lua文件，并把它编译成lua代码块</strong></p>\n<p>假设test.lua文件内容如下：<br><code>print(&quot;dongtshj.github.io&quot;)</code><br>那么有：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loadfile(&quot;test.lua&quot;)</span><br><span class=\"line\">&gt; function: 00634ef8 （一个函数地址）</span><br><span class=\"line\"></span><br><span class=\"line\">loadfile(&quot;test.lua&quot;)()</span><br><span class=\"line\">&gt; dongtshj.github.io</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"dofile-filename\"><a href=\"#dofile-filename\" class=\"headerlink\" title=\"dofile ([filename])\"></a>dofile ([filename])</h3><hr>\n<p><strong>和loadfile类似，只不过它打开并执行了文件中的Lua代码块</strong></p>\n<p>还是拿上面那个test.lua文件举例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dofile(&quot;test.lua&quot;)</span><br><span class=\"line\">&gt; dongtshj.github.io</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"require\"><a href=\"#require\" class=\"headerlink\" title=\"require\"></a>require</h3><hr>\n<ul>\n<li>require是用来加载<strong>Lua模块</strong>的，而不单单是.lua文件。Lua模块可以是一般的.Lua文件，但也可以是.dll或者.so文件</li>\n<li>require会把加载起来的模块缓存起来，所以再次加载同名模块时，只是把首次加载的缓存返回了。如果你确实想要重新加载的话，请先清除缓存</li>\n<li>require具体的功能取决于package.loaders（Lua 5.1）或者package.searchers（Lua 5.2/5.3）</li>\n</ul>\n<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h3><hr>\n<p>Lua标准库里并没有这个函数，一般是项目自身框架提供的功能性函数，所以它的功能取决于具体的实现</p>\n<p>参考：<br><a href=\"https://stackoverflow.com/questions/34235540/whats-the-difference-between-loadfile-require-and-import\" target=\"_blank\" rel=\"noopener\">What’s the difference between loadfile, require, and import</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"load-chunk-chunkname-mode-env\"><a href=\"#load-chunk-chunkname-mode-env\" class=\"headerlink\" title=\"load (chunk [, chunkname [, mode [, env]]])\"></a>load (chunk [, chunkname [, mode [, env]]])</h3><hr>\n<p><strong>加载一个代码块，参数chunk可以是字符串或者函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">load(&quot;print(\\&quot;dongtshj.github.io\\&quot;)&quot;)</span><br><span class=\"line\">&gt; function: 0109b970 （一个函数地址）</span><br><span class=\"line\"></span><br><span class=\"line\">load(&quot;print(\\&quot;dongtshj.github.io\\&quot;)&quot;)()</span><br><span class=\"line\">&gt; dongtshj.github.io （表达式加上了()表示调用了函数）</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"loadfile-filename-mode-env\"><a href=\"#loadfile-filename-mode-env\" class=\"headerlink\" title=\"loadfile ([filename [, mode [, env]]])\"></a>loadfile ([filename [, mode [, env]]])</h3><hr>\n<p><strong>和load类似，不过是从文件或标准输入中获取代码块</strong></p>\n<p><strong>loadfile从硬盘上加载lua文件，并把它编译成lua代码块</strong></p>\n<p>假设test.lua文件内容如下：<br><code>print(&quot;dongtshj.github.io&quot;)</code><br>那么有：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loadfile(&quot;test.lua&quot;)</span><br><span class=\"line\">&gt; function: 00634ef8 （一个函数地址）</span><br><span class=\"line\"></span><br><span class=\"line\">loadfile(&quot;test.lua&quot;)()</span><br><span class=\"line\">&gt; dongtshj.github.io</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"dofile-filename\"><a href=\"#dofile-filename\" class=\"headerlink\" title=\"dofile ([filename])\"></a>dofile ([filename])</h3><hr>\n<p><strong>和loadfile类似，只不过它打开并执行了文件中的Lua代码块</strong></p>\n<p>还是拿上面那个test.lua文件举例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dofile(&quot;test.lua&quot;)</span><br><span class=\"line\">&gt; dongtshj.github.io</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"require\"><a href=\"#require\" class=\"headerlink\" title=\"require\"></a>require</h3><hr>\n<ul>\n<li>require是用来加载<strong>Lua模块</strong>的，而不单单是.lua文件。Lua模块可以是一般的.Lua文件，但也可以是.dll或者.so文件</li>\n<li>require会把加载起来的模块缓存起来，所以再次加载同名模块时，只是把首次加载的缓存返回了。如果你确实想要重新加载的话，请先清除缓存</li>\n<li>require具体的功能取决于package.loaders（Lua 5.1）或者package.searchers（Lua 5.2/5.3）</li>\n</ul>\n<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h3><hr>\n<p>Lua标准库里并没有这个函数，一般是项目自身框架提供的功能性函数，所以它的功能取决于具体的实现</p>\n<p>参考：<br><a href=\"https://stackoverflow.com/questions/34235540/whats-the-difference-between-loadfile-require-and-import\" target=\"_blank\" rel=\"noopener\">What’s the difference between loadfile, require, and import</a></p>\n"},{"title":"Lua中的Table常见操作","date":"2019-03-16T16:00:00.000Z","_content":"\n* Lua中的表即table，它是Lua提供的唯一一个复杂数据结构。\n* Lua中的table可以用来表示数组或者关联数组等常见概念。\n* Lua中的模块、包以及面向对象等概念也是靠table来实现的。\n\n### 初始化\n---\n可以这样：\n```\nlocal table = {}\ntable[1] = \"A\"\ntable[2] = \"B\"\ntable[3] = \"C\"\n```\n也可以这样：\n```\nlocal table = {\n    [1] = \"A\",\n    [2] = \"B\",\n    [3] = \"C\"\n}\n```\n或者这样：\n```\nlocal table = {\n    \"A\",\n    \"B\",\n    \"C\"\n}\n```\n\n### Table操作\n---\n\n* **table.insert(tab, [pos,] value)**\n在tab的pos处插入value，并后移tab[pos],tab[pos + 1],...,tab[#tab]。默认插入到tab末尾,即pos的默认值为#tab + 1\n```\nlocal tab = {1, 2, 3}\ntable,insert(tab, 7)\nprint(tab[4])\n> 7\n```\n\n* **table.remove(tab [,pos])**\n移除tab中pos位置上的元素，并返回移除的值。默认移除最后一个元素\n```\nlocal tab = {1, 2, 3, 7}\ntable.remove(tab)\n# 现在tab的内容：{1, 2, 3} \n```\n\n* **table.sort(tab [, comp])**\n对tab进行排序，可自定义排序规则\n```\nlocal tab = {5, 2, 1, 7, 13}\nlocal comp = function(l, r) return l > r end\ntable.sort(tab, comp)\n# 现在tab的内容：{13, 7, 5, 2, 1}\n```\n\n* **table.concat(tab [, sep [, i [, j]]])**\n连接tab的各个元素，以sep分割各个元素,返回值为：\n`tab[i] .. sep .. tab[i + 1] ··· sep .. tab[j]`\n其中的各项参数默认值为：sep = \"\", i = 1, j = #tab\n```\nlocal tab = {\"A\", \"B\", \"C\"}\nprint(table.concat(tab, \"|\"))\n> A|B|C\nprint(table.concat(tab, \"\"))\n> ABC\n```\n\n* **table.move(tab1, begin1, end1, begin2 [, tab2])**\n将tab1中的元素移到tab2中，等同于下面这个多重赋值操作：\n`tab2[begin2], ··· = tab1[begin1], ··· , tab1[end1]`\n其中tab2的默认值为tab1。*其实感觉move这个函数名不够好，move给人的感觉是，拷贝后会把自己的给删除了；或者就是把自己的元素给别人了，自己不再拥有这些元素的控制权了。其实这里就是个单纯的拷贝操作*\n```\nlocal tab1 = {1, 2}\nlocal tab2 = {}\ntable.move(tab1, 1, 2, 1, tab2)\n# 现在tab1的内容：{1, 2}\n# 现在tab2的内容：{1, 2}\n```\n\n* **table.pack(...)**\n构建新的table\n```\nlocal tab = table.pack(\"A\", \"B\", \"C\")\n# 现在表tab的内容：{\"A\", \"B\", \"C\"}\n```\n\n* **table.unpack(tab [, i [, j]])**\n返回table中的元素，i默认为1，j默认为#tab；等价于\n`return tab[i], tab[i + 1], ··· ,tab[j]`\n","source":"_posts/Lua/Lua中的Table常见操作.md","raw":"---\ntitle: Lua中的Table常见操作\ncategories: Lua\ndate: 2019-03-17\n---\n\n* Lua中的表即table，它是Lua提供的唯一一个复杂数据结构。\n* Lua中的table可以用来表示数组或者关联数组等常见概念。\n* Lua中的模块、包以及面向对象等概念也是靠table来实现的。\n\n### 初始化\n---\n可以这样：\n```\nlocal table = {}\ntable[1] = \"A\"\ntable[2] = \"B\"\ntable[3] = \"C\"\n```\n也可以这样：\n```\nlocal table = {\n    [1] = \"A\",\n    [2] = \"B\",\n    [3] = \"C\"\n}\n```\n或者这样：\n```\nlocal table = {\n    \"A\",\n    \"B\",\n    \"C\"\n}\n```\n\n### Table操作\n---\n\n* **table.insert(tab, [pos,] value)**\n在tab的pos处插入value，并后移tab[pos],tab[pos + 1],...,tab[#tab]。默认插入到tab末尾,即pos的默认值为#tab + 1\n```\nlocal tab = {1, 2, 3}\ntable,insert(tab, 7)\nprint(tab[4])\n> 7\n```\n\n* **table.remove(tab [,pos])**\n移除tab中pos位置上的元素，并返回移除的值。默认移除最后一个元素\n```\nlocal tab = {1, 2, 3, 7}\ntable.remove(tab)\n# 现在tab的内容：{1, 2, 3} \n```\n\n* **table.sort(tab [, comp])**\n对tab进行排序，可自定义排序规则\n```\nlocal tab = {5, 2, 1, 7, 13}\nlocal comp = function(l, r) return l > r end\ntable.sort(tab, comp)\n# 现在tab的内容：{13, 7, 5, 2, 1}\n```\n\n* **table.concat(tab [, sep [, i [, j]]])**\n连接tab的各个元素，以sep分割各个元素,返回值为：\n`tab[i] .. sep .. tab[i + 1] ··· sep .. tab[j]`\n其中的各项参数默认值为：sep = \"\", i = 1, j = #tab\n```\nlocal tab = {\"A\", \"B\", \"C\"}\nprint(table.concat(tab, \"|\"))\n> A|B|C\nprint(table.concat(tab, \"\"))\n> ABC\n```\n\n* **table.move(tab1, begin1, end1, begin2 [, tab2])**\n将tab1中的元素移到tab2中，等同于下面这个多重赋值操作：\n`tab2[begin2], ··· = tab1[begin1], ··· , tab1[end1]`\n其中tab2的默认值为tab1。*其实感觉move这个函数名不够好，move给人的感觉是，拷贝后会把自己的给删除了；或者就是把自己的元素给别人了，自己不再拥有这些元素的控制权了。其实这里就是个单纯的拷贝操作*\n```\nlocal tab1 = {1, 2}\nlocal tab2 = {}\ntable.move(tab1, 1, 2, 1, tab2)\n# 现在tab1的内容：{1, 2}\n# 现在tab2的内容：{1, 2}\n```\n\n* **table.pack(...)**\n构建新的table\n```\nlocal tab = table.pack(\"A\", \"B\", \"C\")\n# 现在表tab的内容：{\"A\", \"B\", \"C\"}\n```\n\n* **table.unpack(tab [, i [, j]])**\n返回table中的元素，i默认为1，j默认为#tab；等价于\n`return tab[i], tab[i + 1], ··· ,tab[j]`\n","slug":"Lua/Lua中的Table常见操作","published":1,"updated":"2019-04-25T03:06:00.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8a001uhcr7mwft7ikl","content":"<ul>\n<li>Lua中的表即table，它是Lua提供的唯一一个复杂数据结构。</li>\n<li>Lua中的table可以用来表示数组或者关联数组等常见概念。</li>\n<li>Lua中的模块、包以及面向对象等概念也是靠table来实现的。</li>\n</ul>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><hr>\n<p>可以这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local table = &#123;&#125;</span><br><span class=\"line\">table[1] = &quot;A&quot;</span><br><span class=\"line\">table[2] = &quot;B&quot;</span><br><span class=\"line\">table[3] = &quot;C&quot;</span><br></pre></td></tr></table></figure></p>\n<p>也可以这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local table = &#123;</span><br><span class=\"line\">    [1] = &quot;A&quot;,</span><br><span class=\"line\">    [2] = &quot;B&quot;,</span><br><span class=\"line\">    [3] = &quot;C&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>或者这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local table = &#123;</span><br><span class=\"line\">    &quot;A&quot;,</span><br><span class=\"line\">    &quot;B&quot;,</span><br><span class=\"line\">    &quot;C&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Table操作\"><a href=\"#Table操作\" class=\"headerlink\" title=\"Table操作\"></a>Table操作</h3><hr>\n<ul>\n<li><p><strong>table.insert(tab, [pos,] value)</strong><br>在tab的pos处插入value，并后移tab[pos],tab[pos + 1],…,tab[#tab]。默认插入到tab末尾,即pos的默认值为#tab + 1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab = &#123;1, 2, 3&#125;</span><br><span class=\"line\">table,insert(tab, 7)</span><br><span class=\"line\">print(tab[4])</span><br><span class=\"line\">&gt; 7</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.remove(tab [,pos])</strong><br>移除tab中pos位置上的元素，并返回移除的值。默认移除最后一个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab = &#123;1, 2, 3, 7&#125;</span><br><span class=\"line\">table.remove(tab)</span><br><span class=\"line\"># 现在tab的内容：&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.sort(tab [, comp])</strong><br>对tab进行排序，可自定义排序规则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab = &#123;5, 2, 1, 7, 13&#125;</span><br><span class=\"line\">local comp = function(l, r) return l &gt; r end</span><br><span class=\"line\">table.sort(tab, comp)</span><br><span class=\"line\"># 现在tab的内容：&#123;13, 7, 5, 2, 1&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.concat(tab [, sep [, i [, j]]])</strong><br>连接tab的各个元素，以sep分割各个元素,返回值为：<br><code>tab[i] .. sep .. tab[i + 1] ··· sep .. tab[j]</code><br>其中的各项参数默认值为：sep = “”, i = 1, j = #tab</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab = &#123;&quot;A&quot;, &quot;B&quot;, &quot;C&quot;&#125;</span><br><span class=\"line\">print(table.concat(tab, &quot;|&quot;))</span><br><span class=\"line\">&gt; A|B|C</span><br><span class=\"line\">print(table.concat(tab, &quot;&quot;))</span><br><span class=\"line\">&gt; ABC</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.move(tab1, begin1, end1, begin2 [, tab2])</strong><br>将tab1中的元素移到tab2中，等同于下面这个多重赋值操作：<br><code>tab2[begin2], ··· = tab1[begin1], ··· , tab1[end1]</code><br>其中tab2的默认值为tab1。<em>其实感觉move这个函数名不够好，move给人的感觉是，拷贝后会把自己的给删除了；或者就是把自己的元素给别人了，自己不再拥有这些元素的控制权了。其实这里就是个单纯的拷贝操作</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab1 = &#123;1, 2&#125;</span><br><span class=\"line\">local tab2 = &#123;&#125;</span><br><span class=\"line\">table.move(tab1, 1, 2, 1, tab2)</span><br><span class=\"line\"># 现在tab1的内容：&#123;1, 2&#125;</span><br><span class=\"line\"># 现在tab2的内容：&#123;1, 2&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.pack(…)</strong><br>构建新的table</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab = table.pack(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class=\"line\"># 现在表tab的内容：&#123;&quot;A&quot;, &quot;B&quot;, &quot;C&quot;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.unpack(tab [, i [, j]])</strong><br>返回table中的元素，i默认为1，j默认为#tab；等价于<br><code>return tab[i], tab[i + 1], ··· ,tab[j]</code></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>Lua中的表即table，它是Lua提供的唯一一个复杂数据结构。</li>\n<li>Lua中的table可以用来表示数组或者关联数组等常见概念。</li>\n<li>Lua中的模块、包以及面向对象等概念也是靠table来实现的。</li>\n</ul>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><hr>\n<p>可以这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local table = &#123;&#125;</span><br><span class=\"line\">table[1] = &quot;A&quot;</span><br><span class=\"line\">table[2] = &quot;B&quot;</span><br><span class=\"line\">table[3] = &quot;C&quot;</span><br></pre></td></tr></table></figure></p>\n<p>也可以这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local table = &#123;</span><br><span class=\"line\">    [1] = &quot;A&quot;,</span><br><span class=\"line\">    [2] = &quot;B&quot;,</span><br><span class=\"line\">    [3] = &quot;C&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>或者这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local table = &#123;</span><br><span class=\"line\">    &quot;A&quot;,</span><br><span class=\"line\">    &quot;B&quot;,</span><br><span class=\"line\">    &quot;C&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Table操作\"><a href=\"#Table操作\" class=\"headerlink\" title=\"Table操作\"></a>Table操作</h3><hr>\n<ul>\n<li><p><strong>table.insert(tab, [pos,] value)</strong><br>在tab的pos处插入value，并后移tab[pos],tab[pos + 1],…,tab[#tab]。默认插入到tab末尾,即pos的默认值为#tab + 1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab = &#123;1, 2, 3&#125;</span><br><span class=\"line\">table,insert(tab, 7)</span><br><span class=\"line\">print(tab[4])</span><br><span class=\"line\">&gt; 7</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.remove(tab [,pos])</strong><br>移除tab中pos位置上的元素，并返回移除的值。默认移除最后一个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab = &#123;1, 2, 3, 7&#125;</span><br><span class=\"line\">table.remove(tab)</span><br><span class=\"line\"># 现在tab的内容：&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.sort(tab [, comp])</strong><br>对tab进行排序，可自定义排序规则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab = &#123;5, 2, 1, 7, 13&#125;</span><br><span class=\"line\">local comp = function(l, r) return l &gt; r end</span><br><span class=\"line\">table.sort(tab, comp)</span><br><span class=\"line\"># 现在tab的内容：&#123;13, 7, 5, 2, 1&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.concat(tab [, sep [, i [, j]]])</strong><br>连接tab的各个元素，以sep分割各个元素,返回值为：<br><code>tab[i] .. sep .. tab[i + 1] ··· sep .. tab[j]</code><br>其中的各项参数默认值为：sep = “”, i = 1, j = #tab</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab = &#123;&quot;A&quot;, &quot;B&quot;, &quot;C&quot;&#125;</span><br><span class=\"line\">print(table.concat(tab, &quot;|&quot;))</span><br><span class=\"line\">&gt; A|B|C</span><br><span class=\"line\">print(table.concat(tab, &quot;&quot;))</span><br><span class=\"line\">&gt; ABC</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.move(tab1, begin1, end1, begin2 [, tab2])</strong><br>将tab1中的元素移到tab2中，等同于下面这个多重赋值操作：<br><code>tab2[begin2], ··· = tab1[begin1], ··· , tab1[end1]</code><br>其中tab2的默认值为tab1。<em>其实感觉move这个函数名不够好，move给人的感觉是，拷贝后会把自己的给删除了；或者就是把自己的元素给别人了，自己不再拥有这些元素的控制权了。其实这里就是个单纯的拷贝操作</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab1 = &#123;1, 2&#125;</span><br><span class=\"line\">local tab2 = &#123;&#125;</span><br><span class=\"line\">table.move(tab1, 1, 2, 1, tab2)</span><br><span class=\"line\"># 现在tab1的内容：&#123;1, 2&#125;</span><br><span class=\"line\"># 现在tab2的内容：&#123;1, 2&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.pack(…)</strong><br>构建新的table</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab = table.pack(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class=\"line\"># 现在表tab的内容：&#123;&quot;A&quot;, &quot;B&quot;, &quot;C&quot;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.unpack(tab [, i [, j]])</strong><br>返回table中的元素，i默认为1，j默认为#tab；等价于<br><code>return tab[i], tab[i + 1], ··· ,tab[j]</code></p>\n</li>\n</ul>\n"},{"title":"Lua中的String常见操作","date":"2019-03-08T16:00:00.000Z","_content":"\n### 替换操作\n---\n`string.gsub(s, pattern, repl [, n])`\n* s：想要被操作的整个字符串\n* pattern：整个字符串中想要被替换掉的字符串\n* repl：替换上面pattern的字符串\n* [, n]：中括号表示可选的参数n，替换n次；忽略则全部替换\n* 返回值：替换后的字符串和替换的次数\n\n```\n> string.gsub(\"dongtshj.github.io\", \".\", '')\ndongtshjgithubio 2\n\n> string.gsub(\"dongtshj.github.io\", \".\", \"\", 1)\ndongtshjgithub.io 1\n\n> string.gsub(\"dongtshj.github.io\", \"k\", \"\")\ndongtshj.github.io 0\n```\n\n### 查找操作\n---\n`string.find(s, pattern [, init [, plain]])`\n* s：想要被操作的整个字符串\n* pattern：要查找的字符串\n* [, init [, plain]]：可选参数，init表示搜索起始位置，默认为1\n* 返回值：如果找到一个匹配，则返回它在s中的起始位置；否则，返回nil\n\n```\n> string.find(\"dongtshj.github.io\", \"git\")\n10 12\n> string.find(\"dongtshj.github.io\", \"kkk\")\nnil\n```\n\n### 字符串格式化\n---\n`string.format(formatString, ...)`\n* 返回值：格式化后的字符串formatString\n\n```\nlocal str = string.format(\"It is now %d.\", 2019)\nprint(str)\n> It is now 2019.\n```\n\n### 字符串截取\n---\n`string.sub(s, i [, j])`\n* 返回s的子串，该子串在s中的位置为[i, j]，j的默认值为-1（s的末尾）\n* string.sub(s, 1, j) 返回s的[1, j]部分：长度为j的前缀串\n* string.sub(s, -i) 返回s的[i, end]：长度为i的后缀串\n\n```\nstring.sub(\"dongtshj.github.io\", 1, 8)\n> dongtshj\nstring.sub(\"dongtshj.github.io\", -2)\n> io\n```\n\n### 反转字符串\n---\n`string.reverse(s)`\n* 返回s字符序列的逆序列\n\n```\nstring.reverse(\"dongtshj.github.io\")\n> oi.buhtig.jhstgnod\n```\n\n### 字符串长度\n---\n`string.len(s)`\n* 返回字符串s的长度\n\n```\nstring.len(\"dongtshj.github.io\")\n> 18\n```\n\n### 字符串转为大写\n---\n`string.upper(s)`\n* 将s中的小写字符都转为大写，然后返回转换后的字符串\n\n```\nstring.upper(\"dongtshj.github.io\")\n> DONGTSHJ.GITHUB.IO\n```\n\n### 字符串转为小写\n---\n`string.lower(s)`\n* 将s中的大写字符都转为小写，然后返回转换后的字符串\n\n```\nstring.lower(\"DONGTSHJ.GITHUB.IO\")\n> dongtshj.github.io\n```\n\n### 将数字转换成字符\n---\n`string.char(num)`\n\n```\nstring.char(97)\n> a\n```\n\n### 将字符转换成数字\n---\n`string.byte(char)`\n\n```\nstring.byte(a)\n> 97\n```\n\n### 字符串n次拷贝\n---\n`string.rep(s, n [, sep])`\n* 返回以sep为连接符的s的n次拷贝，sep默认为空，即没有任何连接符\n\n```\nstring.rep(\"dongtshj\", 3, \"|\")\n> dongtshj|dongtshj|dongtshj\n```\n\n### 待填的坑\n---\n`string.dump(function [, strip])`\n\n`string.gmatch (s, pattern)`\n\n`string.match (s, pattern [, init])`\n\n`string.pack (fmt, v1, v2, ···)`\n\n`string.packsize (fmt)`\n\n`string.unpack (fmt, s [, pos])`\n","source":"_posts/Lua/Lua中的String常见操作.md","raw":"---\ntitle: Lua中的String常见操作\ncategories: Lua\ndate: 2019-03-09\n---\n\n### 替换操作\n---\n`string.gsub(s, pattern, repl [, n])`\n* s：想要被操作的整个字符串\n* pattern：整个字符串中想要被替换掉的字符串\n* repl：替换上面pattern的字符串\n* [, n]：中括号表示可选的参数n，替换n次；忽略则全部替换\n* 返回值：替换后的字符串和替换的次数\n\n```\n> string.gsub(\"dongtshj.github.io\", \".\", '')\ndongtshjgithubio 2\n\n> string.gsub(\"dongtshj.github.io\", \".\", \"\", 1)\ndongtshjgithub.io 1\n\n> string.gsub(\"dongtshj.github.io\", \"k\", \"\")\ndongtshj.github.io 0\n```\n\n### 查找操作\n---\n`string.find(s, pattern [, init [, plain]])`\n* s：想要被操作的整个字符串\n* pattern：要查找的字符串\n* [, init [, plain]]：可选参数，init表示搜索起始位置，默认为1\n* 返回值：如果找到一个匹配，则返回它在s中的起始位置；否则，返回nil\n\n```\n> string.find(\"dongtshj.github.io\", \"git\")\n10 12\n> string.find(\"dongtshj.github.io\", \"kkk\")\nnil\n```\n\n### 字符串格式化\n---\n`string.format(formatString, ...)`\n* 返回值：格式化后的字符串formatString\n\n```\nlocal str = string.format(\"It is now %d.\", 2019)\nprint(str)\n> It is now 2019.\n```\n\n### 字符串截取\n---\n`string.sub(s, i [, j])`\n* 返回s的子串，该子串在s中的位置为[i, j]，j的默认值为-1（s的末尾）\n* string.sub(s, 1, j) 返回s的[1, j]部分：长度为j的前缀串\n* string.sub(s, -i) 返回s的[i, end]：长度为i的后缀串\n\n```\nstring.sub(\"dongtshj.github.io\", 1, 8)\n> dongtshj\nstring.sub(\"dongtshj.github.io\", -2)\n> io\n```\n\n### 反转字符串\n---\n`string.reverse(s)`\n* 返回s字符序列的逆序列\n\n```\nstring.reverse(\"dongtshj.github.io\")\n> oi.buhtig.jhstgnod\n```\n\n### 字符串长度\n---\n`string.len(s)`\n* 返回字符串s的长度\n\n```\nstring.len(\"dongtshj.github.io\")\n> 18\n```\n\n### 字符串转为大写\n---\n`string.upper(s)`\n* 将s中的小写字符都转为大写，然后返回转换后的字符串\n\n```\nstring.upper(\"dongtshj.github.io\")\n> DONGTSHJ.GITHUB.IO\n```\n\n### 字符串转为小写\n---\n`string.lower(s)`\n* 将s中的大写字符都转为小写，然后返回转换后的字符串\n\n```\nstring.lower(\"DONGTSHJ.GITHUB.IO\")\n> dongtshj.github.io\n```\n\n### 将数字转换成字符\n---\n`string.char(num)`\n\n```\nstring.char(97)\n> a\n```\n\n### 将字符转换成数字\n---\n`string.byte(char)`\n\n```\nstring.byte(a)\n> 97\n```\n\n### 字符串n次拷贝\n---\n`string.rep(s, n [, sep])`\n* 返回以sep为连接符的s的n次拷贝，sep默认为空，即没有任何连接符\n\n```\nstring.rep(\"dongtshj\", 3, \"|\")\n> dongtshj|dongtshj|dongtshj\n```\n\n### 待填的坑\n---\n`string.dump(function [, strip])`\n\n`string.gmatch (s, pattern)`\n\n`string.match (s, pattern [, init])`\n\n`string.pack (fmt, v1, v2, ···)`\n\n`string.packsize (fmt)`\n\n`string.unpack (fmt, s [, pos])`\n","slug":"Lua/Lua中的String常见操作","published":1,"updated":"2019-04-25T03:06:00.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8b001vhcr75kq33oxa","content":"<h3 id=\"替换操作\"><a href=\"#替换操作\" class=\"headerlink\" title=\"替换操作\"></a>替换操作</h3><hr>\n<p><code>string.gsub(s, pattern, repl [, n])</code></p>\n<ul>\n<li>s：想要被操作的整个字符串</li>\n<li>pattern：整个字符串中想要被替换掉的字符串</li>\n<li>repl：替换上面pattern的字符串</li>\n<li>[, n]：中括号表示可选的参数n，替换n次；忽略则全部替换</li>\n<li>返回值：替换后的字符串和替换的次数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; string.gsub(&quot;dongtshj.github.io&quot;, &quot;.&quot;, &apos;&apos;)</span><br><span class=\"line\">dongtshjgithubio 2</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; string.gsub(&quot;dongtshj.github.io&quot;, &quot;.&quot;, &quot;&quot;, 1)</span><br><span class=\"line\">dongtshjgithub.io 1</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; string.gsub(&quot;dongtshj.github.io&quot;, &quot;k&quot;, &quot;&quot;)</span><br><span class=\"line\">dongtshj.github.io 0</span><br></pre></td></tr></table></figure>\n<h3 id=\"查找操作\"><a href=\"#查找操作\" class=\"headerlink\" title=\"查找操作\"></a>查找操作</h3><hr>\n<p><code>string.find(s, pattern [, init [, plain]])</code></p>\n<ul>\n<li>s：想要被操作的整个字符串</li>\n<li>pattern：要查找的字符串</li>\n<li>[, init [, plain]]：可选参数，init表示搜索起始位置，默认为1</li>\n<li>返回值：如果找到一个匹配，则返回它在s中的起始位置；否则，返回nil</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; string.find(&quot;dongtshj.github.io&quot;, &quot;git&quot;)</span><br><span class=\"line\">10 12</span><br><span class=\"line\">&gt; string.find(&quot;dongtshj.github.io&quot;, &quot;kkk&quot;)</span><br><span class=\"line\">nil</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串格式化\"><a href=\"#字符串格式化\" class=\"headerlink\" title=\"字符串格式化\"></a>字符串格式化</h3><hr>\n<p><code>string.format(formatString, ...)</code></p>\n<ul>\n<li>返回值：格式化后的字符串formatString</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local str = string.format(&quot;It is now %d.&quot;, 2019)</span><br><span class=\"line\">print(str)</span><br><span class=\"line\">&gt; It is now 2019.</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串截取\"><a href=\"#字符串截取\" class=\"headerlink\" title=\"字符串截取\"></a>字符串截取</h3><hr>\n<p><code>string.sub(s, i [, j])</code></p>\n<ul>\n<li>返回s的子串，该子串在s中的位置为[i, j]，j的默认值为-1（s的末尾）</li>\n<li>string.sub(s, 1, j) 返回s的[1, j]部分：长度为j的前缀串</li>\n<li>string.sub(s, -i) 返回s的[i, end]：长度为i的后缀串</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.sub(&quot;dongtshj.github.io&quot;, 1, 8)</span><br><span class=\"line\">&gt; dongtshj</span><br><span class=\"line\">string.sub(&quot;dongtshj.github.io&quot;, -2)</span><br><span class=\"line\">&gt; io</span><br></pre></td></tr></table></figure>\n<h3 id=\"反转字符串\"><a href=\"#反转字符串\" class=\"headerlink\" title=\"反转字符串\"></a>反转字符串</h3><hr>\n<p><code>string.reverse(s)</code></p>\n<ul>\n<li>返回s字符序列的逆序列</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.reverse(&quot;dongtshj.github.io&quot;)</span><br><span class=\"line\">&gt; oi.buhtig.jhstgnod</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串长度\"><a href=\"#字符串长度\" class=\"headerlink\" title=\"字符串长度\"></a>字符串长度</h3><hr>\n<p><code>string.len(s)</code></p>\n<ul>\n<li>返回字符串s的长度</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.len(&quot;dongtshj.github.io&quot;)</span><br><span class=\"line\">&gt; 18</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串转为大写\"><a href=\"#字符串转为大写\" class=\"headerlink\" title=\"字符串转为大写\"></a>字符串转为大写</h3><hr>\n<p><code>string.upper(s)</code></p>\n<ul>\n<li>将s中的小写字符都转为大写，然后返回转换后的字符串</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.upper(&quot;dongtshj.github.io&quot;)</span><br><span class=\"line\">&gt; DONGTSHJ.GITHUB.IO</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串转为小写\"><a href=\"#字符串转为小写\" class=\"headerlink\" title=\"字符串转为小写\"></a>字符串转为小写</h3><hr>\n<p><code>string.lower(s)</code></p>\n<ul>\n<li>将s中的大写字符都转为小写，然后返回转换后的字符串</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.lower(&quot;DONGTSHJ.GITHUB.IO&quot;)</span><br><span class=\"line\">&gt; dongtshj.github.io</span><br></pre></td></tr></table></figure>\n<h3 id=\"将数字转换成字符\"><a href=\"#将数字转换成字符\" class=\"headerlink\" title=\"将数字转换成字符\"></a>将数字转换成字符</h3><hr>\n<p><code>string.char(num)</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.char(97)</span><br><span class=\"line\">&gt; a</span><br></pre></td></tr></table></figure>\n<h3 id=\"将字符转换成数字\"><a href=\"#将字符转换成数字\" class=\"headerlink\" title=\"将字符转换成数字\"></a>将字符转换成数字</h3><hr>\n<p><code>string.byte(char)</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.byte(a)</span><br><span class=\"line\">&gt; 97</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串n次拷贝\"><a href=\"#字符串n次拷贝\" class=\"headerlink\" title=\"字符串n次拷贝\"></a>字符串n次拷贝</h3><hr>\n<p><code>string.rep(s, n [, sep])</code></p>\n<ul>\n<li>返回以sep为连接符的s的n次拷贝，sep默认为空，即没有任何连接符</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.rep(&quot;dongtshj&quot;, 3, &quot;|&quot;)</span><br><span class=\"line\">&gt; dongtshj|dongtshj|dongtshj</span><br></pre></td></tr></table></figure>\n<h3 id=\"待填的坑\"><a href=\"#待填的坑\" class=\"headerlink\" title=\"待填的坑\"></a>待填的坑</h3><hr>\n<p><code>string.dump(function [, strip])</code></p>\n<p><code>string.gmatch (s, pattern)</code></p>\n<p><code>string.match (s, pattern [, init])</code></p>\n<p><code>string.pack (fmt, v1, v2, ···)</code></p>\n<p><code>string.packsize (fmt)</code></p>\n<p><code>string.unpack (fmt, s [, pos])</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"替换操作\"><a href=\"#替换操作\" class=\"headerlink\" title=\"替换操作\"></a>替换操作</h3><hr>\n<p><code>string.gsub(s, pattern, repl [, n])</code></p>\n<ul>\n<li>s：想要被操作的整个字符串</li>\n<li>pattern：整个字符串中想要被替换掉的字符串</li>\n<li>repl：替换上面pattern的字符串</li>\n<li>[, n]：中括号表示可选的参数n，替换n次；忽略则全部替换</li>\n<li>返回值：替换后的字符串和替换的次数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; string.gsub(&quot;dongtshj.github.io&quot;, &quot;.&quot;, &apos;&apos;)</span><br><span class=\"line\">dongtshjgithubio 2</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; string.gsub(&quot;dongtshj.github.io&quot;, &quot;.&quot;, &quot;&quot;, 1)</span><br><span class=\"line\">dongtshjgithub.io 1</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; string.gsub(&quot;dongtshj.github.io&quot;, &quot;k&quot;, &quot;&quot;)</span><br><span class=\"line\">dongtshj.github.io 0</span><br></pre></td></tr></table></figure>\n<h3 id=\"查找操作\"><a href=\"#查找操作\" class=\"headerlink\" title=\"查找操作\"></a>查找操作</h3><hr>\n<p><code>string.find(s, pattern [, init [, plain]])</code></p>\n<ul>\n<li>s：想要被操作的整个字符串</li>\n<li>pattern：要查找的字符串</li>\n<li>[, init [, plain]]：可选参数，init表示搜索起始位置，默认为1</li>\n<li>返回值：如果找到一个匹配，则返回它在s中的起始位置；否则，返回nil</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; string.find(&quot;dongtshj.github.io&quot;, &quot;git&quot;)</span><br><span class=\"line\">10 12</span><br><span class=\"line\">&gt; string.find(&quot;dongtshj.github.io&quot;, &quot;kkk&quot;)</span><br><span class=\"line\">nil</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串格式化\"><a href=\"#字符串格式化\" class=\"headerlink\" title=\"字符串格式化\"></a>字符串格式化</h3><hr>\n<p><code>string.format(formatString, ...)</code></p>\n<ul>\n<li>返回值：格式化后的字符串formatString</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local str = string.format(&quot;It is now %d.&quot;, 2019)</span><br><span class=\"line\">print(str)</span><br><span class=\"line\">&gt; It is now 2019.</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串截取\"><a href=\"#字符串截取\" class=\"headerlink\" title=\"字符串截取\"></a>字符串截取</h3><hr>\n<p><code>string.sub(s, i [, j])</code></p>\n<ul>\n<li>返回s的子串，该子串在s中的位置为[i, j]，j的默认值为-1（s的末尾）</li>\n<li>string.sub(s, 1, j) 返回s的[1, j]部分：长度为j的前缀串</li>\n<li>string.sub(s, -i) 返回s的[i, end]：长度为i的后缀串</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.sub(&quot;dongtshj.github.io&quot;, 1, 8)</span><br><span class=\"line\">&gt; dongtshj</span><br><span class=\"line\">string.sub(&quot;dongtshj.github.io&quot;, -2)</span><br><span class=\"line\">&gt; io</span><br></pre></td></tr></table></figure>\n<h3 id=\"反转字符串\"><a href=\"#反转字符串\" class=\"headerlink\" title=\"反转字符串\"></a>反转字符串</h3><hr>\n<p><code>string.reverse(s)</code></p>\n<ul>\n<li>返回s字符序列的逆序列</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.reverse(&quot;dongtshj.github.io&quot;)</span><br><span class=\"line\">&gt; oi.buhtig.jhstgnod</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串长度\"><a href=\"#字符串长度\" class=\"headerlink\" title=\"字符串长度\"></a>字符串长度</h3><hr>\n<p><code>string.len(s)</code></p>\n<ul>\n<li>返回字符串s的长度</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.len(&quot;dongtshj.github.io&quot;)</span><br><span class=\"line\">&gt; 18</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串转为大写\"><a href=\"#字符串转为大写\" class=\"headerlink\" title=\"字符串转为大写\"></a>字符串转为大写</h3><hr>\n<p><code>string.upper(s)</code></p>\n<ul>\n<li>将s中的小写字符都转为大写，然后返回转换后的字符串</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.upper(&quot;dongtshj.github.io&quot;)</span><br><span class=\"line\">&gt; DONGTSHJ.GITHUB.IO</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串转为小写\"><a href=\"#字符串转为小写\" class=\"headerlink\" title=\"字符串转为小写\"></a>字符串转为小写</h3><hr>\n<p><code>string.lower(s)</code></p>\n<ul>\n<li>将s中的大写字符都转为小写，然后返回转换后的字符串</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.lower(&quot;DONGTSHJ.GITHUB.IO&quot;)</span><br><span class=\"line\">&gt; dongtshj.github.io</span><br></pre></td></tr></table></figure>\n<h3 id=\"将数字转换成字符\"><a href=\"#将数字转换成字符\" class=\"headerlink\" title=\"将数字转换成字符\"></a>将数字转换成字符</h3><hr>\n<p><code>string.char(num)</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.char(97)</span><br><span class=\"line\">&gt; a</span><br></pre></td></tr></table></figure>\n<h3 id=\"将字符转换成数字\"><a href=\"#将字符转换成数字\" class=\"headerlink\" title=\"将字符转换成数字\"></a>将字符转换成数字</h3><hr>\n<p><code>string.byte(char)</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.byte(a)</span><br><span class=\"line\">&gt; 97</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串n次拷贝\"><a href=\"#字符串n次拷贝\" class=\"headerlink\" title=\"字符串n次拷贝\"></a>字符串n次拷贝</h3><hr>\n<p><code>string.rep(s, n [, sep])</code></p>\n<ul>\n<li>返回以sep为连接符的s的n次拷贝，sep默认为空，即没有任何连接符</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.rep(&quot;dongtshj&quot;, 3, &quot;|&quot;)</span><br><span class=\"line\">&gt; dongtshj|dongtshj|dongtshj</span><br></pre></td></tr></table></figure>\n<h3 id=\"待填的坑\"><a href=\"#待填的坑\" class=\"headerlink\" title=\"待填的坑\"></a>待填的坑</h3><hr>\n<p><code>string.dump(function [, strip])</code></p>\n<p><code>string.gmatch (s, pattern)</code></p>\n<p><code>string.match (s, pattern [, init])</code></p>\n<p><code>string.pack (fmt, v1, v2, ···)</code></p>\n<p><code>string.packsize (fmt)</code></p>\n<p><code>string.unpack (fmt, s [, pos])</code></p>\n"},{"title":"Lua官网提供的win平台zip包内容","date":"2019-05-12T16:00:00.000Z","_content":"\n### 介绍\n---\n\n* **lua53.dll**：由lua源码生成的动态链接库\n* **lua53.exe**：这个是lua的解释器。可以执行终端输入的lua语句，或者lua代码文件，或者经过luac53.exe输出的文件\n* **luac53.exe**：这个是lua的编译器。lua虽然是脚本语言，解释执行。但它也可以拥有自己的编译器，lua的解释器可以执行经由lua编译器编译后的代码\n* **wlua53.exe**：这个网上[搜了下](https://blog.csdn.net/zrf2112/article/details/79418515)，貌似需要和GUI模块搭配使用，像是起到别的模块的插件的作用\n\n### 相关话题\n---\n\n#### 动态 VS 静态\n动态语言和静态语言的主要区别就在于：**编译、链接的时机**。C/C++的编译、链接阶段和执行期、运行时（run time）是严格区分开来的。但是lua的链接过程可以放到运行时。**实时编译**技术甚至可以把编译阶段放到运行时。\n\n#### 编译器生产的机器代码的目标机器的区别\n* C++的编译器产生的二进制文件的目标机器是诸如：X86、X64、arm等\n* lua编译器产生的二进制文件的目标机器则是lua虚拟机\n\n#### 解释器、编译器、虚拟机\n* lua编译器把lua脚本编译成lua虚拟机的指令\n* lua解释器包括编译器和虚拟机","source":"_posts/Lua/Lua官网提供的win平台zip包内容.md","raw":"---\ntitle: Lua官网提供的win平台zip包内容\ncategories: Lua\ndate: 2019-05-13\n---\n\n### 介绍\n---\n\n* **lua53.dll**：由lua源码生成的动态链接库\n* **lua53.exe**：这个是lua的解释器。可以执行终端输入的lua语句，或者lua代码文件，或者经过luac53.exe输出的文件\n* **luac53.exe**：这个是lua的编译器。lua虽然是脚本语言，解释执行。但它也可以拥有自己的编译器，lua的解释器可以执行经由lua编译器编译后的代码\n* **wlua53.exe**：这个网上[搜了下](https://blog.csdn.net/zrf2112/article/details/79418515)，貌似需要和GUI模块搭配使用，像是起到别的模块的插件的作用\n\n### 相关话题\n---\n\n#### 动态 VS 静态\n动态语言和静态语言的主要区别就在于：**编译、链接的时机**。C/C++的编译、链接阶段和执行期、运行时（run time）是严格区分开来的。但是lua的链接过程可以放到运行时。**实时编译**技术甚至可以把编译阶段放到运行时。\n\n#### 编译器生产的机器代码的目标机器的区别\n* C++的编译器产生的二进制文件的目标机器是诸如：X86、X64、arm等\n* lua编译器产生的二进制文件的目标机器则是lua虚拟机\n\n#### 解释器、编译器、虚拟机\n* lua编译器把lua脚本编译成lua虚拟机的指令\n* lua解释器包括编译器和虚拟机","slug":"Lua/Lua官网提供的win平台zip包内容","published":1,"updated":"2019-05-13T08:37:35.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8c001yhcr7dhrhd1vk","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><hr>\n<ul>\n<li><strong>lua53.dll</strong>：由lua源码生成的动态链接库</li>\n<li><strong>lua53.exe</strong>：这个是lua的解释器。可以执行终端输入的lua语句，或者lua代码文件，或者经过luac53.exe输出的文件</li>\n<li><strong>luac53.exe</strong>：这个是lua的编译器。lua虽然是脚本语言，解释执行。但它也可以拥有自己的编译器，lua的解释器可以执行经由lua编译器编译后的代码</li>\n<li><strong>wlua53.exe</strong>：这个网上<a href=\"https://blog.csdn.net/zrf2112/article/details/79418515\" target=\"_blank\" rel=\"noopener\">搜了下</a>，貌似需要和GUI模块搭配使用，像是起到别的模块的插件的作用</li>\n</ul>\n<h3 id=\"相关话题\"><a href=\"#相关话题\" class=\"headerlink\" title=\"相关话题\"></a>相关话题</h3><hr>\n<h4 id=\"动态-VS-静态\"><a href=\"#动态-VS-静态\" class=\"headerlink\" title=\"动态 VS 静态\"></a>动态 VS 静态</h4><p>动态语言和静态语言的主要区别就在于：<strong>编译、链接的时机</strong>。C/C++的编译、链接阶段和执行期、运行时（run time）是严格区分开来的。但是lua的链接过程可以放到运行时。<strong>实时编译</strong>技术甚至可以把编译阶段放到运行时。</p>\n<h4 id=\"编译器生产的机器代码的目标机器的区别\"><a href=\"#编译器生产的机器代码的目标机器的区别\" class=\"headerlink\" title=\"编译器生产的机器代码的目标机器的区别\"></a>编译器生产的机器代码的目标机器的区别</h4><ul>\n<li>C++的编译器产生的二进制文件的目标机器是诸如：X86、X64、arm等</li>\n<li>lua编译器产生的二进制文件的目标机器则是lua虚拟机</li>\n</ul>\n<h4 id=\"解释器、编译器、虚拟机\"><a href=\"#解释器、编译器、虚拟机\" class=\"headerlink\" title=\"解释器、编译器、虚拟机\"></a>解释器、编译器、虚拟机</h4><ul>\n<li>lua编译器把lua脚本编译成lua虚拟机的指令</li>\n<li>lua解释器包括编译器和虚拟机</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><hr>\n<ul>\n<li><strong>lua53.dll</strong>：由lua源码生成的动态链接库</li>\n<li><strong>lua53.exe</strong>：这个是lua的解释器。可以执行终端输入的lua语句，或者lua代码文件，或者经过luac53.exe输出的文件</li>\n<li><strong>luac53.exe</strong>：这个是lua的编译器。lua虽然是脚本语言，解释执行。但它也可以拥有自己的编译器，lua的解释器可以执行经由lua编译器编译后的代码</li>\n<li><strong>wlua53.exe</strong>：这个网上<a href=\"https://blog.csdn.net/zrf2112/article/details/79418515\" target=\"_blank\" rel=\"noopener\">搜了下</a>，貌似需要和GUI模块搭配使用，像是起到别的模块的插件的作用</li>\n</ul>\n<h3 id=\"相关话题\"><a href=\"#相关话题\" class=\"headerlink\" title=\"相关话题\"></a>相关话题</h3><hr>\n<h4 id=\"动态-VS-静态\"><a href=\"#动态-VS-静态\" class=\"headerlink\" title=\"动态 VS 静态\"></a>动态 VS 静态</h4><p>动态语言和静态语言的主要区别就在于：<strong>编译、链接的时机</strong>。C/C++的编译、链接阶段和执行期、运行时（run time）是严格区分开来的。但是lua的链接过程可以放到运行时。<strong>实时编译</strong>技术甚至可以把编译阶段放到运行时。</p>\n<h4 id=\"编译器生产的机器代码的目标机器的区别\"><a href=\"#编译器生产的机器代码的目标机器的区别\" class=\"headerlink\" title=\"编译器生产的机器代码的目标机器的区别\"></a>编译器生产的机器代码的目标机器的区别</h4><ul>\n<li>C++的编译器产生的二进制文件的目标机器是诸如：X86、X64、arm等</li>\n<li>lua编译器产生的二进制文件的目标机器则是lua虚拟机</li>\n</ul>\n<h4 id=\"解释器、编译器、虚拟机\"><a href=\"#解释器、编译器、虚拟机\" class=\"headerlink\" title=\"解释器、编译器、虚拟机\"></a>解释器、编译器、虚拟机</h4><ul>\n<li>lua编译器把lua脚本编译成lua虚拟机的指令</li>\n<li>lua解释器包括编译器和虚拟机</li>\n</ul>\n"},{"title":"Lua的元表与元方法","date":"2019-03-17T16:00:00.000Z","_content":"\n### 元表（MetaTable）\n---\n* Lua中的每个值都可以有一个*元表*，这个*元表*就是一个普通的Lua表（table）；元表中的键所关联的那些值被称为*元方法*，而这些键则对应着不同的*事件名*\n* 元表用于定义原始值在特定操作下的行为，有点像函数重写的效果一样。只是这里的原始函数就是个nil（根本就没有函数，或者说重写了一个内容为空的函数）\n* 使用setmetatable来给Lua的一个表设置元表，用getmetatable来获取一个元表\n* 表一般拥有独立的元表，而其它类型的值则是整个类型共享一个元表。注意：在标准Lua中，不可以改变除表以外的其它值的元表，比如number、string等\n\n### 使用元表与元方法实现table的“操作符重载”\n---\n```\nlocal tab1 = {1, 2, 3, 4}\nlocal tab2 = {10, 20, 30, 40}\n\nlocal metaTab = {\n    __add = function (t1, t2)\n        for i = 1, #t2 do\n            table.insert(t1, t2[i])\n        end\n        return t1\n    end\n}\n\nsetmetatable(tab1, metaTab)\nlocal tab3 = tab1 + tab2\n-- tab3 = {1, 2, 3, 4, 10, 20, 30, 40}\n```\n这里的add表示“+”操作的事件名，__add是完成“+”操作的元方法的key值，这样我们就可以自定义两个表相加的操作了。类似的还有：\n\n事件名 | 对应操作（元方法）的key值 | 含义\n-|-|-\nsub | __sub | 减法\nmul | __mul | 乘法\ndiv | __div | 除法\nlen | __len | 取长度\neq | __eq | 相等\nindex | __index | 索引table[key]\nnewindex | __newindex | 索引赋值 table[key] = value\ncall | __call | 函数调用操作\n\n### __index与OOP中的继承\n---\n* 当你给一个表的元表设置了__index对应的域（元方法）时（注意，这里的元方法既可以是一个函数，也可以是另一个表），\n* 当你对这个表索引一个key时，如果这个表里不存在这个key时，解释器就会去这个表的元表找__index对应的域（元方法）\n* 如果元方法是一个函数，则以table和key作为参数调用它。如果是一个表，那就有趣了，就继续在__index对应的表里索引key\n* 假如它的元表（元表就是普通的Lua表）又有自己的元表，如果当前还是没有索引到key，那就继续去元表的元表里去索引\n* 直到索引到key，或者没有元表了，或者元表里没有再定义__index对应的域了\n\n想想看，表与元表的关系，和子类与父类的关系是不是很像呢。当把一个表A设置成另一个表B的元表时，表B就相当于同时拥有了A和B的所有属性和操作！\n\n然后还有那个__call，简直就是面向对象里给对象定义了调用运算符\"()\"\n","source":"_posts/Lua/Lua的元表与元方法.md","raw":"---\ntitle: Lua的元表与元方法\ncategories: Lua\ndate: 2019-03-18\n---\n\n### 元表（MetaTable）\n---\n* Lua中的每个值都可以有一个*元表*，这个*元表*就是一个普通的Lua表（table）；元表中的键所关联的那些值被称为*元方法*，而这些键则对应着不同的*事件名*\n* 元表用于定义原始值在特定操作下的行为，有点像函数重写的效果一样。只是这里的原始函数就是个nil（根本就没有函数，或者说重写了一个内容为空的函数）\n* 使用setmetatable来给Lua的一个表设置元表，用getmetatable来获取一个元表\n* 表一般拥有独立的元表，而其它类型的值则是整个类型共享一个元表。注意：在标准Lua中，不可以改变除表以外的其它值的元表，比如number、string等\n\n### 使用元表与元方法实现table的“操作符重载”\n---\n```\nlocal tab1 = {1, 2, 3, 4}\nlocal tab2 = {10, 20, 30, 40}\n\nlocal metaTab = {\n    __add = function (t1, t2)\n        for i = 1, #t2 do\n            table.insert(t1, t2[i])\n        end\n        return t1\n    end\n}\n\nsetmetatable(tab1, metaTab)\nlocal tab3 = tab1 + tab2\n-- tab3 = {1, 2, 3, 4, 10, 20, 30, 40}\n```\n这里的add表示“+”操作的事件名，__add是完成“+”操作的元方法的key值，这样我们就可以自定义两个表相加的操作了。类似的还有：\n\n事件名 | 对应操作（元方法）的key值 | 含义\n-|-|-\nsub | __sub | 减法\nmul | __mul | 乘法\ndiv | __div | 除法\nlen | __len | 取长度\neq | __eq | 相等\nindex | __index | 索引table[key]\nnewindex | __newindex | 索引赋值 table[key] = value\ncall | __call | 函数调用操作\n\n### __index与OOP中的继承\n---\n* 当你给一个表的元表设置了__index对应的域（元方法）时（注意，这里的元方法既可以是一个函数，也可以是另一个表），\n* 当你对这个表索引一个key时，如果这个表里不存在这个key时，解释器就会去这个表的元表找__index对应的域（元方法）\n* 如果元方法是一个函数，则以table和key作为参数调用它。如果是一个表，那就有趣了，就继续在__index对应的表里索引key\n* 假如它的元表（元表就是普通的Lua表）又有自己的元表，如果当前还是没有索引到key，那就继续去元表的元表里去索引\n* 直到索引到key，或者没有元表了，或者元表里没有再定义__index对应的域了\n\n想想看，表与元表的关系，和子类与父类的关系是不是很像呢。当把一个表A设置成另一个表B的元表时，表B就相当于同时拥有了A和B的所有属性和操作！\n\n然后还有那个__call，简直就是面向对象里给对象定义了调用运算符\"()\"\n","slug":"Lua/Lua的元表与元方法","published":1,"updated":"2019-04-25T03:06:00.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8d001zhcr7q61jgfp7","content":"<h3 id=\"元表（MetaTable）\"><a href=\"#元表（MetaTable）\" class=\"headerlink\" title=\"元表（MetaTable）\"></a>元表（MetaTable）</h3><hr>\n<ul>\n<li>Lua中的每个值都可以有一个<em>元表</em>，这个<em>元表</em>就是一个普通的Lua表（table）；元表中的键所关联的那些值被称为<em>元方法</em>，而这些键则对应着不同的<em>事件名</em></li>\n<li>元表用于定义原始值在特定操作下的行为，有点像函数重写的效果一样。只是这里的原始函数就是个nil（根本就没有函数，或者说重写了一个内容为空的函数）</li>\n<li>使用setmetatable来给Lua的一个表设置元表，用getmetatable来获取一个元表</li>\n<li>表一般拥有独立的元表，而其它类型的值则是整个类型共享一个元表。注意：在标准Lua中，不可以改变除表以外的其它值的元表，比如number、string等</li>\n</ul>\n<h3 id=\"使用元表与元方法实现table的“操作符重载”\"><a href=\"#使用元表与元方法实现table的“操作符重载”\" class=\"headerlink\" title=\"使用元表与元方法实现table的“操作符重载”\"></a>使用元表与元方法实现table的“操作符重载”</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab1 = &#123;1, 2, 3, 4&#125;</span><br><span class=\"line\">local tab2 = &#123;10, 20, 30, 40&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">local metaTab = &#123;</span><br><span class=\"line\">    __add = function (t1, t2)</span><br><span class=\"line\">        for i = 1, #t2 do</span><br><span class=\"line\">            table.insert(t1, t2[i])</span><br><span class=\"line\">        end</span><br><span class=\"line\">        return t1</span><br><span class=\"line\">    end</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setmetatable(tab1, metaTab)</span><br><span class=\"line\">local tab3 = tab1 + tab2</span><br><span class=\"line\">-- tab3 = &#123;1, 2, 3, 4, 10, 20, 30, 40&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的add表示“+”操作的事件名，__add是完成“+”操作的元方法的key值，这样我们就可以自定义两个表相加的操作了。类似的还有：</p>\n<table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>对应操作（元方法）的key值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sub</td>\n<td>__sub</td>\n<td>减法</td>\n</tr>\n<tr>\n<td>mul</td>\n<td>__mul</td>\n<td>乘法</td>\n</tr>\n<tr>\n<td>div</td>\n<td>__div</td>\n<td>除法</td>\n</tr>\n<tr>\n<td>len</td>\n<td>__len</td>\n<td>取长度</td>\n</tr>\n<tr>\n<td>eq</td>\n<td>__eq</td>\n<td>相等</td>\n</tr>\n<tr>\n<td>index</td>\n<td>__index</td>\n<td>索引table[key]</td>\n</tr>\n<tr>\n<td>newindex</td>\n<td>__newindex</td>\n<td>索引赋值 table[key] = value</td>\n</tr>\n<tr>\n<td>call</td>\n<td>__call</td>\n<td>函数调用操作</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"index与OOP中的继承\"><a href=\"#index与OOP中的继承\" class=\"headerlink\" title=\"__index与OOP中的继承\"></a>__index与OOP中的继承</h3><hr>\n<ul>\n<li>当你给一个表的元表设置了__index对应的域（元方法）时（注意，这里的元方法既可以是一个函数，也可以是另一个表），</li>\n<li>当你对这个表索引一个key时，如果这个表里不存在这个key时，解释器就会去这个表的元表找__index对应的域（元方法）</li>\n<li>如果元方法是一个函数，则以table和key作为参数调用它。如果是一个表，那就有趣了，就继续在__index对应的表里索引key</li>\n<li>假如它的元表（元表就是普通的Lua表）又有自己的元表，如果当前还是没有索引到key，那就继续去元表的元表里去索引</li>\n<li>直到索引到key，或者没有元表了，或者元表里没有再定义__index对应的域了</li>\n</ul>\n<p>想想看，表与元表的关系，和子类与父类的关系是不是很像呢。当把一个表A设置成另一个表B的元表时，表B就相当于同时拥有了A和B的所有属性和操作！</p>\n<p>然后还有那个__call，简直就是面向对象里给对象定义了调用运算符”()”</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"元表（MetaTable）\"><a href=\"#元表（MetaTable）\" class=\"headerlink\" title=\"元表（MetaTable）\"></a>元表（MetaTable）</h3><hr>\n<ul>\n<li>Lua中的每个值都可以有一个<em>元表</em>，这个<em>元表</em>就是一个普通的Lua表（table）；元表中的键所关联的那些值被称为<em>元方法</em>，而这些键则对应着不同的<em>事件名</em></li>\n<li>元表用于定义原始值在特定操作下的行为，有点像函数重写的效果一样。只是这里的原始函数就是个nil（根本就没有函数，或者说重写了一个内容为空的函数）</li>\n<li>使用setmetatable来给Lua的一个表设置元表，用getmetatable来获取一个元表</li>\n<li>表一般拥有独立的元表，而其它类型的值则是整个类型共享一个元表。注意：在标准Lua中，不可以改变除表以外的其它值的元表，比如number、string等</li>\n</ul>\n<h3 id=\"使用元表与元方法实现table的“操作符重载”\"><a href=\"#使用元表与元方法实现table的“操作符重载”\" class=\"headerlink\" title=\"使用元表与元方法实现table的“操作符重载”\"></a>使用元表与元方法实现table的“操作符重载”</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab1 = &#123;1, 2, 3, 4&#125;</span><br><span class=\"line\">local tab2 = &#123;10, 20, 30, 40&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">local metaTab = &#123;</span><br><span class=\"line\">    __add = function (t1, t2)</span><br><span class=\"line\">        for i = 1, #t2 do</span><br><span class=\"line\">            table.insert(t1, t2[i])</span><br><span class=\"line\">        end</span><br><span class=\"line\">        return t1</span><br><span class=\"line\">    end</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setmetatable(tab1, metaTab)</span><br><span class=\"line\">local tab3 = tab1 + tab2</span><br><span class=\"line\">-- tab3 = &#123;1, 2, 3, 4, 10, 20, 30, 40&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的add表示“+”操作的事件名，__add是完成“+”操作的元方法的key值，这样我们就可以自定义两个表相加的操作了。类似的还有：</p>\n<table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>对应操作（元方法）的key值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sub</td>\n<td>__sub</td>\n<td>减法</td>\n</tr>\n<tr>\n<td>mul</td>\n<td>__mul</td>\n<td>乘法</td>\n</tr>\n<tr>\n<td>div</td>\n<td>__div</td>\n<td>除法</td>\n</tr>\n<tr>\n<td>len</td>\n<td>__len</td>\n<td>取长度</td>\n</tr>\n<tr>\n<td>eq</td>\n<td>__eq</td>\n<td>相等</td>\n</tr>\n<tr>\n<td>index</td>\n<td>__index</td>\n<td>索引table[key]</td>\n</tr>\n<tr>\n<td>newindex</td>\n<td>__newindex</td>\n<td>索引赋值 table[key] = value</td>\n</tr>\n<tr>\n<td>call</td>\n<td>__call</td>\n<td>函数调用操作</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"index与OOP中的继承\"><a href=\"#index与OOP中的继承\" class=\"headerlink\" title=\"__index与OOP中的继承\"></a>__index与OOP中的继承</h3><hr>\n<ul>\n<li>当你给一个表的元表设置了__index对应的域（元方法）时（注意，这里的元方法既可以是一个函数，也可以是另一个表），</li>\n<li>当你对这个表索引一个key时，如果这个表里不存在这个key时，解释器就会去这个表的元表找__index对应的域（元方法）</li>\n<li>如果元方法是一个函数，则以table和key作为参数调用它。如果是一个表，那就有趣了，就继续在__index对应的表里索引key</li>\n<li>假如它的元表（元表就是普通的Lua表）又有自己的元表，如果当前还是没有索引到key，那就继续去元表的元表里去索引</li>\n<li>直到索引到key，或者没有元表了，或者元表里没有再定义__index对应的域了</li>\n</ul>\n<p>想想看，表与元表的关系，和子类与父类的关系是不是很像呢。当把一个表A设置成另一个表B的元表时，表B就相当于同时拥有了A和B的所有属性和操作！</p>\n<p>然后还有那个__call，简直就是面向对象里给对象定义了调用运算符”()”</p>\n"},{"title":"Lua遍历Table的几种方式","date":"2019-03-16T16:00:00.000Z","_content":"\n### for语句 + #tab\n---\n这种方式只适合遍历被当作单纯的数组使用时的table，并且没有自定义元素的索引\n```\n# 先定义一个使用for语句 + #tab的遍历函数\nfunction Traversal(tab) \n    print(#tab .. |)\n    for i = 1, #tab do \n        print(tab[i]) \n    end \nend\n\nlocal tab = {0, 1, 2, 5, 9, 7}\nTraversal(tab)\n# 打印结果：6|0 1 2 5 9 7\n# 这个结果很符合预期\n\n# 现在假设tab的内容是这样的：\n\ntab = {0, 1, [4] = 2}\nTraversal(tab)\n# 打印结果：2|0 1\n\n# 或者下面这样：\n\ntab = {[2] = 0, 1, 2}\nTraversal(tab)\n# 打印结果：2|1 2\n\n# 显然当tab的索引不连续时，这种方式只把连续的元素打印出来了\n# 这是因为#tab的值只表示索引连续的元素个数，而不是tab的所有元素个数\n```\n\n### for语句 + pairs\n---\n这种方式几乎可以遍历各种形式的table，但是遍历的顺序可能不符合预期，因为它是按照key的hash值来顺序遍历的\n```\nfunction Traversal(tab) \n    for k, v in pairs(tab) do\n        print(k .. \":\" .. v)\n    end\nend\n\nlocal tab = {0, 1, 2, 5, 9, 7} \nTraversal(tab)\n# 打印结果：1:0 2:1 3:2 4:5 5:9 6:7\n\ntab = {[\"ad\"] = 0, 1, 2}\nTraversal(tab)\n# 打印结果：1:1 2:2 ad:0\n\ntab = {\"A\", \"B\", [9] = \"C\", 1, [5] = \"D\", 12}\nTraversal(tab)\n# 打印结果：1:A 2:B 3:1 4:12 5:D 9:C\n\nlocal tab = {[2]= \"A\", \"B\", [9] = \"C\", 1, [5] = \"D\", 12}\nTraversal(tab)\n# 打印结果：1:B 2:1 3:12 9:C 5:D\n# 注意：\"A\"没有打印出来，这就是为什么说它几乎能遍历所有形式的table\n# 但是几乎没有会像上面那样使用table。。。\n```\n\n### for语句 + ipairs\n---\n这种方式只是形式上和for + pairs很像，内部机制差异很大。首先它很容易就会中断遍历操作（for + pairs几乎不会中断操作），但是它也有自己的优势：可以保证遍历的顺序。\n```\nfunction Traversal(tab) \n    for k, v in ipairs(tab) do\n        print(k .. \":\" .. v)\n    end\nend\n\nlocal tab = {\"A\", 5, \"D\", 12}\nTraversal(tab)\n# 打印结果：1:A 2:5 3:D 4:12\n\ntab = {0, 123, 12, \"C\", [7] = 3}\nTraversal(tab)\n# 打印结果：1:0 2:123 3:12 4:C\n# 注意：在索引不连续时，中断了遍历\n\ntab = {[2]= \"A\", \"B\", [9] = \"C\", 1, [5] = \"D\", 12}\nTraversal(tab)\n# 打印结果：1:B 2:1 3:12\n```\n\n### 总结\n综上，在Lua的世界里，竟然找不到一个可以在任何情境下都能保证完全遍历出一个table！甚至在不要求遍历顺序的前提下，也找不到！为什么在一个编程语言里会出现这样的设计呢？要知道在像C++、JAVA之类的语言里，这简直是标配好不好！管你是普通数组还是关联数组，分分钟搞定。\n\n在我看来，感觉是因为table在Lua里面实在是太灵活了！\n* 没有类型限制，同一个table里可以同时存放字符、数值、函数甚至是另一个table！\n* 同一个table里既可以放单个元素，也能存放key-value形式的键值对\n\n就这么多了，记得选择合适自己需求的方式就行了","source":"_posts/Lua/Lua遍历Table的几种方式.md","raw":"---\ntitle: Lua遍历Table的几种方式\ncategories: Lua\ndate: 2019-03-17\n---\n\n### for语句 + #tab\n---\n这种方式只适合遍历被当作单纯的数组使用时的table，并且没有自定义元素的索引\n```\n# 先定义一个使用for语句 + #tab的遍历函数\nfunction Traversal(tab) \n    print(#tab .. |)\n    for i = 1, #tab do \n        print(tab[i]) \n    end \nend\n\nlocal tab = {0, 1, 2, 5, 9, 7}\nTraversal(tab)\n# 打印结果：6|0 1 2 5 9 7\n# 这个结果很符合预期\n\n# 现在假设tab的内容是这样的：\n\ntab = {0, 1, [4] = 2}\nTraversal(tab)\n# 打印结果：2|0 1\n\n# 或者下面这样：\n\ntab = {[2] = 0, 1, 2}\nTraversal(tab)\n# 打印结果：2|1 2\n\n# 显然当tab的索引不连续时，这种方式只把连续的元素打印出来了\n# 这是因为#tab的值只表示索引连续的元素个数，而不是tab的所有元素个数\n```\n\n### for语句 + pairs\n---\n这种方式几乎可以遍历各种形式的table，但是遍历的顺序可能不符合预期，因为它是按照key的hash值来顺序遍历的\n```\nfunction Traversal(tab) \n    for k, v in pairs(tab) do\n        print(k .. \":\" .. v)\n    end\nend\n\nlocal tab = {0, 1, 2, 5, 9, 7} \nTraversal(tab)\n# 打印结果：1:0 2:1 3:2 4:5 5:9 6:7\n\ntab = {[\"ad\"] = 0, 1, 2}\nTraversal(tab)\n# 打印结果：1:1 2:2 ad:0\n\ntab = {\"A\", \"B\", [9] = \"C\", 1, [5] = \"D\", 12}\nTraversal(tab)\n# 打印结果：1:A 2:B 3:1 4:12 5:D 9:C\n\nlocal tab = {[2]= \"A\", \"B\", [9] = \"C\", 1, [5] = \"D\", 12}\nTraversal(tab)\n# 打印结果：1:B 2:1 3:12 9:C 5:D\n# 注意：\"A\"没有打印出来，这就是为什么说它几乎能遍历所有形式的table\n# 但是几乎没有会像上面那样使用table。。。\n```\n\n### for语句 + ipairs\n---\n这种方式只是形式上和for + pairs很像，内部机制差异很大。首先它很容易就会中断遍历操作（for + pairs几乎不会中断操作），但是它也有自己的优势：可以保证遍历的顺序。\n```\nfunction Traversal(tab) \n    for k, v in ipairs(tab) do\n        print(k .. \":\" .. v)\n    end\nend\n\nlocal tab = {\"A\", 5, \"D\", 12}\nTraversal(tab)\n# 打印结果：1:A 2:5 3:D 4:12\n\ntab = {0, 123, 12, \"C\", [7] = 3}\nTraversal(tab)\n# 打印结果：1:0 2:123 3:12 4:C\n# 注意：在索引不连续时，中断了遍历\n\ntab = {[2]= \"A\", \"B\", [9] = \"C\", 1, [5] = \"D\", 12}\nTraversal(tab)\n# 打印结果：1:B 2:1 3:12\n```\n\n### 总结\n综上，在Lua的世界里，竟然找不到一个可以在任何情境下都能保证完全遍历出一个table！甚至在不要求遍历顺序的前提下，也找不到！为什么在一个编程语言里会出现这样的设计呢？要知道在像C++、JAVA之类的语言里，这简直是标配好不好！管你是普通数组还是关联数组，分分钟搞定。\n\n在我看来，感觉是因为table在Lua里面实在是太灵活了！\n* 没有类型限制，同一个table里可以同时存放字符、数值、函数甚至是另一个table！\n* 同一个table里既可以放单个元素，也能存放key-value形式的键值对\n\n就这么多了，记得选择合适自己需求的方式就行了","slug":"Lua/Lua遍历Table的几种方式","published":1,"updated":"2019-04-25T03:06:00.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8e0022hcr7u36p4j75","content":"<h3 id=\"for语句-tab\"><a href=\"#for语句-tab\" class=\"headerlink\" title=\"for语句 + #tab\"></a>for语句 + #tab</h3><hr>\n<p>这种方式只适合遍历被当作单纯的数组使用时的table，并且没有自定义元素的索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 先定义一个使用for语句 + #tab的遍历函数</span><br><span class=\"line\">function Traversal(tab) </span><br><span class=\"line\">    print(#tab .. |)</span><br><span class=\"line\">    for i = 1, #tab do </span><br><span class=\"line\">        print(tab[i]) </span><br><span class=\"line\">    end </span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local tab = &#123;0, 1, 2, 5, 9, 7&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：6|0 1 2 5 9 7</span><br><span class=\"line\"># 这个结果很符合预期</span><br><span class=\"line\"></span><br><span class=\"line\"># 现在假设tab的内容是这样的：</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;0, 1, [4] = 2&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：2|0 1</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者下面这样：</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;[2] = 0, 1, 2&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：2|1 2</span><br><span class=\"line\"></span><br><span class=\"line\"># 显然当tab的索引不连续时，这种方式只把连续的元素打印出来了</span><br><span class=\"line\"># 这是因为#tab的值只表示索引连续的元素个数，而不是tab的所有元素个数</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"for语句-pairs\"><a href=\"#for语句-pairs\" class=\"headerlink\" title=\"for语句 + pairs\"></a>for语句 + pairs</h3><hr>\n<p>这种方式几乎可以遍历各种形式的table，但是遍历的顺序可能不符合预期，因为它是按照key的hash值来顺序遍历的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Traversal(tab) </span><br><span class=\"line\">    for k, v in pairs(tab) do</span><br><span class=\"line\">        print(k .. &quot;:&quot; .. v)</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local tab = &#123;0, 1, 2, 5, 9, 7&#125; </span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:0 2:1 3:2 4:5 5:9 6:7</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;[&quot;ad&quot;] = 0, 1, 2&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:1 2:2 ad:0</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;&quot;A&quot;, &quot;B&quot;, [9] = &quot;C&quot;, 1, [5] = &quot;D&quot;, 12&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:A 2:B 3:1 4:12 5:D 9:C</span><br><span class=\"line\"></span><br><span class=\"line\">local tab = &#123;[2]= &quot;A&quot;, &quot;B&quot;, [9] = &quot;C&quot;, 1, [5] = &quot;D&quot;, 12&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:B 2:1 3:12 9:C 5:D</span><br><span class=\"line\"># 注意：&quot;A&quot;没有打印出来，这就是为什么说它几乎能遍历所有形式的table</span><br><span class=\"line\"># 但是几乎没有会像上面那样使用table。。。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"for语句-ipairs\"><a href=\"#for语句-ipairs\" class=\"headerlink\" title=\"for语句 + ipairs\"></a>for语句 + ipairs</h3><hr>\n<p>这种方式只是形式上和for + pairs很像，内部机制差异很大。首先它很容易就会中断遍历操作（for + pairs几乎不会中断操作），但是它也有自己的优势：可以保证遍历的顺序。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Traversal(tab) </span><br><span class=\"line\">    for k, v in ipairs(tab) do</span><br><span class=\"line\">        print(k .. &quot;:&quot; .. v)</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local tab = &#123;&quot;A&quot;, 5, &quot;D&quot;, 12&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:A 2:5 3:D 4:12</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;0, 123, 12, &quot;C&quot;, [7] = 3&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:0 2:123 3:12 4:C</span><br><span class=\"line\"># 注意：在索引不连续时，中断了遍历</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;[2]= &quot;A&quot;, &quot;B&quot;, [9] = &quot;C&quot;, 1, [5] = &quot;D&quot;, 12&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:B 2:1 3:12</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>综上，在Lua的世界里，竟然找不到一个可以在任何情境下都能保证完全遍历出一个table！甚至在不要求遍历顺序的前提下，也找不到！为什么在一个编程语言里会出现这样的设计呢？要知道在像C++、JAVA之类的语言里，这简直是标配好不好！管你是普通数组还是关联数组，分分钟搞定。</p>\n<p>在我看来，感觉是因为table在Lua里面实在是太灵活了！</p>\n<ul>\n<li>没有类型限制，同一个table里可以同时存放字符、数值、函数甚至是另一个table！</li>\n<li>同一个table里既可以放单个元素，也能存放key-value形式的键值对</li>\n</ul>\n<p>就这么多了，记得选择合适自己需求的方式就行了</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"for语句-tab\"><a href=\"#for语句-tab\" class=\"headerlink\" title=\"for语句 + #tab\"></a>for语句 + #tab</h3><hr>\n<p>这种方式只适合遍历被当作单纯的数组使用时的table，并且没有自定义元素的索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 先定义一个使用for语句 + #tab的遍历函数</span><br><span class=\"line\">function Traversal(tab) </span><br><span class=\"line\">    print(#tab .. |)</span><br><span class=\"line\">    for i = 1, #tab do </span><br><span class=\"line\">        print(tab[i]) </span><br><span class=\"line\">    end </span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local tab = &#123;0, 1, 2, 5, 9, 7&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：6|0 1 2 5 9 7</span><br><span class=\"line\"># 这个结果很符合预期</span><br><span class=\"line\"></span><br><span class=\"line\"># 现在假设tab的内容是这样的：</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;0, 1, [4] = 2&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：2|0 1</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者下面这样：</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;[2] = 0, 1, 2&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：2|1 2</span><br><span class=\"line\"></span><br><span class=\"line\"># 显然当tab的索引不连续时，这种方式只把连续的元素打印出来了</span><br><span class=\"line\"># 这是因为#tab的值只表示索引连续的元素个数，而不是tab的所有元素个数</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"for语句-pairs\"><a href=\"#for语句-pairs\" class=\"headerlink\" title=\"for语句 + pairs\"></a>for语句 + pairs</h3><hr>\n<p>这种方式几乎可以遍历各种形式的table，但是遍历的顺序可能不符合预期，因为它是按照key的hash值来顺序遍历的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Traversal(tab) </span><br><span class=\"line\">    for k, v in pairs(tab) do</span><br><span class=\"line\">        print(k .. &quot;:&quot; .. v)</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local tab = &#123;0, 1, 2, 5, 9, 7&#125; </span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:0 2:1 3:2 4:5 5:9 6:7</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;[&quot;ad&quot;] = 0, 1, 2&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:1 2:2 ad:0</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;&quot;A&quot;, &quot;B&quot;, [9] = &quot;C&quot;, 1, [5] = &quot;D&quot;, 12&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:A 2:B 3:1 4:12 5:D 9:C</span><br><span class=\"line\"></span><br><span class=\"line\">local tab = &#123;[2]= &quot;A&quot;, &quot;B&quot;, [9] = &quot;C&quot;, 1, [5] = &quot;D&quot;, 12&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:B 2:1 3:12 9:C 5:D</span><br><span class=\"line\"># 注意：&quot;A&quot;没有打印出来，这就是为什么说它几乎能遍历所有形式的table</span><br><span class=\"line\"># 但是几乎没有会像上面那样使用table。。。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"for语句-ipairs\"><a href=\"#for语句-ipairs\" class=\"headerlink\" title=\"for语句 + ipairs\"></a>for语句 + ipairs</h3><hr>\n<p>这种方式只是形式上和for + pairs很像，内部机制差异很大。首先它很容易就会中断遍历操作（for + pairs几乎不会中断操作），但是它也有自己的优势：可以保证遍历的顺序。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Traversal(tab) </span><br><span class=\"line\">    for k, v in ipairs(tab) do</span><br><span class=\"line\">        print(k .. &quot;:&quot; .. v)</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local tab = &#123;&quot;A&quot;, 5, &quot;D&quot;, 12&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:A 2:5 3:D 4:12</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;0, 123, 12, &quot;C&quot;, [7] = 3&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:0 2:123 3:12 4:C</span><br><span class=\"line\"># 注意：在索引不连续时，中断了遍历</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;[2]= &quot;A&quot;, &quot;B&quot;, [9] = &quot;C&quot;, 1, [5] = &quot;D&quot;, 12&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:B 2:1 3:12</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>综上，在Lua的世界里，竟然找不到一个可以在任何情境下都能保证完全遍历出一个table！甚至在不要求遍历顺序的前提下，也找不到！为什么在一个编程语言里会出现这样的设计呢？要知道在像C++、JAVA之类的语言里，这简直是标配好不好！管你是普通数组还是关联数组，分分钟搞定。</p>\n<p>在我看来，感觉是因为table在Lua里面实在是太灵活了！</p>\n<ul>\n<li>没有类型限制，同一个table里可以同时存放字符、数值、函数甚至是另一个table！</li>\n<li>同一个table里既可以放单个元素，也能存放key-value形式的键值对</li>\n</ul>\n<p>就这么多了，记得选择合适自己需求的方式就行了</p>\n"},{"title":"2019年的7月内必须减到70kg！","date":"2019-07-01T16:00:00.000Z","_content":"\n### 一、现在是7月初，体重大概78kg、79kg\n\n### 二、flag是一定要立的！\n\n### 三、务必减到70kg，否则怎么找对象啊😭\n\n### 四、身体质量指数（简称：BMI）\n---\n\n`BMI = m / h ^ 2`\n\n* m：体重，单位千克\n* h：身高，单位米\n\n### 五、关于BMI需要注意的几点:\n* 按照世界标准：正常体重和过重的BMI指数分界线是：25\n* 按照中国标准（更符合亚洲人种的体型）：上面的分界线是：24\n\n按本人1.7m的身高，79kg的体重计算：BMI = 79 / (1.7 * 1.7) = 27.34。无论是按照世界还是中国标准，我都超重了😭！\n\n要想达到中国标准，我的体重需要减到：m = 24 \\* 1.7 \\* 1.7 = 69.36kg！\n\n\n","source":"_posts/Other/2019年的7月内必须减到70kg！.md","raw":"---\ntitle: 2019年的7月内必须减到70kg！\ncategories: 其他\ndate: 2019-07-02\n---\n\n### 一、现在是7月初，体重大概78kg、79kg\n\n### 二、flag是一定要立的！\n\n### 三、务必减到70kg，否则怎么找对象啊😭\n\n### 四、身体质量指数（简称：BMI）\n---\n\n`BMI = m / h ^ 2`\n\n* m：体重，单位千克\n* h：身高，单位米\n\n### 五、关于BMI需要注意的几点:\n* 按照世界标准：正常体重和过重的BMI指数分界线是：25\n* 按照中国标准（更符合亚洲人种的体型）：上面的分界线是：24\n\n按本人1.7m的身高，79kg的体重计算：BMI = 79 / (1.7 * 1.7) = 27.34。无论是按照世界还是中国标准，我都超重了😭！\n\n要想达到中国标准，我的体重需要减到：m = 24 \\* 1.7 \\* 1.7 = 69.36kg！\n\n\n","slug":"Other/2019年的7月内必须减到70kg！","published":1,"updated":"2019-07-15T02:56:42.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8g0023hcr7bzbyhrv9","content":"<h3 id=\"一、现在是7月初，体重大概78kg、79kg\"><a href=\"#一、现在是7月初，体重大概78kg、79kg\" class=\"headerlink\" title=\"一、现在是7月初，体重大概78kg、79kg\"></a>一、现在是7月初，体重大概78kg、79kg</h3><h3 id=\"二、flag是一定要立的！\"><a href=\"#二、flag是一定要立的！\" class=\"headerlink\" title=\"二、flag是一定要立的！\"></a>二、flag是一定要立的！</h3><h3 id=\"三、务必减到70kg，否则怎么找对象啊😭\"><a href=\"#三、务必减到70kg，否则怎么找对象啊😭\" class=\"headerlink\" title=\"三、务必减到70kg，否则怎么找对象啊😭\"></a>三、务必减到70kg，否则怎么找对象啊😭</h3><h3 id=\"四、身体质量指数（简称：BMI）\"><a href=\"#四、身体质量指数（简称：BMI）\" class=\"headerlink\" title=\"四、身体质量指数（简称：BMI）\"></a>四、身体质量指数（简称：BMI）</h3><hr>\n<p><code>BMI = m / h ^ 2</code></p>\n<ul>\n<li>m：体重，单位千克</li>\n<li>h：身高，单位米</li>\n</ul>\n<h3 id=\"五、关于BMI需要注意的几点\"><a href=\"#五、关于BMI需要注意的几点\" class=\"headerlink\" title=\"五、关于BMI需要注意的几点:\"></a>五、关于BMI需要注意的几点:</h3><ul>\n<li>按照世界标准：正常体重和过重的BMI指数分界线是：25</li>\n<li>按照中国标准（更符合亚洲人种的体型）：上面的分界线是：24</li>\n</ul>\n<p>按本人1.7m的身高，79kg的体重计算：BMI = 79 / (1.7 * 1.7) = 27.34。无论是按照世界还是中国标准，我都超重了😭！</p>\n<p>要想达到中国标准，我的体重需要减到：m = 24 * 1.7 * 1.7 = 69.36kg！</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、现在是7月初，体重大概78kg、79kg\"><a href=\"#一、现在是7月初，体重大概78kg、79kg\" class=\"headerlink\" title=\"一、现在是7月初，体重大概78kg、79kg\"></a>一、现在是7月初，体重大概78kg、79kg</h3><h3 id=\"二、flag是一定要立的！\"><a href=\"#二、flag是一定要立的！\" class=\"headerlink\" title=\"二、flag是一定要立的！\"></a>二、flag是一定要立的！</h3><h3 id=\"三、务必减到70kg，否则怎么找对象啊😭\"><a href=\"#三、务必减到70kg，否则怎么找对象啊😭\" class=\"headerlink\" title=\"三、务必减到70kg，否则怎么找对象啊😭\"></a>三、务必减到70kg，否则怎么找对象啊😭</h3><h3 id=\"四、身体质量指数（简称：BMI）\"><a href=\"#四、身体质量指数（简称：BMI）\" class=\"headerlink\" title=\"四、身体质量指数（简称：BMI）\"></a>四、身体质量指数（简称：BMI）</h3><hr>\n<p><code>BMI = m / h ^ 2</code></p>\n<ul>\n<li>m：体重，单位千克</li>\n<li>h：身高，单位米</li>\n</ul>\n<h3 id=\"五、关于BMI需要注意的几点\"><a href=\"#五、关于BMI需要注意的几点\" class=\"headerlink\" title=\"五、关于BMI需要注意的几点:\"></a>五、关于BMI需要注意的几点:</h3><ul>\n<li>按照世界标准：正常体重和过重的BMI指数分界线是：25</li>\n<li>按照中国标准（更符合亚洲人种的体型）：上面的分界线是：24</li>\n</ul>\n<p>按本人1.7m的身高，79kg的体重计算：BMI = 79 / (1.7 * 1.7) = 27.34。无论是按照世界还是中国标准，我都超重了😭！</p>\n<p>要想达到中国标准，我的体重需要减到：m = 24 * 1.7 * 1.7 = 69.36kg！</p>\n"},{"title":"偈语","date":"2019-09-01T16:00:00.000Z","_content":"\n### 何为偈语？\n---\n\n偈，这里读ji，第四声。意为佛经中的唱词。\n\n初中时，曾经见过下面我要说的一个著名的四句偈。当时啥也不懂，也不觉得有多厉害的样子。后来发现在《少林足球》的片尾曲《踢出个未来》里出现过。\n\n最近才知道，这句著名的四句偈的出处：\n> 禅宗五祖弘忍有意传法，命弟子作偈以呈，以检验他们的修为。\n\n弘忍的首席大弟子神秀（后来的禅宗北宗六祖）以:\n### *身是菩提树，心如明镜台。时时勤拂拭，勿使惹尘埃。*\n\n一偈，表示对教义的理解，但是没有得到弘忍的赞许。\n\n这时，平常一直在寺里厨房做工的慧能（后来的禅宗南宗六祖），听后亦诵一偈，请人代劳题于（当时慧能并不识字）壁上：\n### *菩提本无树，明镜亦非台。本来无一物，何处惹尘埃。*\n\n众人大惊。史学家陈寅恪赞其：“特提出直指人心、见性成佛之旨，一扫僧徒繁琐章句之学，摧陷廓清，发聋振聩，固我国佛教史上一大事也”\n\n\n\n\n","source":"_posts/Other/偈语.md","raw":"---\ntitle: 偈语\ncategories: 其他\ndate: 2019-09-02\n---\n\n### 何为偈语？\n---\n\n偈，这里读ji，第四声。意为佛经中的唱词。\n\n初中时，曾经见过下面我要说的一个著名的四句偈。当时啥也不懂，也不觉得有多厉害的样子。后来发现在《少林足球》的片尾曲《踢出个未来》里出现过。\n\n最近才知道，这句著名的四句偈的出处：\n> 禅宗五祖弘忍有意传法，命弟子作偈以呈，以检验他们的修为。\n\n弘忍的首席大弟子神秀（后来的禅宗北宗六祖）以:\n### *身是菩提树，心如明镜台。时时勤拂拭，勿使惹尘埃。*\n\n一偈，表示对教义的理解，但是没有得到弘忍的赞许。\n\n这时，平常一直在寺里厨房做工的慧能（后来的禅宗南宗六祖），听后亦诵一偈，请人代劳题于（当时慧能并不识字）壁上：\n### *菩提本无树，明镜亦非台。本来无一物，何处惹尘埃。*\n\n众人大惊。史学家陈寅恪赞其：“特提出直指人心、见性成佛之旨，一扫僧徒繁琐章句之学，摧陷廓清，发聋振聩，固我国佛教史上一大事也”\n\n\n\n\n","slug":"Other/偈语","published":1,"updated":"2019-09-02T13:01:06.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8h0026hcr7bilirv37","content":"<h3 id=\"何为偈语？\"><a href=\"#何为偈语？\" class=\"headerlink\" title=\"何为偈语？\"></a>何为偈语？</h3><hr>\n<p>偈，这里读ji，第四声。意为佛经中的唱词。</p>\n<p>初中时，曾经见过下面我要说的一个著名的四句偈。当时啥也不懂，也不觉得有多厉害的样子。后来发现在《少林足球》的片尾曲《踢出个未来》里出现过。</p>\n<p>最近才知道，这句著名的四句偈的出处：</p>\n<blockquote>\n<p>禅宗五祖弘忍有意传法，命弟子作偈以呈，以检验他们的修为。</p>\n</blockquote>\n<p>弘忍的首席大弟子神秀（后来的禅宗北宗六祖）以:</p>\n<h3 id=\"身是菩提树，心如明镜台。时时勤拂拭，勿使惹尘埃。\"><a href=\"#身是菩提树，心如明镜台。时时勤拂拭，勿使惹尘埃。\" class=\"headerlink\" title=\"身是菩提树，心如明镜台。时时勤拂拭，勿使惹尘埃。\"></a><em>身是菩提树，心如明镜台。时时勤拂拭，勿使惹尘埃。</em></h3><p>一偈，表示对教义的理解，但是没有得到弘忍的赞许。</p>\n<p>这时，平常一直在寺里厨房做工的慧能（后来的禅宗南宗六祖），听后亦诵一偈，请人代劳题于（当时慧能并不识字）壁上：</p>\n<h3 id=\"菩提本无树，明镜亦非台。本来无一物，何处惹尘埃。\"><a href=\"#菩提本无树，明镜亦非台。本来无一物，何处惹尘埃。\" class=\"headerlink\" title=\"菩提本无树，明镜亦非台。本来无一物，何处惹尘埃。\"></a><em>菩提本无树，明镜亦非台。本来无一物，何处惹尘埃。</em></h3><p>众人大惊。史学家陈寅恪赞其：“特提出直指人心、见性成佛之旨，一扫僧徒繁琐章句之学，摧陷廓清，发聋振聩，固我国佛教史上一大事也”</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"何为偈语？\"><a href=\"#何为偈语？\" class=\"headerlink\" title=\"何为偈语？\"></a>何为偈语？</h3><hr>\n<p>偈，这里读ji，第四声。意为佛经中的唱词。</p>\n<p>初中时，曾经见过下面我要说的一个著名的四句偈。当时啥也不懂，也不觉得有多厉害的样子。后来发现在《少林足球》的片尾曲《踢出个未来》里出现过。</p>\n<p>最近才知道，这句著名的四句偈的出处：</p>\n<blockquote>\n<p>禅宗五祖弘忍有意传法，命弟子作偈以呈，以检验他们的修为。</p>\n</blockquote>\n<p>弘忍的首席大弟子神秀（后来的禅宗北宗六祖）以:</p>\n<h3 id=\"身是菩提树，心如明镜台。时时勤拂拭，勿使惹尘埃。\"><a href=\"#身是菩提树，心如明镜台。时时勤拂拭，勿使惹尘埃。\" class=\"headerlink\" title=\"身是菩提树，心如明镜台。时时勤拂拭，勿使惹尘埃。\"></a><em>身是菩提树，心如明镜台。时时勤拂拭，勿使惹尘埃。</em></h3><p>一偈，表示对教义的理解，但是没有得到弘忍的赞许。</p>\n<p>这时，平常一直在寺里厨房做工的慧能（后来的禅宗南宗六祖），听后亦诵一偈，请人代劳题于（当时慧能并不识字）壁上：</p>\n<h3 id=\"菩提本无树，明镜亦非台。本来无一物，何处惹尘埃。\"><a href=\"#菩提本无树，明镜亦非台。本来无一物，何处惹尘埃。\" class=\"headerlink\" title=\"菩提本无树，明镜亦非台。本来无一物，何处惹尘埃。\"></a><em>菩提本无树，明镜亦非台。本来无一物，何处惹尘埃。</em></h3><p>众人大惊。史学家陈寅恪赞其：“特提出直指人心、见性成佛之旨，一扫僧徒繁琐章句之学，摧陷廓清，发聋振聩，固我国佛教史上一大事也”</p>\n"},{"title":"2020年1月1日","date":"2019-12-31T16:00:00.000Z","_content":"\n#### 2020！\n#### 曾经这个时间点只会出现在科幻电影里！\n#### 但是，现在，现实中的时间已经走到了2020！\n#### 上学高中那会，看了一部叫做《2012》的电影，觉得2012年都算是挺远的未来年份了！\n#### 然而，现在，已经是《2012》的8年之后了！\n---\n#### 站在现在这个时间点上，想想以前，真的是把很多时间投注在太多毫无意义的事情上了，或者说这些事件所产生的影响，在时间尺度上太短太短了！长远来看，无论对自己还是对身边的家人、朋友，这些事情根本就没有什么正面的贡献！\n#### 什么电子游戏、美剧、电影、综艺，现在统统跟你们拜拜！（我2019年就已经做到了！可喜可贺！）\n#### 说真的，要放下这些曾经很着迷的东西，真的很难很难！尤其是游戏！即使你心知肚明，知道在那上面花费太多时间很不好，但就是放不下，或者反反复复的放下又重新拾起。。。。。。\n#### 但是，一旦你真的放下后，那种感觉，如释重负！整个人都轻松了很多！它们再也不能获取你宝贵的注意力，而你，终于可以把注意力投注在真正重要的事情上了！\n---\n#### 现在，就好好把握当下吧！过去只能用来反思了！\n#### 正如，一本书里所言：\n\n### *下刻虚空，此刻即是。*\n\n#### 2020这一年里，又会发生什么样的变化呢？\n\n#### *I am looking forward.*\n","source":"_posts/Other/2020年1月1日.md","raw":"---\ntitle: 2020年1月1日\ncategories: 其他\ndate: 2020-01-01\n---\n\n#### 2020！\n#### 曾经这个时间点只会出现在科幻电影里！\n#### 但是，现在，现实中的时间已经走到了2020！\n#### 上学高中那会，看了一部叫做《2012》的电影，觉得2012年都算是挺远的未来年份了！\n#### 然而，现在，已经是《2012》的8年之后了！\n---\n#### 站在现在这个时间点上，想想以前，真的是把很多时间投注在太多毫无意义的事情上了，或者说这些事件所产生的影响，在时间尺度上太短太短了！长远来看，无论对自己还是对身边的家人、朋友，这些事情根本就没有什么正面的贡献！\n#### 什么电子游戏、美剧、电影、综艺，现在统统跟你们拜拜！（我2019年就已经做到了！可喜可贺！）\n#### 说真的，要放下这些曾经很着迷的东西，真的很难很难！尤其是游戏！即使你心知肚明，知道在那上面花费太多时间很不好，但就是放不下，或者反反复复的放下又重新拾起。。。。。。\n#### 但是，一旦你真的放下后，那种感觉，如释重负！整个人都轻松了很多！它们再也不能获取你宝贵的注意力，而你，终于可以把注意力投注在真正重要的事情上了！\n---\n#### 现在，就好好把握当下吧！过去只能用来反思了！\n#### 正如，一本书里所言：\n\n### *下刻虚空，此刻即是。*\n\n#### 2020这一年里，又会发生什么样的变化呢？\n\n#### *I am looking forward.*\n","slug":"Other/2020年1月1日","published":1,"updated":"2020-01-01T09:12:36.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8i0027hcr74wydziiw","content":"<h4 id=\"2020！\"><a href=\"#2020！\" class=\"headerlink\" title=\"2020！\"></a>2020！</h4><h4 id=\"曾经这个时间点只会出现在科幻电影里！\"><a href=\"#曾经这个时间点只会出现在科幻电影里！\" class=\"headerlink\" title=\"曾经这个时间点只会出现在科幻电影里！\"></a>曾经这个时间点只会出现在科幻电影里！</h4><h4 id=\"但是，现在，现实中的时间已经走到了2020！\"><a href=\"#但是，现在，现实中的时间已经走到了2020！\" class=\"headerlink\" title=\"但是，现在，现实中的时间已经走到了2020！\"></a>但是，现在，现实中的时间已经走到了2020！</h4><h4 id=\"上学高中那会，看了一部叫做《2012》的电影，觉得2012年都算是挺远的未来年份了！\"><a href=\"#上学高中那会，看了一部叫做《2012》的电影，觉得2012年都算是挺远的未来年份了！\" class=\"headerlink\" title=\"上学高中那会，看了一部叫做《2012》的电影，觉得2012年都算是挺远的未来年份了！\"></a>上学高中那会，看了一部叫做《2012》的电影，觉得2012年都算是挺远的未来年份了！</h4><h4 id=\"然而，现在，已经是《2012》的8年之后了！\"><a href=\"#然而，现在，已经是《2012》的8年之后了！\" class=\"headerlink\" title=\"然而，现在，已经是《2012》的8年之后了！\"></a>然而，现在，已经是《2012》的8年之后了！</h4><hr>\n<h4 id=\"站在现在这个时间点上，想想以前，真的是把很多时间投注在太多毫无意义的事情上了，或者说这些事件所产生的影响，在时间尺度上太短太短了！长远来看，无论对自己还是对身边的家人、朋友，这些事情根本就没有什么正面的贡献！\"><a href=\"#站在现在这个时间点上，想想以前，真的是把很多时间投注在太多毫无意义的事情上了，或者说这些事件所产生的影响，在时间尺度上太短太短了！长远来看，无论对自己还是对身边的家人、朋友，这些事情根本就没有什么正面的贡献！\" class=\"headerlink\" title=\"站在现在这个时间点上，想想以前，真的是把很多时间投注在太多毫无意义的事情上了，或者说这些事件所产生的影响，在时间尺度上太短太短了！长远来看，无论对自己还是对身边的家人、朋友，这些事情根本就没有什么正面的贡献！\"></a>站在现在这个时间点上，想想以前，真的是把很多时间投注在太多毫无意义的事情上了，或者说这些事件所产生的影响，在时间尺度上太短太短了！长远来看，无论对自己还是对身边的家人、朋友，这些事情根本就没有什么正面的贡献！</h4><h4 id=\"什么电子游戏、美剧、电影、综艺，现在统统跟你们拜拜！（我2019年就已经做到了！可喜可贺！）\"><a href=\"#什么电子游戏、美剧、电影、综艺，现在统统跟你们拜拜！（我2019年就已经做到了！可喜可贺！）\" class=\"headerlink\" title=\"什么电子游戏、美剧、电影、综艺，现在统统跟你们拜拜！（我2019年就已经做到了！可喜可贺！）\"></a>什么电子游戏、美剧、电影、综艺，现在统统跟你们拜拜！（我2019年就已经做到了！可喜可贺！）</h4><h4 id=\"说真的，要放下这些曾经很着迷的东西，真的很难很难！尤其是游戏！即使你心知肚明，知道在那上面花费太多时间很不好，但就是放不下，或者反反复复的放下又重新拾起。。。。。。\"><a href=\"#说真的，要放下这些曾经很着迷的东西，真的很难很难！尤其是游戏！即使你心知肚明，知道在那上面花费太多时间很不好，但就是放不下，或者反反复复的放下又重新拾起。。。。。。\" class=\"headerlink\" title=\"说真的，要放下这些曾经很着迷的东西，真的很难很难！尤其是游戏！即使你心知肚明，知道在那上面花费太多时间很不好，但就是放不下，或者反反复复的放下又重新拾起。。。。。。\"></a>说真的，要放下这些曾经很着迷的东西，真的很难很难！尤其是游戏！即使你心知肚明，知道在那上面花费太多时间很不好，但就是放不下，或者反反复复的放下又重新拾起。。。。。。</h4><h4 id=\"但是，一旦你真的放下后，那种感觉，如释重负！整个人都轻松了很多！它们再也不能获取你宝贵的注意力，而你，终于可以把注意力投注在真正重要的事情上了！\"><a href=\"#但是，一旦你真的放下后，那种感觉，如释重负！整个人都轻松了很多！它们再也不能获取你宝贵的注意力，而你，终于可以把注意力投注在真正重要的事情上了！\" class=\"headerlink\" title=\"但是，一旦你真的放下后，那种感觉，如释重负！整个人都轻松了很多！它们再也不能获取你宝贵的注意力，而你，终于可以把注意力投注在真正重要的事情上了！\"></a>但是，一旦你真的放下后，那种感觉，如释重负！整个人都轻松了很多！它们再也不能获取你宝贵的注意力，而你，终于可以把注意力投注在真正重要的事情上了！</h4><hr>\n<h4 id=\"现在，就好好把握当下吧！过去只能用来反思了！\"><a href=\"#现在，就好好把握当下吧！过去只能用来反思了！\" class=\"headerlink\" title=\"现在，就好好把握当下吧！过去只能用来反思了！\"></a>现在，就好好把握当下吧！过去只能用来反思了！</h4><h4 id=\"正如，一本书里所言：\"><a href=\"#正如，一本书里所言：\" class=\"headerlink\" title=\"正如，一本书里所言：\"></a>正如，一本书里所言：</h4><h3 id=\"下刻虚空，此刻即是。\"><a href=\"#下刻虚空，此刻即是。\" class=\"headerlink\" title=\"下刻虚空，此刻即是。\"></a><em>下刻虚空，此刻即是。</em></h3><h4 id=\"2020这一年里，又会发生什么样的变化呢？\"><a href=\"#2020这一年里，又会发生什么样的变化呢？\" class=\"headerlink\" title=\"2020这一年里，又会发生什么样的变化呢？\"></a>2020这一年里，又会发生什么样的变化呢？</h4><h4 id=\"I-am-looking-forward\"><a href=\"#I-am-looking-forward\" class=\"headerlink\" title=\"I am looking forward.\"></a><em>I am looking forward.</em></h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"2020！\"><a href=\"#2020！\" class=\"headerlink\" title=\"2020！\"></a>2020！</h4><h4 id=\"曾经这个时间点只会出现在科幻电影里！\"><a href=\"#曾经这个时间点只会出现在科幻电影里！\" class=\"headerlink\" title=\"曾经这个时间点只会出现在科幻电影里！\"></a>曾经这个时间点只会出现在科幻电影里！</h4><h4 id=\"但是，现在，现实中的时间已经走到了2020！\"><a href=\"#但是，现在，现实中的时间已经走到了2020！\" class=\"headerlink\" title=\"但是，现在，现实中的时间已经走到了2020！\"></a>但是，现在，现实中的时间已经走到了2020！</h4><h4 id=\"上学高中那会，看了一部叫做《2012》的电影，觉得2012年都算是挺远的未来年份了！\"><a href=\"#上学高中那会，看了一部叫做《2012》的电影，觉得2012年都算是挺远的未来年份了！\" class=\"headerlink\" title=\"上学高中那会，看了一部叫做《2012》的电影，觉得2012年都算是挺远的未来年份了！\"></a>上学高中那会，看了一部叫做《2012》的电影，觉得2012年都算是挺远的未来年份了！</h4><h4 id=\"然而，现在，已经是《2012》的8年之后了！\"><a href=\"#然而，现在，已经是《2012》的8年之后了！\" class=\"headerlink\" title=\"然而，现在，已经是《2012》的8年之后了！\"></a>然而，现在，已经是《2012》的8年之后了！</h4><hr>\n<h4 id=\"站在现在这个时间点上，想想以前，真的是把很多时间投注在太多毫无意义的事情上了，或者说这些事件所产生的影响，在时间尺度上太短太短了！长远来看，无论对自己还是对身边的家人、朋友，这些事情根本就没有什么正面的贡献！\"><a href=\"#站在现在这个时间点上，想想以前，真的是把很多时间投注在太多毫无意义的事情上了，或者说这些事件所产生的影响，在时间尺度上太短太短了！长远来看，无论对自己还是对身边的家人、朋友，这些事情根本就没有什么正面的贡献！\" class=\"headerlink\" title=\"站在现在这个时间点上，想想以前，真的是把很多时间投注在太多毫无意义的事情上了，或者说这些事件所产生的影响，在时间尺度上太短太短了！长远来看，无论对自己还是对身边的家人、朋友，这些事情根本就没有什么正面的贡献！\"></a>站在现在这个时间点上，想想以前，真的是把很多时间投注在太多毫无意义的事情上了，或者说这些事件所产生的影响，在时间尺度上太短太短了！长远来看，无论对自己还是对身边的家人、朋友，这些事情根本就没有什么正面的贡献！</h4><h4 id=\"什么电子游戏、美剧、电影、综艺，现在统统跟你们拜拜！（我2019年就已经做到了！可喜可贺！）\"><a href=\"#什么电子游戏、美剧、电影、综艺，现在统统跟你们拜拜！（我2019年就已经做到了！可喜可贺！）\" class=\"headerlink\" title=\"什么电子游戏、美剧、电影、综艺，现在统统跟你们拜拜！（我2019年就已经做到了！可喜可贺！）\"></a>什么电子游戏、美剧、电影、综艺，现在统统跟你们拜拜！（我2019年就已经做到了！可喜可贺！）</h4><h4 id=\"说真的，要放下这些曾经很着迷的东西，真的很难很难！尤其是游戏！即使你心知肚明，知道在那上面花费太多时间很不好，但就是放不下，或者反反复复的放下又重新拾起。。。。。。\"><a href=\"#说真的，要放下这些曾经很着迷的东西，真的很难很难！尤其是游戏！即使你心知肚明，知道在那上面花费太多时间很不好，但就是放不下，或者反反复复的放下又重新拾起。。。。。。\" class=\"headerlink\" title=\"说真的，要放下这些曾经很着迷的东西，真的很难很难！尤其是游戏！即使你心知肚明，知道在那上面花费太多时间很不好，但就是放不下，或者反反复复的放下又重新拾起。。。。。。\"></a>说真的，要放下这些曾经很着迷的东西，真的很难很难！尤其是游戏！即使你心知肚明，知道在那上面花费太多时间很不好，但就是放不下，或者反反复复的放下又重新拾起。。。。。。</h4><h4 id=\"但是，一旦你真的放下后，那种感觉，如释重负！整个人都轻松了很多！它们再也不能获取你宝贵的注意力，而你，终于可以把注意力投注在真正重要的事情上了！\"><a href=\"#但是，一旦你真的放下后，那种感觉，如释重负！整个人都轻松了很多！它们再也不能获取你宝贵的注意力，而你，终于可以把注意力投注在真正重要的事情上了！\" class=\"headerlink\" title=\"但是，一旦你真的放下后，那种感觉，如释重负！整个人都轻松了很多！它们再也不能获取你宝贵的注意力，而你，终于可以把注意力投注在真正重要的事情上了！\"></a>但是，一旦你真的放下后，那种感觉，如释重负！整个人都轻松了很多！它们再也不能获取你宝贵的注意力，而你，终于可以把注意力投注在真正重要的事情上了！</h4><hr>\n<h4 id=\"现在，就好好把握当下吧！过去只能用来反思了！\"><a href=\"#现在，就好好把握当下吧！过去只能用来反思了！\" class=\"headerlink\" title=\"现在，就好好把握当下吧！过去只能用来反思了！\"></a>现在，就好好把握当下吧！过去只能用来反思了！</h4><h4 id=\"正如，一本书里所言：\"><a href=\"#正如，一本书里所言：\" class=\"headerlink\" title=\"正如，一本书里所言：\"></a>正如，一本书里所言：</h4><h3 id=\"下刻虚空，此刻即是。\"><a href=\"#下刻虚空，此刻即是。\" class=\"headerlink\" title=\"下刻虚空，此刻即是。\"></a><em>下刻虚空，此刻即是。</em></h3><h4 id=\"2020这一年里，又会发生什么样的变化呢？\"><a href=\"#2020这一年里，又会发生什么样的变化呢？\" class=\"headerlink\" title=\"2020这一年里，又会发生什么样的变化呢？\"></a>2020这一年里，又会发生什么样的变化呢？</h4><h4 id=\"I-am-looking-forward\"><a href=\"#I-am-looking-forward\" class=\"headerlink\" title=\"I am looking forward.\"></a><em>I am looking forward.</em></h4>"},{"title":"《功夫》","date":"2019-07-27T16:00:00.000Z","_content":"\n> ### 邪神：（淡定+疑惑）“这是什么掌法？”<br>周：（心平气和）“想学啊你？我教你啊。”<br>邪神：（跪地痛哭状）“我输了！”","source":"_posts/Other/功夫.md","raw":"---\ntitle: 《功夫》\ncategories: 其他\ndate: 2019-07-28\n---\n\n> ### 邪神：（淡定+疑惑）“这是什么掌法？”<br>周：（心平气和）“想学啊你？我教你啊。”<br>邪神：（跪地痛哭状）“我输了！”","slug":"Other/功夫","published":1,"updated":"2019-08-28T11:42:48.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8j002ahcr7m6r5s0jb","content":"<blockquote>\n<h3 id=\"邪神：（淡定-疑惑）“这是什么掌法？”周：（心平气和）“想学啊你？我教你啊。”邪神：（跪地痛哭状）“我输了！”\"><a href=\"#邪神：（淡定-疑惑）“这是什么掌法？”周：（心平气和）“想学啊你？我教你啊。”邪神：（跪地痛哭状）“我输了！”\" class=\"headerlink\" title=\"邪神：（淡定+疑惑）“这是什么掌法？”周：（心平气和）“想学啊你？我教你啊。”邪神：（跪地痛哭状）“我输了！”\"></a>邪神：（淡定+疑惑）“这是什么掌法？”<br>周：（心平气和）“想学啊你？我教你啊。”<br>邪神：（跪地痛哭状）“我输了！”</h3></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<h3 id=\"邪神：（淡定-疑惑）“这是什么掌法？”周：（心平气和）“想学啊你？我教你啊。”邪神：（跪地痛哭状）“我输了！”\"><a href=\"#邪神：（淡定-疑惑）“这是什么掌法？”周：（心平气和）“想学啊你？我教你啊。”邪神：（跪地痛哭状）“我输了！”\" class=\"headerlink\" title=\"邪神：（淡定+疑惑）“这是什么掌法？”周：（心平气和）“想学啊你？我教你啊。”邪神：（跪地痛哭状）“我输了！”\"></a>邪神：（淡定+疑惑）“这是什么掌法？”<br>周：（心平气和）“想学啊你？我教你啊。”<br>邪神：（跪地痛哭状）“我输了！”</h3></blockquote>\n"},{"title":"Unknown unknown","date":"2019-12-31T16:00:00.000Z","_content":"\n对于我们每个人来说：\n\n* 有些知识，我们知道，我们已经了解它了。对这一部分知识，我们充满信心。\n\n* 但还有些知识，我们知道，我们还未了解过它，不过我们也确实知道它的存在，只是由于某些原因，我们未能去详细的了解它。\n\n* 然而，还有些知识，我们不知道我们不知道它，就是说，我们都不知道，有这些知识的存在。\n\n英文 Unknown unknown 指的就是第三种情况，被翻译为：不知之不知\n\n这三种情况，也被称为：\n* 已知的已知\n* 已知的未知\n* 未知的未知\n\n对于一个人，如何尽量减少第三种情况的出现呢？\n\n保持谦逊！终身学习！\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Other/Unknown unknown.md","raw":"---\ntitle: Unknown unknown\ncategories: 其他\ndate: 2020-01-01\n---\n\n对于我们每个人来说：\n\n* 有些知识，我们知道，我们已经了解它了。对这一部分知识，我们充满信心。\n\n* 但还有些知识，我们知道，我们还未了解过它，不过我们也确实知道它的存在，只是由于某些原因，我们未能去详细的了解它。\n\n* 然而，还有些知识，我们不知道我们不知道它，就是说，我们都不知道，有这些知识的存在。\n\n英文 Unknown unknown 指的就是第三种情况，被翻译为：不知之不知\n\n这三种情况，也被称为：\n* 已知的已知\n* 已知的未知\n* 未知的未知\n\n对于一个人，如何尽量减少第三种情况的出现呢？\n\n保持谦逊！终身学习！\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Other/Unknown unknown","published":1,"updated":"2020-01-01T09:43:19.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8k002bhcr7vvgzcmyb","content":"<p>对于我们每个人来说：</p>\n<ul>\n<li><p>有些知识，我们知道，我们已经了解它了。对这一部分知识，我们充满信心。</p>\n</li>\n<li><p>但还有些知识，我们知道，我们还未了解过它，不过我们也确实知道它的存在，只是由于某些原因，我们未能去详细的了解它。</p>\n</li>\n<li><p>然而，还有些知识，我们不知道我们不知道它，就是说，我们都不知道，有这些知识的存在。</p>\n</li>\n</ul>\n<p>英文 Unknown unknown 指的就是第三种情况，被翻译为：不知之不知</p>\n<p>这三种情况，也被称为：</p>\n<ul>\n<li>已知的已知</li>\n<li>已知的未知</li>\n<li>未知的未知</li>\n</ul>\n<p>对于一个人，如何尽量减少第三种情况的出现呢？</p>\n<p>保持谦逊！终身学习！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>对于我们每个人来说：</p>\n<ul>\n<li><p>有些知识，我们知道，我们已经了解它了。对这一部分知识，我们充满信心。</p>\n</li>\n<li><p>但还有些知识，我们知道，我们还未了解过它，不过我们也确实知道它的存在，只是由于某些原因，我们未能去详细的了解它。</p>\n</li>\n<li><p>然而，还有些知识，我们不知道我们不知道它，就是说，我们都不知道，有这些知识的存在。</p>\n</li>\n</ul>\n<p>英文 Unknown unknown 指的就是第三种情况，被翻译为：不知之不知</p>\n<p>这三种情况，也被称为：</p>\n<ul>\n<li>已知的已知</li>\n<li>已知的未知</li>\n<li>未知的未知</li>\n</ul>\n<p>对于一个人，如何尽量减少第三种情况的出现呢？</p>\n<p>保持谦逊！终身学习！</p>\n"},{"title":"拿起，放下。","date":"2019-05-18T16:00:00.000Z","_content":"\n### 拿得起，放得下。\n\n### 知易行难。","source":"_posts/Other/拿起，放下。.md","raw":"---\ntitle: 拿起，放下。\ncategories: 其他\ndate: 2019-05-19\n---\n\n### 拿得起，放得下。\n\n### 知易行难。","slug":"Other/拿起，放下。","published":1,"updated":"2019-05-23T11:55:21.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8m002ehcr7ps2i5657","content":"<h3 id=\"拿得起，放得下。\"><a href=\"#拿得起，放得下。\" class=\"headerlink\" title=\"拿得起，放得下。\"></a>拿得起，放得下。</h3><h3 id=\"知易行难。\"><a href=\"#知易行难。\" class=\"headerlink\" title=\"知易行难。\"></a>知易行难。</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"拿得起，放得下。\"><a href=\"#拿得起，放得下。\" class=\"headerlink\" title=\"拿得起，放得下。\"></a>拿得起，放得下。</h3><h3 id=\"知易行难。\"><a href=\"#知易行难。\" class=\"headerlink\" title=\"知易行难。\"></a>知易行难。</h3>"},{"title":"拿到驾照！","date":"2019-07-11T16:00:00.000Z","_content":"\n## 先概括下\n---\n\n* 确切的时间是一个多月以前：**2019年6月1日**\n* 大概从2018年3月份就报名了\n* 科二考了两次，科三（去了差不多6，7次吧）考了一次\n* 基本上，每个周末去半天吧，有时也会一整天\n* 考完科一，上一次小路，然后就一直拖到11月份才继续学（是的，拖延症晚期，连这篇文章都拖了一个多月。。。）\n\n## 说说我的感受\n---\n\n* 我最想记录下来的感受，就是**拿学车这件事和另外一件事做一个对比**：我花了每个周末的半天甚至一整天的时间（这里面最重要的是，周末还必须得早起！）去学车，最后终于拿到驾照！有付出，有结果。这很好！而另外一件事呢，就是周末在家玩游戏。在学车之前我绝对花了好几倍，甚至数十倍的时间在游戏之中！以现在的眼光看来：我付出的时间很多很多，但是结果，好像这件事对我并没有什么长远的正面影响（可能还有不少负面的影响。。。）\n* 我还能记得拿到驾照的那个周末，一天之中，我就断断续续的开始想着，计划以后的周末要怎么过：减肥、健身、（我当时应该就买了一对哑铃！）增长见识、提高情商、待人接物的能力、谈个对象、培养副业啥的\n* **是的！没错！把时间花在这些事情上面，那才叫利用好时间。**\n* **时间对每个人都是公平的，就那24小时！人和人的区别也就在其如何支配自己的那24小时而已！**","source":"_posts/Other/拿到驾照！.md","raw":"---\ntitle: 拿到驾照！\ncategories: 其他\ndate: 2019-07-12\n---\n\n## 先概括下\n---\n\n* 确切的时间是一个多月以前：**2019年6月1日**\n* 大概从2018年3月份就报名了\n* 科二考了两次，科三（去了差不多6，7次吧）考了一次\n* 基本上，每个周末去半天吧，有时也会一整天\n* 考完科一，上一次小路，然后就一直拖到11月份才继续学（是的，拖延症晚期，连这篇文章都拖了一个多月。。。）\n\n## 说说我的感受\n---\n\n* 我最想记录下来的感受，就是**拿学车这件事和另外一件事做一个对比**：我花了每个周末的半天甚至一整天的时间（这里面最重要的是，周末还必须得早起！）去学车，最后终于拿到驾照！有付出，有结果。这很好！而另外一件事呢，就是周末在家玩游戏。在学车之前我绝对花了好几倍，甚至数十倍的时间在游戏之中！以现在的眼光看来：我付出的时间很多很多，但是结果，好像这件事对我并没有什么长远的正面影响（可能还有不少负面的影响。。。）\n* 我还能记得拿到驾照的那个周末，一天之中，我就断断续续的开始想着，计划以后的周末要怎么过：减肥、健身、（我当时应该就买了一对哑铃！）增长见识、提高情商、待人接物的能力、谈个对象、培养副业啥的\n* **是的！没错！把时间花在这些事情上面，那才叫利用好时间。**\n* **时间对每个人都是公平的，就那24小时！人和人的区别也就在其如何支配自己的那24小时而已！**","slug":"Other/拿到驾照！","published":1,"updated":"2019-07-12T12:47:11.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8m002fhcr7vjnx41pz","content":"<h2 id=\"先概括下\"><a href=\"#先概括下\" class=\"headerlink\" title=\"先概括下\"></a>先概括下</h2><hr>\n<ul>\n<li>确切的时间是一个多月以前：<strong>2019年6月1日</strong></li>\n<li>大概从2018年3月份就报名了</li>\n<li>科二考了两次，科三（去了差不多6，7次吧）考了一次</li>\n<li>基本上，每个周末去半天吧，有时也会一整天</li>\n<li>考完科一，上一次小路，然后就一直拖到11月份才继续学（是的，拖延症晚期，连这篇文章都拖了一个多月。。。）</li>\n</ul>\n<h2 id=\"说说我的感受\"><a href=\"#说说我的感受\" class=\"headerlink\" title=\"说说我的感受\"></a>说说我的感受</h2><hr>\n<ul>\n<li>我最想记录下来的感受，就是<strong>拿学车这件事和另外一件事做一个对比</strong>：我花了每个周末的半天甚至一整天的时间（这里面最重要的是，周末还必须得早起！）去学车，最后终于拿到驾照！有付出，有结果。这很好！而另外一件事呢，就是周末在家玩游戏。在学车之前我绝对花了好几倍，甚至数十倍的时间在游戏之中！以现在的眼光看来：我付出的时间很多很多，但是结果，好像这件事对我并没有什么长远的正面影响（可能还有不少负面的影响。。。）</li>\n<li>我还能记得拿到驾照的那个周末，一天之中，我就断断续续的开始想着，计划以后的周末要怎么过：减肥、健身、（我当时应该就买了一对哑铃！）增长见识、提高情商、待人接物的能力、谈个对象、培养副业啥的</li>\n<li><strong>是的！没错！把时间花在这些事情上面，那才叫利用好时间。</strong></li>\n<li><strong>时间对每个人都是公平的，就那24小时！人和人的区别也就在其如何支配自己的那24小时而已！</strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"先概括下\"><a href=\"#先概括下\" class=\"headerlink\" title=\"先概括下\"></a>先概括下</h2><hr>\n<ul>\n<li>确切的时间是一个多月以前：<strong>2019年6月1日</strong></li>\n<li>大概从2018年3月份就报名了</li>\n<li>科二考了两次，科三（去了差不多6，7次吧）考了一次</li>\n<li>基本上，每个周末去半天吧，有时也会一整天</li>\n<li>考完科一，上一次小路，然后就一直拖到11月份才继续学（是的，拖延症晚期，连这篇文章都拖了一个多月。。。）</li>\n</ul>\n<h2 id=\"说说我的感受\"><a href=\"#说说我的感受\" class=\"headerlink\" title=\"说说我的感受\"></a>说说我的感受</h2><hr>\n<ul>\n<li>我最想记录下来的感受，就是<strong>拿学车这件事和另外一件事做一个对比</strong>：我花了每个周末的半天甚至一整天的时间（这里面最重要的是，周末还必须得早起！）去学车，最后终于拿到驾照！有付出，有结果。这很好！而另外一件事呢，就是周末在家玩游戏。在学车之前我绝对花了好几倍，甚至数十倍的时间在游戏之中！以现在的眼光看来：我付出的时间很多很多，但是结果，好像这件事对我并没有什么长远的正面影响（可能还有不少负面的影响。。。）</li>\n<li>我还能记得拿到驾照的那个周末，一天之中，我就断断续续的开始想着，计划以后的周末要怎么过：减肥、健身、（我当时应该就买了一对哑铃！）增长见识、提高情商、待人接物的能力、谈个对象、培养副业啥的</li>\n<li><strong>是的！没错！把时间花在这些事情上面，那才叫利用好时间。</strong></li>\n<li><strong>时间对每个人都是公平的，就那24小时！人和人的区别也就在其如何支配自己的那24小时而已！</strong></li>\n</ul>\n"},{"title":"时间过的真快啊！","date":"2019-08-27T16:00:00.000Z","_content":"\n* 上一篇文章还是7月28号的，今天竟然都8月28号了！感觉时光飞逝啊！中间有好几次打算写一些东西的，但是，人呢，就是这样：**思想上的巨人，行动上的矮子！**。这句话，用一个字，通俗的解释，就是：**懒！**\n\n* 自从工作开始，就觉得一但忙起来，一周很快就过去了，一个月也就4周。而一年也就12个月。。。\n\n* **此时此刻，让我回想一下前人对于时间的描述：**\n\n* 朱自清的《匆匆》，当时念书时，完全不知道这货到底想说什么，净整这些稀奇古怪的文章。。。\n\n* 林清玄的《和时间赛跑》，*假若你一直和时间赛跑，你就可以成功。*\n\n* 孔子也说过：*逝者如斯夫，不舍昼夜。*\n\n* 莎士比亚：*在时间的大钟上，只有两个字————现在*\n\n* 福特：*据我观察，大部分人都是在别人荒废的时间里崭露头角的。*\n\n* 鲁迅：*生命是以时间为单位的，浪费别人的时间等于谋财害命，浪费自己的时间，等于慢性自杀。*\n\n* 叔本华：*普通人只想到如何度过时间，有才能的人设法利用时间。* \n","source":"_posts/Other/时间过的真快啊.md","raw":"---\ntitle: 时间过的真快啊！\ncategories: 其他\ndate: 2019-08-28\n---\n\n* 上一篇文章还是7月28号的，今天竟然都8月28号了！感觉时光飞逝啊！中间有好几次打算写一些东西的，但是，人呢，就是这样：**思想上的巨人，行动上的矮子！**。这句话，用一个字，通俗的解释，就是：**懒！**\n\n* 自从工作开始，就觉得一但忙起来，一周很快就过去了，一个月也就4周。而一年也就12个月。。。\n\n* **此时此刻，让我回想一下前人对于时间的描述：**\n\n* 朱自清的《匆匆》，当时念书时，完全不知道这货到底想说什么，净整这些稀奇古怪的文章。。。\n\n* 林清玄的《和时间赛跑》，*假若你一直和时间赛跑，你就可以成功。*\n\n* 孔子也说过：*逝者如斯夫，不舍昼夜。*\n\n* 莎士比亚：*在时间的大钟上，只有两个字————现在*\n\n* 福特：*据我观察，大部分人都是在别人荒废的时间里崭露头角的。*\n\n* 鲁迅：*生命是以时间为单位的，浪费别人的时间等于谋财害命，浪费自己的时间，等于慢性自杀。*\n\n* 叔本华：*普通人只想到如何度过时间，有才能的人设法利用时间。* \n","slug":"Other/时间过的真快啊","published":1,"updated":"2019-08-28T12:18:52.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8o002hhcr75s99qk3c","content":"<ul>\n<li><p>上一篇文章还是7月28号的，今天竟然都8月28号了！感觉时光飞逝啊！中间有好几次打算写一些东西的，但是，人呢，就是这样：<strong>思想上的巨人，行动上的矮子！</strong>。这句话，用一个字，通俗的解释，就是：<strong>懒！</strong></p>\n</li>\n<li><p>自从工作开始，就觉得一但忙起来，一周很快就过去了，一个月也就4周。而一年也就12个月。。。</p>\n</li>\n<li><p><strong>此时此刻，让我回想一下前人对于时间的描述：</strong></p>\n</li>\n<li><p>朱自清的《匆匆》，当时念书时，完全不知道这货到底想说什么，净整这些稀奇古怪的文章。。。</p>\n</li>\n<li><p>林清玄的《和时间赛跑》，<em>假若你一直和时间赛跑，你就可以成功。</em></p>\n</li>\n<li><p>孔子也说过：<em>逝者如斯夫，不舍昼夜。</em></p>\n</li>\n<li><p>莎士比亚：<em>在时间的大钟上，只有两个字————现在</em></p>\n</li>\n<li><p>福特：<em>据我观察，大部分人都是在别人荒废的时间里崭露头角的。</em></p>\n</li>\n<li><p>鲁迅：<em>生命是以时间为单位的，浪费别人的时间等于谋财害命，浪费自己的时间，等于慢性自杀。</em></p>\n</li>\n<li><p>叔本华：<em>普通人只想到如何度过时间，有才能的人设法利用时间。</em> </p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>上一篇文章还是7月28号的，今天竟然都8月28号了！感觉时光飞逝啊！中间有好几次打算写一些东西的，但是，人呢，就是这样：<strong>思想上的巨人，行动上的矮子！</strong>。这句话，用一个字，通俗的解释，就是：<strong>懒！</strong></p>\n</li>\n<li><p>自从工作开始，就觉得一但忙起来，一周很快就过去了，一个月也就4周。而一年也就12个月。。。</p>\n</li>\n<li><p><strong>此时此刻，让我回想一下前人对于时间的描述：</strong></p>\n</li>\n<li><p>朱自清的《匆匆》，当时念书时，完全不知道这货到底想说什么，净整这些稀奇古怪的文章。。。</p>\n</li>\n<li><p>林清玄的《和时间赛跑》，<em>假若你一直和时间赛跑，你就可以成功。</em></p>\n</li>\n<li><p>孔子也说过：<em>逝者如斯夫，不舍昼夜。</em></p>\n</li>\n<li><p>莎士比亚：<em>在时间的大钟上，只有两个字————现在</em></p>\n</li>\n<li><p>福特：<em>据我观察，大部分人都是在别人荒废的时间里崭露头角的。</em></p>\n</li>\n<li><p>鲁迅：<em>生命是以时间为单位的，浪费别人的时间等于谋财害命，浪费自己的时间，等于慢性自杀。</em></p>\n</li>\n<li><p>叔本华：<em>普通人只想到如何度过时间，有才能的人设法利用时间。</em> </p>\n</li>\n</ul>\n"},{"title":"invalid arguments in function 'lua_cocos2dx_ui_Text_setString'","date":"2019-05-22T16:00:00.000Z","_content":"\n### #1\n---\n\n项目中的代码类似这样：\n\n`text:setString(\"xxx\")`\n\n类似的报错：\n\n`invalid arguments in function 'bind_func_name'`\n\n之前我一直以为是调用对象为 nil 的缘故，我就使劲的找啊找，我想这不可能啊，难道cocos2dx-lua自身又有啥bug？\n\n我甚至在\n\n`text:setString(\"xxx\")`\n\n之前调用了\n\n`text:retain()`\n\n以确保垃圾回收机制没有把它干掉了，我甚至在它的各级父节点都调用 retain() ，奈何始终还是有问题。\n\n尼玛后来发现是参数的问题：\n\n`invalid arguments` \n\n我这四级英文真是白学了！\n\n### #2\n---\n\n上面那个报错，是lua绑定C++的代码在进行错误处理时打印的log。除了这个，应用程序的控制台也打印除了对定位问题有很大帮助的log\n\n`error:ccui.Text:setString argument #2 is 'table'; 'string' expected.`\n","source":"_posts/cocos2dx/cocos2dx-lua的报错.md","raw":"---\ntitle: invalid arguments in function 'lua_cocos2dx_ui_Text_setString'\ncategories: cocos2dx\ndate: 2019-05-23\n---\n\n### #1\n---\n\n项目中的代码类似这样：\n\n`text:setString(\"xxx\")`\n\n类似的报错：\n\n`invalid arguments in function 'bind_func_name'`\n\n之前我一直以为是调用对象为 nil 的缘故，我就使劲的找啊找，我想这不可能啊，难道cocos2dx-lua自身又有啥bug？\n\n我甚至在\n\n`text:setString(\"xxx\")`\n\n之前调用了\n\n`text:retain()`\n\n以确保垃圾回收机制没有把它干掉了，我甚至在它的各级父节点都调用 retain() ，奈何始终还是有问题。\n\n尼玛后来发现是参数的问题：\n\n`invalid arguments` \n\n我这四级英文真是白学了！\n\n### #2\n---\n\n上面那个报错，是lua绑定C++的代码在进行错误处理时打印的log。除了这个，应用程序的控制台也打印除了对定位问题有很大帮助的log\n\n`error:ccui.Text:setString argument #2 is 'table'; 'string' expected.`\n","slug":"cocos2dx/cocos2dx-lua的报错","published":1,"updated":"2019-11-24T07:27:59.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8p002jhcr7vuzcss64","content":"<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"#1\"></a>#1</h3><hr>\n<p>项目中的代码类似这样：</p>\n<p><code>text:setString(&quot;xxx&quot;)</code></p>\n<p>类似的报错：</p>\n<p><code>invalid arguments in function &#39;bind_func_name&#39;</code></p>\n<p>之前我一直以为是调用对象为 nil 的缘故，我就使劲的找啊找，我想这不可能啊，难道cocos2dx-lua自身又有啥bug？</p>\n<p>我甚至在</p>\n<p><code>text:setString(&quot;xxx&quot;)</code></p>\n<p>之前调用了</p>\n<p><code>text:retain()</code></p>\n<p>以确保垃圾回收机制没有把它干掉了，我甚至在它的各级父节点都调用 retain() ，奈何始终还是有问题。</p>\n<p>尼玛后来发现是参数的问题：</p>\n<p><code>invalid arguments</code> </p>\n<p>我这四级英文真是白学了！</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"#2\"></a>#2</h3><hr>\n<p>上面那个报错，是lua绑定C++的代码在进行错误处理时打印的log。除了这个，应用程序的控制台也打印除了对定位问题有很大帮助的log</p>\n<p><code>error:ccui.Text:setString argument #2 is &#39;table&#39;; &#39;string&#39; expected.</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"#1\"></a>#1</h3><hr>\n<p>项目中的代码类似这样：</p>\n<p><code>text:setString(&quot;xxx&quot;)</code></p>\n<p>类似的报错：</p>\n<p><code>invalid arguments in function &#39;bind_func_name&#39;</code></p>\n<p>之前我一直以为是调用对象为 nil 的缘故，我就使劲的找啊找，我想这不可能啊，难道cocos2dx-lua自身又有啥bug？</p>\n<p>我甚至在</p>\n<p><code>text:setString(&quot;xxx&quot;)</code></p>\n<p>之前调用了</p>\n<p><code>text:retain()</code></p>\n<p>以确保垃圾回收机制没有把它干掉了，我甚至在它的各级父节点都调用 retain() ，奈何始终还是有问题。</p>\n<p>尼玛后来发现是参数的问题：</p>\n<p><code>invalid arguments</code> </p>\n<p>我这四级英文真是白学了！</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"#2\"></a>#2</h3><hr>\n<p>上面那个报错，是lua绑定C++的代码在进行错误处理时打印的log。除了这个，应用程序的控制台也打印除了对定位问题有很大帮助的log</p>\n<p><code>error:ccui.Text:setString argument #2 is &#39;table&#39;; &#39;string&#39; expected.</code></p>\n"},{"title":"cocos2dx的屏幕适配","date":"2019-11-23T16:00:00.000Z","_content":"\n我最近发现，我之前可能一直犯了，一个处在比较高层次的认知错误。\n我一直以为屏幕的适配是这样完成的：直接拿游戏中的某张图片的尺寸来和设备的屏幕尺寸（即设备的屏幕分辨率）来进行比较缩放以进行适配。\n\n其实上面那样是错的，至少在cocos2dx的框架下是错误的。cocos2dx为了方便开发者进行游戏适配，不需要对各种奇形怪状的手机屏幕进行思考要如何适配。而特意在**资源分辨率**和**设备的屏幕分辨率**之间抽象出了一个叫做**游戏设计分辨率**的概念。\n\n开发者在适配的时候，只需要拿美术资源和设计分辨率比较就可以了。而不是直接去和屏幕分辨率作比较。\n\n#### 资源分辨率，设计分辨率，屏幕分辨率\n![1.png](https://i.loli.net/2019/12/30/rMJu8QqD9RglAIS.png)\n\n#### 从资源分辨率到设计分辨率\n![2.png](https://i.loli.net/2019/12/30/klaTNQS87Gow3dt.png)\n\n#### 从设计分辨率到屏幕分辨率\n![3.png](https://i.loli.net/2019/12/30/PVnvLeDbaMsm7kr.png)\n\n","source":"_posts/cocos2dx/cocos2dx的屏幕适配.md","raw":"---\ntitle: cocos2dx的屏幕适配\ncategories: cocos2dx\ndate: 2019-11-24\n---\n\n我最近发现，我之前可能一直犯了，一个处在比较高层次的认知错误。\n我一直以为屏幕的适配是这样完成的：直接拿游戏中的某张图片的尺寸来和设备的屏幕尺寸（即设备的屏幕分辨率）来进行比较缩放以进行适配。\n\n其实上面那样是错的，至少在cocos2dx的框架下是错误的。cocos2dx为了方便开发者进行游戏适配，不需要对各种奇形怪状的手机屏幕进行思考要如何适配。而特意在**资源分辨率**和**设备的屏幕分辨率**之间抽象出了一个叫做**游戏设计分辨率**的概念。\n\n开发者在适配的时候，只需要拿美术资源和设计分辨率比较就可以了。而不是直接去和屏幕分辨率作比较。\n\n#### 资源分辨率，设计分辨率，屏幕分辨率\n![1.png](https://i.loli.net/2019/12/30/rMJu8QqD9RglAIS.png)\n\n#### 从资源分辨率到设计分辨率\n![2.png](https://i.loli.net/2019/12/30/klaTNQS87Gow3dt.png)\n\n#### 从设计分辨率到屏幕分辨率\n![3.png](https://i.loli.net/2019/12/30/PVnvLeDbaMsm7kr.png)\n\n","slug":"cocos2dx/cocos2dx的屏幕适配","published":1,"updated":"2020-01-01T08:16:41.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8q002khcr7cau8a0pq","content":"<p>我最近发现，我之前可能一直犯了，一个处在比较高层次的认知错误。<br>我一直以为屏幕的适配是这样完成的：直接拿游戏中的某张图片的尺寸来和设备的屏幕尺寸（即设备的屏幕分辨率）来进行比较缩放以进行适配。</p>\n<p>其实上面那样是错的，至少在cocos2dx的框架下是错误的。cocos2dx为了方便开发者进行游戏适配，不需要对各种奇形怪状的手机屏幕进行思考要如何适配。而特意在<strong>资源分辨率</strong>和<strong>设备的屏幕分辨率</strong>之间抽象出了一个叫做<strong>游戏设计分辨率</strong>的概念。</p>\n<p>开发者在适配的时候，只需要拿美术资源和设计分辨率比较就可以了。而不是直接去和屏幕分辨率作比较。</p>\n<h4 id=\"资源分辨率，设计分辨率，屏幕分辨率\"><a href=\"#资源分辨率，设计分辨率，屏幕分辨率\" class=\"headerlink\" title=\"资源分辨率，设计分辨率，屏幕分辨率\"></a>资源分辨率，设计分辨率，屏幕分辨率</h4><p><img src=\"https://i.loli.net/2019/12/30/rMJu8QqD9RglAIS.png\" alt=\"1.png\"></p>\n<h4 id=\"从资源分辨率到设计分辨率\"><a href=\"#从资源分辨率到设计分辨率\" class=\"headerlink\" title=\"从资源分辨率到设计分辨率\"></a>从资源分辨率到设计分辨率</h4><p><img src=\"https://i.loli.net/2019/12/30/klaTNQS87Gow3dt.png\" alt=\"2.png\"></p>\n<h4 id=\"从设计分辨率到屏幕分辨率\"><a href=\"#从设计分辨率到屏幕分辨率\" class=\"headerlink\" title=\"从设计分辨率到屏幕分辨率\"></a>从设计分辨率到屏幕分辨率</h4><p><img src=\"https://i.loli.net/2019/12/30/PVnvLeDbaMsm7kr.png\" alt=\"3.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我最近发现，我之前可能一直犯了，一个处在比较高层次的认知错误。<br>我一直以为屏幕的适配是这样完成的：直接拿游戏中的某张图片的尺寸来和设备的屏幕尺寸（即设备的屏幕分辨率）来进行比较缩放以进行适配。</p>\n<p>其实上面那样是错的，至少在cocos2dx的框架下是错误的。cocos2dx为了方便开发者进行游戏适配，不需要对各种奇形怪状的手机屏幕进行思考要如何适配。而特意在<strong>资源分辨率</strong>和<strong>设备的屏幕分辨率</strong>之间抽象出了一个叫做<strong>游戏设计分辨率</strong>的概念。</p>\n<p>开发者在适配的时候，只需要拿美术资源和设计分辨率比较就可以了。而不是直接去和屏幕分辨率作比较。</p>\n<h4 id=\"资源分辨率，设计分辨率，屏幕分辨率\"><a href=\"#资源分辨率，设计分辨率，屏幕分辨率\" class=\"headerlink\" title=\"资源分辨率，设计分辨率，屏幕分辨率\"></a>资源分辨率，设计分辨率，屏幕分辨率</h4><p><img src=\"https://i.loli.net/2019/12/30/rMJu8QqD9RglAIS.png\" alt=\"1.png\"></p>\n<h4 id=\"从资源分辨率到设计分辨率\"><a href=\"#从资源分辨率到设计分辨率\" class=\"headerlink\" title=\"从资源分辨率到设计分辨率\"></a>从资源分辨率到设计分辨率</h4><p><img src=\"https://i.loli.net/2019/12/30/klaTNQS87Gow3dt.png\" alt=\"2.png\"></p>\n<h4 id=\"从设计分辨率到屏幕分辨率\"><a href=\"#从设计分辨率到屏幕分辨率\" class=\"headerlink\" title=\"从设计分辨率到屏幕分辨率\"></a>从设计分辨率到屏幕分辨率</h4><p><img src=\"https://i.loli.net/2019/12/30/PVnvLeDbaMsm7kr.png\" alt=\"3.png\"></p>\n"},{"title":"根据节点名称递归查询UI树上的某个节点","date":"2019-09-09T16:00:00.000Z","_content":"\n现在的项目封装了一个函数，用来根据节点名称递归查询UI树上的某个节点。这个函数使用起来确实是很方便，只要拿一个根节点和要查找的节点，就能获得你想要的。而不是使用一连串的getChildByName这样的方法。项目中现在是大规模的使用这个封装起来的函数。\n\n问题是，这样的缺点也很明显，以至于通常来讲很少看到正常点的项目会大规模使用此类函数，缺点如下：\n* 递归函数很危险而且效率不高，容易导致函数调用栈溢出。尤其在查找一个处在整棵UI树的深层次位置的子节点时，执行效率堪忧。\n* 如果使用了此类函数，那么整棵UI树的所有子节点的名称必须要唯一，也就是不能重名。这显然很不合理。\n\n最近我就踩了上面例举的第二条坑！本来想要查找到A节点，然后对其进行操作。但是发现这些操作无论如何不能产生效果！玛德，消耗了我个把小时！后来发现，整棵UI上还有个B节点，B和A的名称完全相同。而遍历整棵树时，总是会先查找到B节点，然后查找函数就返回结果，不会再继续遍历了！所以之前的操作其实是全部施加到B节点上去了...\n\n\n\n","source":"_posts/cocos2dx/根据节点名称递归查询UI树上的某个节点.md","raw":"---\ntitle: 根据节点名称递归查询UI树上的某个节点\ncategories: cocos2dx\ndate: 2019-09-10\n---\n\n现在的项目封装了一个函数，用来根据节点名称递归查询UI树上的某个节点。这个函数使用起来确实是很方便，只要拿一个根节点和要查找的节点，就能获得你想要的。而不是使用一连串的getChildByName这样的方法。项目中现在是大规模的使用这个封装起来的函数。\n\n问题是，这样的缺点也很明显，以至于通常来讲很少看到正常点的项目会大规模使用此类函数，缺点如下：\n* 递归函数很危险而且效率不高，容易导致函数调用栈溢出。尤其在查找一个处在整棵UI树的深层次位置的子节点时，执行效率堪忧。\n* 如果使用了此类函数，那么整棵UI树的所有子节点的名称必须要唯一，也就是不能重名。这显然很不合理。\n\n最近我就踩了上面例举的第二条坑！本来想要查找到A节点，然后对其进行操作。但是发现这些操作无论如何不能产生效果！玛德，消耗了我个把小时！后来发现，整棵UI上还有个B节点，B和A的名称完全相同。而遍历整棵树时，总是会先查找到B节点，然后查找函数就返回结果，不会再继续遍历了！所以之前的操作其实是全部施加到B节点上去了...\n\n\n\n","slug":"cocos2dx/根据节点名称递归查询UI树上的某个节点","published":1,"updated":"2019-11-24T07:28:11.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8r002nhcr7c0rfkcpq","content":"<p>现在的项目封装了一个函数，用来根据节点名称递归查询UI树上的某个节点。这个函数使用起来确实是很方便，只要拿一个根节点和要查找的节点，就能获得你想要的。而不是使用一连串的getChildByName这样的方法。项目中现在是大规模的使用这个封装起来的函数。</p>\n<p>问题是，这样的缺点也很明显，以至于通常来讲很少看到正常点的项目会大规模使用此类函数，缺点如下：</p>\n<ul>\n<li>递归函数很危险而且效率不高，容易导致函数调用栈溢出。尤其在查找一个处在整棵UI树的深层次位置的子节点时，执行效率堪忧。</li>\n<li>如果使用了此类函数，那么整棵UI树的所有子节点的名称必须要唯一，也就是不能重名。这显然很不合理。</li>\n</ul>\n<p>最近我就踩了上面例举的第二条坑！本来想要查找到A节点，然后对其进行操作。但是发现这些操作无论如何不能产生效果！玛德，消耗了我个把小时！后来发现，整棵UI上还有个B节点，B和A的名称完全相同。而遍历整棵树时，总是会先查找到B节点，然后查找函数就返回结果，不会再继续遍历了！所以之前的操作其实是全部施加到B节点上去了…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>现在的项目封装了一个函数，用来根据节点名称递归查询UI树上的某个节点。这个函数使用起来确实是很方便，只要拿一个根节点和要查找的节点，就能获得你想要的。而不是使用一连串的getChildByName这样的方法。项目中现在是大规模的使用这个封装起来的函数。</p>\n<p>问题是，这样的缺点也很明显，以至于通常来讲很少看到正常点的项目会大规模使用此类函数，缺点如下：</p>\n<ul>\n<li>递归函数很危险而且效率不高，容易导致函数调用栈溢出。尤其在查找一个处在整棵UI树的深层次位置的子节点时，执行效率堪忧。</li>\n<li>如果使用了此类函数，那么整棵UI树的所有子节点的名称必须要唯一，也就是不能重名。这显然很不合理。</li>\n</ul>\n<p>最近我就踩了上面例举的第二条坑！本来想要查找到A节点，然后对其进行操作。但是发现这些操作无论如何不能产生效果！玛德，消耗了我个把小时！后来发现，整棵UI上还有个B节点，B和A的名称完全相同。而遍历整棵树时，总是会先查找到B节点，然后查找函数就返回结果，不会再继续遍历了！所以之前的操作其实是全部施加到B节点上去了…</p>\n"},{"title":"使用cocos2dx-lua遇到的一些问题","date":"2019-08-28T16:00:00.000Z","_content":"\n### bugly上查看崩溃日志的问题\n---\n\n**因为底层使用C++，上层使用的Lua的缘故，导致在bugly上查看崩溃堆栈是比较困难的。**即使是在开发环境下，要想看到Lua的崩溃堆栈都必须要在VS里，把Lua的项目设置为启动项才行。注意这时是无法查看正确的C++堆栈的，反之亦然。至于线上跑的程序，在崩溃时被bugly记录的堆栈就更难看出什么猫腻了。\n\n### 调度器（Scheduler）\n---\n\n同事和我有几次发现，项目中的调度器并不能保证执行被添加进调度器中函数。当然觉得有点匪夷所思，也有可能是底层的什么bug，或者是当时程序中复杂的其它许多变量、环境造成的。后来发现，项目中的调度器（Scheduler）系统只是使用cocos2dx的动作系统包装而成（延迟动作+回调函数），就去网上搜了下：*cocos2dx的动作系统（Action System）的序列动作（sequence action）有没有可能会出现丢失某个动作的可能（项目中的调度器相当于delayTime + callBack这两个动作组合而成）*。发现确实有其他开发者遇到[这种情况了](https://forum.cocos.com/t/cocos2dx-3-15-sequence/48654)。\n\n奈何cocos论坛人气貌似少得可怜，都没几个人回答。又去开发者群里问了下，有个网友指出：**可能是执行这个动作的节点被销毁了或者重制了动画**。又去查看项目封装的代码，发现项目中执行这个动作的节点是当时正在跑的场景节点(running scene)。仔细一想，**还真有场景节点还没创建好，就使用这个节点执行一些动作的可能性存在！**\n\n后来我把出问题的地方，换成**真正用来负责调度器功能**的ccSchedule就OK了\n\n*后来我又换回原来使用调度器的方式了，因为使用ccSchedule会产生另外一个比较严重问题。。。*\n","source":"_posts/cocos2dx/使用cocos2dx-lua遇到的一些问题.md","raw":"---\ntitle: 使用cocos2dx-lua遇到的一些问题\ncategories: cocos2dx\ndate: 2019-08-29\n---\n\n### bugly上查看崩溃日志的问题\n---\n\n**因为底层使用C++，上层使用的Lua的缘故，导致在bugly上查看崩溃堆栈是比较困难的。**即使是在开发环境下，要想看到Lua的崩溃堆栈都必须要在VS里，把Lua的项目设置为启动项才行。注意这时是无法查看正确的C++堆栈的，反之亦然。至于线上跑的程序，在崩溃时被bugly记录的堆栈就更难看出什么猫腻了。\n\n### 调度器（Scheduler）\n---\n\n同事和我有几次发现，项目中的调度器并不能保证执行被添加进调度器中函数。当然觉得有点匪夷所思，也有可能是底层的什么bug，或者是当时程序中复杂的其它许多变量、环境造成的。后来发现，项目中的调度器（Scheduler）系统只是使用cocos2dx的动作系统包装而成（延迟动作+回调函数），就去网上搜了下：*cocos2dx的动作系统（Action System）的序列动作（sequence action）有没有可能会出现丢失某个动作的可能（项目中的调度器相当于delayTime + callBack这两个动作组合而成）*。发现确实有其他开发者遇到[这种情况了](https://forum.cocos.com/t/cocos2dx-3-15-sequence/48654)。\n\n奈何cocos论坛人气貌似少得可怜，都没几个人回答。又去开发者群里问了下，有个网友指出：**可能是执行这个动作的节点被销毁了或者重制了动画**。又去查看项目封装的代码，发现项目中执行这个动作的节点是当时正在跑的场景节点(running scene)。仔细一想，**还真有场景节点还没创建好，就使用这个节点执行一些动作的可能性存在！**\n\n后来我把出问题的地方，换成**真正用来负责调度器功能**的ccSchedule就OK了\n\n*后来我又换回原来使用调度器的方式了，因为使用ccSchedule会产生另外一个比较严重问题。。。*\n","slug":"cocos2dx/使用cocos2dx-lua遇到的一些问题","published":1,"updated":"2019-11-24T07:27:54.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8s002ohcr7yd9e10r5","content":"<h3 id=\"bugly上查看崩溃日志的问题\"><a href=\"#bugly上查看崩溃日志的问题\" class=\"headerlink\" title=\"bugly上查看崩溃日志的问题\"></a>bugly上查看崩溃日志的问题</h3><hr>\n<p><strong>因为底层使用C++，上层使用的Lua的缘故，导致在bugly上查看崩溃堆栈是比较困难的。</strong>即使是在开发环境下，要想看到Lua的崩溃堆栈都必须要在VS里，把Lua的项目设置为启动项才行。注意这时是无法查看正确的C++堆栈的，反之亦然。至于线上跑的程序，在崩溃时被bugly记录的堆栈就更难看出什么猫腻了。</p>\n<h3 id=\"调度器（Scheduler）\"><a href=\"#调度器（Scheduler）\" class=\"headerlink\" title=\"调度器（Scheduler）\"></a>调度器（Scheduler）</h3><hr>\n<p>同事和我有几次发现，项目中的调度器并不能保证执行被添加进调度器中函数。当然觉得有点匪夷所思，也有可能是底层的什么bug，或者是当时程序中复杂的其它许多变量、环境造成的。后来发现，项目中的调度器（Scheduler）系统只是使用cocos2dx的动作系统包装而成（延迟动作+回调函数），就去网上搜了下：<em>cocos2dx的动作系统（Action System）的序列动作（sequence action）有没有可能会出现丢失某个动作的可能（项目中的调度器相当于delayTime + callBack这两个动作组合而成）</em>。发现确实有其他开发者遇到<a href=\"https://forum.cocos.com/t/cocos2dx-3-15-sequence/48654\" target=\"_blank\" rel=\"noopener\">这种情况了</a>。</p>\n<p>奈何cocos论坛人气貌似少得可怜，都没几个人回答。又去开发者群里问了下，有个网友指出：<strong>可能是执行这个动作的节点被销毁了或者重制了动画</strong>。又去查看项目封装的代码，发现项目中执行这个动作的节点是当时正在跑的场景节点(running scene)。仔细一想，<strong>还真有场景节点还没创建好，就使用这个节点执行一些动作的可能性存在！</strong></p>\n<p>后来我把出问题的地方，换成<strong>真正用来负责调度器功能</strong>的ccSchedule就OK了</p>\n<p><em>后来我又换回原来使用调度器的方式了，因为使用ccSchedule会产生另外一个比较严重问题。。。</em></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"bugly上查看崩溃日志的问题\"><a href=\"#bugly上查看崩溃日志的问题\" class=\"headerlink\" title=\"bugly上查看崩溃日志的问题\"></a>bugly上查看崩溃日志的问题</h3><hr>\n<p><strong>因为底层使用C++，上层使用的Lua的缘故，导致在bugly上查看崩溃堆栈是比较困难的。</strong>即使是在开发环境下，要想看到Lua的崩溃堆栈都必须要在VS里，把Lua的项目设置为启动项才行。注意这时是无法查看正确的C++堆栈的，反之亦然。至于线上跑的程序，在崩溃时被bugly记录的堆栈就更难看出什么猫腻了。</p>\n<h3 id=\"调度器（Scheduler）\"><a href=\"#调度器（Scheduler）\" class=\"headerlink\" title=\"调度器（Scheduler）\"></a>调度器（Scheduler）</h3><hr>\n<p>同事和我有几次发现，项目中的调度器并不能保证执行被添加进调度器中函数。当然觉得有点匪夷所思，也有可能是底层的什么bug，或者是当时程序中复杂的其它许多变量、环境造成的。后来发现，项目中的调度器（Scheduler）系统只是使用cocos2dx的动作系统包装而成（延迟动作+回调函数），就去网上搜了下：<em>cocos2dx的动作系统（Action System）的序列动作（sequence action）有没有可能会出现丢失某个动作的可能（项目中的调度器相当于delayTime + callBack这两个动作组合而成）</em>。发现确实有其他开发者遇到<a href=\"https://forum.cocos.com/t/cocos2dx-3-15-sequence/48654\" target=\"_blank\" rel=\"noopener\">这种情况了</a>。</p>\n<p>奈何cocos论坛人气貌似少得可怜，都没几个人回答。又去开发者群里问了下，有个网友指出：<strong>可能是执行这个动作的节点被销毁了或者重制了动画</strong>。又去查看项目封装的代码，发现项目中执行这个动作的节点是当时正在跑的场景节点(running scene)。仔细一想，<strong>还真有场景节点还没创建好，就使用这个节点执行一些动作的可能性存在！</strong></p>\n<p>后来我把出问题的地方，换成<strong>真正用来负责调度器功能</strong>的ccSchedule就OK了</p>\n<p><em>后来我又换回原来使用调度器的方式了，因为使用ccSchedule会产生另外一个比较严重问题。。。</em></p>\n"},{"title":"《富爸爸穷爸爸》","date":"2019-11-03T16:00:00.000Z","_content":"\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/11/05/1qgfPZBXMmvG6hW.jpg\" width = \"300\" height=\"400\" alt=\"书的封面\">\n</div>\n\n***早些时候，听说过这本书。当时我还以为是教人怎么做个好爸爸的。。。也就没怎么提起兴趣看看了***\n\n**最近在微信读书上又看到了这本书，因为有微信读书赠送给新用户的无限卡，趁着周末就看了一遍。实际上这本书主要讲的是关于理财或者说*财商*以及如何通过这些实现财务自由的内容。**\n\n**讲真的，书中大部分内容说的都挺好的，增长了不少见识，使我对职业、金钱这些东西的看法又发生了很多改变。**\n\n**书中的“讨论学习环节”部分显得有些啰嗦，“重复”在大多数情况下都是不好的，除非你要特意强调一个东西**\n\n**“富爸爸”，指的是作者的一个童年好朋友的爸爸，“穷爸爸”则是作者的亲生爸爸。“富爸爸”受教育程度低，但是对金钱和职业的看法要远远超过普通人的认知；而“穷爸爸”有着很高的学历，是一个喜欢安稳、对金钱和职业有着很守旧的看法：认真稳定的工作、拿着一份工资安稳度日。**\n\n**作者小时候常常被这两种截然相反的思想的影响，不过最后，还是决定选择“富爸爸”对职业、金钱的观念和看法...**\n\n### 现金流\n---\n\n* 穷人的现金流图：工资收入勉强维持日常开支，没有资产，没有负债。\n\n<center class=\"half\">\n<img src=\"https://i.loli.net/2019/11/05/xknlXWYDBbtoT3h.jpg\" width = \"350\" height=\"450\" alt=\"穷人的现金流图\">\n</center>\n\n* 中产的现金流图：中产的工资收入更高，但随之而来的支出也更多，并且负债增加，深陷“老鼠赛跑”的死循环之中。\n\n<center class=\"half\">\n<img src=\"https://i.loli.net/2019/11/06/HDfjXBGY9KMsoNw.jpg\" width = \"350\" height=\"450\" alt=\"中产的现金流图\">\n</center>\n\n* 富人的现金流图：富人也有负债，但是他们拥有能够产生收入的资产则更多，以至于可以抵消日常支出。即使没有工资收入，也可以活的好好的。\n\n<center class=\"half\">\n<img src=\"https://i.loli.net/2019/11/06/aVQArdo16IeXnZW.jpg\" width = \"350\" height=\"450\" alt=\"富人的现金流图\">\n</center>\n\n### 书中提到的一些观点\n---\n\n* **穷爸爸和富爸爸显著区别之一：“我可付不起！” VS “我怎样才能付得起？”**\n\n* **改变自己，而不是尝试去改变别人，因为通常后者不是你所能控制的。自私一点讲，改变自己，更有利于你**\n\n* **很多人甚至分不清资产和负债的区别：*资产是能把钱放进我口袋里的东西，而负债是把钱从我口袋里取走的东西***\n\n* **当我说关注自己的事业时，我的意思是建立自己牢固的资产。一旦把1美元投入了资产项，就不要让它出来。你应该想：这1美元进了你的资产项，它就成了你的雇员。关于钱，最妙的就是让它可以一天24小时不间断工作。（我想也就是所谓的*睡后收入*吧）**\n\n* **富人与穷人一个重要的区别就是：富人最后才买奢侈品，而穷人和中产阶级会先买下诸如大房子、珠宝、皮衣、宝石、游艇等奢侈品，因为他们想让自己看上去很富有。他们看上去的确很富有，但实际上他们已深陷贷款的陷阱之中。(所谓的，当代不少年轻人正在过着的*伪精致*生活吧)**\n\n* **存在财务问题的人经常耗费一生为别人工作，其中许多人在他们不能工作时就变得一无所有。**\n\n* ***穷人和中产阶级为钱而工作。富人让钱为他工作。*（学会不为钱工作，而是让钱开始为你而工作！要知道：大部分增长的收入都流向企业家和投资者，而非劳动者——那些为钱而工作的人们）**\n\n* **许多才华横溢的人之所以贫穷，就是因为他们只是专心于做好产品，而对商业体系却知之甚少。**\n\n* **在今天的消费者世界里，由于种种外在的诱惑，所以很容易在支出项上挥霍金钱。因为意志薄弱，金钱的流出简直是无遮无拦，这就是大多数人贫困并在财务困境中苦苦挣扎的原因。（在今天看来，也就是所谓的*剁手党*，作者真是眼界深远啊）**\n\n* **三种收入：在会计领域里，有三种不同的收入**\n    * ***劳动性收入*：搬砖的意思**\n    * ***投资组合收入*：用搬砖获得的钱（扣除日常开销）进行钱生钱**\n    * ***被动收入*：个人觉得和上面大同小异**\n\n\n* **变富有的关键是拥有尽快将*劳动性收入*转换成*被动收入*或*投资组合收入*的能力**\n\n* **重要的不是你挣了多少钱，而是你留下多少钱，以及能够留住多久**\n\n* **考虑一下，从现在开始停止工作（没有劳动性收入），你还能活多久？**","source":"_posts/read/富爸爸穷爸爸.md","raw":"---\ntitle: 《富爸爸穷爸爸》\ncategories: 读书\ndate: 2019-11-04\n---\n\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/11/05/1qgfPZBXMmvG6hW.jpg\" width = \"300\" height=\"400\" alt=\"书的封面\">\n</div>\n\n***早些时候，听说过这本书。当时我还以为是教人怎么做个好爸爸的。。。也就没怎么提起兴趣看看了***\n\n**最近在微信读书上又看到了这本书，因为有微信读书赠送给新用户的无限卡，趁着周末就看了一遍。实际上这本书主要讲的是关于理财或者说*财商*以及如何通过这些实现财务自由的内容。**\n\n**讲真的，书中大部分内容说的都挺好的，增长了不少见识，使我对职业、金钱这些东西的看法又发生了很多改变。**\n\n**书中的“讨论学习环节”部分显得有些啰嗦，“重复”在大多数情况下都是不好的，除非你要特意强调一个东西**\n\n**“富爸爸”，指的是作者的一个童年好朋友的爸爸，“穷爸爸”则是作者的亲生爸爸。“富爸爸”受教育程度低，但是对金钱和职业的看法要远远超过普通人的认知；而“穷爸爸”有着很高的学历，是一个喜欢安稳、对金钱和职业有着很守旧的看法：认真稳定的工作、拿着一份工资安稳度日。**\n\n**作者小时候常常被这两种截然相反的思想的影响，不过最后，还是决定选择“富爸爸”对职业、金钱的观念和看法...**\n\n### 现金流\n---\n\n* 穷人的现金流图：工资收入勉强维持日常开支，没有资产，没有负债。\n\n<center class=\"half\">\n<img src=\"https://i.loli.net/2019/11/05/xknlXWYDBbtoT3h.jpg\" width = \"350\" height=\"450\" alt=\"穷人的现金流图\">\n</center>\n\n* 中产的现金流图：中产的工资收入更高，但随之而来的支出也更多，并且负债增加，深陷“老鼠赛跑”的死循环之中。\n\n<center class=\"half\">\n<img src=\"https://i.loli.net/2019/11/06/HDfjXBGY9KMsoNw.jpg\" width = \"350\" height=\"450\" alt=\"中产的现金流图\">\n</center>\n\n* 富人的现金流图：富人也有负债，但是他们拥有能够产生收入的资产则更多，以至于可以抵消日常支出。即使没有工资收入，也可以活的好好的。\n\n<center class=\"half\">\n<img src=\"https://i.loli.net/2019/11/06/aVQArdo16IeXnZW.jpg\" width = \"350\" height=\"450\" alt=\"富人的现金流图\">\n</center>\n\n### 书中提到的一些观点\n---\n\n* **穷爸爸和富爸爸显著区别之一：“我可付不起！” VS “我怎样才能付得起？”**\n\n* **改变自己，而不是尝试去改变别人，因为通常后者不是你所能控制的。自私一点讲，改变自己，更有利于你**\n\n* **很多人甚至分不清资产和负债的区别：*资产是能把钱放进我口袋里的东西，而负债是把钱从我口袋里取走的东西***\n\n* **当我说关注自己的事业时，我的意思是建立自己牢固的资产。一旦把1美元投入了资产项，就不要让它出来。你应该想：这1美元进了你的资产项，它就成了你的雇员。关于钱，最妙的就是让它可以一天24小时不间断工作。（我想也就是所谓的*睡后收入*吧）**\n\n* **富人与穷人一个重要的区别就是：富人最后才买奢侈品，而穷人和中产阶级会先买下诸如大房子、珠宝、皮衣、宝石、游艇等奢侈品，因为他们想让自己看上去很富有。他们看上去的确很富有，但实际上他们已深陷贷款的陷阱之中。(所谓的，当代不少年轻人正在过着的*伪精致*生活吧)**\n\n* **存在财务问题的人经常耗费一生为别人工作，其中许多人在他们不能工作时就变得一无所有。**\n\n* ***穷人和中产阶级为钱而工作。富人让钱为他工作。*（学会不为钱工作，而是让钱开始为你而工作！要知道：大部分增长的收入都流向企业家和投资者，而非劳动者——那些为钱而工作的人们）**\n\n* **许多才华横溢的人之所以贫穷，就是因为他们只是专心于做好产品，而对商业体系却知之甚少。**\n\n* **在今天的消费者世界里，由于种种外在的诱惑，所以很容易在支出项上挥霍金钱。因为意志薄弱，金钱的流出简直是无遮无拦，这就是大多数人贫困并在财务困境中苦苦挣扎的原因。（在今天看来，也就是所谓的*剁手党*，作者真是眼界深远啊）**\n\n* **三种收入：在会计领域里，有三种不同的收入**\n    * ***劳动性收入*：搬砖的意思**\n    * ***投资组合收入*：用搬砖获得的钱（扣除日常开销）进行钱生钱**\n    * ***被动收入*：个人觉得和上面大同小异**\n\n\n* **变富有的关键是拥有尽快将*劳动性收入*转换成*被动收入*或*投资组合收入*的能力**\n\n* **重要的不是你挣了多少钱，而是你留下多少钱，以及能够留住多久**\n\n* **考虑一下，从现在开始停止工作（没有劳动性收入），你还能活多久？**","slug":"read/富爸爸穷爸爸","published":1,"updated":"2019-11-25T04:27:46.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8t002rhcr76570wdlm","content":"<div align=\"center\"><br><img src=\"https://i.loli.net/2019/11/05/1qgfPZBXMmvG6hW.jpg\" width=\"300\" height=\"400\" alt=\"书的封面\"><br></div>\n\n<p><strong><em>早些时候，听说过这本书。当时我还以为是教人怎么做个好爸爸的。。。也就没怎么提起兴趣看看了</em></strong></p>\n<p><strong>最近在微信读书上又看到了这本书，因为有微信读书赠送给新用户的无限卡，趁着周末就看了一遍。实际上这本书主要讲的是关于理财或者说<em>财商</em>以及如何通过这些实现财务自由的内容。</strong></p>\n<p><strong>讲真的，书中大部分内容说的都挺好的，增长了不少见识，使我对职业、金钱这些东西的看法又发生了很多改变。</strong></p>\n<p><strong>书中的“讨论学习环节”部分显得有些啰嗦，“重复”在大多数情况下都是不好的，除非你要特意强调一个东西</strong></p>\n<p><strong>“富爸爸”，指的是作者的一个童年好朋友的爸爸，“穷爸爸”则是作者的亲生爸爸。“富爸爸”受教育程度低，但是对金钱和职业的看法要远远超过普通人的认知；而“穷爸爸”有着很高的学历，是一个喜欢安稳、对金钱和职业有着很守旧的看法：认真稳定的工作、拿着一份工资安稳度日。</strong></p>\n<p><strong>作者小时候常常被这两种截然相反的思想的影响，不过最后，还是决定选择“富爸爸”对职业、金钱的观念和看法…</strong></p>\n<h3 id=\"现金流\"><a href=\"#现金流\" class=\"headerlink\" title=\"现金流\"></a>现金流</h3><hr>\n<ul>\n<li>穷人的现金流图：工资收入勉强维持日常开支，没有资产，没有负债。</li>\n</ul>\n<center class=\"half\"><br><img src=\"https://i.loli.net/2019/11/05/xknlXWYDBbtoT3h.jpg\" width=\"350\" height=\"450\" alt=\"穷人的现金流图\"><br></center>\n\n<ul>\n<li>中产的现金流图：中产的工资收入更高，但随之而来的支出也更多，并且负债增加，深陷“老鼠赛跑”的死循环之中。</li>\n</ul>\n<center class=\"half\"><br><img src=\"https://i.loli.net/2019/11/06/HDfjXBGY9KMsoNw.jpg\" width=\"350\" height=\"450\" alt=\"中产的现金流图\"><br></center>\n\n<ul>\n<li>富人的现金流图：富人也有负债，但是他们拥有能够产生收入的资产则更多，以至于可以抵消日常支出。即使没有工资收入，也可以活的好好的。</li>\n</ul>\n<center class=\"half\"><br><img src=\"https://i.loli.net/2019/11/06/aVQArdo16IeXnZW.jpg\" width=\"350\" height=\"450\" alt=\"富人的现金流图\"><br></center>\n\n<h3 id=\"书中提到的一些观点\"><a href=\"#书中提到的一些观点\" class=\"headerlink\" title=\"书中提到的一些观点\"></a>书中提到的一些观点</h3><hr>\n<ul>\n<li><p><strong>穷爸爸和富爸爸显著区别之一：“我可付不起！” VS “我怎样才能付得起？”</strong></p>\n</li>\n<li><p><strong>改变自己，而不是尝试去改变别人，因为通常后者不是你所能控制的。自私一点讲，改变自己，更有利于你</strong></p>\n</li>\n<li><p><strong>很多人甚至分不清资产和负债的区别：<em>资产是能把钱放进我口袋里的东西，而负债是把钱从我口袋里取走的东西</em></strong></p>\n</li>\n<li><p><strong>当我说关注自己的事业时，我的意思是建立自己牢固的资产。一旦把1美元投入了资产项，就不要让它出来。你应该想：这1美元进了你的资产项，它就成了你的雇员。关于钱，最妙的就是让它可以一天24小时不间断工作。（我想也就是所谓的<em>睡后收入</em>吧）</strong></p>\n</li>\n<li><p><strong>富人与穷人一个重要的区别就是：富人最后才买奢侈品，而穷人和中产阶级会先买下诸如大房子、珠宝、皮衣、宝石、游艇等奢侈品，因为他们想让自己看上去很富有。他们看上去的确很富有，但实际上他们已深陷贷款的陷阱之中。(所谓的，当代不少年轻人正在过着的<em>伪精致</em>生活吧)</strong></p>\n</li>\n<li><p><strong>存在财务问题的人经常耗费一生为别人工作，其中许多人在他们不能工作时就变得一无所有。</strong></p>\n</li>\n<li><p><strong><em>穷人和中产阶级为钱而工作。富人让钱为他工作。</em>（学会不为钱工作，而是让钱开始为你而工作！要知道：大部分增长的收入都流向企业家和投资者，而非劳动者——那些为钱而工作的人们）</strong></p>\n</li>\n<li><p><strong>许多才华横溢的人之所以贫穷，就是因为他们只是专心于做好产品，而对商业体系却知之甚少。</strong></p>\n</li>\n<li><p><strong>在今天的消费者世界里，由于种种外在的诱惑，所以很容易在支出项上挥霍金钱。因为意志薄弱，金钱的流出简直是无遮无拦，这就是大多数人贫困并在财务困境中苦苦挣扎的原因。（在今天看来，也就是所谓的<em>剁手党</em>，作者真是眼界深远啊）</strong></p>\n</li>\n<li><p><strong>三种收入：在会计领域里，有三种不同的收入</strong></p>\n<ul>\n<li><strong><em>劳动性收入</em>：搬砖的意思</strong></li>\n<li><strong><em>投资组合收入</em>：用搬砖获得的钱（扣除日常开销）进行钱生钱</strong></li>\n<li><strong><em>被动收入</em>：个人觉得和上面大同小异</strong></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>变富有的关键是拥有尽快将<em>劳动性收入</em>转换成<em>被动收入</em>或<em>投资组合收入</em>的能力</strong></p>\n</li>\n<li><p><strong>重要的不是你挣了多少钱，而是你留下多少钱，以及能够留住多久</strong></p>\n</li>\n<li><p><strong>考虑一下，从现在开始停止工作（没有劳动性收入），你还能活多久？</strong></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<div align=\"center\"><br><img src=\"https://i.loli.net/2019/11/05/1qgfPZBXMmvG6hW.jpg\" width=\"300\" height=\"400\" alt=\"书的封面\"><br></div>\n\n<p><strong><em>早些时候，听说过这本书。当时我还以为是教人怎么做个好爸爸的。。。也就没怎么提起兴趣看看了</em></strong></p>\n<p><strong>最近在微信读书上又看到了这本书，因为有微信读书赠送给新用户的无限卡，趁着周末就看了一遍。实际上这本书主要讲的是关于理财或者说<em>财商</em>以及如何通过这些实现财务自由的内容。</strong></p>\n<p><strong>讲真的，书中大部分内容说的都挺好的，增长了不少见识，使我对职业、金钱这些东西的看法又发生了很多改变。</strong></p>\n<p><strong>书中的“讨论学习环节”部分显得有些啰嗦，“重复”在大多数情况下都是不好的，除非你要特意强调一个东西</strong></p>\n<p><strong>“富爸爸”，指的是作者的一个童年好朋友的爸爸，“穷爸爸”则是作者的亲生爸爸。“富爸爸”受教育程度低，但是对金钱和职业的看法要远远超过普通人的认知；而“穷爸爸”有着很高的学历，是一个喜欢安稳、对金钱和职业有着很守旧的看法：认真稳定的工作、拿着一份工资安稳度日。</strong></p>\n<p><strong>作者小时候常常被这两种截然相反的思想的影响，不过最后，还是决定选择“富爸爸”对职业、金钱的观念和看法…</strong></p>\n<h3 id=\"现金流\"><a href=\"#现金流\" class=\"headerlink\" title=\"现金流\"></a>现金流</h3><hr>\n<ul>\n<li>穷人的现金流图：工资收入勉强维持日常开支，没有资产，没有负债。</li>\n</ul>\n<center class=\"half\"><br><img src=\"https://i.loli.net/2019/11/05/xknlXWYDBbtoT3h.jpg\" width=\"350\" height=\"450\" alt=\"穷人的现金流图\"><br></center>\n\n<ul>\n<li>中产的现金流图：中产的工资收入更高，但随之而来的支出也更多，并且负债增加，深陷“老鼠赛跑”的死循环之中。</li>\n</ul>\n<center class=\"half\"><br><img src=\"https://i.loli.net/2019/11/06/HDfjXBGY9KMsoNw.jpg\" width=\"350\" height=\"450\" alt=\"中产的现金流图\"><br></center>\n\n<ul>\n<li>富人的现金流图：富人也有负债，但是他们拥有能够产生收入的资产则更多，以至于可以抵消日常支出。即使没有工资收入，也可以活的好好的。</li>\n</ul>\n<center class=\"half\"><br><img src=\"https://i.loli.net/2019/11/06/aVQArdo16IeXnZW.jpg\" width=\"350\" height=\"450\" alt=\"富人的现金流图\"><br></center>\n\n<h3 id=\"书中提到的一些观点\"><a href=\"#书中提到的一些观点\" class=\"headerlink\" title=\"书中提到的一些观点\"></a>书中提到的一些观点</h3><hr>\n<ul>\n<li><p><strong>穷爸爸和富爸爸显著区别之一：“我可付不起！” VS “我怎样才能付得起？”</strong></p>\n</li>\n<li><p><strong>改变自己，而不是尝试去改变别人，因为通常后者不是你所能控制的。自私一点讲，改变自己，更有利于你</strong></p>\n</li>\n<li><p><strong>很多人甚至分不清资产和负债的区别：<em>资产是能把钱放进我口袋里的东西，而负债是把钱从我口袋里取走的东西</em></strong></p>\n</li>\n<li><p><strong>当我说关注自己的事业时，我的意思是建立自己牢固的资产。一旦把1美元投入了资产项，就不要让它出来。你应该想：这1美元进了你的资产项，它就成了你的雇员。关于钱，最妙的就是让它可以一天24小时不间断工作。（我想也就是所谓的<em>睡后收入</em>吧）</strong></p>\n</li>\n<li><p><strong>富人与穷人一个重要的区别就是：富人最后才买奢侈品，而穷人和中产阶级会先买下诸如大房子、珠宝、皮衣、宝石、游艇等奢侈品，因为他们想让自己看上去很富有。他们看上去的确很富有，但实际上他们已深陷贷款的陷阱之中。(所谓的，当代不少年轻人正在过着的<em>伪精致</em>生活吧)</strong></p>\n</li>\n<li><p><strong>存在财务问题的人经常耗费一生为别人工作，其中许多人在他们不能工作时就变得一无所有。</strong></p>\n</li>\n<li><p><strong><em>穷人和中产阶级为钱而工作。富人让钱为他工作。</em>（学会不为钱工作，而是让钱开始为你而工作！要知道：大部分增长的收入都流向企业家和投资者，而非劳动者——那些为钱而工作的人们）</strong></p>\n</li>\n<li><p><strong>许多才华横溢的人之所以贫穷，就是因为他们只是专心于做好产品，而对商业体系却知之甚少。</strong></p>\n</li>\n<li><p><strong>在今天的消费者世界里，由于种种外在的诱惑，所以很容易在支出项上挥霍金钱。因为意志薄弱，金钱的流出简直是无遮无拦，这就是大多数人贫困并在财务困境中苦苦挣扎的原因。（在今天看来，也就是所谓的<em>剁手党</em>，作者真是眼界深远啊）</strong></p>\n</li>\n<li><p><strong>三种收入：在会计领域里，有三种不同的收入</strong></p>\n<ul>\n<li><strong><em>劳动性收入</em>：搬砖的意思</strong></li>\n<li><strong><em>投资组合收入</em>：用搬砖获得的钱（扣除日常开销）进行钱生钱</strong></li>\n<li><strong><em>被动收入</em>：个人觉得和上面大同小异</strong></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>变富有的关键是拥有尽快将<em>劳动性收入</em>转换成<em>被动收入</em>或<em>投资组合收入</em>的能力</strong></p>\n</li>\n<li><p><strong>重要的不是你挣了多少钱，而是你留下多少钱，以及能够留住多久</strong></p>\n</li>\n<li><p><strong>考虑一下，从现在开始停止工作（没有劳动性收入），你还能活多久？</strong></p>\n</li>\n</ul>\n"},{"title":"《房债：为什么会出现大衰退，如何避免重蹈覆辙》","date":"2019-11-29T16:00:00.000Z","_content":"\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/11/30/D5jyP9epJcXtTWo.jpg\" width = \"300\" height=\"400\" alt=\"书的封面\">\n</div>\n\n### 大衰退（指2008年美国的次贷危机）的破坏力\n---\n\n* 2007年至2009年间的这次全美大衰退夺走了800万个工作岗位，400多万个家庭无家可归（房屋被银行收回）\n* 如果没有这次大衰退，2012年美国的收入将多出2万亿美元\n* 深层次的人力成本影响更为严重，大量的研究指向了失业所带来的严重负面心理影响，包括心理压抑，甚至自杀。\n* “就像印第安摩纳哥房车公司的工人一样，作为无辜的旁观者，在衰退期间丢掉了工作，他们感到震惊和困惑。”\n\n“严重的经济衰退根本就是一个谜团，完全不是因为经济体生产力收到明显破环所引发的。例如，在大衰退期间，没有引致建筑、机器发生毁坏的自然灾害或者战争，也没有出现最新的前沿技术。摩纳哥房车公司的工人也没有在突然之间丢掉他们过去多年培训所掌握的大量知识。”\n\n但事实就是，经济体突然停滞，消费猛然下降，上百万人工作岗位丢失。\n\n### 大衰退和大萧条（指1929-1933年的全球性经济大衰退）以及世界上其他国家经济衰退的共同点及原因\n---\n* 家庭债务都出现了大规模增长\n* 与此同时，二者都始于家庭支出莫名其妙的大幅下降\n* “很难用收入下降和价格来解释。就像大萧条一样，支出下降引发了此次大衰退，下降幅度也是出奇的大。”\n\n“从2000年到2007年，美国的家庭债务急剧上升，七年间总量翻了一番，达到14万亿美元”\n\n“从1920年到1929年，用于购买汽车、家具的抵押贷款和分期付款（那个年代美国就流行分期付款了。。。）债务都出现大幅增长。”\n\n“在大衰退早期，也即在2008年9月金融危机最严重之前，汽车、家具和家电类耐用消费品的购买量就出现直线下降。与2007年相比，2008年1~8月，也即在大衰退或金融危机最严重之前，汽车的销售量下降了近10%”\n\n“在经济灾难爆发前，家庭债务大幅攀升、居民支出大幅下降这种情况并非美国所独有，证据显示这种关系在国际上也很常见。”\n\n“1977年的西班牙、1987年的挪1991年的芬兰和瑞典以及1992年的日本。这些经济衰退都由资产价格崩溃所引发，导致银行业大规模损失。在这五起经济衰退之前，所在国都出现了房地产价格大幅上涨”\n\n“总之，国际上的证据及美国的证据都表明一种模式：经济灾难爆发前几乎都出现了家庭债务的大幅增加。实际上，这种相关性非常显著，接近于宏观经济学中的经验法则。而且，家庭债务的大幅增加、经济灾难的爆发似乎与支出崩溃相关。”\n\n“我们能够解决乃至阻止经济大灾难发生的唯一办法就是理解引发灾难的原因。在大衰退期间，人们在经济危机发生原因上的分歧使政策制定者们全力处理经济乱局的行动黯然失色。我们必须搞清楚家庭债务与严重的经济衰退之间是否存在某种联系或上述其他观点是否正确。检验的最佳途径就是借助科学方法：仔细分析数据，然后检验哪一种理论是有效的。这也是本书的目的。”\n\n### 待续\n---\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/12/01/br7IvhtJKgd8qnQ.jpg\" width = \"300\" height=\"400\" alt=\"书的封面\">\n<div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">多罗西亚·兰格的《移民母亲》照片，描绘出在加利福尼亚州大萧条时期的贫困采豆人：佛罗伦萨·欧文斯·汤普森（Florence Owens Thompson）一位有七个孩子的母亲，她当时32岁。1936年3月摄。</div>\n</div>\n","source":"_posts/read/房债：为什么会出现大衰退，如何避免重蹈覆辙.md","raw":"---\ntitle: 《房债：为什么会出现大衰退，如何避免重蹈覆辙》\ncategories: 读书\ndate: 2019-11-30\n---\n\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/11/30/D5jyP9epJcXtTWo.jpg\" width = \"300\" height=\"400\" alt=\"书的封面\">\n</div>\n\n### 大衰退（指2008年美国的次贷危机）的破坏力\n---\n\n* 2007年至2009年间的这次全美大衰退夺走了800万个工作岗位，400多万个家庭无家可归（房屋被银行收回）\n* 如果没有这次大衰退，2012年美国的收入将多出2万亿美元\n* 深层次的人力成本影响更为严重，大量的研究指向了失业所带来的严重负面心理影响，包括心理压抑，甚至自杀。\n* “就像印第安摩纳哥房车公司的工人一样，作为无辜的旁观者，在衰退期间丢掉了工作，他们感到震惊和困惑。”\n\n“严重的经济衰退根本就是一个谜团，完全不是因为经济体生产力收到明显破环所引发的。例如，在大衰退期间，没有引致建筑、机器发生毁坏的自然灾害或者战争，也没有出现最新的前沿技术。摩纳哥房车公司的工人也没有在突然之间丢掉他们过去多年培训所掌握的大量知识。”\n\n但事实就是，经济体突然停滞，消费猛然下降，上百万人工作岗位丢失。\n\n### 大衰退和大萧条（指1929-1933年的全球性经济大衰退）以及世界上其他国家经济衰退的共同点及原因\n---\n* 家庭债务都出现了大规模增长\n* 与此同时，二者都始于家庭支出莫名其妙的大幅下降\n* “很难用收入下降和价格来解释。就像大萧条一样，支出下降引发了此次大衰退，下降幅度也是出奇的大。”\n\n“从2000年到2007年，美国的家庭债务急剧上升，七年间总量翻了一番，达到14万亿美元”\n\n“从1920年到1929年，用于购买汽车、家具的抵押贷款和分期付款（那个年代美国就流行分期付款了。。。）债务都出现大幅增长。”\n\n“在大衰退早期，也即在2008年9月金融危机最严重之前，汽车、家具和家电类耐用消费品的购买量就出现直线下降。与2007年相比，2008年1~8月，也即在大衰退或金融危机最严重之前，汽车的销售量下降了近10%”\n\n“在经济灾难爆发前，家庭债务大幅攀升、居民支出大幅下降这种情况并非美国所独有，证据显示这种关系在国际上也很常见。”\n\n“1977年的西班牙、1987年的挪1991年的芬兰和瑞典以及1992年的日本。这些经济衰退都由资产价格崩溃所引发，导致银行业大规模损失。在这五起经济衰退之前，所在国都出现了房地产价格大幅上涨”\n\n“总之，国际上的证据及美国的证据都表明一种模式：经济灾难爆发前几乎都出现了家庭债务的大幅增加。实际上，这种相关性非常显著，接近于宏观经济学中的经验法则。而且，家庭债务的大幅增加、经济灾难的爆发似乎与支出崩溃相关。”\n\n“我们能够解决乃至阻止经济大灾难发生的唯一办法就是理解引发灾难的原因。在大衰退期间，人们在经济危机发生原因上的分歧使政策制定者们全力处理经济乱局的行动黯然失色。我们必须搞清楚家庭债务与严重的经济衰退之间是否存在某种联系或上述其他观点是否正确。检验的最佳途径就是借助科学方法：仔细分析数据，然后检验哪一种理论是有效的。这也是本书的目的。”\n\n### 待续\n---\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/12/01/br7IvhtJKgd8qnQ.jpg\" width = \"300\" height=\"400\" alt=\"书的封面\">\n<div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">多罗西亚·兰格的《移民母亲》照片，描绘出在加利福尼亚州大萧条时期的贫困采豆人：佛罗伦萨·欧文斯·汤普森（Florence Owens Thompson）一位有七个孩子的母亲，她当时32岁。1936年3月摄。</div>\n</div>\n","slug":"read/房债：为什么会出现大衰退，如何避免重蹈覆辙","published":1,"updated":"2019-12-02T11:54:48.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8u002shcr7zzmhwi8m","content":"<div align=\"center\"><br><img src=\"https://i.loli.net/2019/11/30/D5jyP9epJcXtTWo.jpg\" width=\"300\" height=\"400\" alt=\"书的封面\"><br></div>\n\n<h3 id=\"大衰退（指2008年美国的次贷危机）的破坏力\"><a href=\"#大衰退（指2008年美国的次贷危机）的破坏力\" class=\"headerlink\" title=\"大衰退（指2008年美国的次贷危机）的破坏力\"></a>大衰退（指2008年美国的次贷危机）的破坏力</h3><hr>\n<ul>\n<li>2007年至2009年间的这次全美大衰退夺走了800万个工作岗位，400多万个家庭无家可归（房屋被银行收回）</li>\n<li>如果没有这次大衰退，2012年美国的收入将多出2万亿美元</li>\n<li>深层次的人力成本影响更为严重，大量的研究指向了失业所带来的严重负面心理影响，包括心理压抑，甚至自杀。</li>\n<li>“就像印第安摩纳哥房车公司的工人一样，作为无辜的旁观者，在衰退期间丢掉了工作，他们感到震惊和困惑。”</li>\n</ul>\n<p>“严重的经济衰退根本就是一个谜团，完全不是因为经济体生产力收到明显破环所引发的。例如，在大衰退期间，没有引致建筑、机器发生毁坏的自然灾害或者战争，也没有出现最新的前沿技术。摩纳哥房车公司的工人也没有在突然之间丢掉他们过去多年培训所掌握的大量知识。”</p>\n<p>但事实就是，经济体突然停滞，消费猛然下降，上百万人工作岗位丢失。</p>\n<h3 id=\"大衰退和大萧条（指1929-1933年的全球性经济大衰退）以及世界上其他国家经济衰退的共同点及原因\"><a href=\"#大衰退和大萧条（指1929-1933年的全球性经济大衰退）以及世界上其他国家经济衰退的共同点及原因\" class=\"headerlink\" title=\"大衰退和大萧条（指1929-1933年的全球性经济大衰退）以及世界上其他国家经济衰退的共同点及原因\"></a>大衰退和大萧条（指1929-1933年的全球性经济大衰退）以及世界上其他国家经济衰退的共同点及原因</h3><hr>\n<ul>\n<li>家庭债务都出现了大规模增长</li>\n<li>与此同时，二者都始于家庭支出莫名其妙的大幅下降</li>\n<li>“很难用收入下降和价格来解释。就像大萧条一样，支出下降引发了此次大衰退，下降幅度也是出奇的大。”</li>\n</ul>\n<p>“从2000年到2007年，美国的家庭债务急剧上升，七年间总量翻了一番，达到14万亿美元”</p>\n<p>“从1920年到1929年，用于购买汽车、家具的抵押贷款和分期付款（那个年代美国就流行分期付款了。。。）债务都出现大幅增长。”</p>\n<p>“在大衰退早期，也即在2008年9月金融危机最严重之前，汽车、家具和家电类耐用消费品的购买量就出现直线下降。与2007年相比，2008年1~8月，也即在大衰退或金融危机最严重之前，汽车的销售量下降了近10%”</p>\n<p>“在经济灾难爆发前，家庭债务大幅攀升、居民支出大幅下降这种情况并非美国所独有，证据显示这种关系在国际上也很常见。”</p>\n<p>“1977年的西班牙、1987年的挪1991年的芬兰和瑞典以及1992年的日本。这些经济衰退都由资产价格崩溃所引发，导致银行业大规模损失。在这五起经济衰退之前，所在国都出现了房地产价格大幅上涨”</p>\n<p>“总之，国际上的证据及美国的证据都表明一种模式：经济灾难爆发前几乎都出现了家庭债务的大幅增加。实际上，这种相关性非常显著，接近于宏观经济学中的经验法则。而且，家庭债务的大幅增加、经济灾难的爆发似乎与支出崩溃相关。”</p>\n<p>“我们能够解决乃至阻止经济大灾难发生的唯一办法就是理解引发灾难的原因。在大衰退期间，人们在经济危机发生原因上的分歧使政策制定者们全力处理经济乱局的行动黯然失色。我们必须搞清楚家庭债务与严重的经济衰退之间是否存在某种联系或上述其他观点是否正确。检验的最佳途径就是借助科学方法：仔细分析数据，然后检验哪一种理论是有效的。这也是本书的目的。”</p>\n<h3 id=\"待续\"><a href=\"#待续\" class=\"headerlink\" title=\"待续\"></a>待续</h3><hr>\n<div align=\"center\"><br><img src=\"https://i.loli.net/2019/12/01/br7IvhtJKgd8qnQ.jpg\" width=\"300\" height=\"400\" alt=\"书的封面\"><br><div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">多罗西亚·兰格的《移民母亲》照片，描绘出在加利福尼亚州大萧条时期的贫困采豆人：佛罗伦萨·欧文斯·汤普森（Florence Owens Thompson）一位有七个孩子的母亲，她当时32岁。1936年3月摄。</div><br></div>\n","site":{"data":{}},"excerpt":"","more":"<div align=\"center\"><br><img src=\"https://i.loli.net/2019/11/30/D5jyP9epJcXtTWo.jpg\" width=\"300\" height=\"400\" alt=\"书的封面\"><br></div>\n\n<h3 id=\"大衰退（指2008年美国的次贷危机）的破坏力\"><a href=\"#大衰退（指2008年美国的次贷危机）的破坏力\" class=\"headerlink\" title=\"大衰退（指2008年美国的次贷危机）的破坏力\"></a>大衰退（指2008年美国的次贷危机）的破坏力</h3><hr>\n<ul>\n<li>2007年至2009年间的这次全美大衰退夺走了800万个工作岗位，400多万个家庭无家可归（房屋被银行收回）</li>\n<li>如果没有这次大衰退，2012年美国的收入将多出2万亿美元</li>\n<li>深层次的人力成本影响更为严重，大量的研究指向了失业所带来的严重负面心理影响，包括心理压抑，甚至自杀。</li>\n<li>“就像印第安摩纳哥房车公司的工人一样，作为无辜的旁观者，在衰退期间丢掉了工作，他们感到震惊和困惑。”</li>\n</ul>\n<p>“严重的经济衰退根本就是一个谜团，完全不是因为经济体生产力收到明显破环所引发的。例如，在大衰退期间，没有引致建筑、机器发生毁坏的自然灾害或者战争，也没有出现最新的前沿技术。摩纳哥房车公司的工人也没有在突然之间丢掉他们过去多年培训所掌握的大量知识。”</p>\n<p>但事实就是，经济体突然停滞，消费猛然下降，上百万人工作岗位丢失。</p>\n<h3 id=\"大衰退和大萧条（指1929-1933年的全球性经济大衰退）以及世界上其他国家经济衰退的共同点及原因\"><a href=\"#大衰退和大萧条（指1929-1933年的全球性经济大衰退）以及世界上其他国家经济衰退的共同点及原因\" class=\"headerlink\" title=\"大衰退和大萧条（指1929-1933年的全球性经济大衰退）以及世界上其他国家经济衰退的共同点及原因\"></a>大衰退和大萧条（指1929-1933年的全球性经济大衰退）以及世界上其他国家经济衰退的共同点及原因</h3><hr>\n<ul>\n<li>家庭债务都出现了大规模增长</li>\n<li>与此同时，二者都始于家庭支出莫名其妙的大幅下降</li>\n<li>“很难用收入下降和价格来解释。就像大萧条一样，支出下降引发了此次大衰退，下降幅度也是出奇的大。”</li>\n</ul>\n<p>“从2000年到2007年，美国的家庭债务急剧上升，七年间总量翻了一番，达到14万亿美元”</p>\n<p>“从1920年到1929年，用于购买汽车、家具的抵押贷款和分期付款（那个年代美国就流行分期付款了。。。）债务都出现大幅增长。”</p>\n<p>“在大衰退早期，也即在2008年9月金融危机最严重之前，汽车、家具和家电类耐用消费品的购买量就出现直线下降。与2007年相比，2008年1~8月，也即在大衰退或金融危机最严重之前，汽车的销售量下降了近10%”</p>\n<p>“在经济灾难爆发前，家庭债务大幅攀升、居民支出大幅下降这种情况并非美国所独有，证据显示这种关系在国际上也很常见。”</p>\n<p>“1977年的西班牙、1987年的挪1991年的芬兰和瑞典以及1992年的日本。这些经济衰退都由资产价格崩溃所引发，导致银行业大规模损失。在这五起经济衰退之前，所在国都出现了房地产价格大幅上涨”</p>\n<p>“总之，国际上的证据及美国的证据都表明一种模式：经济灾难爆发前几乎都出现了家庭债务的大幅增加。实际上，这种相关性非常显著，接近于宏观经济学中的经验法则。而且，家庭债务的大幅增加、经济灾难的爆发似乎与支出崩溃相关。”</p>\n<p>“我们能够解决乃至阻止经济大灾难发生的唯一办法就是理解引发灾难的原因。在大衰退期间，人们在经济危机发生原因上的分歧使政策制定者们全力处理经济乱局的行动黯然失色。我们必须搞清楚家庭债务与严重的经济衰退之间是否存在某种联系或上述其他观点是否正确。检验的最佳途径就是借助科学方法：仔细分析数据，然后检验哪一种理论是有效的。这也是本书的目的。”</p>\n<h3 id=\"待续\"><a href=\"#待续\" class=\"headerlink\" title=\"待续\"></a>待续</h3><hr>\n<div align=\"center\"><br><img src=\"https://i.loli.net/2019/12/01/br7IvhtJKgd8qnQ.jpg\" width=\"300\" height=\"400\" alt=\"书的封面\"><br><div style=\"color:orange; border-bottom: 1px solid #d9d9d9;\n    display: inline-block;\n    color: #999;\n    padding: 2px;\">多罗西亚·兰格的《移民母亲》照片，描绘出在加利福尼亚州大萧条时期的贫困采豆人：佛罗伦萨·欧文斯·汤普森（Florence Owens Thompson）一位有七个孩子的母亲，她当时32岁。1936年3月摄。</div><br></div>\n"},{"title":"《正念：此刻是一支花》","date":"2019-12-08T16:00:00.000Z","_content":"\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/12/11/7UWTsCoQ8ibq2Zg.jpg\" width = \"300\" height=\"400\" alt=\"书的封面\">\n</div>\n\n本书的作者，乔·卡巴金是美国麻省理工学院的博士。师从著名生物学家、诺贝尔奖获得者萨尔瓦多·卢瑞亚。印度裔美国科学家。\n\n这本书的层次远超于现在的我\n\n### 太多的人生问题，是因为我们想要逃离\n---\n> 卡巴金想做的，是一种参与式的医学。他认为，疾病的治疗可以由医生主导，身心的疗愈却无法假他人之手，必须通过治疗者自身的全情投入来实现。所以他邀请接受正念减压的受训者通过正念练习，来学习对自己经验的开放和觉察，学习如何与自己的压力和痛苦和睦相处。他认为，**这种觉察虽然并不能直接改变压力和痛苦，但是会改变病人与它们之间的关系。关系的改变会带来体验的改变，并最终改变病人的人生。**\n\n> 在20世纪70年代，一个典型的医生眼中只有病人生病的躯体，还没有完整的病人。在这样的年代，用“正念”这样带有东方宗教神秘意味的理念和方法来治疗病人，很容易会被看作离经叛道和不务正业。\n\n> 他深知，要被西方主流思想接受，正念疗法必须和现代社会最大的“宗教”——科学挂上钩。他开始为佛教和科学搭建桥梁。\n\n> 神经学家理查德·戴维森对禅修的理解是：“当我们以开放和接纳的态度去面对自己的新经验时，以往用于自动反应的神经联结被暂时阻断了，而新的大脑突触联结得以产生和加强。正念利用大脑的可塑性，对心灵的习惯重新进行了训练，在大脑中开辟了一些新的神经通路。”\n\n> 正念是这样一种方法，但又不是。虽然有大量的研究证明了正念的诸多功效，但正念本身并不是实现这些目的的工具。正念练习的，是“无用之用”，“不作为的作为”，是你在这里，体验自己在这里。正念不关乎目的，只关乎存在。\n\n> **有什么比存在更美妙而重要的事呢？**\n\n> 生命只在刹那间展开，若无法全心与这些刹那同在，我们将错失生命中最宝贵的事物，而且会意识不到自身成长和蜕变中的丰富性和深邃性。\n\n> 太多的人生问题，是因为我们想要逃离。逃离的企图，有时被隐藏在积极改变、努力上进的后面。我们经常忘记，当我们说憧憬未来的时候，其实是说现在不够好；当我们说改变自己的时候，其实是说自己不够好。而现在的自己，正是我们生活的全部。\n\n### 下刻虚空，此刻即是。\n---\n> 美国《纽约客》杂志上登过这样一幅漫画：两个剃度僧人，一老一少，身披袈裟，肩并肩盘腿坐于地上。少者正面带困惑望着老者，老者则正转头对少者训诫：“下刻虚空。此刻即是。”\n\n> 此言不假。通常，我们在做某事时总期待行之有果，这很自然。我们期待看到结果，即便所谓的结果充其量仅能带给我们愉悦的感觉。在我看来，只有冥想是个例外。在所有有目的而系统化的人类活动中，只有冥想从本质上而言不是要提升自己，也不是为了带来任何结果，而仅仅是为了意识到你当下的所在。也许冥想的价值正在于此吧。也许在人生中，我们总有时候需要不求任何结果、只为了做而做某件事情。\n\n这个我深有感触，中学时期我对未解之谜系列的东西相当感兴趣！那个时候真的是单单凭借好奇心去阅读大量的相关书籍，不带有任何目的，因为越读再多的此类书籍，对我的学习成绩没有任何提升。我就是在那单纯的阅读，以满足自己的好奇心、求知欲。\n\n但是工作之后呢，我也有次买了一本相关的书。然后看了一点就没有耐心看去了，转而拿过工作相关的书，恶补工作上需要用到的知识。因为我心里面很清楚，这类知识的增多可以实实在在的让我工作更加顺利，能取得更好的工作待遇等等。总之就是目的性很强。\n\n### 身在心在\n---\n> 你有没有注意到我们其实无法避开任何事情？你不想应对、努力逃避或掩耳盗铃、假装其不存在的事情早晚会找上门来，特别是如果它们与你以往的行为模式、与你的恐惧相关的话。不切实际的想法是，如果这儿不好，我就去那儿，然后一切都会不同。如果这份工作不好，就另换一份。如果这个妻子不好，就另娶一个。如果这个城市不好，就搬到其他地方去。如果这些孩子很麻烦，就另找他人去照看好了。所有这些想法之下隐藏的是，你所有的麻烦根源都不在你，而在于某地，在于他人，在于周围环境。你以为，换个位置，换个环境，一切都会尽如你意，你会重新来过，重新开始。\n\n","source":"_posts/read/正念：此刻是一支花.md","raw":"---\ntitle: 《正念：此刻是一支花》\ncategories: 读书\ndate: 2019-12-09\n---\n\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/12/11/7UWTsCoQ8ibq2Zg.jpg\" width = \"300\" height=\"400\" alt=\"书的封面\">\n</div>\n\n本书的作者，乔·卡巴金是美国麻省理工学院的博士。师从著名生物学家、诺贝尔奖获得者萨尔瓦多·卢瑞亚。印度裔美国科学家。\n\n这本书的层次远超于现在的我\n\n### 太多的人生问题，是因为我们想要逃离\n---\n> 卡巴金想做的，是一种参与式的医学。他认为，疾病的治疗可以由医生主导，身心的疗愈却无法假他人之手，必须通过治疗者自身的全情投入来实现。所以他邀请接受正念减压的受训者通过正念练习，来学习对自己经验的开放和觉察，学习如何与自己的压力和痛苦和睦相处。他认为，**这种觉察虽然并不能直接改变压力和痛苦，但是会改变病人与它们之间的关系。关系的改变会带来体验的改变，并最终改变病人的人生。**\n\n> 在20世纪70年代，一个典型的医生眼中只有病人生病的躯体，还没有完整的病人。在这样的年代，用“正念”这样带有东方宗教神秘意味的理念和方法来治疗病人，很容易会被看作离经叛道和不务正业。\n\n> 他深知，要被西方主流思想接受，正念疗法必须和现代社会最大的“宗教”——科学挂上钩。他开始为佛教和科学搭建桥梁。\n\n> 神经学家理查德·戴维森对禅修的理解是：“当我们以开放和接纳的态度去面对自己的新经验时，以往用于自动反应的神经联结被暂时阻断了，而新的大脑突触联结得以产生和加强。正念利用大脑的可塑性，对心灵的习惯重新进行了训练，在大脑中开辟了一些新的神经通路。”\n\n> 正念是这样一种方法，但又不是。虽然有大量的研究证明了正念的诸多功效，但正念本身并不是实现这些目的的工具。正念练习的，是“无用之用”，“不作为的作为”，是你在这里，体验自己在这里。正念不关乎目的，只关乎存在。\n\n> **有什么比存在更美妙而重要的事呢？**\n\n> 生命只在刹那间展开，若无法全心与这些刹那同在，我们将错失生命中最宝贵的事物，而且会意识不到自身成长和蜕变中的丰富性和深邃性。\n\n> 太多的人生问题，是因为我们想要逃离。逃离的企图，有时被隐藏在积极改变、努力上进的后面。我们经常忘记，当我们说憧憬未来的时候，其实是说现在不够好；当我们说改变自己的时候，其实是说自己不够好。而现在的自己，正是我们生活的全部。\n\n### 下刻虚空，此刻即是。\n---\n> 美国《纽约客》杂志上登过这样一幅漫画：两个剃度僧人，一老一少，身披袈裟，肩并肩盘腿坐于地上。少者正面带困惑望着老者，老者则正转头对少者训诫：“下刻虚空。此刻即是。”\n\n> 此言不假。通常，我们在做某事时总期待行之有果，这很自然。我们期待看到结果，即便所谓的结果充其量仅能带给我们愉悦的感觉。在我看来，只有冥想是个例外。在所有有目的而系统化的人类活动中，只有冥想从本质上而言不是要提升自己，也不是为了带来任何结果，而仅仅是为了意识到你当下的所在。也许冥想的价值正在于此吧。也许在人生中，我们总有时候需要不求任何结果、只为了做而做某件事情。\n\n这个我深有感触，中学时期我对未解之谜系列的东西相当感兴趣！那个时候真的是单单凭借好奇心去阅读大量的相关书籍，不带有任何目的，因为越读再多的此类书籍，对我的学习成绩没有任何提升。我就是在那单纯的阅读，以满足自己的好奇心、求知欲。\n\n但是工作之后呢，我也有次买了一本相关的书。然后看了一点就没有耐心看去了，转而拿过工作相关的书，恶补工作上需要用到的知识。因为我心里面很清楚，这类知识的增多可以实实在在的让我工作更加顺利，能取得更好的工作待遇等等。总之就是目的性很强。\n\n### 身在心在\n---\n> 你有没有注意到我们其实无法避开任何事情？你不想应对、努力逃避或掩耳盗铃、假装其不存在的事情早晚会找上门来，特别是如果它们与你以往的行为模式、与你的恐惧相关的话。不切实际的想法是，如果这儿不好，我就去那儿，然后一切都会不同。如果这份工作不好，就另换一份。如果这个妻子不好，就另娶一个。如果这个城市不好，就搬到其他地方去。如果这些孩子很麻烦，就另找他人去照看好了。所有这些想法之下隐藏的是，你所有的麻烦根源都不在你，而在于某地，在于他人，在于周围环境。你以为，换个位置，换个环境，一切都会尽如你意，你会重新来过，重新开始。\n\n","slug":"read/正念：此刻是一支花","published":1,"updated":"2019-12-16T11:19:14.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8v002vhcr7otofnpa9","content":"<div align=\"center\"><br><img src=\"https://i.loli.net/2019/12/11/7UWTsCoQ8ibq2Zg.jpg\" width=\"300\" height=\"400\" alt=\"书的封面\"><br></div>\n\n<p>本书的作者，乔·卡巴金是美国麻省理工学院的博士。师从著名生物学家、诺贝尔奖获得者萨尔瓦多·卢瑞亚。印度裔美国科学家。</p>\n<p>这本书的层次远超于现在的我</p>\n<h3 id=\"太多的人生问题，是因为我们想要逃离\"><a href=\"#太多的人生问题，是因为我们想要逃离\" class=\"headerlink\" title=\"太多的人生问题，是因为我们想要逃离\"></a>太多的人生问题，是因为我们想要逃离</h3><hr>\n<blockquote>\n<p>卡巴金想做的，是一种参与式的医学。他认为，疾病的治疗可以由医生主导，身心的疗愈却无法假他人之手，必须通过治疗者自身的全情投入来实现。所以他邀请接受正念减压的受训者通过正念练习，来学习对自己经验的开放和觉察，学习如何与自己的压力和痛苦和睦相处。他认为，<strong>这种觉察虽然并不能直接改变压力和痛苦，但是会改变病人与它们之间的关系。关系的改变会带来体验的改变，并最终改变病人的人生。</strong></p>\n</blockquote>\n<blockquote>\n<p>在20世纪70年代，一个典型的医生眼中只有病人生病的躯体，还没有完整的病人。在这样的年代，用“正念”这样带有东方宗教神秘意味的理念和方法来治疗病人，很容易会被看作离经叛道和不务正业。</p>\n</blockquote>\n<blockquote>\n<p>他深知，要被西方主流思想接受，正念疗法必须和现代社会最大的“宗教”——科学挂上钩。他开始为佛教和科学搭建桥梁。</p>\n</blockquote>\n<blockquote>\n<p>神经学家理查德·戴维森对禅修的理解是：“当我们以开放和接纳的态度去面对自己的新经验时，以往用于自动反应的神经联结被暂时阻断了，而新的大脑突触联结得以产生和加强。正念利用大脑的可塑性，对心灵的习惯重新进行了训练，在大脑中开辟了一些新的神经通路。”</p>\n</blockquote>\n<blockquote>\n<p>正念是这样一种方法，但又不是。虽然有大量的研究证明了正念的诸多功效，但正念本身并不是实现这些目的的工具。正念练习的，是“无用之用”，“不作为的作为”，是你在这里，体验自己在这里。正念不关乎目的，只关乎存在。</p>\n</blockquote>\n<blockquote>\n<p><strong>有什么比存在更美妙而重要的事呢？</strong></p>\n</blockquote>\n<blockquote>\n<p>生命只在刹那间展开，若无法全心与这些刹那同在，我们将错失生命中最宝贵的事物，而且会意识不到自身成长和蜕变中的丰富性和深邃性。</p>\n</blockquote>\n<blockquote>\n<p>太多的人生问题，是因为我们想要逃离。逃离的企图，有时被隐藏在积极改变、努力上进的后面。我们经常忘记，当我们说憧憬未来的时候，其实是说现在不够好；当我们说改变自己的时候，其实是说自己不够好。而现在的自己，正是我们生活的全部。</p>\n</blockquote>\n<h3 id=\"下刻虚空，此刻即是。\"><a href=\"#下刻虚空，此刻即是。\" class=\"headerlink\" title=\"下刻虚空，此刻即是。\"></a>下刻虚空，此刻即是。</h3><hr>\n<blockquote>\n<p>美国《纽约客》杂志上登过这样一幅漫画：两个剃度僧人，一老一少，身披袈裟，肩并肩盘腿坐于地上。少者正面带困惑望着老者，老者则正转头对少者训诫：“下刻虚空。此刻即是。”</p>\n</blockquote>\n<blockquote>\n<p>此言不假。通常，我们在做某事时总期待行之有果，这很自然。我们期待看到结果，即便所谓的结果充其量仅能带给我们愉悦的感觉。在我看来，只有冥想是个例外。在所有有目的而系统化的人类活动中，只有冥想从本质上而言不是要提升自己，也不是为了带来任何结果，而仅仅是为了意识到你当下的所在。也许冥想的价值正在于此吧。也许在人生中，我们总有时候需要不求任何结果、只为了做而做某件事情。</p>\n</blockquote>\n<p>这个我深有感触，中学时期我对未解之谜系列的东西相当感兴趣！那个时候真的是单单凭借好奇心去阅读大量的相关书籍，不带有任何目的，因为越读再多的此类书籍，对我的学习成绩没有任何提升。我就是在那单纯的阅读，以满足自己的好奇心、求知欲。</p>\n<p>但是工作之后呢，我也有次买了一本相关的书。然后看了一点就没有耐心看去了，转而拿过工作相关的书，恶补工作上需要用到的知识。因为我心里面很清楚，这类知识的增多可以实实在在的让我工作更加顺利，能取得更好的工作待遇等等。总之就是目的性很强。</p>\n<h3 id=\"身在心在\"><a href=\"#身在心在\" class=\"headerlink\" title=\"身在心在\"></a>身在心在</h3><hr>\n<blockquote>\n<p>你有没有注意到我们其实无法避开任何事情？你不想应对、努力逃避或掩耳盗铃、假装其不存在的事情早晚会找上门来，特别是如果它们与你以往的行为模式、与你的恐惧相关的话。不切实际的想法是，如果这儿不好，我就去那儿，然后一切都会不同。如果这份工作不好，就另换一份。如果这个妻子不好，就另娶一个。如果这个城市不好，就搬到其他地方去。如果这些孩子很麻烦，就另找他人去照看好了。所有这些想法之下隐藏的是，你所有的麻烦根源都不在你，而在于某地，在于他人，在于周围环境。你以为，换个位置，换个环境，一切都会尽如你意，你会重新来过，重新开始。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<div align=\"center\"><br><img src=\"https://i.loli.net/2019/12/11/7UWTsCoQ8ibq2Zg.jpg\" width=\"300\" height=\"400\" alt=\"书的封面\"><br></div>\n\n<p>本书的作者，乔·卡巴金是美国麻省理工学院的博士。师从著名生物学家、诺贝尔奖获得者萨尔瓦多·卢瑞亚。印度裔美国科学家。</p>\n<p>这本书的层次远超于现在的我</p>\n<h3 id=\"太多的人生问题，是因为我们想要逃离\"><a href=\"#太多的人生问题，是因为我们想要逃离\" class=\"headerlink\" title=\"太多的人生问题，是因为我们想要逃离\"></a>太多的人生问题，是因为我们想要逃离</h3><hr>\n<blockquote>\n<p>卡巴金想做的，是一种参与式的医学。他认为，疾病的治疗可以由医生主导，身心的疗愈却无法假他人之手，必须通过治疗者自身的全情投入来实现。所以他邀请接受正念减压的受训者通过正念练习，来学习对自己经验的开放和觉察，学习如何与自己的压力和痛苦和睦相处。他认为，<strong>这种觉察虽然并不能直接改变压力和痛苦，但是会改变病人与它们之间的关系。关系的改变会带来体验的改变，并最终改变病人的人生。</strong></p>\n</blockquote>\n<blockquote>\n<p>在20世纪70年代，一个典型的医生眼中只有病人生病的躯体，还没有完整的病人。在这样的年代，用“正念”这样带有东方宗教神秘意味的理念和方法来治疗病人，很容易会被看作离经叛道和不务正业。</p>\n</blockquote>\n<blockquote>\n<p>他深知，要被西方主流思想接受，正念疗法必须和现代社会最大的“宗教”——科学挂上钩。他开始为佛教和科学搭建桥梁。</p>\n</blockquote>\n<blockquote>\n<p>神经学家理查德·戴维森对禅修的理解是：“当我们以开放和接纳的态度去面对自己的新经验时，以往用于自动反应的神经联结被暂时阻断了，而新的大脑突触联结得以产生和加强。正念利用大脑的可塑性，对心灵的习惯重新进行了训练，在大脑中开辟了一些新的神经通路。”</p>\n</blockquote>\n<blockquote>\n<p>正念是这样一种方法，但又不是。虽然有大量的研究证明了正念的诸多功效，但正念本身并不是实现这些目的的工具。正念练习的，是“无用之用”，“不作为的作为”，是你在这里，体验自己在这里。正念不关乎目的，只关乎存在。</p>\n</blockquote>\n<blockquote>\n<p><strong>有什么比存在更美妙而重要的事呢？</strong></p>\n</blockquote>\n<blockquote>\n<p>生命只在刹那间展开，若无法全心与这些刹那同在，我们将错失生命中最宝贵的事物，而且会意识不到自身成长和蜕变中的丰富性和深邃性。</p>\n</blockquote>\n<blockquote>\n<p>太多的人生问题，是因为我们想要逃离。逃离的企图，有时被隐藏在积极改变、努力上进的后面。我们经常忘记，当我们说憧憬未来的时候，其实是说现在不够好；当我们说改变自己的时候，其实是说自己不够好。而现在的自己，正是我们生活的全部。</p>\n</blockquote>\n<h3 id=\"下刻虚空，此刻即是。\"><a href=\"#下刻虚空，此刻即是。\" class=\"headerlink\" title=\"下刻虚空，此刻即是。\"></a>下刻虚空，此刻即是。</h3><hr>\n<blockquote>\n<p>美国《纽约客》杂志上登过这样一幅漫画：两个剃度僧人，一老一少，身披袈裟，肩并肩盘腿坐于地上。少者正面带困惑望着老者，老者则正转头对少者训诫：“下刻虚空。此刻即是。”</p>\n</blockquote>\n<blockquote>\n<p>此言不假。通常，我们在做某事时总期待行之有果，这很自然。我们期待看到结果，即便所谓的结果充其量仅能带给我们愉悦的感觉。在我看来，只有冥想是个例外。在所有有目的而系统化的人类活动中，只有冥想从本质上而言不是要提升自己，也不是为了带来任何结果，而仅仅是为了意识到你当下的所在。也许冥想的价值正在于此吧。也许在人生中，我们总有时候需要不求任何结果、只为了做而做某件事情。</p>\n</blockquote>\n<p>这个我深有感触，中学时期我对未解之谜系列的东西相当感兴趣！那个时候真的是单单凭借好奇心去阅读大量的相关书籍，不带有任何目的，因为越读再多的此类书籍，对我的学习成绩没有任何提升。我就是在那单纯的阅读，以满足自己的好奇心、求知欲。</p>\n<p>但是工作之后呢，我也有次买了一本相关的书。然后看了一点就没有耐心看去了，转而拿过工作相关的书，恶补工作上需要用到的知识。因为我心里面很清楚，这类知识的增多可以实实在在的让我工作更加顺利，能取得更好的工作待遇等等。总之就是目的性很强。</p>\n<h3 id=\"身在心在\"><a href=\"#身在心在\" class=\"headerlink\" title=\"身在心在\"></a>身在心在</h3><hr>\n<blockquote>\n<p>你有没有注意到我们其实无法避开任何事情？你不想应对、努力逃避或掩耳盗铃、假装其不存在的事情早晚会找上门来，特别是如果它们与你以往的行为模式、与你的恐惧相关的话。不切实际的想法是，如果这儿不好，我就去那儿，然后一切都会不同。如果这份工作不好，就另换一份。如果这个妻子不好，就另娶一个。如果这个城市不好，就搬到其他地方去。如果这些孩子很麻烦，就另找他人去照看好了。所有这些想法之下隐藏的是，你所有的麻烦根源都不在你，而在于某地，在于他人，在于周围环境。你以为，换个位置，换个环境，一切都会尽如你意，你会重新来过，重新开始。</p>\n</blockquote>\n"},{"title":"《系统之美：决策者的系统思考》","date":"2019-11-22T16:00:00.000Z","_content":"\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/11/23/evr9kWB86xjY3zV.jpg\" width = \"300\" height=\"400\" alt=\"书的封面\">\n</div>\n\n### 系统之基础\n---\n\n#### 总体大于部分之和\n> 系统并不仅仅是一些事物的简单集合，而是一个由一组相互连接的要素构成的、能够实现某个目标的整体。从这一定义可见，任何一个系统都包括三种构成要件：**要素、连接、功能或目标。**\n\n> 例如，你的消化系统包括牙齿、酶、胃、肠等要素，它们通过身体血液的流动和一系列化学反应产生相互的连接；消化系统的功能是将食物转化为人体所需的基本营养成分，并将这些营养成分输送到血流中（另一个系统），同时通过新陈代谢，排出各种废物。\n\n> 再如，一支足球队是一个系统，它的要素包括球员、教练、场地和足球等；它们之间通过游戏规则、教练指导、球员技能、球员之间的交流以及物理法则等产生连接；而球队的目标是赢球、娱乐、锻炼或赚钱等。\n\n> 同样，一所学校、一座城市、一家工厂、一个公司以及国家经济等，都是系统。动物是一个系统，树也是一个系统，而森林则是一个更大的系统，包含了很多树木和动物等这些子系统。地球是一个系统，太阳系、银河系都是系统，包含了地球和其他很多子系统。\n\n#### 系统中的连接\n> 系统中的某些连接是实实在在的物质流，例如树干中的水分，或者学生在大学中的改变；还有很多连接是信息流，也就是系统中影响决策和行动的各种信号。这类连接通常很难被发现，但只要你用心，就会看到它们。例如，学生们可能会通过一些非正式的信息渠道，去了解每门课获得高分的概率，从而决定选修哪些课；消费者可能会参考其收入、储蓄、贷款额度、家中的存货量、商品价格和数量等信息，来做出是否购买的决策；政府在出台切合实际的治污法规之前，也需参考水污染的种类和数量等信息\n\n#### 系统中的功能或目标\n> 如果说基于信息的连接都很难被发现的话，那么与系统的功能或目标有关的连接就更难被察觉了。只有通过分析系统的运作，我们才有可能明确地表述出系统的功能或目标。要想推断出系统的目标，最好的方法就是仔细地观察一段时间，看看系统有哪些行为。\n\n> 如果一只青蛙向右转捉住了一只苍蝇，然后向左转又捉住了另一只苍蝇，接着又向后转捉住了第三只苍蝇，那么我们就可以判断出青蛙的目的并非是向左、向右或向后转身，而是为了捕捉苍蝇。如果一个政府宣称要保护环境，却只为此拨付了很少量的资金，投入很少的精力，那么我们就可以判断出政府的实际目的并非保护环境。因此，必须通过实际行为来推断系统的目标，而不能只看表面的言辞或其标榜的目标。\n\n#### 存量\n> “存量”是所有系统的基础。所谓存量，是指在任何时刻都能观察、感知、计数和测量的系统要素。如其名称所示，在系统中，存量是储存量、数量或物料、信息在一段时间内的积累量。它有可能是浴缸中的水、人口数量、书店中的书、树木的体积、银行里的钱，等等。但是，存量不一定非得是物质的，你的自信、在朋友圈中的良好口碑，或者对世界的美好希冀等，都可以是存量。\n\n> **存量是对系统中变化量的一种历史记录**\n\n#### 流量\n> 存量会随着时间的变化而不断改变，使其发生变化的就是“流量”。所谓流量，是一段时间内改变的状况。例如浴缸中注入或流出的水量、出生或死亡的人数、买入或卖出的数量、成长或衰退、存入或取出、成功或失败等\n\n> 想象一下，当一个浴缸盛满了水，其排水口被塞住，自来水管也关着时，这是一个毫无变化、没有活力、乏味的系统。现在，如果我们拔掉塞子，水就会流出去，浴缸中的水位会不断下降，直至浴缸中的水完全流尽\n![](https://i.loli.net/2019/12/30/u6WZIRLySlwpgfX.jpg)\n\n> 在系统中，由于存量变化缓慢而产生的时间滞后可能会导致一些问题，与此同时，它们也是系统稳定性的根源所在。土壤是数个世纪沉积而形成的，它们不可能瞬间被冲刷、流失殆尽；人类社会数千年积淀下来、世代相传的知识和技能，也不可能转眼间被遗忘；虽然当代人抽取地下水的速度远快于其补充的速度，但由于地下水储量丰富，在相当长的时间里，即使地下水位一直缓慢下降，也还不至于达到无以为继的地步。因此，存量变化缓慢所产生的时间滞后，让人们有了一定的余地去调整、尝试一些做法，并根据反馈来修订那些不奏效的政策。\n\n> 如果你对存量的变化速度有正确的认知，你就不会“拔苗助长”，期待事物变化的速度超出其特定规律；同时，你也不会过早地放弃，因为你知道一项措施要想见到成效，也需要时间；此外，你也可以更好地把握系统动量所展现的机会，“顺势而为”，就像一个高超的柔道选手善于利用对手的力量那样，聪明地实现自己的目标。\n\n> 对于存量在系统中所起的作用，还有一个更为重要的原则，那就是：由于存量的存在，流入量和流出量可以相互独立，并在一定时期内不必保持平衡或一致。这一原则可以引导我们直接了解反馈的概念\n","source":"_posts/read/系统之美：决策者的系统思考.md","raw":"---\ntitle: 《系统之美：决策者的系统思考》\ncategories: 读书\ndate: 2019-11-23\n---\n\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/11/23/evr9kWB86xjY3zV.jpg\" width = \"300\" height=\"400\" alt=\"书的封面\">\n</div>\n\n### 系统之基础\n---\n\n#### 总体大于部分之和\n> 系统并不仅仅是一些事物的简单集合，而是一个由一组相互连接的要素构成的、能够实现某个目标的整体。从这一定义可见，任何一个系统都包括三种构成要件：**要素、连接、功能或目标。**\n\n> 例如，你的消化系统包括牙齿、酶、胃、肠等要素，它们通过身体血液的流动和一系列化学反应产生相互的连接；消化系统的功能是将食物转化为人体所需的基本营养成分，并将这些营养成分输送到血流中（另一个系统），同时通过新陈代谢，排出各种废物。\n\n> 再如，一支足球队是一个系统，它的要素包括球员、教练、场地和足球等；它们之间通过游戏规则、教练指导、球员技能、球员之间的交流以及物理法则等产生连接；而球队的目标是赢球、娱乐、锻炼或赚钱等。\n\n> 同样，一所学校、一座城市、一家工厂、一个公司以及国家经济等，都是系统。动物是一个系统，树也是一个系统，而森林则是一个更大的系统，包含了很多树木和动物等这些子系统。地球是一个系统，太阳系、银河系都是系统，包含了地球和其他很多子系统。\n\n#### 系统中的连接\n> 系统中的某些连接是实实在在的物质流，例如树干中的水分，或者学生在大学中的改变；还有很多连接是信息流，也就是系统中影响决策和行动的各种信号。这类连接通常很难被发现，但只要你用心，就会看到它们。例如，学生们可能会通过一些非正式的信息渠道，去了解每门课获得高分的概率，从而决定选修哪些课；消费者可能会参考其收入、储蓄、贷款额度、家中的存货量、商品价格和数量等信息，来做出是否购买的决策；政府在出台切合实际的治污法规之前，也需参考水污染的种类和数量等信息\n\n#### 系统中的功能或目标\n> 如果说基于信息的连接都很难被发现的话，那么与系统的功能或目标有关的连接就更难被察觉了。只有通过分析系统的运作，我们才有可能明确地表述出系统的功能或目标。要想推断出系统的目标，最好的方法就是仔细地观察一段时间，看看系统有哪些行为。\n\n> 如果一只青蛙向右转捉住了一只苍蝇，然后向左转又捉住了另一只苍蝇，接着又向后转捉住了第三只苍蝇，那么我们就可以判断出青蛙的目的并非是向左、向右或向后转身，而是为了捕捉苍蝇。如果一个政府宣称要保护环境，却只为此拨付了很少量的资金，投入很少的精力，那么我们就可以判断出政府的实际目的并非保护环境。因此，必须通过实际行为来推断系统的目标，而不能只看表面的言辞或其标榜的目标。\n\n#### 存量\n> “存量”是所有系统的基础。所谓存量，是指在任何时刻都能观察、感知、计数和测量的系统要素。如其名称所示，在系统中，存量是储存量、数量或物料、信息在一段时间内的积累量。它有可能是浴缸中的水、人口数量、书店中的书、树木的体积、银行里的钱，等等。但是，存量不一定非得是物质的，你的自信、在朋友圈中的良好口碑，或者对世界的美好希冀等，都可以是存量。\n\n> **存量是对系统中变化量的一种历史记录**\n\n#### 流量\n> 存量会随着时间的变化而不断改变，使其发生变化的就是“流量”。所谓流量，是一段时间内改变的状况。例如浴缸中注入或流出的水量、出生或死亡的人数、买入或卖出的数量、成长或衰退、存入或取出、成功或失败等\n\n> 想象一下，当一个浴缸盛满了水，其排水口被塞住，自来水管也关着时，这是一个毫无变化、没有活力、乏味的系统。现在，如果我们拔掉塞子，水就会流出去，浴缸中的水位会不断下降，直至浴缸中的水完全流尽\n![](https://i.loli.net/2019/12/30/u6WZIRLySlwpgfX.jpg)\n\n> 在系统中，由于存量变化缓慢而产生的时间滞后可能会导致一些问题，与此同时，它们也是系统稳定性的根源所在。土壤是数个世纪沉积而形成的，它们不可能瞬间被冲刷、流失殆尽；人类社会数千年积淀下来、世代相传的知识和技能，也不可能转眼间被遗忘；虽然当代人抽取地下水的速度远快于其补充的速度，但由于地下水储量丰富，在相当长的时间里，即使地下水位一直缓慢下降，也还不至于达到无以为继的地步。因此，存量变化缓慢所产生的时间滞后，让人们有了一定的余地去调整、尝试一些做法，并根据反馈来修订那些不奏效的政策。\n\n> 如果你对存量的变化速度有正确的认知，你就不会“拔苗助长”，期待事物变化的速度超出其特定规律；同时，你也不会过早地放弃，因为你知道一项措施要想见到成效，也需要时间；此外，你也可以更好地把握系统动量所展现的机会，“顺势而为”，就像一个高超的柔道选手善于利用对手的力量那样，聪明地实现自己的目标。\n\n> 对于存量在系统中所起的作用，还有一个更为重要的原则，那就是：由于存量的存在，流入量和流出量可以相互独立，并在一定时期内不必保持平衡或一致。这一原则可以引导我们直接了解反馈的概念\n","slug":"read/系统之美：决策者的系统思考","published":1,"updated":"2020-01-01T08:16:41.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8w002whcr75vyye2ny","content":"<div align=\"center\"><br><img src=\"https://i.loli.net/2019/11/23/evr9kWB86xjY3zV.jpg\" width=\"300\" height=\"400\" alt=\"书的封面\"><br></div>\n\n<h3 id=\"系统之基础\"><a href=\"#系统之基础\" class=\"headerlink\" title=\"系统之基础\"></a>系统之基础</h3><hr>\n<h4 id=\"总体大于部分之和\"><a href=\"#总体大于部分之和\" class=\"headerlink\" title=\"总体大于部分之和\"></a>总体大于部分之和</h4><blockquote>\n<p>系统并不仅仅是一些事物的简单集合，而是一个由一组相互连接的要素构成的、能够实现某个目标的整体。从这一定义可见，任何一个系统都包括三种构成要件：<strong>要素、连接、功能或目标。</strong></p>\n</blockquote>\n<blockquote>\n<p>例如，你的消化系统包括牙齿、酶、胃、肠等要素，它们通过身体血液的流动和一系列化学反应产生相互的连接；消化系统的功能是将食物转化为人体所需的基本营养成分，并将这些营养成分输送到血流中（另一个系统），同时通过新陈代谢，排出各种废物。</p>\n</blockquote>\n<blockquote>\n<p>再如，一支足球队是一个系统，它的要素包括球员、教练、场地和足球等；它们之间通过游戏规则、教练指导、球员技能、球员之间的交流以及物理法则等产生连接；而球队的目标是赢球、娱乐、锻炼或赚钱等。</p>\n</blockquote>\n<blockquote>\n<p>同样，一所学校、一座城市、一家工厂、一个公司以及国家经济等，都是系统。动物是一个系统，树也是一个系统，而森林则是一个更大的系统，包含了很多树木和动物等这些子系统。地球是一个系统，太阳系、银河系都是系统，包含了地球和其他很多子系统。</p>\n</blockquote>\n<h4 id=\"系统中的连接\"><a href=\"#系统中的连接\" class=\"headerlink\" title=\"系统中的连接\"></a>系统中的连接</h4><blockquote>\n<p>系统中的某些连接是实实在在的物质流，例如树干中的水分，或者学生在大学中的改变；还有很多连接是信息流，也就是系统中影响决策和行动的各种信号。这类连接通常很难被发现，但只要你用心，就会看到它们。例如，学生们可能会通过一些非正式的信息渠道，去了解每门课获得高分的概率，从而决定选修哪些课；消费者可能会参考其收入、储蓄、贷款额度、家中的存货量、商品价格和数量等信息，来做出是否购买的决策；政府在出台切合实际的治污法规之前，也需参考水污染的种类和数量等信息</p>\n</blockquote>\n<h4 id=\"系统中的功能或目标\"><a href=\"#系统中的功能或目标\" class=\"headerlink\" title=\"系统中的功能或目标\"></a>系统中的功能或目标</h4><blockquote>\n<p>如果说基于信息的连接都很难被发现的话，那么与系统的功能或目标有关的连接就更难被察觉了。只有通过分析系统的运作，我们才有可能明确地表述出系统的功能或目标。要想推断出系统的目标，最好的方法就是仔细地观察一段时间，看看系统有哪些行为。</p>\n</blockquote>\n<blockquote>\n<p>如果一只青蛙向右转捉住了一只苍蝇，然后向左转又捉住了另一只苍蝇，接着又向后转捉住了第三只苍蝇，那么我们就可以判断出青蛙的目的并非是向左、向右或向后转身，而是为了捕捉苍蝇。如果一个政府宣称要保护环境，却只为此拨付了很少量的资金，投入很少的精力，那么我们就可以判断出政府的实际目的并非保护环境。因此，必须通过实际行为来推断系统的目标，而不能只看表面的言辞或其标榜的目标。</p>\n</blockquote>\n<h4 id=\"存量\"><a href=\"#存量\" class=\"headerlink\" title=\"存量\"></a>存量</h4><blockquote>\n<p>“存量”是所有系统的基础。所谓存量，是指在任何时刻都能观察、感知、计数和测量的系统要素。如其名称所示，在系统中，存量是储存量、数量或物料、信息在一段时间内的积累量。它有可能是浴缸中的水、人口数量、书店中的书、树木的体积、银行里的钱，等等。但是，存量不一定非得是物质的，你的自信、在朋友圈中的良好口碑，或者对世界的美好希冀等，都可以是存量。</p>\n</blockquote>\n<blockquote>\n<p><strong>存量是对系统中变化量的一种历史记录</strong></p>\n</blockquote>\n<h4 id=\"流量\"><a href=\"#流量\" class=\"headerlink\" title=\"流量\"></a>流量</h4><blockquote>\n<p>存量会随着时间的变化而不断改变，使其发生变化的就是“流量”。所谓流量，是一段时间内改变的状况。例如浴缸中注入或流出的水量、出生或死亡的人数、买入或卖出的数量、成长或衰退、存入或取出、成功或失败等</p>\n</blockquote>\n<blockquote>\n<p>想象一下，当一个浴缸盛满了水，其排水口被塞住，自来水管也关着时，这是一个毫无变化、没有活力、乏味的系统。现在，如果我们拔掉塞子，水就会流出去，浴缸中的水位会不断下降，直至浴缸中的水完全流尽<br><img src=\"https://i.loli.net/2019/12/30/u6WZIRLySlwpgfX.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>在系统中，由于存量变化缓慢而产生的时间滞后可能会导致一些问题，与此同时，它们也是系统稳定性的根源所在。土壤是数个世纪沉积而形成的，它们不可能瞬间被冲刷、流失殆尽；人类社会数千年积淀下来、世代相传的知识和技能，也不可能转眼间被遗忘；虽然当代人抽取地下水的速度远快于其补充的速度，但由于地下水储量丰富，在相当长的时间里，即使地下水位一直缓慢下降，也还不至于达到无以为继的地步。因此，存量变化缓慢所产生的时间滞后，让人们有了一定的余地去调整、尝试一些做法，并根据反馈来修订那些不奏效的政策。</p>\n</blockquote>\n<blockquote>\n<p>如果你对存量的变化速度有正确的认知，你就不会“拔苗助长”，期待事物变化的速度超出其特定规律；同时，你也不会过早地放弃，因为你知道一项措施要想见到成效，也需要时间；此外，你也可以更好地把握系统动量所展现的机会，“顺势而为”，就像一个高超的柔道选手善于利用对手的力量那样，聪明地实现自己的目标。</p>\n</blockquote>\n<blockquote>\n<p>对于存量在系统中所起的作用，还有一个更为重要的原则，那就是：由于存量的存在，流入量和流出量可以相互独立，并在一定时期内不必保持平衡或一致。这一原则可以引导我们直接了解反馈的概念</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<div align=\"center\"><br><img src=\"https://i.loli.net/2019/11/23/evr9kWB86xjY3zV.jpg\" width=\"300\" height=\"400\" alt=\"书的封面\"><br></div>\n\n<h3 id=\"系统之基础\"><a href=\"#系统之基础\" class=\"headerlink\" title=\"系统之基础\"></a>系统之基础</h3><hr>\n<h4 id=\"总体大于部分之和\"><a href=\"#总体大于部分之和\" class=\"headerlink\" title=\"总体大于部分之和\"></a>总体大于部分之和</h4><blockquote>\n<p>系统并不仅仅是一些事物的简单集合，而是一个由一组相互连接的要素构成的、能够实现某个目标的整体。从这一定义可见，任何一个系统都包括三种构成要件：<strong>要素、连接、功能或目标。</strong></p>\n</blockquote>\n<blockquote>\n<p>例如，你的消化系统包括牙齿、酶、胃、肠等要素，它们通过身体血液的流动和一系列化学反应产生相互的连接；消化系统的功能是将食物转化为人体所需的基本营养成分，并将这些营养成分输送到血流中（另一个系统），同时通过新陈代谢，排出各种废物。</p>\n</blockquote>\n<blockquote>\n<p>再如，一支足球队是一个系统，它的要素包括球员、教练、场地和足球等；它们之间通过游戏规则、教练指导、球员技能、球员之间的交流以及物理法则等产生连接；而球队的目标是赢球、娱乐、锻炼或赚钱等。</p>\n</blockquote>\n<blockquote>\n<p>同样，一所学校、一座城市、一家工厂、一个公司以及国家经济等，都是系统。动物是一个系统，树也是一个系统，而森林则是一个更大的系统，包含了很多树木和动物等这些子系统。地球是一个系统，太阳系、银河系都是系统，包含了地球和其他很多子系统。</p>\n</blockquote>\n<h4 id=\"系统中的连接\"><a href=\"#系统中的连接\" class=\"headerlink\" title=\"系统中的连接\"></a>系统中的连接</h4><blockquote>\n<p>系统中的某些连接是实实在在的物质流，例如树干中的水分，或者学生在大学中的改变；还有很多连接是信息流，也就是系统中影响决策和行动的各种信号。这类连接通常很难被发现，但只要你用心，就会看到它们。例如，学生们可能会通过一些非正式的信息渠道，去了解每门课获得高分的概率，从而决定选修哪些课；消费者可能会参考其收入、储蓄、贷款额度、家中的存货量、商品价格和数量等信息，来做出是否购买的决策；政府在出台切合实际的治污法规之前，也需参考水污染的种类和数量等信息</p>\n</blockquote>\n<h4 id=\"系统中的功能或目标\"><a href=\"#系统中的功能或目标\" class=\"headerlink\" title=\"系统中的功能或目标\"></a>系统中的功能或目标</h4><blockquote>\n<p>如果说基于信息的连接都很难被发现的话，那么与系统的功能或目标有关的连接就更难被察觉了。只有通过分析系统的运作，我们才有可能明确地表述出系统的功能或目标。要想推断出系统的目标，最好的方法就是仔细地观察一段时间，看看系统有哪些行为。</p>\n</blockquote>\n<blockquote>\n<p>如果一只青蛙向右转捉住了一只苍蝇，然后向左转又捉住了另一只苍蝇，接着又向后转捉住了第三只苍蝇，那么我们就可以判断出青蛙的目的并非是向左、向右或向后转身，而是为了捕捉苍蝇。如果一个政府宣称要保护环境，却只为此拨付了很少量的资金，投入很少的精力，那么我们就可以判断出政府的实际目的并非保护环境。因此，必须通过实际行为来推断系统的目标，而不能只看表面的言辞或其标榜的目标。</p>\n</blockquote>\n<h4 id=\"存量\"><a href=\"#存量\" class=\"headerlink\" title=\"存量\"></a>存量</h4><blockquote>\n<p>“存量”是所有系统的基础。所谓存量，是指在任何时刻都能观察、感知、计数和测量的系统要素。如其名称所示，在系统中，存量是储存量、数量或物料、信息在一段时间内的积累量。它有可能是浴缸中的水、人口数量、书店中的书、树木的体积、银行里的钱，等等。但是，存量不一定非得是物质的，你的自信、在朋友圈中的良好口碑，或者对世界的美好希冀等，都可以是存量。</p>\n</blockquote>\n<blockquote>\n<p><strong>存量是对系统中变化量的一种历史记录</strong></p>\n</blockquote>\n<h4 id=\"流量\"><a href=\"#流量\" class=\"headerlink\" title=\"流量\"></a>流量</h4><blockquote>\n<p>存量会随着时间的变化而不断改变，使其发生变化的就是“流量”。所谓流量，是一段时间内改变的状况。例如浴缸中注入或流出的水量、出生或死亡的人数、买入或卖出的数量、成长或衰退、存入或取出、成功或失败等</p>\n</blockquote>\n<blockquote>\n<p>想象一下，当一个浴缸盛满了水，其排水口被塞住，自来水管也关着时，这是一个毫无变化、没有活力、乏味的系统。现在，如果我们拔掉塞子，水就会流出去，浴缸中的水位会不断下降，直至浴缸中的水完全流尽<br><img src=\"https://i.loli.net/2019/12/30/u6WZIRLySlwpgfX.jpg\" alt></p>\n</blockquote>\n<blockquote>\n<p>在系统中，由于存量变化缓慢而产生的时间滞后可能会导致一些问题，与此同时，它们也是系统稳定性的根源所在。土壤是数个世纪沉积而形成的，它们不可能瞬间被冲刷、流失殆尽；人类社会数千年积淀下来、世代相传的知识和技能，也不可能转眼间被遗忘；虽然当代人抽取地下水的速度远快于其补充的速度，但由于地下水储量丰富，在相当长的时间里，即使地下水位一直缓慢下降，也还不至于达到无以为继的地步。因此，存量变化缓慢所产生的时间滞后，让人们有了一定的余地去调整、尝试一些做法，并根据反馈来修订那些不奏效的政策。</p>\n</blockquote>\n<blockquote>\n<p>如果你对存量的变化速度有正确的认知，你就不会“拔苗助长”，期待事物变化的速度超出其特定规律；同时，你也不会过早地放弃，因为你知道一项措施要想见到成效，也需要时间；此外，你也可以更好地把握系统动量所展现的机会，“顺势而为”，就像一个高超的柔道选手善于利用对手的力量那样，聪明地实现自己的目标。</p>\n</blockquote>\n<blockquote>\n<p>对于存量在系统中所起的作用，还有一个更为重要的原则，那就是：由于存量的存在，流入量和流出量可以相互独立，并在一定时期内不必保持平衡或一致。这一原则可以引导我们直接了解反馈的概念</p>\n</blockquote>\n"},{"title":"《远见：如何规划职业生涯三大阶段》","date":"2019-11-19T16:00:00.000Z","_content":"\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/11/19/6mHGEBfQMi7ShR4.jpg\" width = \"300\" height=\"400\" alt=\"书的封面\">\n</div>\n\n> **我们需要一种包容了生活中所有方面的工作哲学，它能够指导我们如何保持进取之心并追求成功，同时不牺牲家庭、朋友、健康、理想等珍贵的东西**\n\n#### 职业生涯的持续时间长得惊人，包括了三个截然不同的阶段\n> 职业生涯的持续时间比人们想象的长得多，至少有45年之久，而且未来很可能会进一步延长。对大部分人而言，40岁之后的工作年数要比之前的更多。职业生涯由三个主要阶段组成，分别持续大约15年时间。这三个阶段之间紧密关联，你在一个阶段的所作所为既可能为接下来的阶段创造机会，也可能带来恶果。你会在第2章中详细了解这些职业阶段。\n\n#### 第一阶段\n> 第一阶段是强势开局的时候。你在职业上的努力必须着重于为前方的漫长道路挖掘和装备自己。你的学习曲线要比职位、职称更加重要。在这一阶段，要为职业生涯打好基础并建立起良好的早期习惯。\n\n#### 第二阶段\n> 第二阶段是聚焦长板的时候。该阶段的首要目标是寻找自己的甜蜜区，即你所擅长的、所热爱的和这个世界所需要的这三者之间的交集。这个时候你要展现自我，让自己鹤立鸡群，想方设法平稳地走在那条收获最大的职场路径上。你要专注于自己的长板，且大可忽略自己的短板。\n\n#### 第三阶段\n> 第三阶段致力于实现持续的影响力，以及寻找一条可以稳定延续到60多岁甚至70多岁的新的可持续职业道路。你要在第三阶段完成三个关键任务：完成继任计划、保持关联性，以及为自己点燃一团新的职业之火。\n\n#### 职场燃料很重要，因为职业生涯的基础决定结果\n>为了推动自己走完这段漫长的旅程，你需要大量的职场燃料。这种燃料有三个主要来源：可迁移技能、有意义的经验和持久的关系。随着全球的就业市场不断以不可预测的方式转变，如果没有这样的职场燃料，你就有可能变得不堪一击。职场燃料对于整个职业生涯的各个时期都至关重要。在第一阶段，你需要积累它；在第二阶段，你需要利用它；而在第三阶段，你需要更新和维护它。\n\n#### 职业生涯需要通过对时间的巧妙投资来构建\n> 职场燃料的可持续供应需要耐心和坚持。有人之所以能成为精通某一方面的专家或者“大师”，不仅是因为有天赋，而且是因为数千小时的学习、体验和实践。你在工作和生活中如何投资时间对你的成功和幸福有深远的影响。\n\n#### 职业生涯并不是以线性或者可预测的方式发展的\n> 你必须时刻保持探索和学习的状态。职业机遇会变化，你的人生目标也会变化。当你遇到了新的路径和机会时，要保持冷静，有策略地思考。时刻准备好迎接无法避免的变化，并让自己的职业策略随机应变。成功的职业生涯既需要自我的规划，也需要良好的运气。自我的规划之所以必不可少，是因为它能让你抓住机遇。\n\n#### 职业生涯远不止于一份工作，而是生活的一大部分\n> 这就是为什么你需要一个职业规划的框架的原因，它不仅可以用来甄选工作，而且是一种让职业生涯融入更广阔的人生追求里的整体方法，那些人生追求包括你的亲子关系、跨国工作、未来发展以及终极幸福。你欠自己一份职业策略和职业规划，而且制订它们的人选是毋庸置疑的。在这星球上的70亿人中，只有一个人能够陪伴你走完整个职业生涯，那就是你自己。\n\n","source":"_posts/read/远见：如何规划职业生涯三大阶段.md","raw":"---\ntitle: 《远见：如何规划职业生涯三大阶段》\ncategories: 读书\ndate: 2019-11-20\n---\n\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/11/19/6mHGEBfQMi7ShR4.jpg\" width = \"300\" height=\"400\" alt=\"书的封面\">\n</div>\n\n> **我们需要一种包容了生活中所有方面的工作哲学，它能够指导我们如何保持进取之心并追求成功，同时不牺牲家庭、朋友、健康、理想等珍贵的东西**\n\n#### 职业生涯的持续时间长得惊人，包括了三个截然不同的阶段\n> 职业生涯的持续时间比人们想象的长得多，至少有45年之久，而且未来很可能会进一步延长。对大部分人而言，40岁之后的工作年数要比之前的更多。职业生涯由三个主要阶段组成，分别持续大约15年时间。这三个阶段之间紧密关联，你在一个阶段的所作所为既可能为接下来的阶段创造机会，也可能带来恶果。你会在第2章中详细了解这些职业阶段。\n\n#### 第一阶段\n> 第一阶段是强势开局的时候。你在职业上的努力必须着重于为前方的漫长道路挖掘和装备自己。你的学习曲线要比职位、职称更加重要。在这一阶段，要为职业生涯打好基础并建立起良好的早期习惯。\n\n#### 第二阶段\n> 第二阶段是聚焦长板的时候。该阶段的首要目标是寻找自己的甜蜜区，即你所擅长的、所热爱的和这个世界所需要的这三者之间的交集。这个时候你要展现自我，让自己鹤立鸡群，想方设法平稳地走在那条收获最大的职场路径上。你要专注于自己的长板，且大可忽略自己的短板。\n\n#### 第三阶段\n> 第三阶段致力于实现持续的影响力，以及寻找一条可以稳定延续到60多岁甚至70多岁的新的可持续职业道路。你要在第三阶段完成三个关键任务：完成继任计划、保持关联性，以及为自己点燃一团新的职业之火。\n\n#### 职场燃料很重要，因为职业生涯的基础决定结果\n>为了推动自己走完这段漫长的旅程，你需要大量的职场燃料。这种燃料有三个主要来源：可迁移技能、有意义的经验和持久的关系。随着全球的就业市场不断以不可预测的方式转变，如果没有这样的职场燃料，你就有可能变得不堪一击。职场燃料对于整个职业生涯的各个时期都至关重要。在第一阶段，你需要积累它；在第二阶段，你需要利用它；而在第三阶段，你需要更新和维护它。\n\n#### 职业生涯需要通过对时间的巧妙投资来构建\n> 职场燃料的可持续供应需要耐心和坚持。有人之所以能成为精通某一方面的专家或者“大师”，不仅是因为有天赋，而且是因为数千小时的学习、体验和实践。你在工作和生活中如何投资时间对你的成功和幸福有深远的影响。\n\n#### 职业生涯并不是以线性或者可预测的方式发展的\n> 你必须时刻保持探索和学习的状态。职业机遇会变化，你的人生目标也会变化。当你遇到了新的路径和机会时，要保持冷静，有策略地思考。时刻准备好迎接无法避免的变化，并让自己的职业策略随机应变。成功的职业生涯既需要自我的规划，也需要良好的运气。自我的规划之所以必不可少，是因为它能让你抓住机遇。\n\n#### 职业生涯远不止于一份工作，而是生活的一大部分\n> 这就是为什么你需要一个职业规划的框架的原因，它不仅可以用来甄选工作，而且是一种让职业生涯融入更广阔的人生追求里的整体方法，那些人生追求包括你的亲子关系、跨国工作、未来发展以及终极幸福。你欠自己一份职业策略和职业规划，而且制订它们的人选是毋庸置疑的。在这星球上的70亿人中，只有一个人能够陪伴你走完整个职业生涯，那就是你自己。\n\n","slug":"read/远见：如何规划职业生涯三大阶段","published":1,"updated":"2020-01-01T08:16:41.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44v8y002zhcr7tb1twxag","content":"<div align=\"center\"><br><img src=\"https://i.loli.net/2019/11/19/6mHGEBfQMi7ShR4.jpg\" width=\"300\" height=\"400\" alt=\"书的封面\"><br></div>\n\n<blockquote>\n<p><strong>我们需要一种包容了生活中所有方面的工作哲学，它能够指导我们如何保持进取之心并追求成功，同时不牺牲家庭、朋友、健康、理想等珍贵的东西</strong></p>\n</blockquote>\n<h4 id=\"职业生涯的持续时间长得惊人，包括了三个截然不同的阶段\"><a href=\"#职业生涯的持续时间长得惊人，包括了三个截然不同的阶段\" class=\"headerlink\" title=\"职业生涯的持续时间长得惊人，包括了三个截然不同的阶段\"></a>职业生涯的持续时间长得惊人，包括了三个截然不同的阶段</h4><blockquote>\n<p>职业生涯的持续时间比人们想象的长得多，至少有45年之久，而且未来很可能会进一步延长。对大部分人而言，40岁之后的工作年数要比之前的更多。职业生涯由三个主要阶段组成，分别持续大约15年时间。这三个阶段之间紧密关联，你在一个阶段的所作所为既可能为接下来的阶段创造机会，也可能带来恶果。你会在第2章中详细了解这些职业阶段。</p>\n</blockquote>\n<h4 id=\"第一阶段\"><a href=\"#第一阶段\" class=\"headerlink\" title=\"第一阶段\"></a>第一阶段</h4><blockquote>\n<p>第一阶段是强势开局的时候。你在职业上的努力必须着重于为前方的漫长道路挖掘和装备自己。你的学习曲线要比职位、职称更加重要。在这一阶段，要为职业生涯打好基础并建立起良好的早期习惯。</p>\n</blockquote>\n<h4 id=\"第二阶段\"><a href=\"#第二阶段\" class=\"headerlink\" title=\"第二阶段\"></a>第二阶段</h4><blockquote>\n<p>第二阶段是聚焦长板的时候。该阶段的首要目标是寻找自己的甜蜜区，即你所擅长的、所热爱的和这个世界所需要的这三者之间的交集。这个时候你要展现自我，让自己鹤立鸡群，想方设法平稳地走在那条收获最大的职场路径上。你要专注于自己的长板，且大可忽略自己的短板。</p>\n</blockquote>\n<h4 id=\"第三阶段\"><a href=\"#第三阶段\" class=\"headerlink\" title=\"第三阶段\"></a>第三阶段</h4><blockquote>\n<p>第三阶段致力于实现持续的影响力，以及寻找一条可以稳定延续到60多岁甚至70多岁的新的可持续职业道路。你要在第三阶段完成三个关键任务：完成继任计划、保持关联性，以及为自己点燃一团新的职业之火。</p>\n</blockquote>\n<h4 id=\"职场燃料很重要，因为职业生涯的基础决定结果\"><a href=\"#职场燃料很重要，因为职业生涯的基础决定结果\" class=\"headerlink\" title=\"职场燃料很重要，因为职业生涯的基础决定结果\"></a>职场燃料很重要，因为职业生涯的基础决定结果</h4><blockquote>\n<p>为了推动自己走完这段漫长的旅程，你需要大量的职场燃料。这种燃料有三个主要来源：可迁移技能、有意义的经验和持久的关系。随着全球的就业市场不断以不可预测的方式转变，如果没有这样的职场燃料，你就有可能变得不堪一击。职场燃料对于整个职业生涯的各个时期都至关重要。在第一阶段，你需要积累它；在第二阶段，你需要利用它；而在第三阶段，你需要更新和维护它。</p>\n</blockquote>\n<h4 id=\"职业生涯需要通过对时间的巧妙投资来构建\"><a href=\"#职业生涯需要通过对时间的巧妙投资来构建\" class=\"headerlink\" title=\"职业生涯需要通过对时间的巧妙投资来构建\"></a>职业生涯需要通过对时间的巧妙投资来构建</h4><blockquote>\n<p>职场燃料的可持续供应需要耐心和坚持。有人之所以能成为精通某一方面的专家或者“大师”，不仅是因为有天赋，而且是因为数千小时的学习、体验和实践。你在工作和生活中如何投资时间对你的成功和幸福有深远的影响。</p>\n</blockquote>\n<h4 id=\"职业生涯并不是以线性或者可预测的方式发展的\"><a href=\"#职业生涯并不是以线性或者可预测的方式发展的\" class=\"headerlink\" title=\"职业生涯并不是以线性或者可预测的方式发展的\"></a>职业生涯并不是以线性或者可预测的方式发展的</h4><blockquote>\n<p>你必须时刻保持探索和学习的状态。职业机遇会变化，你的人生目标也会变化。当你遇到了新的路径和机会时，要保持冷静，有策略地思考。时刻准备好迎接无法避免的变化，并让自己的职业策略随机应变。成功的职业生涯既需要自我的规划，也需要良好的运气。自我的规划之所以必不可少，是因为它能让你抓住机遇。</p>\n</blockquote>\n<h4 id=\"职业生涯远不止于一份工作，而是生活的一大部分\"><a href=\"#职业生涯远不止于一份工作，而是生活的一大部分\" class=\"headerlink\" title=\"职业生涯远不止于一份工作，而是生活的一大部分\"></a>职业生涯远不止于一份工作，而是生活的一大部分</h4><blockquote>\n<p>这就是为什么你需要一个职业规划的框架的原因，它不仅可以用来甄选工作，而且是一种让职业生涯融入更广阔的人生追求里的整体方法，那些人生追求包括你的亲子关系、跨国工作、未来发展以及终极幸福。你欠自己一份职业策略和职业规划，而且制订它们的人选是毋庸置疑的。在这星球上的70亿人中，只有一个人能够陪伴你走完整个职业生涯，那就是你自己。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<div align=\"center\"><br><img src=\"https://i.loli.net/2019/11/19/6mHGEBfQMi7ShR4.jpg\" width=\"300\" height=\"400\" alt=\"书的封面\"><br></div>\n\n<blockquote>\n<p><strong>我们需要一种包容了生活中所有方面的工作哲学，它能够指导我们如何保持进取之心并追求成功，同时不牺牲家庭、朋友、健康、理想等珍贵的东西</strong></p>\n</blockquote>\n<h4 id=\"职业生涯的持续时间长得惊人，包括了三个截然不同的阶段\"><a href=\"#职业生涯的持续时间长得惊人，包括了三个截然不同的阶段\" class=\"headerlink\" title=\"职业生涯的持续时间长得惊人，包括了三个截然不同的阶段\"></a>职业生涯的持续时间长得惊人，包括了三个截然不同的阶段</h4><blockquote>\n<p>职业生涯的持续时间比人们想象的长得多，至少有45年之久，而且未来很可能会进一步延长。对大部分人而言，40岁之后的工作年数要比之前的更多。职业生涯由三个主要阶段组成，分别持续大约15年时间。这三个阶段之间紧密关联，你在一个阶段的所作所为既可能为接下来的阶段创造机会，也可能带来恶果。你会在第2章中详细了解这些职业阶段。</p>\n</blockquote>\n<h4 id=\"第一阶段\"><a href=\"#第一阶段\" class=\"headerlink\" title=\"第一阶段\"></a>第一阶段</h4><blockquote>\n<p>第一阶段是强势开局的时候。你在职业上的努力必须着重于为前方的漫长道路挖掘和装备自己。你的学习曲线要比职位、职称更加重要。在这一阶段，要为职业生涯打好基础并建立起良好的早期习惯。</p>\n</blockquote>\n<h4 id=\"第二阶段\"><a href=\"#第二阶段\" class=\"headerlink\" title=\"第二阶段\"></a>第二阶段</h4><blockquote>\n<p>第二阶段是聚焦长板的时候。该阶段的首要目标是寻找自己的甜蜜区，即你所擅长的、所热爱的和这个世界所需要的这三者之间的交集。这个时候你要展现自我，让自己鹤立鸡群，想方设法平稳地走在那条收获最大的职场路径上。你要专注于自己的长板，且大可忽略自己的短板。</p>\n</blockquote>\n<h4 id=\"第三阶段\"><a href=\"#第三阶段\" class=\"headerlink\" title=\"第三阶段\"></a>第三阶段</h4><blockquote>\n<p>第三阶段致力于实现持续的影响力，以及寻找一条可以稳定延续到60多岁甚至70多岁的新的可持续职业道路。你要在第三阶段完成三个关键任务：完成继任计划、保持关联性，以及为自己点燃一团新的职业之火。</p>\n</blockquote>\n<h4 id=\"职场燃料很重要，因为职业生涯的基础决定结果\"><a href=\"#职场燃料很重要，因为职业生涯的基础决定结果\" class=\"headerlink\" title=\"职场燃料很重要，因为职业生涯的基础决定结果\"></a>职场燃料很重要，因为职业生涯的基础决定结果</h4><blockquote>\n<p>为了推动自己走完这段漫长的旅程，你需要大量的职场燃料。这种燃料有三个主要来源：可迁移技能、有意义的经验和持久的关系。随着全球的就业市场不断以不可预测的方式转变，如果没有这样的职场燃料，你就有可能变得不堪一击。职场燃料对于整个职业生涯的各个时期都至关重要。在第一阶段，你需要积累它；在第二阶段，你需要利用它；而在第三阶段，你需要更新和维护它。</p>\n</blockquote>\n<h4 id=\"职业生涯需要通过对时间的巧妙投资来构建\"><a href=\"#职业生涯需要通过对时间的巧妙投资来构建\" class=\"headerlink\" title=\"职业生涯需要通过对时间的巧妙投资来构建\"></a>职业生涯需要通过对时间的巧妙投资来构建</h4><blockquote>\n<p>职场燃料的可持续供应需要耐心和坚持。有人之所以能成为精通某一方面的专家或者“大师”，不仅是因为有天赋，而且是因为数千小时的学习、体验和实践。你在工作和生活中如何投资时间对你的成功和幸福有深远的影响。</p>\n</blockquote>\n<h4 id=\"职业生涯并不是以线性或者可预测的方式发展的\"><a href=\"#职业生涯并不是以线性或者可预测的方式发展的\" class=\"headerlink\" title=\"职业生涯并不是以线性或者可预测的方式发展的\"></a>职业生涯并不是以线性或者可预测的方式发展的</h4><blockquote>\n<p>你必须时刻保持探索和学习的状态。职业机遇会变化，你的人生目标也会变化。当你遇到了新的路径和机会时，要保持冷静，有策略地思考。时刻准备好迎接无法避免的变化，并让自己的职业策略随机应变。成功的职业生涯既需要自我的规划，也需要良好的运气。自我的规划之所以必不可少，是因为它能让你抓住机遇。</p>\n</blockquote>\n<h4 id=\"职业生涯远不止于一份工作，而是生活的一大部分\"><a href=\"#职业生涯远不止于一份工作，而是生活的一大部分\" class=\"headerlink\" title=\"职业生涯远不止于一份工作，而是生活的一大部分\"></a>职业生涯远不止于一份工作，而是生活的一大部分</h4><blockquote>\n<p>这就是为什么你需要一个职业规划的框架的原因，它不仅可以用来甄选工作，而且是一种让职业生涯融入更广阔的人生追求里的整体方法，那些人生追求包括你的亲子关系、跨国工作、未来发展以及终极幸福。你欠自己一份职业策略和职业规划，而且制订它们的人选是毋庸置疑的。在这星球上的70亿人中，只有一个人能够陪伴你走完整个职业生涯，那就是你自己。</p>\n</blockquote>\n"},{"title":"分析IOS上APP的崩溃堆栈","date":"2019-07-24T16:00:00.000Z","_content":"\n### 崩溃堆栈的几个来源\n---\n\n#### 真机上APP崩溃时，操作系统收集到的\n```\n0   libsystem_kernel.dylib        \t0x00000001a24b70f4 0x1a249f000 + 98548\n1   libsystem_kernel.dylib        \t0x00000001a24b65a0 0x1a249f000 + 95648\n2   CoreFoundation                \t0x00000001a28b6a10 0x1a280d000 + 694800\n3   CoreFoundation                \t0x00000001a28b1920 0x1a280d000 + 674080\n4   CoreFoundation                \t0x00000001a28b10b0 0x1a280d000 + 671920\n5   GraphicsServices              \t0x00000001a4ab179c 0x1a4aa7000 + 42908\n6   UIKitCore                     \t0x00000001cf0e0978 0x1ce824000 + 9161080\n7   SimpleGame iOS                \t0x00000001046d1340 0x1045ec000 + 938816\n8   libdyld.dylib                 \t0x00000001a23768e0 0x1a2375000 + 6368\n```\n上面是IOS操作系统记录的原始崩溃堆栈信息，此时还未经由符号表**符号化**。看到的都是十六进制的内存地址，如果想要找到崩溃的地方对应于**哪个文件、哪个函数、哪一行**，就需要**符号化**才行\n\n*分析堆栈格式：*\n* 第一列：栈帧\n* 第二列：二进制的应用程序名或者库名\n* 第三列：被调用的函数的地址\n* 第四列：是以**基址+偏移量**的形式表示的，前半部分指向某个源文件，后半部分指向这个源文件的某一行。\n\n#### bugly上收集的\n\n下面是bugly收集的原始堆栈信息，同样未经未**符号化**。\n\n```\n0 SimpleGame iOS\t0x00000001050ae238 __cxa_throw + 8825280\n1 SimpleGame iOS\t0x0000000105095e34 __cxa_throw + 8725948\n2 CoreFoundation\t0x0000000181dbcc3c 0x0000000181ce5000 + 883772\n3 CoreFoundation\t0x0000000181dbc1b8 0x0000000181ce5000 + 881080\n4 CoreFoundation\t0x0000000181dbbf14 0x0000000181ce5000 + 880404\n5 CoreFoundation\t0x0000000181e3984c 0x0000000181ce5000 + 1394764\n6 CoreFoundation\t0x0000000181cf2f38 _CFXNotificationPost + 384\n7 Foundation\t        0x0000000182763bbc 0x000000018275d000 + 27580\n8 UIKit\t                0x000000018bbfe8a4 0x000000018b9f0000 + 2156708\n9 UIKit\t                0x000000018c5f854c 0x000000018b9f0000 + 12617036\n10 UIKit\t        0x000000018bbf7df4 0x000000018b9f0000 + 2129396\n11 UIKit\t        0x000000018c5f8230 0x000000018b9f0000 + 12616240\n12 UIKit\t        0x000000018ba31730 0x000000018b9f0000 + 268080\n13 UIKit\t        0x000000018ba310b8 0x000000018b9f0000 + 266424\n14 UIKit\t        0x000000018bb1afcc 0x000000018b9f0000 + 1224652\n15 QuartzCore\t        0x0000000185fc1504 0x0000000185e8f000 + 1254660\n16 libdispatch.dylib\t0x000000018171ca60 0x000000018171b000 + 6752\n17 libdispatch.dylib\t0x000000018175dd80 0x000000018171b000 + 273792\n18 CoreFoundation\t0x0000000181dd3070 0x0000000181ce5000 + 974960\n19 CoreFoundation\t0x0000000181dd0bc8 0x0000000181ce5000 + 965576\n20 CoreFoundation\t0x0000000181cf0da8 CFRunLoopRunSpecific + 552\n21 GraphicsServices\t0x0000000183cd5020 GSEventRunModal + 100\n22 UIKit\t        0x000000018bd0d758 UIApplicationMain + 236\n23 SimpleGame iOS\t0x00000001048f960c __cxa_throw + 744852\n24 libdyld.dylib\t0x0000000181781fc0 0x0000000181781000 + 4032\n```\n\n下面是上面的原始堆栈信息经过**符号化**后的样子。\n\n```\n0 SimpleGame iOS\tcocos2d::GLView::getScaleX() const\n1 SimpleGame iOS\t-[CCEAGLView onUIKeyboardNotification:] + 656\n2 CoreFoundation\t___CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + 20\n3 CoreFoundation\t__CFXRegistrationPost + 428\n4 CoreFoundation\t____CFXNotificationPost_block_invoke + 216\n5 CoreFoundation\t-[_CFXNotificationRegistrar find:object:observer:enumerator:] + 1408\n6 CoreFoundation\t_CFXNotificationPost + 384\n7 Foundation\t        -[NSNotificationCenter postNotificationName:object:userInfo:] + 68\n8 UIKit\t                -[UIInputWindowController postEndNotifications:withInfo:] + 1628\n9 UIKit\t                ___77-[UIInputWindowController moveFromPlacement:toPlacement:starting:completion:]_block_invoke.1099 + 100\n10 UIKit\t        -[UIInputWindowController performWithSafeTransitionFrames:] + 220\n11 UIKit\t        ___77-[UIInputWindowController moveFromPlacement:toPlacement:starting:completion:]_block_invoke.1090 + 928\n12 UIKit\t        -[UIViewAnimationBlockDelegate _didEndBlockAnimation:finished:context:] + 760\n13 UIKit\t        -[UIViewAnimationState sendDelegateAnimationDidStop:finished:] + 312\n14 UIKit\t        -[UIViewAnimationState animationDidStop:finished:] + 296\n15 QuartzCore\t        CA::Layer::run_animation_callbacks(void*) + 284\n16 libdispatch.dylib\t__dispatch_client_callout + 16\n17 libdispatch.dylib\t__dispatch_main_queue_callback_4CF$VARIANT$armv81 + 964\n18 CoreFoundation\t___CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__ + 12\n19 CoreFoundation\t___CFRunLoopRun + 2272\n20 CoreFoundation\tCFRunLoopRunSpecific + 552\n21 GraphicsServices\tGSEventRunModal + 100\n22 UIKit\t        UIApplicationMain + 236\n23 SimpleGame iOS\tmain (main.m:6)\n24 libdyld.dylib\t_start + 4\n```\n\n#### 一些列外情况\n\n下面这样的：\n```\n0 SimpleGame iOS\t0x0000000103469820 __cxa_throw + 6463400\n1 SimpleGame iOS\t0x00000001034697b8 __cxa_throw + 6463296\n2 SimpleGame iOS\t0x00000001033e6898 __cxa_throw + 5926944\n3 SimpleGame iOS\t0x0000000103427c1c __cxa_throw + 6194084\n4 SimpleGame iOS\t0x00000001033e6c6c __cxa_throw + 5927924\n5 SimpleGame iOS\t0x00000001033e62bc __cxa_throw + 5925444\n6 SimpleGame iOS\t0x00000001033e6f40 __cxa_throw + 5928648\n7 SimpleGame iOS\t0x000000010344eb38 __cxa_throw + 6353600\n8 SimpleGame iOS\t0x00000001033b97c8 __cxa_throw + 5742416\n9 SimpleGame iOS\t0x00000001033b98c0 __cxa_throw + 5742664\n10 SimpleGame iOS\t0x0000000103382ef8 __cxa_throw + 5518976\n11 SimpleGame iOS\t0x00000001034fb724 __cxa_throw + 7061164\n12 SimpleGame iOS\t0x00000001034fa994 __cxa_throw + 7057692\n13 SimpleGame iOS\t0x00000001034fdbd0 __cxa_throw + 7070552\n14 SimpleGame iOS\t0x00000001034fd924 __cxa_throw + 7069868\n15 SimpleGame iOS\t0x000000010355e300 __cxa_throw + 7465608\n16 SimpleGame iOS\t0x0000000103581a0c __cxa_throw + 7610772\n17 SimpleGame iOS\t0x0000000103583478 __cxa_throw + 7617536\n18 QuartzCore\t        0x00000001fcf18f90 0x00000001fcf08000 + 69520\n19 QuartzCore\t        0x00000001fcfe2b10 0x00000001fcf08000 + 895760\n20 CoreFoundation\t0x00000001f8afca8c 0x00000001f8a79000 + 539276\n21 CoreFoundation\t0x00000001f8b23690 0x00000001f8a79000 + 698000\n22 CoreFoundation\t0x00000001f8b22ddc 0x00000001f8a79000 + 695772\n23 CoreFoundation\t0x00000001f8b1dc00 0x00000001f8a79000 + 674816\n24 CoreFoundation\t0x00000001f8b1d0b0 CFRunLoopRunSpecific + 436\n25 GraphicsServices\t0x00000001fad1d79c GSEventRunModal + 104\n26 UIKitCore\t        0x0000000225389978 UIApplicationMain + 212\n27 SimpleGame iOS\t0x0000000102ef560c __cxa_throw + 744852\n28 libdyld.dylib\t0x00000001f85e28e0 0x00000001f85e1000 + 6368\n```\n符号化后，变成这样了：只有部分栈帧被符号化成有用的信息，但还有一部分和符号化之前的形式差不多！\n```\n0 SimpleGame iOS\t__cxa_throw + 6463400\n1 SimpleGame iOS\t__cxa_throw + 6463296\n2 SimpleGame iOS\t__cxa_throw + 5926944\n3 SimpleGame iOS\t__cxa_throw + 6194084\n4 SimpleGame iOS\t__cxa_throw + 5927924\n5 SimpleGame iOS\t__cxa_throw + 5925444\n6 SimpleGame iOS\t__cxa_throw + 5928648\n7 SimpleGame iOS\t__cxa_throw + 6353600\n8 SimpleGame iOS\t__cxa_throw + 5742416\n9 SimpleGame iOS\t__cxa_throw + 5742664\n10 SimpleGame iOS\t__cxa_throw + 5518976\n11 SimpleGame iOS\t__cxa_throw + 7061164\n12 SimpleGame iOS\t__cxa_throw + 7057692\n13 SimpleGame iOS\t__cxa_throw + 7070552\n14 SimpleGame iOS\t__cxa_throw + 7069868\n15 SimpleGame iOS\t__cxa_throw + 7465608\n16 SimpleGame iOS\t__cxa_throw + 7610772\n17 SimpleGame iOS\t__cxa_throw + 7617536\n18 QuartzCore\t\tCA::Display::DisplayLink::dispatch_items(unsigned long long, unsigned long long, unsigned long long) + 636\n19 QuartzCore\t\tdisplay_timer_callback(__CFMachPort*, void*, long, void*) + 272\n20 CoreFoundation\t___CFMachPortPerform + 188\n21 CoreFoundation\t___CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__ + 56\n22 CoreFoundation\t___CFRunLoopDoSource1 + 440\n23 CoreFoundation\t___CFRunLoopRun + 2096\n24 CoreFoundation\tCFRunLoopRunSpecific + 436\n25 GraphicsServices\tGSEventRunModal + 104\n26 UIKitCore\t\tUIApplicationMain + 212\n27 SimpleGame iOS\t__cxa_throw + 744852\n28 libdyld.dylib\t_start + 4\n```\n\n### 疑惑\n---\n\n* 符号化后的堆栈信息依然带有`+ number`的形式，不清楚是什么意思。(行数应该以`main (main.m:6)`的形式标识的)\n* 某些堆栈经过符号化后，和未符号化的差不多，依然看不到有用的信息\n* 内存不足或者用户强制杀死app，bugly也会搜集信息吗？\n* 暂时先这样吧，后面有空有机会再填这些坑。。。\n\n*因为要查找线上IOS APP的一个崩溃问题，我查阅了很多相关的网页。发现一个现象：好多好多的中文内容其实都是雷同，甚至复制粘贴的。后来我又发现：尼玛，这些中文内容竟然还是翻译的同一篇英文文章！*\n\n### 参考\n* 最初的英文文章：https://www.raywenderlich.com/2805-demystifying-ios-application-crash-logs\n* 下面是雷同或者相似的中文文章：\n* https://www.jianshu.com/p/3261493e6d9e\n* https://www.jianshu.com/p/12a2402b29c2\n* https://blog.csdn.net/hello_hwc/article/details/80946318\n* https://www.jianshu.com/p/104c362189d8\n* https://www.jianshu.com/p/5efbb02ca6c3\n* https://blog.csdn.net/jasonblog/article/details/19031517\n* https://cloud.tencent.com/developer/article/1070400\n\n\n","source":"_posts/IOS/分析IOS上APP的崩溃堆栈.md","raw":"---\ntitle: 分析IOS上APP的崩溃堆栈\ncategories: IOS\ndate: 2019-07-25\n---\n\n### 崩溃堆栈的几个来源\n---\n\n#### 真机上APP崩溃时，操作系统收集到的\n```\n0   libsystem_kernel.dylib        \t0x00000001a24b70f4 0x1a249f000 + 98548\n1   libsystem_kernel.dylib        \t0x00000001a24b65a0 0x1a249f000 + 95648\n2   CoreFoundation                \t0x00000001a28b6a10 0x1a280d000 + 694800\n3   CoreFoundation                \t0x00000001a28b1920 0x1a280d000 + 674080\n4   CoreFoundation                \t0x00000001a28b10b0 0x1a280d000 + 671920\n5   GraphicsServices              \t0x00000001a4ab179c 0x1a4aa7000 + 42908\n6   UIKitCore                     \t0x00000001cf0e0978 0x1ce824000 + 9161080\n7   SimpleGame iOS                \t0x00000001046d1340 0x1045ec000 + 938816\n8   libdyld.dylib                 \t0x00000001a23768e0 0x1a2375000 + 6368\n```\n上面是IOS操作系统记录的原始崩溃堆栈信息，此时还未经由符号表**符号化**。看到的都是十六进制的内存地址，如果想要找到崩溃的地方对应于**哪个文件、哪个函数、哪一行**，就需要**符号化**才行\n\n*分析堆栈格式：*\n* 第一列：栈帧\n* 第二列：二进制的应用程序名或者库名\n* 第三列：被调用的函数的地址\n* 第四列：是以**基址+偏移量**的形式表示的，前半部分指向某个源文件，后半部分指向这个源文件的某一行。\n\n#### bugly上收集的\n\n下面是bugly收集的原始堆栈信息，同样未经未**符号化**。\n\n```\n0 SimpleGame iOS\t0x00000001050ae238 __cxa_throw + 8825280\n1 SimpleGame iOS\t0x0000000105095e34 __cxa_throw + 8725948\n2 CoreFoundation\t0x0000000181dbcc3c 0x0000000181ce5000 + 883772\n3 CoreFoundation\t0x0000000181dbc1b8 0x0000000181ce5000 + 881080\n4 CoreFoundation\t0x0000000181dbbf14 0x0000000181ce5000 + 880404\n5 CoreFoundation\t0x0000000181e3984c 0x0000000181ce5000 + 1394764\n6 CoreFoundation\t0x0000000181cf2f38 _CFXNotificationPost + 384\n7 Foundation\t        0x0000000182763bbc 0x000000018275d000 + 27580\n8 UIKit\t                0x000000018bbfe8a4 0x000000018b9f0000 + 2156708\n9 UIKit\t                0x000000018c5f854c 0x000000018b9f0000 + 12617036\n10 UIKit\t        0x000000018bbf7df4 0x000000018b9f0000 + 2129396\n11 UIKit\t        0x000000018c5f8230 0x000000018b9f0000 + 12616240\n12 UIKit\t        0x000000018ba31730 0x000000018b9f0000 + 268080\n13 UIKit\t        0x000000018ba310b8 0x000000018b9f0000 + 266424\n14 UIKit\t        0x000000018bb1afcc 0x000000018b9f0000 + 1224652\n15 QuartzCore\t        0x0000000185fc1504 0x0000000185e8f000 + 1254660\n16 libdispatch.dylib\t0x000000018171ca60 0x000000018171b000 + 6752\n17 libdispatch.dylib\t0x000000018175dd80 0x000000018171b000 + 273792\n18 CoreFoundation\t0x0000000181dd3070 0x0000000181ce5000 + 974960\n19 CoreFoundation\t0x0000000181dd0bc8 0x0000000181ce5000 + 965576\n20 CoreFoundation\t0x0000000181cf0da8 CFRunLoopRunSpecific + 552\n21 GraphicsServices\t0x0000000183cd5020 GSEventRunModal + 100\n22 UIKit\t        0x000000018bd0d758 UIApplicationMain + 236\n23 SimpleGame iOS\t0x00000001048f960c __cxa_throw + 744852\n24 libdyld.dylib\t0x0000000181781fc0 0x0000000181781000 + 4032\n```\n\n下面是上面的原始堆栈信息经过**符号化**后的样子。\n\n```\n0 SimpleGame iOS\tcocos2d::GLView::getScaleX() const\n1 SimpleGame iOS\t-[CCEAGLView onUIKeyboardNotification:] + 656\n2 CoreFoundation\t___CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + 20\n3 CoreFoundation\t__CFXRegistrationPost + 428\n4 CoreFoundation\t____CFXNotificationPost_block_invoke + 216\n5 CoreFoundation\t-[_CFXNotificationRegistrar find:object:observer:enumerator:] + 1408\n6 CoreFoundation\t_CFXNotificationPost + 384\n7 Foundation\t        -[NSNotificationCenter postNotificationName:object:userInfo:] + 68\n8 UIKit\t                -[UIInputWindowController postEndNotifications:withInfo:] + 1628\n9 UIKit\t                ___77-[UIInputWindowController moveFromPlacement:toPlacement:starting:completion:]_block_invoke.1099 + 100\n10 UIKit\t        -[UIInputWindowController performWithSafeTransitionFrames:] + 220\n11 UIKit\t        ___77-[UIInputWindowController moveFromPlacement:toPlacement:starting:completion:]_block_invoke.1090 + 928\n12 UIKit\t        -[UIViewAnimationBlockDelegate _didEndBlockAnimation:finished:context:] + 760\n13 UIKit\t        -[UIViewAnimationState sendDelegateAnimationDidStop:finished:] + 312\n14 UIKit\t        -[UIViewAnimationState animationDidStop:finished:] + 296\n15 QuartzCore\t        CA::Layer::run_animation_callbacks(void*) + 284\n16 libdispatch.dylib\t__dispatch_client_callout + 16\n17 libdispatch.dylib\t__dispatch_main_queue_callback_4CF$VARIANT$armv81 + 964\n18 CoreFoundation\t___CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__ + 12\n19 CoreFoundation\t___CFRunLoopRun + 2272\n20 CoreFoundation\tCFRunLoopRunSpecific + 552\n21 GraphicsServices\tGSEventRunModal + 100\n22 UIKit\t        UIApplicationMain + 236\n23 SimpleGame iOS\tmain (main.m:6)\n24 libdyld.dylib\t_start + 4\n```\n\n#### 一些列外情况\n\n下面这样的：\n```\n0 SimpleGame iOS\t0x0000000103469820 __cxa_throw + 6463400\n1 SimpleGame iOS\t0x00000001034697b8 __cxa_throw + 6463296\n2 SimpleGame iOS\t0x00000001033e6898 __cxa_throw + 5926944\n3 SimpleGame iOS\t0x0000000103427c1c __cxa_throw + 6194084\n4 SimpleGame iOS\t0x00000001033e6c6c __cxa_throw + 5927924\n5 SimpleGame iOS\t0x00000001033e62bc __cxa_throw + 5925444\n6 SimpleGame iOS\t0x00000001033e6f40 __cxa_throw + 5928648\n7 SimpleGame iOS\t0x000000010344eb38 __cxa_throw + 6353600\n8 SimpleGame iOS\t0x00000001033b97c8 __cxa_throw + 5742416\n9 SimpleGame iOS\t0x00000001033b98c0 __cxa_throw + 5742664\n10 SimpleGame iOS\t0x0000000103382ef8 __cxa_throw + 5518976\n11 SimpleGame iOS\t0x00000001034fb724 __cxa_throw + 7061164\n12 SimpleGame iOS\t0x00000001034fa994 __cxa_throw + 7057692\n13 SimpleGame iOS\t0x00000001034fdbd0 __cxa_throw + 7070552\n14 SimpleGame iOS\t0x00000001034fd924 __cxa_throw + 7069868\n15 SimpleGame iOS\t0x000000010355e300 __cxa_throw + 7465608\n16 SimpleGame iOS\t0x0000000103581a0c __cxa_throw + 7610772\n17 SimpleGame iOS\t0x0000000103583478 __cxa_throw + 7617536\n18 QuartzCore\t        0x00000001fcf18f90 0x00000001fcf08000 + 69520\n19 QuartzCore\t        0x00000001fcfe2b10 0x00000001fcf08000 + 895760\n20 CoreFoundation\t0x00000001f8afca8c 0x00000001f8a79000 + 539276\n21 CoreFoundation\t0x00000001f8b23690 0x00000001f8a79000 + 698000\n22 CoreFoundation\t0x00000001f8b22ddc 0x00000001f8a79000 + 695772\n23 CoreFoundation\t0x00000001f8b1dc00 0x00000001f8a79000 + 674816\n24 CoreFoundation\t0x00000001f8b1d0b0 CFRunLoopRunSpecific + 436\n25 GraphicsServices\t0x00000001fad1d79c GSEventRunModal + 104\n26 UIKitCore\t        0x0000000225389978 UIApplicationMain + 212\n27 SimpleGame iOS\t0x0000000102ef560c __cxa_throw + 744852\n28 libdyld.dylib\t0x00000001f85e28e0 0x00000001f85e1000 + 6368\n```\n符号化后，变成这样了：只有部分栈帧被符号化成有用的信息，但还有一部分和符号化之前的形式差不多！\n```\n0 SimpleGame iOS\t__cxa_throw + 6463400\n1 SimpleGame iOS\t__cxa_throw + 6463296\n2 SimpleGame iOS\t__cxa_throw + 5926944\n3 SimpleGame iOS\t__cxa_throw + 6194084\n4 SimpleGame iOS\t__cxa_throw + 5927924\n5 SimpleGame iOS\t__cxa_throw + 5925444\n6 SimpleGame iOS\t__cxa_throw + 5928648\n7 SimpleGame iOS\t__cxa_throw + 6353600\n8 SimpleGame iOS\t__cxa_throw + 5742416\n9 SimpleGame iOS\t__cxa_throw + 5742664\n10 SimpleGame iOS\t__cxa_throw + 5518976\n11 SimpleGame iOS\t__cxa_throw + 7061164\n12 SimpleGame iOS\t__cxa_throw + 7057692\n13 SimpleGame iOS\t__cxa_throw + 7070552\n14 SimpleGame iOS\t__cxa_throw + 7069868\n15 SimpleGame iOS\t__cxa_throw + 7465608\n16 SimpleGame iOS\t__cxa_throw + 7610772\n17 SimpleGame iOS\t__cxa_throw + 7617536\n18 QuartzCore\t\tCA::Display::DisplayLink::dispatch_items(unsigned long long, unsigned long long, unsigned long long) + 636\n19 QuartzCore\t\tdisplay_timer_callback(__CFMachPort*, void*, long, void*) + 272\n20 CoreFoundation\t___CFMachPortPerform + 188\n21 CoreFoundation\t___CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__ + 56\n22 CoreFoundation\t___CFRunLoopDoSource1 + 440\n23 CoreFoundation\t___CFRunLoopRun + 2096\n24 CoreFoundation\tCFRunLoopRunSpecific + 436\n25 GraphicsServices\tGSEventRunModal + 104\n26 UIKitCore\t\tUIApplicationMain + 212\n27 SimpleGame iOS\t__cxa_throw + 744852\n28 libdyld.dylib\t_start + 4\n```\n\n### 疑惑\n---\n\n* 符号化后的堆栈信息依然带有`+ number`的形式，不清楚是什么意思。(行数应该以`main (main.m:6)`的形式标识的)\n* 某些堆栈经过符号化后，和未符号化的差不多，依然看不到有用的信息\n* 内存不足或者用户强制杀死app，bugly也会搜集信息吗？\n* 暂时先这样吧，后面有空有机会再填这些坑。。。\n\n*因为要查找线上IOS APP的一个崩溃问题，我查阅了很多相关的网页。发现一个现象：好多好多的中文内容其实都是雷同，甚至复制粘贴的。后来我又发现：尼玛，这些中文内容竟然还是翻译的同一篇英文文章！*\n\n### 参考\n* 最初的英文文章：https://www.raywenderlich.com/2805-demystifying-ios-application-crash-logs\n* 下面是雷同或者相似的中文文章：\n* https://www.jianshu.com/p/3261493e6d9e\n* https://www.jianshu.com/p/12a2402b29c2\n* https://blog.csdn.net/hello_hwc/article/details/80946318\n* https://www.jianshu.com/p/104c362189d8\n* https://www.jianshu.com/p/5efbb02ca6c3\n* https://blog.csdn.net/jasonblog/article/details/19031517\n* https://cloud.tencent.com/developer/article/1070400\n\n\n","slug":"IOS/分析IOS上APP的崩溃堆栈","published":1,"updated":"2019-07-25T10:24:16.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44vay0040hcr7djuiywnt","content":"<h3 id=\"崩溃堆栈的几个来源\"><a href=\"#崩溃堆栈的几个来源\" class=\"headerlink\" title=\"崩溃堆栈的几个来源\"></a>崩溃堆栈的几个来源</h3><hr>\n<h4 id=\"真机上APP崩溃时，操作系统收集到的\"><a href=\"#真机上APP崩溃时，操作系统收集到的\" class=\"headerlink\" title=\"真机上APP崩溃时，操作系统收集到的\"></a>真机上APP崩溃时，操作系统收集到的</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0   libsystem_kernel.dylib        \t0x00000001a24b70f4 0x1a249f000 + 98548</span><br><span class=\"line\">1   libsystem_kernel.dylib        \t0x00000001a24b65a0 0x1a249f000 + 95648</span><br><span class=\"line\">2   CoreFoundation                \t0x00000001a28b6a10 0x1a280d000 + 694800</span><br><span class=\"line\">3   CoreFoundation                \t0x00000001a28b1920 0x1a280d000 + 674080</span><br><span class=\"line\">4   CoreFoundation                \t0x00000001a28b10b0 0x1a280d000 + 671920</span><br><span class=\"line\">5   GraphicsServices              \t0x00000001a4ab179c 0x1a4aa7000 + 42908</span><br><span class=\"line\">6   UIKitCore                     \t0x00000001cf0e0978 0x1ce824000 + 9161080</span><br><span class=\"line\">7   SimpleGame iOS                \t0x00000001046d1340 0x1045ec000 + 938816</span><br><span class=\"line\">8   libdyld.dylib                 \t0x00000001a23768e0 0x1a2375000 + 6368</span><br></pre></td></tr></table></figure>\n<p>上面是IOS操作系统记录的原始崩溃堆栈信息，此时还未经由符号表<strong>符号化</strong>。看到的都是十六进制的内存地址，如果想要找到崩溃的地方对应于<strong>哪个文件、哪个函数、哪一行</strong>，就需要<strong>符号化</strong>才行</p>\n<p><em>分析堆栈格式：</em></p>\n<ul>\n<li>第一列：栈帧</li>\n<li>第二列：二进制的应用程序名或者库名</li>\n<li>第三列：被调用的函数的地址</li>\n<li>第四列：是以<strong>基址+偏移量</strong>的形式表示的，前半部分指向某个源文件，后半部分指向这个源文件的某一行。</li>\n</ul>\n<h4 id=\"bugly上收集的\"><a href=\"#bugly上收集的\" class=\"headerlink\" title=\"bugly上收集的\"></a>bugly上收集的</h4><p>下面是bugly收集的原始堆栈信息，同样未经未<strong>符号化</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 SimpleGame iOS\t0x00000001050ae238 __cxa_throw + 8825280</span><br><span class=\"line\">1 SimpleGame iOS\t0x0000000105095e34 __cxa_throw + 8725948</span><br><span class=\"line\">2 CoreFoundation\t0x0000000181dbcc3c 0x0000000181ce5000 + 883772</span><br><span class=\"line\">3 CoreFoundation\t0x0000000181dbc1b8 0x0000000181ce5000 + 881080</span><br><span class=\"line\">4 CoreFoundation\t0x0000000181dbbf14 0x0000000181ce5000 + 880404</span><br><span class=\"line\">5 CoreFoundation\t0x0000000181e3984c 0x0000000181ce5000 + 1394764</span><br><span class=\"line\">6 CoreFoundation\t0x0000000181cf2f38 _CFXNotificationPost + 384</span><br><span class=\"line\">7 Foundation\t        0x0000000182763bbc 0x000000018275d000 + 27580</span><br><span class=\"line\">8 UIKit\t                0x000000018bbfe8a4 0x000000018b9f0000 + 2156708</span><br><span class=\"line\">9 UIKit\t                0x000000018c5f854c 0x000000018b9f0000 + 12617036</span><br><span class=\"line\">10 UIKit\t        0x000000018bbf7df4 0x000000018b9f0000 + 2129396</span><br><span class=\"line\">11 UIKit\t        0x000000018c5f8230 0x000000018b9f0000 + 12616240</span><br><span class=\"line\">12 UIKit\t        0x000000018ba31730 0x000000018b9f0000 + 268080</span><br><span class=\"line\">13 UIKit\t        0x000000018ba310b8 0x000000018b9f0000 + 266424</span><br><span class=\"line\">14 UIKit\t        0x000000018bb1afcc 0x000000018b9f0000 + 1224652</span><br><span class=\"line\">15 QuartzCore\t        0x0000000185fc1504 0x0000000185e8f000 + 1254660</span><br><span class=\"line\">16 libdispatch.dylib\t0x000000018171ca60 0x000000018171b000 + 6752</span><br><span class=\"line\">17 libdispatch.dylib\t0x000000018175dd80 0x000000018171b000 + 273792</span><br><span class=\"line\">18 CoreFoundation\t0x0000000181dd3070 0x0000000181ce5000 + 974960</span><br><span class=\"line\">19 CoreFoundation\t0x0000000181dd0bc8 0x0000000181ce5000 + 965576</span><br><span class=\"line\">20 CoreFoundation\t0x0000000181cf0da8 CFRunLoopRunSpecific + 552</span><br><span class=\"line\">21 GraphicsServices\t0x0000000183cd5020 GSEventRunModal + 100</span><br><span class=\"line\">22 UIKit\t        0x000000018bd0d758 UIApplicationMain + 236</span><br><span class=\"line\">23 SimpleGame iOS\t0x00000001048f960c __cxa_throw + 744852</span><br><span class=\"line\">24 libdyld.dylib\t0x0000000181781fc0 0x0000000181781000 + 4032</span><br></pre></td></tr></table></figure>\n<p>下面是上面的原始堆栈信息经过<strong>符号化</strong>后的样子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 SimpleGame iOS\tcocos2d::GLView::getScaleX() const</span><br><span class=\"line\">1 SimpleGame iOS\t-[CCEAGLView onUIKeyboardNotification:] + 656</span><br><span class=\"line\">2 CoreFoundation\t___CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + 20</span><br><span class=\"line\">3 CoreFoundation\t__CFXRegistrationPost + 428</span><br><span class=\"line\">4 CoreFoundation\t____CFXNotificationPost_block_invoke + 216</span><br><span class=\"line\">5 CoreFoundation\t-[_CFXNotificationRegistrar find:object:observer:enumerator:] + 1408</span><br><span class=\"line\">6 CoreFoundation\t_CFXNotificationPost + 384</span><br><span class=\"line\">7 Foundation\t        -[NSNotificationCenter postNotificationName:object:userInfo:] + 68</span><br><span class=\"line\">8 UIKit\t                -[UIInputWindowController postEndNotifications:withInfo:] + 1628</span><br><span class=\"line\">9 UIKit\t                ___77-[UIInputWindowController moveFromPlacement:toPlacement:starting:completion:]_block_invoke.1099 + 100</span><br><span class=\"line\">10 UIKit\t        -[UIInputWindowController performWithSafeTransitionFrames:] + 220</span><br><span class=\"line\">11 UIKit\t        ___77-[UIInputWindowController moveFromPlacement:toPlacement:starting:completion:]_block_invoke.1090 + 928</span><br><span class=\"line\">12 UIKit\t        -[UIViewAnimationBlockDelegate _didEndBlockAnimation:finished:context:] + 760</span><br><span class=\"line\">13 UIKit\t        -[UIViewAnimationState sendDelegateAnimationDidStop:finished:] + 312</span><br><span class=\"line\">14 UIKit\t        -[UIViewAnimationState animationDidStop:finished:] + 296</span><br><span class=\"line\">15 QuartzCore\t        CA::Layer::run_animation_callbacks(void*) + 284</span><br><span class=\"line\">16 libdispatch.dylib\t__dispatch_client_callout + 16</span><br><span class=\"line\">17 libdispatch.dylib\t__dispatch_main_queue_callback_4CF$VARIANT$armv81 + 964</span><br><span class=\"line\">18 CoreFoundation\t___CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__ + 12</span><br><span class=\"line\">19 CoreFoundation\t___CFRunLoopRun + 2272</span><br><span class=\"line\">20 CoreFoundation\tCFRunLoopRunSpecific + 552</span><br><span class=\"line\">21 GraphicsServices\tGSEventRunModal + 100</span><br><span class=\"line\">22 UIKit\t        UIApplicationMain + 236</span><br><span class=\"line\">23 SimpleGame iOS\tmain (main.m:6)</span><br><span class=\"line\">24 libdyld.dylib\t_start + 4</span><br></pre></td></tr></table></figure>\n<h4 id=\"一些列外情况\"><a href=\"#一些列外情况\" class=\"headerlink\" title=\"一些列外情况\"></a>一些列外情况</h4><p>下面这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 SimpleGame iOS\t0x0000000103469820 __cxa_throw + 6463400</span><br><span class=\"line\">1 SimpleGame iOS\t0x00000001034697b8 __cxa_throw + 6463296</span><br><span class=\"line\">2 SimpleGame iOS\t0x00000001033e6898 __cxa_throw + 5926944</span><br><span class=\"line\">3 SimpleGame iOS\t0x0000000103427c1c __cxa_throw + 6194084</span><br><span class=\"line\">4 SimpleGame iOS\t0x00000001033e6c6c __cxa_throw + 5927924</span><br><span class=\"line\">5 SimpleGame iOS\t0x00000001033e62bc __cxa_throw + 5925444</span><br><span class=\"line\">6 SimpleGame iOS\t0x00000001033e6f40 __cxa_throw + 5928648</span><br><span class=\"line\">7 SimpleGame iOS\t0x000000010344eb38 __cxa_throw + 6353600</span><br><span class=\"line\">8 SimpleGame iOS\t0x00000001033b97c8 __cxa_throw + 5742416</span><br><span class=\"line\">9 SimpleGame iOS\t0x00000001033b98c0 __cxa_throw + 5742664</span><br><span class=\"line\">10 SimpleGame iOS\t0x0000000103382ef8 __cxa_throw + 5518976</span><br><span class=\"line\">11 SimpleGame iOS\t0x00000001034fb724 __cxa_throw + 7061164</span><br><span class=\"line\">12 SimpleGame iOS\t0x00000001034fa994 __cxa_throw + 7057692</span><br><span class=\"line\">13 SimpleGame iOS\t0x00000001034fdbd0 __cxa_throw + 7070552</span><br><span class=\"line\">14 SimpleGame iOS\t0x00000001034fd924 __cxa_throw + 7069868</span><br><span class=\"line\">15 SimpleGame iOS\t0x000000010355e300 __cxa_throw + 7465608</span><br><span class=\"line\">16 SimpleGame iOS\t0x0000000103581a0c __cxa_throw + 7610772</span><br><span class=\"line\">17 SimpleGame iOS\t0x0000000103583478 __cxa_throw + 7617536</span><br><span class=\"line\">18 QuartzCore\t        0x00000001fcf18f90 0x00000001fcf08000 + 69520</span><br><span class=\"line\">19 QuartzCore\t        0x00000001fcfe2b10 0x00000001fcf08000 + 895760</span><br><span class=\"line\">20 CoreFoundation\t0x00000001f8afca8c 0x00000001f8a79000 + 539276</span><br><span class=\"line\">21 CoreFoundation\t0x00000001f8b23690 0x00000001f8a79000 + 698000</span><br><span class=\"line\">22 CoreFoundation\t0x00000001f8b22ddc 0x00000001f8a79000 + 695772</span><br><span class=\"line\">23 CoreFoundation\t0x00000001f8b1dc00 0x00000001f8a79000 + 674816</span><br><span class=\"line\">24 CoreFoundation\t0x00000001f8b1d0b0 CFRunLoopRunSpecific + 436</span><br><span class=\"line\">25 GraphicsServices\t0x00000001fad1d79c GSEventRunModal + 104</span><br><span class=\"line\">26 UIKitCore\t        0x0000000225389978 UIApplicationMain + 212</span><br><span class=\"line\">27 SimpleGame iOS\t0x0000000102ef560c __cxa_throw + 744852</span><br><span class=\"line\">28 libdyld.dylib\t0x00000001f85e28e0 0x00000001f85e1000 + 6368</span><br></pre></td></tr></table></figure></p>\n<p>符号化后，变成这样了：只有部分栈帧被符号化成有用的信息，但还有一部分和符号化之前的形式差不多！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 SimpleGame iOS\t__cxa_throw + 6463400</span><br><span class=\"line\">1 SimpleGame iOS\t__cxa_throw + 6463296</span><br><span class=\"line\">2 SimpleGame iOS\t__cxa_throw + 5926944</span><br><span class=\"line\">3 SimpleGame iOS\t__cxa_throw + 6194084</span><br><span class=\"line\">4 SimpleGame iOS\t__cxa_throw + 5927924</span><br><span class=\"line\">5 SimpleGame iOS\t__cxa_throw + 5925444</span><br><span class=\"line\">6 SimpleGame iOS\t__cxa_throw + 5928648</span><br><span class=\"line\">7 SimpleGame iOS\t__cxa_throw + 6353600</span><br><span class=\"line\">8 SimpleGame iOS\t__cxa_throw + 5742416</span><br><span class=\"line\">9 SimpleGame iOS\t__cxa_throw + 5742664</span><br><span class=\"line\">10 SimpleGame iOS\t__cxa_throw + 5518976</span><br><span class=\"line\">11 SimpleGame iOS\t__cxa_throw + 7061164</span><br><span class=\"line\">12 SimpleGame iOS\t__cxa_throw + 7057692</span><br><span class=\"line\">13 SimpleGame iOS\t__cxa_throw + 7070552</span><br><span class=\"line\">14 SimpleGame iOS\t__cxa_throw + 7069868</span><br><span class=\"line\">15 SimpleGame iOS\t__cxa_throw + 7465608</span><br><span class=\"line\">16 SimpleGame iOS\t__cxa_throw + 7610772</span><br><span class=\"line\">17 SimpleGame iOS\t__cxa_throw + 7617536</span><br><span class=\"line\">18 QuartzCore\t\tCA::Display::DisplayLink::dispatch_items(unsigned long long, unsigned long long, unsigned long long) + 636</span><br><span class=\"line\">19 QuartzCore\t\tdisplay_timer_callback(__CFMachPort*, void*, long, void*) + 272</span><br><span class=\"line\">20 CoreFoundation\t___CFMachPortPerform + 188</span><br><span class=\"line\">21 CoreFoundation\t___CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__ + 56</span><br><span class=\"line\">22 CoreFoundation\t___CFRunLoopDoSource1 + 440</span><br><span class=\"line\">23 CoreFoundation\t___CFRunLoopRun + 2096</span><br><span class=\"line\">24 CoreFoundation\tCFRunLoopRunSpecific + 436</span><br><span class=\"line\">25 GraphicsServices\tGSEventRunModal + 104</span><br><span class=\"line\">26 UIKitCore\t\tUIApplicationMain + 212</span><br><span class=\"line\">27 SimpleGame iOS\t__cxa_throw + 744852</span><br><span class=\"line\">28 libdyld.dylib\t_start + 4</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"疑惑\"><a href=\"#疑惑\" class=\"headerlink\" title=\"疑惑\"></a>疑惑</h3><hr>\n<ul>\n<li>符号化后的堆栈信息依然带有<code>+ number</code>的形式，不清楚是什么意思。(行数应该以<code>main (main.m:6)</code>的形式标识的)</li>\n<li>某些堆栈经过符号化后，和未符号化的差不多，依然看不到有用的信息</li>\n<li>内存不足或者用户强制杀死app，bugly也会搜集信息吗？</li>\n<li>暂时先这样吧，后面有空有机会再填这些坑。。。</li>\n</ul>\n<p><em>因为要查找线上IOS APP的一个崩溃问题，我查阅了很多相关的网页。发现一个现象：好多好多的中文内容其实都是雷同，甚至复制粘贴的。后来我又发现：尼玛，这些中文内容竟然还是翻译的同一篇英文文章！</em></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li>最初的英文文章：<a href=\"https://www.raywenderlich.com/2805-demystifying-ios-application-crash-logs\" target=\"_blank\" rel=\"noopener\">https://www.raywenderlich.com/2805-demystifying-ios-application-crash-logs</a></li>\n<li>下面是雷同或者相似的中文文章：</li>\n<li><a href=\"https://www.jianshu.com/p/3261493e6d9e\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/3261493e6d9e</a></li>\n<li><a href=\"https://www.jianshu.com/p/12a2402b29c2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/12a2402b29c2</a></li>\n<li><a href=\"https://blog.csdn.net/hello_hwc/article/details/80946318\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/hello_hwc/article/details/80946318</a></li>\n<li><a href=\"https://www.jianshu.com/p/104c362189d8\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/104c362189d8</a></li>\n<li><a href=\"https://www.jianshu.com/p/5efbb02ca6c3\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/5efbb02ca6c3</a></li>\n<li><a href=\"https://blog.csdn.net/jasonblog/article/details/19031517\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jasonblog/article/details/19031517</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1070400\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/article/1070400</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"崩溃堆栈的几个来源\"><a href=\"#崩溃堆栈的几个来源\" class=\"headerlink\" title=\"崩溃堆栈的几个来源\"></a>崩溃堆栈的几个来源</h3><hr>\n<h4 id=\"真机上APP崩溃时，操作系统收集到的\"><a href=\"#真机上APP崩溃时，操作系统收集到的\" class=\"headerlink\" title=\"真机上APP崩溃时，操作系统收集到的\"></a>真机上APP崩溃时，操作系统收集到的</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0   libsystem_kernel.dylib        \t0x00000001a24b70f4 0x1a249f000 + 98548</span><br><span class=\"line\">1   libsystem_kernel.dylib        \t0x00000001a24b65a0 0x1a249f000 + 95648</span><br><span class=\"line\">2   CoreFoundation                \t0x00000001a28b6a10 0x1a280d000 + 694800</span><br><span class=\"line\">3   CoreFoundation                \t0x00000001a28b1920 0x1a280d000 + 674080</span><br><span class=\"line\">4   CoreFoundation                \t0x00000001a28b10b0 0x1a280d000 + 671920</span><br><span class=\"line\">5   GraphicsServices              \t0x00000001a4ab179c 0x1a4aa7000 + 42908</span><br><span class=\"line\">6   UIKitCore                     \t0x00000001cf0e0978 0x1ce824000 + 9161080</span><br><span class=\"line\">7   SimpleGame iOS                \t0x00000001046d1340 0x1045ec000 + 938816</span><br><span class=\"line\">8   libdyld.dylib                 \t0x00000001a23768e0 0x1a2375000 + 6368</span><br></pre></td></tr></table></figure>\n<p>上面是IOS操作系统记录的原始崩溃堆栈信息，此时还未经由符号表<strong>符号化</strong>。看到的都是十六进制的内存地址，如果想要找到崩溃的地方对应于<strong>哪个文件、哪个函数、哪一行</strong>，就需要<strong>符号化</strong>才行</p>\n<p><em>分析堆栈格式：</em></p>\n<ul>\n<li>第一列：栈帧</li>\n<li>第二列：二进制的应用程序名或者库名</li>\n<li>第三列：被调用的函数的地址</li>\n<li>第四列：是以<strong>基址+偏移量</strong>的形式表示的，前半部分指向某个源文件，后半部分指向这个源文件的某一行。</li>\n</ul>\n<h4 id=\"bugly上收集的\"><a href=\"#bugly上收集的\" class=\"headerlink\" title=\"bugly上收集的\"></a>bugly上收集的</h4><p>下面是bugly收集的原始堆栈信息，同样未经未<strong>符号化</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 SimpleGame iOS\t0x00000001050ae238 __cxa_throw + 8825280</span><br><span class=\"line\">1 SimpleGame iOS\t0x0000000105095e34 __cxa_throw + 8725948</span><br><span class=\"line\">2 CoreFoundation\t0x0000000181dbcc3c 0x0000000181ce5000 + 883772</span><br><span class=\"line\">3 CoreFoundation\t0x0000000181dbc1b8 0x0000000181ce5000 + 881080</span><br><span class=\"line\">4 CoreFoundation\t0x0000000181dbbf14 0x0000000181ce5000 + 880404</span><br><span class=\"line\">5 CoreFoundation\t0x0000000181e3984c 0x0000000181ce5000 + 1394764</span><br><span class=\"line\">6 CoreFoundation\t0x0000000181cf2f38 _CFXNotificationPost + 384</span><br><span class=\"line\">7 Foundation\t        0x0000000182763bbc 0x000000018275d000 + 27580</span><br><span class=\"line\">8 UIKit\t                0x000000018bbfe8a4 0x000000018b9f0000 + 2156708</span><br><span class=\"line\">9 UIKit\t                0x000000018c5f854c 0x000000018b9f0000 + 12617036</span><br><span class=\"line\">10 UIKit\t        0x000000018bbf7df4 0x000000018b9f0000 + 2129396</span><br><span class=\"line\">11 UIKit\t        0x000000018c5f8230 0x000000018b9f0000 + 12616240</span><br><span class=\"line\">12 UIKit\t        0x000000018ba31730 0x000000018b9f0000 + 268080</span><br><span class=\"line\">13 UIKit\t        0x000000018ba310b8 0x000000018b9f0000 + 266424</span><br><span class=\"line\">14 UIKit\t        0x000000018bb1afcc 0x000000018b9f0000 + 1224652</span><br><span class=\"line\">15 QuartzCore\t        0x0000000185fc1504 0x0000000185e8f000 + 1254660</span><br><span class=\"line\">16 libdispatch.dylib\t0x000000018171ca60 0x000000018171b000 + 6752</span><br><span class=\"line\">17 libdispatch.dylib\t0x000000018175dd80 0x000000018171b000 + 273792</span><br><span class=\"line\">18 CoreFoundation\t0x0000000181dd3070 0x0000000181ce5000 + 974960</span><br><span class=\"line\">19 CoreFoundation\t0x0000000181dd0bc8 0x0000000181ce5000 + 965576</span><br><span class=\"line\">20 CoreFoundation\t0x0000000181cf0da8 CFRunLoopRunSpecific + 552</span><br><span class=\"line\">21 GraphicsServices\t0x0000000183cd5020 GSEventRunModal + 100</span><br><span class=\"line\">22 UIKit\t        0x000000018bd0d758 UIApplicationMain + 236</span><br><span class=\"line\">23 SimpleGame iOS\t0x00000001048f960c __cxa_throw + 744852</span><br><span class=\"line\">24 libdyld.dylib\t0x0000000181781fc0 0x0000000181781000 + 4032</span><br></pre></td></tr></table></figure>\n<p>下面是上面的原始堆栈信息经过<strong>符号化</strong>后的样子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 SimpleGame iOS\tcocos2d::GLView::getScaleX() const</span><br><span class=\"line\">1 SimpleGame iOS\t-[CCEAGLView onUIKeyboardNotification:] + 656</span><br><span class=\"line\">2 CoreFoundation\t___CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + 20</span><br><span class=\"line\">3 CoreFoundation\t__CFXRegistrationPost + 428</span><br><span class=\"line\">4 CoreFoundation\t____CFXNotificationPost_block_invoke + 216</span><br><span class=\"line\">5 CoreFoundation\t-[_CFXNotificationRegistrar find:object:observer:enumerator:] + 1408</span><br><span class=\"line\">6 CoreFoundation\t_CFXNotificationPost + 384</span><br><span class=\"line\">7 Foundation\t        -[NSNotificationCenter postNotificationName:object:userInfo:] + 68</span><br><span class=\"line\">8 UIKit\t                -[UIInputWindowController postEndNotifications:withInfo:] + 1628</span><br><span class=\"line\">9 UIKit\t                ___77-[UIInputWindowController moveFromPlacement:toPlacement:starting:completion:]_block_invoke.1099 + 100</span><br><span class=\"line\">10 UIKit\t        -[UIInputWindowController performWithSafeTransitionFrames:] + 220</span><br><span class=\"line\">11 UIKit\t        ___77-[UIInputWindowController moveFromPlacement:toPlacement:starting:completion:]_block_invoke.1090 + 928</span><br><span class=\"line\">12 UIKit\t        -[UIViewAnimationBlockDelegate _didEndBlockAnimation:finished:context:] + 760</span><br><span class=\"line\">13 UIKit\t        -[UIViewAnimationState sendDelegateAnimationDidStop:finished:] + 312</span><br><span class=\"line\">14 UIKit\t        -[UIViewAnimationState animationDidStop:finished:] + 296</span><br><span class=\"line\">15 QuartzCore\t        CA::Layer::run_animation_callbacks(void*) + 284</span><br><span class=\"line\">16 libdispatch.dylib\t__dispatch_client_callout + 16</span><br><span class=\"line\">17 libdispatch.dylib\t__dispatch_main_queue_callback_4CF$VARIANT$armv81 + 964</span><br><span class=\"line\">18 CoreFoundation\t___CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__ + 12</span><br><span class=\"line\">19 CoreFoundation\t___CFRunLoopRun + 2272</span><br><span class=\"line\">20 CoreFoundation\tCFRunLoopRunSpecific + 552</span><br><span class=\"line\">21 GraphicsServices\tGSEventRunModal + 100</span><br><span class=\"line\">22 UIKit\t        UIApplicationMain + 236</span><br><span class=\"line\">23 SimpleGame iOS\tmain (main.m:6)</span><br><span class=\"line\">24 libdyld.dylib\t_start + 4</span><br></pre></td></tr></table></figure>\n<h4 id=\"一些列外情况\"><a href=\"#一些列外情况\" class=\"headerlink\" title=\"一些列外情况\"></a>一些列外情况</h4><p>下面这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 SimpleGame iOS\t0x0000000103469820 __cxa_throw + 6463400</span><br><span class=\"line\">1 SimpleGame iOS\t0x00000001034697b8 __cxa_throw + 6463296</span><br><span class=\"line\">2 SimpleGame iOS\t0x00000001033e6898 __cxa_throw + 5926944</span><br><span class=\"line\">3 SimpleGame iOS\t0x0000000103427c1c __cxa_throw + 6194084</span><br><span class=\"line\">4 SimpleGame iOS\t0x00000001033e6c6c __cxa_throw + 5927924</span><br><span class=\"line\">5 SimpleGame iOS\t0x00000001033e62bc __cxa_throw + 5925444</span><br><span class=\"line\">6 SimpleGame iOS\t0x00000001033e6f40 __cxa_throw + 5928648</span><br><span class=\"line\">7 SimpleGame iOS\t0x000000010344eb38 __cxa_throw + 6353600</span><br><span class=\"line\">8 SimpleGame iOS\t0x00000001033b97c8 __cxa_throw + 5742416</span><br><span class=\"line\">9 SimpleGame iOS\t0x00000001033b98c0 __cxa_throw + 5742664</span><br><span class=\"line\">10 SimpleGame iOS\t0x0000000103382ef8 __cxa_throw + 5518976</span><br><span class=\"line\">11 SimpleGame iOS\t0x00000001034fb724 __cxa_throw + 7061164</span><br><span class=\"line\">12 SimpleGame iOS\t0x00000001034fa994 __cxa_throw + 7057692</span><br><span class=\"line\">13 SimpleGame iOS\t0x00000001034fdbd0 __cxa_throw + 7070552</span><br><span class=\"line\">14 SimpleGame iOS\t0x00000001034fd924 __cxa_throw + 7069868</span><br><span class=\"line\">15 SimpleGame iOS\t0x000000010355e300 __cxa_throw + 7465608</span><br><span class=\"line\">16 SimpleGame iOS\t0x0000000103581a0c __cxa_throw + 7610772</span><br><span class=\"line\">17 SimpleGame iOS\t0x0000000103583478 __cxa_throw + 7617536</span><br><span class=\"line\">18 QuartzCore\t        0x00000001fcf18f90 0x00000001fcf08000 + 69520</span><br><span class=\"line\">19 QuartzCore\t        0x00000001fcfe2b10 0x00000001fcf08000 + 895760</span><br><span class=\"line\">20 CoreFoundation\t0x00000001f8afca8c 0x00000001f8a79000 + 539276</span><br><span class=\"line\">21 CoreFoundation\t0x00000001f8b23690 0x00000001f8a79000 + 698000</span><br><span class=\"line\">22 CoreFoundation\t0x00000001f8b22ddc 0x00000001f8a79000 + 695772</span><br><span class=\"line\">23 CoreFoundation\t0x00000001f8b1dc00 0x00000001f8a79000 + 674816</span><br><span class=\"line\">24 CoreFoundation\t0x00000001f8b1d0b0 CFRunLoopRunSpecific + 436</span><br><span class=\"line\">25 GraphicsServices\t0x00000001fad1d79c GSEventRunModal + 104</span><br><span class=\"line\">26 UIKitCore\t        0x0000000225389978 UIApplicationMain + 212</span><br><span class=\"line\">27 SimpleGame iOS\t0x0000000102ef560c __cxa_throw + 744852</span><br><span class=\"line\">28 libdyld.dylib\t0x00000001f85e28e0 0x00000001f85e1000 + 6368</span><br></pre></td></tr></table></figure></p>\n<p>符号化后，变成这样了：只有部分栈帧被符号化成有用的信息，但还有一部分和符号化之前的形式差不多！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 SimpleGame iOS\t__cxa_throw + 6463400</span><br><span class=\"line\">1 SimpleGame iOS\t__cxa_throw + 6463296</span><br><span class=\"line\">2 SimpleGame iOS\t__cxa_throw + 5926944</span><br><span class=\"line\">3 SimpleGame iOS\t__cxa_throw + 6194084</span><br><span class=\"line\">4 SimpleGame iOS\t__cxa_throw + 5927924</span><br><span class=\"line\">5 SimpleGame iOS\t__cxa_throw + 5925444</span><br><span class=\"line\">6 SimpleGame iOS\t__cxa_throw + 5928648</span><br><span class=\"line\">7 SimpleGame iOS\t__cxa_throw + 6353600</span><br><span class=\"line\">8 SimpleGame iOS\t__cxa_throw + 5742416</span><br><span class=\"line\">9 SimpleGame iOS\t__cxa_throw + 5742664</span><br><span class=\"line\">10 SimpleGame iOS\t__cxa_throw + 5518976</span><br><span class=\"line\">11 SimpleGame iOS\t__cxa_throw + 7061164</span><br><span class=\"line\">12 SimpleGame iOS\t__cxa_throw + 7057692</span><br><span class=\"line\">13 SimpleGame iOS\t__cxa_throw + 7070552</span><br><span class=\"line\">14 SimpleGame iOS\t__cxa_throw + 7069868</span><br><span class=\"line\">15 SimpleGame iOS\t__cxa_throw + 7465608</span><br><span class=\"line\">16 SimpleGame iOS\t__cxa_throw + 7610772</span><br><span class=\"line\">17 SimpleGame iOS\t__cxa_throw + 7617536</span><br><span class=\"line\">18 QuartzCore\t\tCA::Display::DisplayLink::dispatch_items(unsigned long long, unsigned long long, unsigned long long) + 636</span><br><span class=\"line\">19 QuartzCore\t\tdisplay_timer_callback(__CFMachPort*, void*, long, void*) + 272</span><br><span class=\"line\">20 CoreFoundation\t___CFMachPortPerform + 188</span><br><span class=\"line\">21 CoreFoundation\t___CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__ + 56</span><br><span class=\"line\">22 CoreFoundation\t___CFRunLoopDoSource1 + 440</span><br><span class=\"line\">23 CoreFoundation\t___CFRunLoopRun + 2096</span><br><span class=\"line\">24 CoreFoundation\tCFRunLoopRunSpecific + 436</span><br><span class=\"line\">25 GraphicsServices\tGSEventRunModal + 104</span><br><span class=\"line\">26 UIKitCore\t\tUIApplicationMain + 212</span><br><span class=\"line\">27 SimpleGame iOS\t__cxa_throw + 744852</span><br><span class=\"line\">28 libdyld.dylib\t_start + 4</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"疑惑\"><a href=\"#疑惑\" class=\"headerlink\" title=\"疑惑\"></a>疑惑</h3><hr>\n<ul>\n<li>符号化后的堆栈信息依然带有<code>+ number</code>的形式，不清楚是什么意思。(行数应该以<code>main (main.m:6)</code>的形式标识的)</li>\n<li>某些堆栈经过符号化后，和未符号化的差不多，依然看不到有用的信息</li>\n<li>内存不足或者用户强制杀死app，bugly也会搜集信息吗？</li>\n<li>暂时先这样吧，后面有空有机会再填这些坑。。。</li>\n</ul>\n<p><em>因为要查找线上IOS APP的一个崩溃问题，我查阅了很多相关的网页。发现一个现象：好多好多的中文内容其实都是雷同，甚至复制粘贴的。后来我又发现：尼玛，这些中文内容竟然还是翻译的同一篇英文文章！</em></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li>最初的英文文章：<a href=\"https://www.raywenderlich.com/2805-demystifying-ios-application-crash-logs\" target=\"_blank\" rel=\"noopener\">https://www.raywenderlich.com/2805-demystifying-ios-application-crash-logs</a></li>\n<li>下面是雷同或者相似的中文文章：</li>\n<li><a href=\"https://www.jianshu.com/p/3261493e6d9e\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/3261493e6d9e</a></li>\n<li><a href=\"https://www.jianshu.com/p/12a2402b29c2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/12a2402b29c2</a></li>\n<li><a href=\"https://blog.csdn.net/hello_hwc/article/details/80946318\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/hello_hwc/article/details/80946318</a></li>\n<li><a href=\"https://www.jianshu.com/p/104c362189d8\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/104c362189d8</a></li>\n<li><a href=\"https://www.jianshu.com/p/5efbb02ca6c3\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/5efbb02ca6c3</a></li>\n<li><a href=\"https://blog.csdn.net/jasonblog/article/details/19031517\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jasonblog/article/details/19031517</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1070400\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/article/1070400</a></li>\n</ul>\n"},{"title":"《如何学习》","date":"2019-11-24T16:00:00.000Z","_content":"\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/11/25/Fc1NVSbsmTdtkq8.jpg\" width = \"300\" height=\"400\" alt=\"书的封面\">\n</div>\n\n\n#### 我简单总结一下：\n* #### 时间上：分散开来学习某一知识，要比一下子全部学完效果更好\n* #### 空间上：变换学习时的环境背景要比总在同一个环境背景下学习效果要好\n* #### 不同知识交叉学习，要比连续学习同一知识效果更好\n* #### 适当放松，大脑更有益突破某个困难问题——这叫“顿悟”\n* #### 睡觉 = 学习\n\n#### 记忆并没有“消失”或者“遗忘”，只是你暂时无法把它提取出来。\n\n#### 关于阅读，让我想起了我在维基百科上看到的一个观点：\n> **以往说“书读百遍其义自现”，现代意义上的阅读强调的是“书读百篇其义自现”，因为阅读靠的是背景知识，靠的是线索，而不是记忆、背诵。**\n\n### 遗忘式学习\n---\n> 而如今这套新理论，并不是对传统理论的补充或更新，而是彻底的破旧立新：“遗忘”在这里被塑造成了“学习”的好朋友，而不再是敌人。\n\n> 记忆失用理论的第一条法则便是：任何记忆都具备两种能力，即储存能力与提取能力。\n\n> 记忆是不会“丢失”的，不会像我们以为的那样越变越淡，直至踪迹全无。准确地说，“丢失”了的其实只是我们一时无法提取出来的记忆而已，它的提取能力在当下很低，低到几乎为零。\n\n> 记忆失用理论认为，大脑一旦重新找到“不见了”的信息或者记忆，那么“曾经遗忘”本身便能起到增强记忆的作用。我们不妨借用前面的比喻，用肌肉锻炼来描述“遗忘式学习”的这一特性：做引体向上，首先会导致你的肌肉细胞受损，可是，等休息一天后再度做这个动作时，肌肉却已经因昨天的受损而变得更加强壮了。\n\n> **我们在提取某项记忆的时候越是大费力气，那么在得到之后，该项记忆的提取能力以及储存能力就飙升得越高，也就是学得越扎实。**\n\n### 打破学习的好习惯：环境对学习的影响\n---\n#### 学习是否要保持一贯性\n> 从20世纪初期开始，“保持一贯性”就成了各种教育指南的标志性指导，这一基本原则已经融入了几乎所有想当然的“学习好习惯”当中。要有固定的习惯、固定的日程、固定的场所、固定的时间，专心学习，别的什么都不要管。在家里或者图书馆里找个安静的角落，大清早也好，深夜里也罢，每天都要在那里坐上相当长一段时间。这类观念至少可以追溯自当年清教徒的生活习惯，以及他们对习经的虔诚追求，至今仍未有半点改变。“找一个安静的、没有任何干扰的地方学习”，贝勒大学（Baylor University）的学习指南开宗明义就是这句话。不止贝勒大学，实际上不少大学的学习指南里都会有这样的语句，而且后面还有：<br/> “培养固定的学习习惯，每次学习都要那样。”<br/>“戴上耳塞或者耳罩，挡掉噪音的干扰。”<br/>“如果有人劝你换个时间再学，不要听。”<br/>……<br/>诸如此类，都是告诉你要如何在学习时保持一贯性。\n#### 环境的还原是增强记忆的法宝\n这么说吧，针对同一个知识点，如果曾经在不同的环境下学习过它，那么你的大脑对这个知识点这段记忆的提取能力，将会大大增强。\n#### 诀窍就是多换几个学习场所\n> 我们可以很容易做到成倍地增加与记忆内容相关联的感知提示数量，而最简单的办法，就是使我们的学习场所加倍——多换几个地方。\n\n> 借用实验报告主笔者的话来说，这次实验显示出“环境背景的变换大大提高了记忆力”。\n\n> 丹尼尔·威林厄姆（Daniel Willingham）是一位指导课堂学习技巧应用的顶级权威，他曾这样建议自己的学生：备考复习时，不要直接照着笔记复习。他对我说：“我告诉他们把笔记放到一边，重新整理学习材料，自己想出一套全新的重点概述来。这样做，会强迫你把学习材料都过一遍，而且是以一种不同的思路去过一遍。”\n\n> 我们要做的恰恰与此相反：换一个完全不同的房间，换一个完全不同的时间段。拿着吉他到外面去，去公园，去树林。换一家不同的咖啡店，换一个不同的练习场。用布鲁斯替换古典音乐。这些针对惯常行为的每一个改变都会帮你把要学、要练的东西记得更牢固一点、更清楚一些，帮你把记忆保留得更长久。其实，这样的实践本身就能强化你的学习，让你学得的东西越发不必依赖于周遭环境。\n\n### 拉开时间间隔：化整为零才能记得持久\n---\n> 与其一口气全都学完，还不如今天学一点、明天学一点，效果反而更好。不是好一点点，而是好很多。在某些情况下，分散式学习能让我们的记忆事半功倍。\n\n> 艾宾浩斯写道：“同样的重复次数，若恰当地分成几组、拉开时间距离来完成，要比集中起来一次完成的效果明显好很多。”由此，他开创了一条历史先河，成为第一个发现“间隔效应”威力的人。\n\n> 对于极其短暂的时间间隔，就是早期研究中所使用的几秒钟或者几分钟，**也许会使大脑对快速重复的信息变得越来越不感兴趣W**。如果相同的内容重复第二次、第三次，大脑对其的关注就会次第减弱\n\n> 在许多情况下，分散式学习还能给人带来更多的背景提示，也就是我们在第三章所描述过的那种提示。还举新邻居的例子，你第一次知道那两个人的名字，是在一次聚会上，周围有好多朋友、诸多闲聊，还有手里的一杯葡萄酒。第二次，你听到了他们的叫声，隔着那道树篱笆。于是，这两个名字便被嵌入了两层背景当中，而不再是一层。当我们第二次复习一份单词表或者一份资料时，也会是这样的情形，除非你前后两次学习都是在同一个地方，那样的话，第二次的环境影响就可以忽略不计了。\n\n> 再说一遍，“临时抱佛脚”在紧急关头的确很有用，但问题是，所得记忆不会持久。而分散式学习却能让你记得长久得多。\n\n> “临时抱佛脚的方法寻求的是在临考之前以高强度的学习把东西塞进大脑。但是，以这样的方式学得的东西，能建立起来的联想实在少得可怜。假如同样的内容能在不同的时间、不同的环境背景下反复读、反复背诵、反复提及、反复练习，与其他联想挂上钩，那才能真正使其保留在大脑的记忆之中。”\n\n### 考试的作用\n---\n> **大脑要从记忆中提取已经学过的课文、名称、公式、技能等任何东西，所要付出的努力远比直接重读一遍或者重学一遍要多得多，而这份额外的努力则加强了这些记忆的储存能力与提取能力**。这样做之所以能对数据信息或者技能的掌握更加牢固，正是因为我们并非简单地重温了一遍，而是自己把它们从脑海中“提取”了出来。\n\n> 一旦我们成功“提取”出了某信息，便同时以不同于上次的储存路径将其重新存储了一遍。这不但使得该信息的储存层次得到了提高，更使得它有了不同于上次的相关联结：它和这次同时提取出来的其他相关信息建立了联结。由此，原先支撑该信息的脑细胞网络也就有了变化。用我们的记忆改变我们的记忆，而且是以我们意想不到的方式做出了改变。\n\n> 请记住：对着自己也好，对着他人也罢，把你学过的东西表述出来，这种简单的做法并非仅是传统意义上的一种“自考”方式，它更是一种“学习”的方式，一种更高效的学习方式。这比你继续坐在那里盯着重点划线的效果肯定要更好，至少能高上20%～30%。更划算的是，这样的练习还能消除我们前面讲过的“熟练度错觉”，让你能真正看清哪些地方你还不知道，哪些地方你还有疑惑，哪些地方你已经忘记……立竿见影。\n\n### 孵化：沉淀思维离不开分心与分享\n---\n> 请完成‘SEQUENCE’这个单词最后一个字母，唯一的要求是不许用E：<br/>SEQUENC_\n\n### 交替：混杂在一起印象更深刻\n---\n> 专心致志、不受打扰的学习反而成了拖后腿的做法。\n\n> 而交替练习却给人一种进步缓慢的表象，跟单一重复的效果似乎没法比，可实际上随着时间的累加，交替练习所累积起来的进步要比单一重复多得多。从长远来看，单一技巧的重复训练反而会阻碍我们进步。\n\n> “我们所做的一切都在告诉我们，大脑对发现不协调的地方天生敏感。”\n\n> “一旦看到什么东西超出了正常秩序或范畴，大脑便会当即警醒起来，敦促潜意识更深入地处理刚接收到的这一信息：‘这东西怎么可能在这里呢？’”\n\n### 睡觉就是学习\n---                                                                 \n* 19世纪德国化学家弗里德里希·凯库勒，就是因为在梦中梦见一群蛇咬住了自己的尾巴，才偶然发现苯的化学结构（其分子卷曲成环状）\n* 俄国化学家德米特里·门捷列夫，曾告诉他的同事说，他花了好几个通宵试图把所有元素整理成合理的排列方式，却始终一无所获，直到他累得昏睡过去，却在梦中看见了“一份表格，所有元素，各归其位！”。这便是著名的化学元素周期表的由来\n\n> 从研究数据中获得的大量证据说明，睡眠能增强你对前一天所学内容的理解力和记忆力，而且绝不仅限于彩蛋学习，它还可以辅助你的词汇学习、单词配对、逻辑推理，甚至能有助于你工作中的陈述报告、学校里即将到来的考试，等等。当然，你首先需要记住所有这些课题中关键之处的主要细节，才能借助睡眠把这些要点拼凑起来，形成一幅更为完整的大脑认知图。这么做对你成绩的提升效果相当显著，大约能提升10%～30%，不过科学家们至今尚未充分了解潜意识状态下大脑究竟是如何运作的，因此还给不出合理的解释。\n\n> 西格尔的理论告诉我们，如果保持清醒所耗费的成本已经盖过了收益，那么继续筋疲力尽地熬着就没什么价值了。对此，“夜班理论”为我们提供了很好的解释：因为睡眠也同样具有价值，准确地说，是具有梳理、筛选、整合我们正在学习的功课或者动作的作用。这就叫做阴阳互补。清醒的时候学习效果自是最佳，等收效越来越低时就应赶紧去睡觉，再拖下去就是浪费时间了。而接下来的工作，睡眠会帮你继续完成。\n\n> 最新研究表明，在失去意识的停机状态中，大脑实际上是在澄清记忆、深化技能——睡眠是完成这两项任务必不可少的步骤。**换句话说，从本质上讲，睡觉就是学习。**\n\n> 这么说吧：我再也不觉得白天打个盹儿或者晚上早早睡就表示我懒、我浪费光阴，甚至是我根本不愿意学习。**相反，我现在把睡眠看作是闭着眼睛在学习。**\n\n### 打个盹也算是睡眠：午睡很重要\n---\n\n> 在最近10年间的一系列实验中，加州大学圣迭戈分校的萨拉·梅德尼克（Sara Mednick）发现，人在一小时到一个半小时的打盹儿过程中也常常会有慢波深度睡眠期以及快速眼动睡眠阶段。\n\n> 早上参加学习的人，无论是背单词还是对模式及规律的辨识，也就是说，无论是需要靠记忆力的学习还是需要靠深度分析能力的学习，在傍晚的考试中，那些白天睡过一小时午觉的人，成绩会比没有午睡的人高出大约30%。“通过这些实验研究，我改变了自己的工作习惯，”梅德尼克告诉我，“也改变了我的生活习惯。”\n\n> “在一些实验中我们发现，白天睡上一小时到一个半小时所得到的学习辅助效果，跟一整晚8小时的通宵睡眠几乎不相上下。”\n\n","source":"_posts/read/如何学习.md","raw":"---\ntitle: 《如何学习》\ncategories: 读书\ndate: 2019-11-25\n---\n\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/11/25/Fc1NVSbsmTdtkq8.jpg\" width = \"300\" height=\"400\" alt=\"书的封面\">\n</div>\n\n\n#### 我简单总结一下：\n* #### 时间上：分散开来学习某一知识，要比一下子全部学完效果更好\n* #### 空间上：变换学习时的环境背景要比总在同一个环境背景下学习效果要好\n* #### 不同知识交叉学习，要比连续学习同一知识效果更好\n* #### 适当放松，大脑更有益突破某个困难问题——这叫“顿悟”\n* #### 睡觉 = 学习\n\n#### 记忆并没有“消失”或者“遗忘”，只是你暂时无法把它提取出来。\n\n#### 关于阅读，让我想起了我在维基百科上看到的一个观点：\n> **以往说“书读百遍其义自现”，现代意义上的阅读强调的是“书读百篇其义自现”，因为阅读靠的是背景知识，靠的是线索，而不是记忆、背诵。**\n\n### 遗忘式学习\n---\n> 而如今这套新理论，并不是对传统理论的补充或更新，而是彻底的破旧立新：“遗忘”在这里被塑造成了“学习”的好朋友，而不再是敌人。\n\n> 记忆失用理论的第一条法则便是：任何记忆都具备两种能力，即储存能力与提取能力。\n\n> 记忆是不会“丢失”的，不会像我们以为的那样越变越淡，直至踪迹全无。准确地说，“丢失”了的其实只是我们一时无法提取出来的记忆而已，它的提取能力在当下很低，低到几乎为零。\n\n> 记忆失用理论认为，大脑一旦重新找到“不见了”的信息或者记忆，那么“曾经遗忘”本身便能起到增强记忆的作用。我们不妨借用前面的比喻，用肌肉锻炼来描述“遗忘式学习”的这一特性：做引体向上，首先会导致你的肌肉细胞受损，可是，等休息一天后再度做这个动作时，肌肉却已经因昨天的受损而变得更加强壮了。\n\n> **我们在提取某项记忆的时候越是大费力气，那么在得到之后，该项记忆的提取能力以及储存能力就飙升得越高，也就是学得越扎实。**\n\n### 打破学习的好习惯：环境对学习的影响\n---\n#### 学习是否要保持一贯性\n> 从20世纪初期开始，“保持一贯性”就成了各种教育指南的标志性指导，这一基本原则已经融入了几乎所有想当然的“学习好习惯”当中。要有固定的习惯、固定的日程、固定的场所、固定的时间，专心学习，别的什么都不要管。在家里或者图书馆里找个安静的角落，大清早也好，深夜里也罢，每天都要在那里坐上相当长一段时间。这类观念至少可以追溯自当年清教徒的生活习惯，以及他们对习经的虔诚追求，至今仍未有半点改变。“找一个安静的、没有任何干扰的地方学习”，贝勒大学（Baylor University）的学习指南开宗明义就是这句话。不止贝勒大学，实际上不少大学的学习指南里都会有这样的语句，而且后面还有：<br/> “培养固定的学习习惯，每次学习都要那样。”<br/>“戴上耳塞或者耳罩，挡掉噪音的干扰。”<br/>“如果有人劝你换个时间再学，不要听。”<br/>……<br/>诸如此类，都是告诉你要如何在学习时保持一贯性。\n#### 环境的还原是增强记忆的法宝\n这么说吧，针对同一个知识点，如果曾经在不同的环境下学习过它，那么你的大脑对这个知识点这段记忆的提取能力，将会大大增强。\n#### 诀窍就是多换几个学习场所\n> 我们可以很容易做到成倍地增加与记忆内容相关联的感知提示数量，而最简单的办法，就是使我们的学习场所加倍——多换几个地方。\n\n> 借用实验报告主笔者的话来说，这次实验显示出“环境背景的变换大大提高了记忆力”。\n\n> 丹尼尔·威林厄姆（Daniel Willingham）是一位指导课堂学习技巧应用的顶级权威，他曾这样建议自己的学生：备考复习时，不要直接照着笔记复习。他对我说：“我告诉他们把笔记放到一边，重新整理学习材料，自己想出一套全新的重点概述来。这样做，会强迫你把学习材料都过一遍，而且是以一种不同的思路去过一遍。”\n\n> 我们要做的恰恰与此相反：换一个完全不同的房间，换一个完全不同的时间段。拿着吉他到外面去，去公园，去树林。换一家不同的咖啡店，换一个不同的练习场。用布鲁斯替换古典音乐。这些针对惯常行为的每一个改变都会帮你把要学、要练的东西记得更牢固一点、更清楚一些，帮你把记忆保留得更长久。其实，这样的实践本身就能强化你的学习，让你学得的东西越发不必依赖于周遭环境。\n\n### 拉开时间间隔：化整为零才能记得持久\n---\n> 与其一口气全都学完，还不如今天学一点、明天学一点，效果反而更好。不是好一点点，而是好很多。在某些情况下，分散式学习能让我们的记忆事半功倍。\n\n> 艾宾浩斯写道：“同样的重复次数，若恰当地分成几组、拉开时间距离来完成，要比集中起来一次完成的效果明显好很多。”由此，他开创了一条历史先河，成为第一个发现“间隔效应”威力的人。\n\n> 对于极其短暂的时间间隔，就是早期研究中所使用的几秒钟或者几分钟，**也许会使大脑对快速重复的信息变得越来越不感兴趣W**。如果相同的内容重复第二次、第三次，大脑对其的关注就会次第减弱\n\n> 在许多情况下，分散式学习还能给人带来更多的背景提示，也就是我们在第三章所描述过的那种提示。还举新邻居的例子，你第一次知道那两个人的名字，是在一次聚会上，周围有好多朋友、诸多闲聊，还有手里的一杯葡萄酒。第二次，你听到了他们的叫声，隔着那道树篱笆。于是，这两个名字便被嵌入了两层背景当中，而不再是一层。当我们第二次复习一份单词表或者一份资料时，也会是这样的情形，除非你前后两次学习都是在同一个地方，那样的话，第二次的环境影响就可以忽略不计了。\n\n> 再说一遍，“临时抱佛脚”在紧急关头的确很有用，但问题是，所得记忆不会持久。而分散式学习却能让你记得长久得多。\n\n> “临时抱佛脚的方法寻求的是在临考之前以高强度的学习把东西塞进大脑。但是，以这样的方式学得的东西，能建立起来的联想实在少得可怜。假如同样的内容能在不同的时间、不同的环境背景下反复读、反复背诵、反复提及、反复练习，与其他联想挂上钩，那才能真正使其保留在大脑的记忆之中。”\n\n### 考试的作用\n---\n> **大脑要从记忆中提取已经学过的课文、名称、公式、技能等任何东西，所要付出的努力远比直接重读一遍或者重学一遍要多得多，而这份额外的努力则加强了这些记忆的储存能力与提取能力**。这样做之所以能对数据信息或者技能的掌握更加牢固，正是因为我们并非简单地重温了一遍，而是自己把它们从脑海中“提取”了出来。\n\n> 一旦我们成功“提取”出了某信息，便同时以不同于上次的储存路径将其重新存储了一遍。这不但使得该信息的储存层次得到了提高，更使得它有了不同于上次的相关联结：它和这次同时提取出来的其他相关信息建立了联结。由此，原先支撑该信息的脑细胞网络也就有了变化。用我们的记忆改变我们的记忆，而且是以我们意想不到的方式做出了改变。\n\n> 请记住：对着自己也好，对着他人也罢，把你学过的东西表述出来，这种简单的做法并非仅是传统意义上的一种“自考”方式，它更是一种“学习”的方式，一种更高效的学习方式。这比你继续坐在那里盯着重点划线的效果肯定要更好，至少能高上20%～30%。更划算的是，这样的练习还能消除我们前面讲过的“熟练度错觉”，让你能真正看清哪些地方你还不知道，哪些地方你还有疑惑，哪些地方你已经忘记……立竿见影。\n\n### 孵化：沉淀思维离不开分心与分享\n---\n> 请完成‘SEQUENCE’这个单词最后一个字母，唯一的要求是不许用E：<br/>SEQUENC_\n\n### 交替：混杂在一起印象更深刻\n---\n> 专心致志、不受打扰的学习反而成了拖后腿的做法。\n\n> 而交替练习却给人一种进步缓慢的表象，跟单一重复的效果似乎没法比，可实际上随着时间的累加，交替练习所累积起来的进步要比单一重复多得多。从长远来看，单一技巧的重复训练反而会阻碍我们进步。\n\n> “我们所做的一切都在告诉我们，大脑对发现不协调的地方天生敏感。”\n\n> “一旦看到什么东西超出了正常秩序或范畴，大脑便会当即警醒起来，敦促潜意识更深入地处理刚接收到的这一信息：‘这东西怎么可能在这里呢？’”\n\n### 睡觉就是学习\n---                                                                 \n* 19世纪德国化学家弗里德里希·凯库勒，就是因为在梦中梦见一群蛇咬住了自己的尾巴，才偶然发现苯的化学结构（其分子卷曲成环状）\n* 俄国化学家德米特里·门捷列夫，曾告诉他的同事说，他花了好几个通宵试图把所有元素整理成合理的排列方式，却始终一无所获，直到他累得昏睡过去，却在梦中看见了“一份表格，所有元素，各归其位！”。这便是著名的化学元素周期表的由来\n\n> 从研究数据中获得的大量证据说明，睡眠能增强你对前一天所学内容的理解力和记忆力，而且绝不仅限于彩蛋学习，它还可以辅助你的词汇学习、单词配对、逻辑推理，甚至能有助于你工作中的陈述报告、学校里即将到来的考试，等等。当然，你首先需要记住所有这些课题中关键之处的主要细节，才能借助睡眠把这些要点拼凑起来，形成一幅更为完整的大脑认知图。这么做对你成绩的提升效果相当显著，大约能提升10%～30%，不过科学家们至今尚未充分了解潜意识状态下大脑究竟是如何运作的，因此还给不出合理的解释。\n\n> 西格尔的理论告诉我们，如果保持清醒所耗费的成本已经盖过了收益，那么继续筋疲力尽地熬着就没什么价值了。对此，“夜班理论”为我们提供了很好的解释：因为睡眠也同样具有价值，准确地说，是具有梳理、筛选、整合我们正在学习的功课或者动作的作用。这就叫做阴阳互补。清醒的时候学习效果自是最佳，等收效越来越低时就应赶紧去睡觉，再拖下去就是浪费时间了。而接下来的工作，睡眠会帮你继续完成。\n\n> 最新研究表明，在失去意识的停机状态中，大脑实际上是在澄清记忆、深化技能——睡眠是完成这两项任务必不可少的步骤。**换句话说，从本质上讲，睡觉就是学习。**\n\n> 这么说吧：我再也不觉得白天打个盹儿或者晚上早早睡就表示我懒、我浪费光阴，甚至是我根本不愿意学习。**相反，我现在把睡眠看作是闭着眼睛在学习。**\n\n### 打个盹也算是睡眠：午睡很重要\n---\n\n> 在最近10年间的一系列实验中，加州大学圣迭戈分校的萨拉·梅德尼克（Sara Mednick）发现，人在一小时到一个半小时的打盹儿过程中也常常会有慢波深度睡眠期以及快速眼动睡眠阶段。\n\n> 早上参加学习的人，无论是背单词还是对模式及规律的辨识，也就是说，无论是需要靠记忆力的学习还是需要靠深度分析能力的学习，在傍晚的考试中，那些白天睡过一小时午觉的人，成绩会比没有午睡的人高出大约30%。“通过这些实验研究，我改变了自己的工作习惯，”梅德尼克告诉我，“也改变了我的生活习惯。”\n\n> “在一些实验中我们发现，白天睡上一小时到一个半小时所得到的学习辅助效果，跟一整晚8小时的通宵睡眠几乎不相上下。”\n\n","slug":"read/如何学习","published":1,"updated":"2020-01-01T08:16:41.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44vay0041hcr7ztv35b0x","content":"<div align=\"center\"><br><img src=\"https://i.loli.net/2019/11/25/Fc1NVSbsmTdtkq8.jpg\" width=\"300\" height=\"400\" alt=\"书的封面\"><br></div>\n\n\n<h4 id=\"我简单总结一下：\"><a href=\"#我简单总结一下：\" class=\"headerlink\" title=\"我简单总结一下：\"></a>我简单总结一下：</h4><ul>\n<li><h4 id=\"时间上：分散开来学习某一知识，要比一下子全部学完效果更好\"><a href=\"#时间上：分散开来学习某一知识，要比一下子全部学完效果更好\" class=\"headerlink\" title=\"时间上：分散开来学习某一知识，要比一下子全部学完效果更好\"></a>时间上：分散开来学习某一知识，要比一下子全部学完效果更好</h4></li>\n<li><h4 id=\"空间上：变换学习时的环境背景要比总在同一个环境背景下学习效果要好\"><a href=\"#空间上：变换学习时的环境背景要比总在同一个环境背景下学习效果要好\" class=\"headerlink\" title=\"空间上：变换学习时的环境背景要比总在同一个环境背景下学习效果要好\"></a>空间上：变换学习时的环境背景要比总在同一个环境背景下学习效果要好</h4></li>\n<li><h4 id=\"不同知识交叉学习，要比连续学习同一知识效果更好\"><a href=\"#不同知识交叉学习，要比连续学习同一知识效果更好\" class=\"headerlink\" title=\"不同知识交叉学习，要比连续学习同一知识效果更好\"></a>不同知识交叉学习，要比连续学习同一知识效果更好</h4></li>\n<li><h4 id=\"适当放松，大脑更有益突破某个困难问题——这叫“顿悟”\"><a href=\"#适当放松，大脑更有益突破某个困难问题——这叫“顿悟”\" class=\"headerlink\" title=\"适当放松，大脑更有益突破某个困难问题——这叫“顿悟”\"></a>适当放松，大脑更有益突破某个困难问题——这叫“顿悟”</h4></li>\n<li><h4 id=\"睡觉-学习\"><a href=\"#睡觉-学习\" class=\"headerlink\" title=\"睡觉 = 学习\"></a>睡觉 = 学习</h4></li>\n</ul>\n<h4 id=\"记忆并没有“消失”或者“遗忘”，只是你暂时无法把它提取出来。\"><a href=\"#记忆并没有“消失”或者“遗忘”，只是你暂时无法把它提取出来。\" class=\"headerlink\" title=\"记忆并没有“消失”或者“遗忘”，只是你暂时无法把它提取出来。\"></a>记忆并没有“消失”或者“遗忘”，只是你暂时无法把它提取出来。</h4><h4 id=\"关于阅读，让我想起了我在维基百科上看到的一个观点：\"><a href=\"#关于阅读，让我想起了我在维基百科上看到的一个观点：\" class=\"headerlink\" title=\"关于阅读，让我想起了我在维基百科上看到的一个观点：\"></a>关于阅读，让我想起了我在维基百科上看到的一个观点：</h4><blockquote>\n<p><strong>以往说“书读百遍其义自现”，现代意义上的阅读强调的是“书读百篇其义自现”，因为阅读靠的是背景知识，靠的是线索，而不是记忆、背诵。</strong></p>\n</blockquote>\n<h3 id=\"遗忘式学习\"><a href=\"#遗忘式学习\" class=\"headerlink\" title=\"遗忘式学习\"></a>遗忘式学习</h3><hr>\n<blockquote>\n<p>而如今这套新理论，并不是对传统理论的补充或更新，而是彻底的破旧立新：“遗忘”在这里被塑造成了“学习”的好朋友，而不再是敌人。</p>\n</blockquote>\n<blockquote>\n<p>记忆失用理论的第一条法则便是：任何记忆都具备两种能力，即储存能力与提取能力。</p>\n</blockquote>\n<blockquote>\n<p>记忆是不会“丢失”的，不会像我们以为的那样越变越淡，直至踪迹全无。准确地说，“丢失”了的其实只是我们一时无法提取出来的记忆而已，它的提取能力在当下很低，低到几乎为零。</p>\n</blockquote>\n<blockquote>\n<p>记忆失用理论认为，大脑一旦重新找到“不见了”的信息或者记忆，那么“曾经遗忘”本身便能起到增强记忆的作用。我们不妨借用前面的比喻，用肌肉锻炼来描述“遗忘式学习”的这一特性：做引体向上，首先会导致你的肌肉细胞受损，可是，等休息一天后再度做这个动作时，肌肉却已经因昨天的受损而变得更加强壮了。</p>\n</blockquote>\n<blockquote>\n<p><strong>我们在提取某项记忆的时候越是大费力气，那么在得到之后，该项记忆的提取能力以及储存能力就飙升得越高，也就是学得越扎实。</strong></p>\n</blockquote>\n<h3 id=\"打破学习的好习惯：环境对学习的影响\"><a href=\"#打破学习的好习惯：环境对学习的影响\" class=\"headerlink\" title=\"打破学习的好习惯：环境对学习的影响\"></a>打破学习的好习惯：环境对学习的影响</h3><hr>\n<h4 id=\"学习是否要保持一贯性\"><a href=\"#学习是否要保持一贯性\" class=\"headerlink\" title=\"学习是否要保持一贯性\"></a>学习是否要保持一贯性</h4><blockquote>\n<p>从20世纪初期开始，“保持一贯性”就成了各种教育指南的标志性指导，这一基本原则已经融入了几乎所有想当然的“学习好习惯”当中。要有固定的习惯、固定的日程、固定的场所、固定的时间，专心学习，别的什么都不要管。在家里或者图书馆里找个安静的角落，大清早也好，深夜里也罢，每天都要在那里坐上相当长一段时间。这类观念至少可以追溯自当年清教徒的生活习惯，以及他们对习经的虔诚追求，至今仍未有半点改变。“找一个安静的、没有任何干扰的地方学习”，贝勒大学（Baylor University）的学习指南开宗明义就是这句话。不止贝勒大学，实际上不少大学的学习指南里都会有这样的语句，而且后面还有：<br> “培养固定的学习习惯，每次学习都要那样。”<br>“戴上耳塞或者耳罩，挡掉噪音的干扰。”<br>“如果有人劝你换个时间再学，不要听。”<br>……<br>诸如此类，都是告诉你要如何在学习时保持一贯性。</p>\n</blockquote>\n<h4 id=\"环境的还原是增强记忆的法宝\"><a href=\"#环境的还原是增强记忆的法宝\" class=\"headerlink\" title=\"环境的还原是增强记忆的法宝\"></a>环境的还原是增强记忆的法宝</h4><p>这么说吧，针对同一个知识点，如果曾经在不同的环境下学习过它，那么你的大脑对这个知识点这段记忆的提取能力，将会大大增强。</p>\n<h4 id=\"诀窍就是多换几个学习场所\"><a href=\"#诀窍就是多换几个学习场所\" class=\"headerlink\" title=\"诀窍就是多换几个学习场所\"></a>诀窍就是多换几个学习场所</h4><blockquote>\n<p>我们可以很容易做到成倍地增加与记忆内容相关联的感知提示数量，而最简单的办法，就是使我们的学习场所加倍——多换几个地方。</p>\n</blockquote>\n<blockquote>\n<p>借用实验报告主笔者的话来说，这次实验显示出“环境背景的变换大大提高了记忆力”。</p>\n</blockquote>\n<blockquote>\n<p>丹尼尔·威林厄姆（Daniel Willingham）是一位指导课堂学习技巧应用的顶级权威，他曾这样建议自己的学生：备考复习时，不要直接照着笔记复习。他对我说：“我告诉他们把笔记放到一边，重新整理学习材料，自己想出一套全新的重点概述来。这样做，会强迫你把学习材料都过一遍，而且是以一种不同的思路去过一遍。”</p>\n</blockquote>\n<blockquote>\n<p>我们要做的恰恰与此相反：换一个完全不同的房间，换一个完全不同的时间段。拿着吉他到外面去，去公园，去树林。换一家不同的咖啡店，换一个不同的练习场。用布鲁斯替换古典音乐。这些针对惯常行为的每一个改变都会帮你把要学、要练的东西记得更牢固一点、更清楚一些，帮你把记忆保留得更长久。其实，这样的实践本身就能强化你的学习，让你学得的东西越发不必依赖于周遭环境。</p>\n</blockquote>\n<h3 id=\"拉开时间间隔：化整为零才能记得持久\"><a href=\"#拉开时间间隔：化整为零才能记得持久\" class=\"headerlink\" title=\"拉开时间间隔：化整为零才能记得持久\"></a>拉开时间间隔：化整为零才能记得持久</h3><hr>\n<blockquote>\n<p>与其一口气全都学完，还不如今天学一点、明天学一点，效果反而更好。不是好一点点，而是好很多。在某些情况下，分散式学习能让我们的记忆事半功倍。</p>\n</blockquote>\n<blockquote>\n<p>艾宾浩斯写道：“同样的重复次数，若恰当地分成几组、拉开时间距离来完成，要比集中起来一次完成的效果明显好很多。”由此，他开创了一条历史先河，成为第一个发现“间隔效应”威力的人。</p>\n</blockquote>\n<blockquote>\n<p>对于极其短暂的时间间隔，就是早期研究中所使用的几秒钟或者几分钟，<strong>也许会使大脑对快速重复的信息变得越来越不感兴趣W</strong>。如果相同的内容重复第二次、第三次，大脑对其的关注就会次第减弱</p>\n</blockquote>\n<blockquote>\n<p>在许多情况下，分散式学习还能给人带来更多的背景提示，也就是我们在第三章所描述过的那种提示。还举新邻居的例子，你第一次知道那两个人的名字，是在一次聚会上，周围有好多朋友、诸多闲聊，还有手里的一杯葡萄酒。第二次，你听到了他们的叫声，隔着那道树篱笆。于是，这两个名字便被嵌入了两层背景当中，而不再是一层。当我们第二次复习一份单词表或者一份资料时，也会是这样的情形，除非你前后两次学习都是在同一个地方，那样的话，第二次的环境影响就可以忽略不计了。</p>\n</blockquote>\n<blockquote>\n<p>再说一遍，“临时抱佛脚”在紧急关头的确很有用，但问题是，所得记忆不会持久。而分散式学习却能让你记得长久得多。</p>\n</blockquote>\n<blockquote>\n<p>“临时抱佛脚的方法寻求的是在临考之前以高强度的学习把东西塞进大脑。但是，以这样的方式学得的东西，能建立起来的联想实在少得可怜。假如同样的内容能在不同的时间、不同的环境背景下反复读、反复背诵、反复提及、反复练习，与其他联想挂上钩，那才能真正使其保留在大脑的记忆之中。”</p>\n</blockquote>\n<h3 id=\"考试的作用\"><a href=\"#考试的作用\" class=\"headerlink\" title=\"考试的作用\"></a>考试的作用</h3><hr>\n<blockquote>\n<p><strong>大脑要从记忆中提取已经学过的课文、名称、公式、技能等任何东西，所要付出的努力远比直接重读一遍或者重学一遍要多得多，而这份额外的努力则加强了这些记忆的储存能力与提取能力</strong>。这样做之所以能对数据信息或者技能的掌握更加牢固，正是因为我们并非简单地重温了一遍，而是自己把它们从脑海中“提取”了出来。</p>\n</blockquote>\n<blockquote>\n<p>一旦我们成功“提取”出了某信息，便同时以不同于上次的储存路径将其重新存储了一遍。这不但使得该信息的储存层次得到了提高，更使得它有了不同于上次的相关联结：它和这次同时提取出来的其他相关信息建立了联结。由此，原先支撑该信息的脑细胞网络也就有了变化。用我们的记忆改变我们的记忆，而且是以我们意想不到的方式做出了改变。</p>\n</blockquote>\n<blockquote>\n<p>请记住：对着自己也好，对着他人也罢，把你学过的东西表述出来，这种简单的做法并非仅是传统意义上的一种“自考”方式，它更是一种“学习”的方式，一种更高效的学习方式。这比你继续坐在那里盯着重点划线的效果肯定要更好，至少能高上20%～30%。更划算的是，这样的练习还能消除我们前面讲过的“熟练度错觉”，让你能真正看清哪些地方你还不知道，哪些地方你还有疑惑，哪些地方你已经忘记……立竿见影。</p>\n</blockquote>\n<h3 id=\"孵化：沉淀思维离不开分心与分享\"><a href=\"#孵化：沉淀思维离不开分心与分享\" class=\"headerlink\" title=\"孵化：沉淀思维离不开分心与分享\"></a>孵化：沉淀思维离不开分心与分享</h3><hr>\n<blockquote>\n<p>请完成‘SEQUENCE’这个单词最后一个字母，唯一的要求是不许用E：<br>SEQUENC_</p>\n</blockquote>\n<h3 id=\"交替：混杂在一起印象更深刻\"><a href=\"#交替：混杂在一起印象更深刻\" class=\"headerlink\" title=\"交替：混杂在一起印象更深刻\"></a>交替：混杂在一起印象更深刻</h3><hr>\n<blockquote>\n<p>专心致志、不受打扰的学习反而成了拖后腿的做法。</p>\n</blockquote>\n<blockquote>\n<p>而交替练习却给人一种进步缓慢的表象，跟单一重复的效果似乎没法比，可实际上随着时间的累加，交替练习所累积起来的进步要比单一重复多得多。从长远来看，单一技巧的重复训练反而会阻碍我们进步。</p>\n</blockquote>\n<blockquote>\n<p>“我们所做的一切都在告诉我们，大脑对发现不协调的地方天生敏感。”</p>\n</blockquote>\n<blockquote>\n<p>“一旦看到什么东西超出了正常秩序或范畴，大脑便会当即警醒起来，敦促潜意识更深入地处理刚接收到的这一信息：‘这东西怎么可能在这里呢？’”</p>\n</blockquote>\n<h3 id=\"睡觉就是学习\"><a href=\"#睡觉就是学习\" class=\"headerlink\" title=\"睡觉就是学习\"></a>睡觉就是学习</h3><hr>\n<ul>\n<li>19世纪德国化学家弗里德里希·凯库勒，就是因为在梦中梦见一群蛇咬住了自己的尾巴，才偶然发现苯的化学结构（其分子卷曲成环状）</li>\n<li>俄国化学家德米特里·门捷列夫，曾告诉他的同事说，他花了好几个通宵试图把所有元素整理成合理的排列方式，却始终一无所获，直到他累得昏睡过去，却在梦中看见了“一份表格，所有元素，各归其位！”。这便是著名的化学元素周期表的由来</li>\n</ul>\n<blockquote>\n<p>从研究数据中获得的大量证据说明，睡眠能增强你对前一天所学内容的理解力和记忆力，而且绝不仅限于彩蛋学习，它还可以辅助你的词汇学习、单词配对、逻辑推理，甚至能有助于你工作中的陈述报告、学校里即将到来的考试，等等。当然，你首先需要记住所有这些课题中关键之处的主要细节，才能借助睡眠把这些要点拼凑起来，形成一幅更为完整的大脑认知图。这么做对你成绩的提升效果相当显著，大约能提升10%～30%，不过科学家们至今尚未充分了解潜意识状态下大脑究竟是如何运作的，因此还给不出合理的解释。</p>\n</blockquote>\n<blockquote>\n<p>西格尔的理论告诉我们，如果保持清醒所耗费的成本已经盖过了收益，那么继续筋疲力尽地熬着就没什么价值了。对此，“夜班理论”为我们提供了很好的解释：因为睡眠也同样具有价值，准确地说，是具有梳理、筛选、整合我们正在学习的功课或者动作的作用。这就叫做阴阳互补。清醒的时候学习效果自是最佳，等收效越来越低时就应赶紧去睡觉，再拖下去就是浪费时间了。而接下来的工作，睡眠会帮你继续完成。</p>\n</blockquote>\n<blockquote>\n<p>最新研究表明，在失去意识的停机状态中，大脑实际上是在澄清记忆、深化技能——睡眠是完成这两项任务必不可少的步骤。<strong>换句话说，从本质上讲，睡觉就是学习。</strong></p>\n</blockquote>\n<blockquote>\n<p>这么说吧：我再也不觉得白天打个盹儿或者晚上早早睡就表示我懒、我浪费光阴，甚至是我根本不愿意学习。<strong>相反，我现在把睡眠看作是闭着眼睛在学习。</strong></p>\n</blockquote>\n<h3 id=\"打个盹也算是睡眠：午睡很重要\"><a href=\"#打个盹也算是睡眠：午睡很重要\" class=\"headerlink\" title=\"打个盹也算是睡眠：午睡很重要\"></a>打个盹也算是睡眠：午睡很重要</h3><hr>\n<blockquote>\n<p>在最近10年间的一系列实验中，加州大学圣迭戈分校的萨拉·梅德尼克（Sara Mednick）发现，人在一小时到一个半小时的打盹儿过程中也常常会有慢波深度睡眠期以及快速眼动睡眠阶段。</p>\n</blockquote>\n<blockquote>\n<p>早上参加学习的人，无论是背单词还是对模式及规律的辨识，也就是说，无论是需要靠记忆力的学习还是需要靠深度分析能力的学习，在傍晚的考试中，那些白天睡过一小时午觉的人，成绩会比没有午睡的人高出大约30%。“通过这些实验研究，我改变了自己的工作习惯，”梅德尼克告诉我，“也改变了我的生活习惯。”</p>\n</blockquote>\n<blockquote>\n<p>“在一些实验中我们发现，白天睡上一小时到一个半小时所得到的学习辅助效果，跟一整晚8小时的通宵睡眠几乎不相上下。”</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<div align=\"center\"><br><img src=\"https://i.loli.net/2019/11/25/Fc1NVSbsmTdtkq8.jpg\" width=\"300\" height=\"400\" alt=\"书的封面\"><br></div>\n\n\n<h4 id=\"我简单总结一下：\"><a href=\"#我简单总结一下：\" class=\"headerlink\" title=\"我简单总结一下：\"></a>我简单总结一下：</h4><ul>\n<li><h4 id=\"时间上：分散开来学习某一知识，要比一下子全部学完效果更好\"><a href=\"#时间上：分散开来学习某一知识，要比一下子全部学完效果更好\" class=\"headerlink\" title=\"时间上：分散开来学习某一知识，要比一下子全部学完效果更好\"></a>时间上：分散开来学习某一知识，要比一下子全部学完效果更好</h4></li>\n<li><h4 id=\"空间上：变换学习时的环境背景要比总在同一个环境背景下学习效果要好\"><a href=\"#空间上：变换学习时的环境背景要比总在同一个环境背景下学习效果要好\" class=\"headerlink\" title=\"空间上：变换学习时的环境背景要比总在同一个环境背景下学习效果要好\"></a>空间上：变换学习时的环境背景要比总在同一个环境背景下学习效果要好</h4></li>\n<li><h4 id=\"不同知识交叉学习，要比连续学习同一知识效果更好\"><a href=\"#不同知识交叉学习，要比连续学习同一知识效果更好\" class=\"headerlink\" title=\"不同知识交叉学习，要比连续学习同一知识效果更好\"></a>不同知识交叉学习，要比连续学习同一知识效果更好</h4></li>\n<li><h4 id=\"适当放松，大脑更有益突破某个困难问题——这叫“顿悟”\"><a href=\"#适当放松，大脑更有益突破某个困难问题——这叫“顿悟”\" class=\"headerlink\" title=\"适当放松，大脑更有益突破某个困难问题——这叫“顿悟”\"></a>适当放松，大脑更有益突破某个困难问题——这叫“顿悟”</h4></li>\n<li><h4 id=\"睡觉-学习\"><a href=\"#睡觉-学习\" class=\"headerlink\" title=\"睡觉 = 学习\"></a>睡觉 = 学习</h4></li>\n</ul>\n<h4 id=\"记忆并没有“消失”或者“遗忘”，只是你暂时无法把它提取出来。\"><a href=\"#记忆并没有“消失”或者“遗忘”，只是你暂时无法把它提取出来。\" class=\"headerlink\" title=\"记忆并没有“消失”或者“遗忘”，只是你暂时无法把它提取出来。\"></a>记忆并没有“消失”或者“遗忘”，只是你暂时无法把它提取出来。</h4><h4 id=\"关于阅读，让我想起了我在维基百科上看到的一个观点：\"><a href=\"#关于阅读，让我想起了我在维基百科上看到的一个观点：\" class=\"headerlink\" title=\"关于阅读，让我想起了我在维基百科上看到的一个观点：\"></a>关于阅读，让我想起了我在维基百科上看到的一个观点：</h4><blockquote>\n<p><strong>以往说“书读百遍其义自现”，现代意义上的阅读强调的是“书读百篇其义自现”，因为阅读靠的是背景知识，靠的是线索，而不是记忆、背诵。</strong></p>\n</blockquote>\n<h3 id=\"遗忘式学习\"><a href=\"#遗忘式学习\" class=\"headerlink\" title=\"遗忘式学习\"></a>遗忘式学习</h3><hr>\n<blockquote>\n<p>而如今这套新理论，并不是对传统理论的补充或更新，而是彻底的破旧立新：“遗忘”在这里被塑造成了“学习”的好朋友，而不再是敌人。</p>\n</blockquote>\n<blockquote>\n<p>记忆失用理论的第一条法则便是：任何记忆都具备两种能力，即储存能力与提取能力。</p>\n</blockquote>\n<blockquote>\n<p>记忆是不会“丢失”的，不会像我们以为的那样越变越淡，直至踪迹全无。准确地说，“丢失”了的其实只是我们一时无法提取出来的记忆而已，它的提取能力在当下很低，低到几乎为零。</p>\n</blockquote>\n<blockquote>\n<p>记忆失用理论认为，大脑一旦重新找到“不见了”的信息或者记忆，那么“曾经遗忘”本身便能起到增强记忆的作用。我们不妨借用前面的比喻，用肌肉锻炼来描述“遗忘式学习”的这一特性：做引体向上，首先会导致你的肌肉细胞受损，可是，等休息一天后再度做这个动作时，肌肉却已经因昨天的受损而变得更加强壮了。</p>\n</blockquote>\n<blockquote>\n<p><strong>我们在提取某项记忆的时候越是大费力气，那么在得到之后，该项记忆的提取能力以及储存能力就飙升得越高，也就是学得越扎实。</strong></p>\n</blockquote>\n<h3 id=\"打破学习的好习惯：环境对学习的影响\"><a href=\"#打破学习的好习惯：环境对学习的影响\" class=\"headerlink\" title=\"打破学习的好习惯：环境对学习的影响\"></a>打破学习的好习惯：环境对学习的影响</h3><hr>\n<h4 id=\"学习是否要保持一贯性\"><a href=\"#学习是否要保持一贯性\" class=\"headerlink\" title=\"学习是否要保持一贯性\"></a>学习是否要保持一贯性</h4><blockquote>\n<p>从20世纪初期开始，“保持一贯性”就成了各种教育指南的标志性指导，这一基本原则已经融入了几乎所有想当然的“学习好习惯”当中。要有固定的习惯、固定的日程、固定的场所、固定的时间，专心学习，别的什么都不要管。在家里或者图书馆里找个安静的角落，大清早也好，深夜里也罢，每天都要在那里坐上相当长一段时间。这类观念至少可以追溯自当年清教徒的生活习惯，以及他们对习经的虔诚追求，至今仍未有半点改变。“找一个安静的、没有任何干扰的地方学习”，贝勒大学（Baylor University）的学习指南开宗明义就是这句话。不止贝勒大学，实际上不少大学的学习指南里都会有这样的语句，而且后面还有：<br> “培养固定的学习习惯，每次学习都要那样。”<br>“戴上耳塞或者耳罩，挡掉噪音的干扰。”<br>“如果有人劝你换个时间再学，不要听。”<br>……<br>诸如此类，都是告诉你要如何在学习时保持一贯性。</p>\n</blockquote>\n<h4 id=\"环境的还原是增强记忆的法宝\"><a href=\"#环境的还原是增强记忆的法宝\" class=\"headerlink\" title=\"环境的还原是增强记忆的法宝\"></a>环境的还原是增强记忆的法宝</h4><p>这么说吧，针对同一个知识点，如果曾经在不同的环境下学习过它，那么你的大脑对这个知识点这段记忆的提取能力，将会大大增强。</p>\n<h4 id=\"诀窍就是多换几个学习场所\"><a href=\"#诀窍就是多换几个学习场所\" class=\"headerlink\" title=\"诀窍就是多换几个学习场所\"></a>诀窍就是多换几个学习场所</h4><blockquote>\n<p>我们可以很容易做到成倍地增加与记忆内容相关联的感知提示数量，而最简单的办法，就是使我们的学习场所加倍——多换几个地方。</p>\n</blockquote>\n<blockquote>\n<p>借用实验报告主笔者的话来说，这次实验显示出“环境背景的变换大大提高了记忆力”。</p>\n</blockquote>\n<blockquote>\n<p>丹尼尔·威林厄姆（Daniel Willingham）是一位指导课堂学习技巧应用的顶级权威，他曾这样建议自己的学生：备考复习时，不要直接照着笔记复习。他对我说：“我告诉他们把笔记放到一边，重新整理学习材料，自己想出一套全新的重点概述来。这样做，会强迫你把学习材料都过一遍，而且是以一种不同的思路去过一遍。”</p>\n</blockquote>\n<blockquote>\n<p>我们要做的恰恰与此相反：换一个完全不同的房间，换一个完全不同的时间段。拿着吉他到外面去，去公园，去树林。换一家不同的咖啡店，换一个不同的练习场。用布鲁斯替换古典音乐。这些针对惯常行为的每一个改变都会帮你把要学、要练的东西记得更牢固一点、更清楚一些，帮你把记忆保留得更长久。其实，这样的实践本身就能强化你的学习，让你学得的东西越发不必依赖于周遭环境。</p>\n</blockquote>\n<h3 id=\"拉开时间间隔：化整为零才能记得持久\"><a href=\"#拉开时间间隔：化整为零才能记得持久\" class=\"headerlink\" title=\"拉开时间间隔：化整为零才能记得持久\"></a>拉开时间间隔：化整为零才能记得持久</h3><hr>\n<blockquote>\n<p>与其一口气全都学完，还不如今天学一点、明天学一点，效果反而更好。不是好一点点，而是好很多。在某些情况下，分散式学习能让我们的记忆事半功倍。</p>\n</blockquote>\n<blockquote>\n<p>艾宾浩斯写道：“同样的重复次数，若恰当地分成几组、拉开时间距离来完成，要比集中起来一次完成的效果明显好很多。”由此，他开创了一条历史先河，成为第一个发现“间隔效应”威力的人。</p>\n</blockquote>\n<blockquote>\n<p>对于极其短暂的时间间隔，就是早期研究中所使用的几秒钟或者几分钟，<strong>也许会使大脑对快速重复的信息变得越来越不感兴趣W</strong>。如果相同的内容重复第二次、第三次，大脑对其的关注就会次第减弱</p>\n</blockquote>\n<blockquote>\n<p>在许多情况下，分散式学习还能给人带来更多的背景提示，也就是我们在第三章所描述过的那种提示。还举新邻居的例子，你第一次知道那两个人的名字，是在一次聚会上，周围有好多朋友、诸多闲聊，还有手里的一杯葡萄酒。第二次，你听到了他们的叫声，隔着那道树篱笆。于是，这两个名字便被嵌入了两层背景当中，而不再是一层。当我们第二次复习一份单词表或者一份资料时，也会是这样的情形，除非你前后两次学习都是在同一个地方，那样的话，第二次的环境影响就可以忽略不计了。</p>\n</blockquote>\n<blockquote>\n<p>再说一遍，“临时抱佛脚”在紧急关头的确很有用，但问题是，所得记忆不会持久。而分散式学习却能让你记得长久得多。</p>\n</blockquote>\n<blockquote>\n<p>“临时抱佛脚的方法寻求的是在临考之前以高强度的学习把东西塞进大脑。但是，以这样的方式学得的东西，能建立起来的联想实在少得可怜。假如同样的内容能在不同的时间、不同的环境背景下反复读、反复背诵、反复提及、反复练习，与其他联想挂上钩，那才能真正使其保留在大脑的记忆之中。”</p>\n</blockquote>\n<h3 id=\"考试的作用\"><a href=\"#考试的作用\" class=\"headerlink\" title=\"考试的作用\"></a>考试的作用</h3><hr>\n<blockquote>\n<p><strong>大脑要从记忆中提取已经学过的课文、名称、公式、技能等任何东西，所要付出的努力远比直接重读一遍或者重学一遍要多得多，而这份额外的努力则加强了这些记忆的储存能力与提取能力</strong>。这样做之所以能对数据信息或者技能的掌握更加牢固，正是因为我们并非简单地重温了一遍，而是自己把它们从脑海中“提取”了出来。</p>\n</blockquote>\n<blockquote>\n<p>一旦我们成功“提取”出了某信息，便同时以不同于上次的储存路径将其重新存储了一遍。这不但使得该信息的储存层次得到了提高，更使得它有了不同于上次的相关联结：它和这次同时提取出来的其他相关信息建立了联结。由此，原先支撑该信息的脑细胞网络也就有了变化。用我们的记忆改变我们的记忆，而且是以我们意想不到的方式做出了改变。</p>\n</blockquote>\n<blockquote>\n<p>请记住：对着自己也好，对着他人也罢，把你学过的东西表述出来，这种简单的做法并非仅是传统意义上的一种“自考”方式，它更是一种“学习”的方式，一种更高效的学习方式。这比你继续坐在那里盯着重点划线的效果肯定要更好，至少能高上20%～30%。更划算的是，这样的练习还能消除我们前面讲过的“熟练度错觉”，让你能真正看清哪些地方你还不知道，哪些地方你还有疑惑，哪些地方你已经忘记……立竿见影。</p>\n</blockquote>\n<h3 id=\"孵化：沉淀思维离不开分心与分享\"><a href=\"#孵化：沉淀思维离不开分心与分享\" class=\"headerlink\" title=\"孵化：沉淀思维离不开分心与分享\"></a>孵化：沉淀思维离不开分心与分享</h3><hr>\n<blockquote>\n<p>请完成‘SEQUENCE’这个单词最后一个字母，唯一的要求是不许用E：<br>SEQUENC_</p>\n</blockquote>\n<h3 id=\"交替：混杂在一起印象更深刻\"><a href=\"#交替：混杂在一起印象更深刻\" class=\"headerlink\" title=\"交替：混杂在一起印象更深刻\"></a>交替：混杂在一起印象更深刻</h3><hr>\n<blockquote>\n<p>专心致志、不受打扰的学习反而成了拖后腿的做法。</p>\n</blockquote>\n<blockquote>\n<p>而交替练习却给人一种进步缓慢的表象，跟单一重复的效果似乎没法比，可实际上随着时间的累加，交替练习所累积起来的进步要比单一重复多得多。从长远来看，单一技巧的重复训练反而会阻碍我们进步。</p>\n</blockquote>\n<blockquote>\n<p>“我们所做的一切都在告诉我们，大脑对发现不协调的地方天生敏感。”</p>\n</blockquote>\n<blockquote>\n<p>“一旦看到什么东西超出了正常秩序或范畴，大脑便会当即警醒起来，敦促潜意识更深入地处理刚接收到的这一信息：‘这东西怎么可能在这里呢？’”</p>\n</blockquote>\n<h3 id=\"睡觉就是学习\"><a href=\"#睡觉就是学习\" class=\"headerlink\" title=\"睡觉就是学习\"></a>睡觉就是学习</h3><hr>\n<ul>\n<li>19世纪德国化学家弗里德里希·凯库勒，就是因为在梦中梦见一群蛇咬住了自己的尾巴，才偶然发现苯的化学结构（其分子卷曲成环状）</li>\n<li>俄国化学家德米特里·门捷列夫，曾告诉他的同事说，他花了好几个通宵试图把所有元素整理成合理的排列方式，却始终一无所获，直到他累得昏睡过去，却在梦中看见了“一份表格，所有元素，各归其位！”。这便是著名的化学元素周期表的由来</li>\n</ul>\n<blockquote>\n<p>从研究数据中获得的大量证据说明，睡眠能增强你对前一天所学内容的理解力和记忆力，而且绝不仅限于彩蛋学习，它还可以辅助你的词汇学习、单词配对、逻辑推理，甚至能有助于你工作中的陈述报告、学校里即将到来的考试，等等。当然，你首先需要记住所有这些课题中关键之处的主要细节，才能借助睡眠把这些要点拼凑起来，形成一幅更为完整的大脑认知图。这么做对你成绩的提升效果相当显著，大约能提升10%～30%，不过科学家们至今尚未充分了解潜意识状态下大脑究竟是如何运作的，因此还给不出合理的解释。</p>\n</blockquote>\n<blockquote>\n<p>西格尔的理论告诉我们，如果保持清醒所耗费的成本已经盖过了收益，那么继续筋疲力尽地熬着就没什么价值了。对此，“夜班理论”为我们提供了很好的解释：因为睡眠也同样具有价值，准确地说，是具有梳理、筛选、整合我们正在学习的功课或者动作的作用。这就叫做阴阳互补。清醒的时候学习效果自是最佳，等收效越来越低时就应赶紧去睡觉，再拖下去就是浪费时间了。而接下来的工作，睡眠会帮你继续完成。</p>\n</blockquote>\n<blockquote>\n<p>最新研究表明，在失去意识的停机状态中，大脑实际上是在澄清记忆、深化技能——睡眠是完成这两项任务必不可少的步骤。<strong>换句话说，从本质上讲，睡觉就是学习。</strong></p>\n</blockquote>\n<blockquote>\n<p>这么说吧：我再也不觉得白天打个盹儿或者晚上早早睡就表示我懒、我浪费光阴，甚至是我根本不愿意学习。<strong>相反，我现在把睡眠看作是闭着眼睛在学习。</strong></p>\n</blockquote>\n<h3 id=\"打个盹也算是睡眠：午睡很重要\"><a href=\"#打个盹也算是睡眠：午睡很重要\" class=\"headerlink\" title=\"打个盹也算是睡眠：午睡很重要\"></a>打个盹也算是睡眠：午睡很重要</h3><hr>\n<blockquote>\n<p>在最近10年间的一系列实验中，加州大学圣迭戈分校的萨拉·梅德尼克（Sara Mednick）发现，人在一小时到一个半小时的打盹儿过程中也常常会有慢波深度睡眠期以及快速眼动睡眠阶段。</p>\n</blockquote>\n<blockquote>\n<p>早上参加学习的人，无论是背单词还是对模式及规律的辨识，也就是说，无论是需要靠记忆力的学习还是需要靠深度分析能力的学习，在傍晚的考试中，那些白天睡过一小时午觉的人，成绩会比没有午睡的人高出大约30%。“通过这些实验研究，我改变了自己的工作习惯，”梅德尼克告诉我，“也改变了我的生活习惯。”</p>\n</blockquote>\n<blockquote>\n<p>“在一些实验中我们发现，白天睡上一小时到一个半小时所得到的学习辅助效果，跟一整晚8小时的通宵睡眠几乎不相上下。”</p>\n</blockquote>\n"},{"title":"《稀缺：我们是如何陷入贫穷与忙碌的》","date":"2019-11-09T16:00:00.000Z","_content":"\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/11/10/61O7IspMNE5mPhW.png\" width = \"300\" height=\"400\" alt=\"书的封面\">\n</div>\n\n# 关于这本书和它的作者\n---\n* 本书的作者之一，是一位行为经济学家，他曾在印度贫穷的的地方参与了扶贫工作。\n* 回国后和另外一位认知心理学家，一起合作写出了这本书。\n* 可以说是强强联合哈。\n* 两位作者将我们日常生活的直观感受上升到了理论高度。\n\n**“本书所要表达的观点十分简单。稀缺会俘获我们的注意力，并带来一点点好处：我们能够在应对迫切需求时，做得更好。但从长远的角度来看，我们的损失更大：我们会忽视其他需要关注的事项，在生活的其他方面变得不那么有成效”**\n\n# 稀缺俘获大脑\n---\n不管是饥饿的实验对象头脑里只有食物；还是作者自己面对一拖再拖的计划表，着急的不知所措；亦或者每个月都为各种账单头疼的办公室经理。他们的共同点都是：**稀缺**，只不过是缺食物，缺时间，缺钱的区别而已。（亦或是缺爱，各种形式的爱，只不过作者没有针对这种形式的稀缺给出解决方案。。。）\n\n稀缺会俘获我们的大脑，**并且是无意识的，** 不管大脑现在的主人是谁，也不管你是否愿意。\n\n# 专注的“得”与管窥得“失”\n---\n**“当稀缺俘获大脑时，人们的注意力会集中在紧急的事情上，并将其他事物排除在外。这种专注会让人们从稀缺中获益，让人们获得“专注红利”。由于“目标抑制”的作用，人们在专注于某项重要事物的同时，就不容易想到其他重要事物。因此，专注也会导致管窥，让人们的视野变窄，从而付出沉重代价。”**\n\n### 专注的“得”\n* 最常见的就是：**deadline能显著提高一个人的工作效率**，因为deadline产生了时间稀缺。\n* 对于大学四年即将毕业的学生，在最后的几周里，即便是在宿舍躺了三年半的人，也会开始走出舍门，上上课，参加参加活动，校园四处逛逛。这也是稀缺在作祟。因为学生开始意识到快乐的大学时光就要没有了！\n* 作者自己描述自己写作的经历，在离交稿还有很长时间的时候，写一章内容非常缓慢。一上午喝杯咖啡，查收查收邮件，刷刷手机就过去了，一天下来发现根本没写几行字。但是在离交稿只剩几天的时候，写作速度得到了惊人的提升！\n* 很多人都讨厌开会，所有会议一开始都是没有重点的，经常会脱离会议的主题：原本简单的要点总是要费尽周折才能说明白；每个人都有自己的见解，却没有人能给出解决方法；时间都花费在了与主题无关的细节上。但是会议开到一半时，情况开始发生变化。与会者发现时间快不够了，于是变的认真起来，大家齐心协力，不同意见纷纷被否决，真正关键的问题成为焦点，其他一切靠边站。**“会议的后半段总是会出现很多此种实质性的进展。”**\n \n### 管窥得“失”\n* 书中举了一个真实的例子：消防员竟然在救火的路上牺牲了。原因就是接到火警电话后，消防员往往只有短短几分钟的时候，要在任何情况下穿好所有防护装备，然后上车出发，在到达现场之前就要制定出消防策略：起火建筑的结构和布局、消防栓的位置救火的路线。消防员如此专注，以至于却忘记在车上系安全带这么基本的操作。\n* 工作的截止日期就要到了，这时人们往往会忽视除了工作之外的东西，比如健康（去健身）、陪孩子、给父母打电话。这些显然也是很重要的。\n\n# 带宽负担会降低人的智商\n---\n**“带宽（bandwidth） 就是心智的容量，包括两种能力，分别为认知能力和执行控制力。稀缺会降低所有这些带宽的容量，致使我们缺乏洞察力和前瞻性，还会减弱我们的执行控制力。”**\n\n**“分心、爱忘事、缺乏冲动控制能力。这些效应的规模也体现了带宽负担对各类行为所产生的实质性影响，甚至包括那些一般被归于“个性”或“才华”的耐心、忍耐力、关注力和奉献精神。”**\n\n当带宽有了沉重负担时，人们的行为就会呈现出以上3种形式的一种：\n* 满腹心事的经理人在冲着女儿发火时，似乎不是一位合格的家长；\n* 为学费发愁的学生连简单的试题都答错了，好像是能力不足、为人懒惰的表现。\n\n但这些人既非一无所长，也非情感冷漠，而是背负着沉重的带宽负担。\n\n就好像你正在使用一台电脑简单的浏览浏览网页，发现奇卡无比，难以忍受。就会觉得这台电脑也太卡了，机器肯定有问题。但你不知道，这台电脑的后台正在同时运行着几十个其他程序！\n\n**“对于我们的心智处理器来说，稀缺也会产生类似的效应。稀缺会不断地给大脑装载其他处理内容，而留给处理当前任务的“心智”就没有那么多了。这就引出了我们本章所要呈现给读者的核心假设：**\n\n**稀缺会直接减少带宽——不是减少某人与生俱来的带宽容量，而是减少其当下能用得上的容量。”**\n\n当作者谈论到穷人时，这样说：\n\n**“举例来说，贫穷状态会比彻夜不眠对人的认知能力产生的影响更大。产生这个问题的原因并不是穷人的带宽不及富人，而是因为贫困的经历会降低任何一个人的带宽。”**\n\n**负担过重时：**\n* 你讲的笑话是不是都不那么好笑了？\n* 你是不是也变得不那么友善了？\n* 你做出的决定是不是更不明智了？\n* 你是否曾经这样说过：“我现在不想做这个重要决定，因为我的带宽超负荷了。”\n\n# 过度关注：稀缺锁定注意力\n---\n\n### 孤独就是社交稀缺\n孤独者太想被其他人喜欢而做得过犹不及，源自太过专注于自身的稀缺。\n\n孤独者在理解他人情感方面比普通人更擅长，这正是他们得到的专注红利。而当利害关系增大时，他们就无法灵活运用这方面技能了。觉得自己的笑话讲的一点不好笑、一直琢磨接下来要说什么、过度解读他人的行为和言语，从然导致 **“发挥失常”**\n\n在球场上，球员也常会出现“发挥失常”的情况。比如一位篮球选手在一个赛季中的三分球命中率竟然比罚球命中率还要高。要知道三分球距离更远，角度通常十分诡异，而且还可能会有对方球员过来干扰你。但是罚球十分简单，首先距离更近，速度和节奏完全由罚球者自由掌握，还不会受到对方球员的干扰。\n\n### 表现与关注度\n\n**“发挥失常，是一种更宽泛现象的冰山一角而已。心理学家们在研究各类任务的过程中发现，表现与关注度或称“觉醒”是相互关联的，其关联性呈现为倒转的U型弧线——如果关注度过低，表现就会变弱；而若关注度过高，表现同样会被消弱”**\n\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/11/19/gxUyh7VopTIWa5C.jpg\" width = \"300\" height=\"200\" alt=\"表现与关注度\">\n</div>\n\n**“如果我们所从事的任务位于波峰的左侧，那么过多的关注就是好事。对于其他任务来说，比如自由投篮，如果你是职业选手，就有可能因为在动作上投入了过多的精力而到达波峰的另一侧。自由投篮对于一些优秀运动员来说颇有难度，因为他们总是太过专注。”**\n\n**“孤独者之所以会表现得很糟糕，是因为他们越过了倒转U型弧线的波峰，做得过犹不及。他们无法倾听对方的讲话，无法从容地闲聊，而是聚精会神地专注在“他们是否喜欢我”或“讲这个故事会不会好笑”等想法上。就像专业自由投篮选手将注意力转移到别处，随手一抛就能命中一样，孤独者如果将注意力从他们的社交需求上转移开来，就能做得更好。但是，稀缺却阻碍了这种变化，将孤独者的思想拉回了本该避免的状态”**\n\n# 如何从稀缺走向富足\n---\n\n待续\n\n\n\n","source":"_posts/read/稀缺：我们是如何陷入贫穷与忙碌的.md","raw":"---\ntitle: 《稀缺：我们是如何陷入贫穷与忙碌的》\ncategories: 读书\ndate: 2019-11-10\n---\n\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/11/10/61O7IspMNE5mPhW.png\" width = \"300\" height=\"400\" alt=\"书的封面\">\n</div>\n\n# 关于这本书和它的作者\n---\n* 本书的作者之一，是一位行为经济学家，他曾在印度贫穷的的地方参与了扶贫工作。\n* 回国后和另外一位认知心理学家，一起合作写出了这本书。\n* 可以说是强强联合哈。\n* 两位作者将我们日常生活的直观感受上升到了理论高度。\n\n**“本书所要表达的观点十分简单。稀缺会俘获我们的注意力，并带来一点点好处：我们能够在应对迫切需求时，做得更好。但从长远的角度来看，我们的损失更大：我们会忽视其他需要关注的事项，在生活的其他方面变得不那么有成效”**\n\n# 稀缺俘获大脑\n---\n不管是饥饿的实验对象头脑里只有食物；还是作者自己面对一拖再拖的计划表，着急的不知所措；亦或者每个月都为各种账单头疼的办公室经理。他们的共同点都是：**稀缺**，只不过是缺食物，缺时间，缺钱的区别而已。（亦或是缺爱，各种形式的爱，只不过作者没有针对这种形式的稀缺给出解决方案。。。）\n\n稀缺会俘获我们的大脑，**并且是无意识的，** 不管大脑现在的主人是谁，也不管你是否愿意。\n\n# 专注的“得”与管窥得“失”\n---\n**“当稀缺俘获大脑时，人们的注意力会集中在紧急的事情上，并将其他事物排除在外。这种专注会让人们从稀缺中获益，让人们获得“专注红利”。由于“目标抑制”的作用，人们在专注于某项重要事物的同时，就不容易想到其他重要事物。因此，专注也会导致管窥，让人们的视野变窄，从而付出沉重代价。”**\n\n### 专注的“得”\n* 最常见的就是：**deadline能显著提高一个人的工作效率**，因为deadline产生了时间稀缺。\n* 对于大学四年即将毕业的学生，在最后的几周里，即便是在宿舍躺了三年半的人，也会开始走出舍门，上上课，参加参加活动，校园四处逛逛。这也是稀缺在作祟。因为学生开始意识到快乐的大学时光就要没有了！\n* 作者自己描述自己写作的经历，在离交稿还有很长时间的时候，写一章内容非常缓慢。一上午喝杯咖啡，查收查收邮件，刷刷手机就过去了，一天下来发现根本没写几行字。但是在离交稿只剩几天的时候，写作速度得到了惊人的提升！\n* 很多人都讨厌开会，所有会议一开始都是没有重点的，经常会脱离会议的主题：原本简单的要点总是要费尽周折才能说明白；每个人都有自己的见解，却没有人能给出解决方法；时间都花费在了与主题无关的细节上。但是会议开到一半时，情况开始发生变化。与会者发现时间快不够了，于是变的认真起来，大家齐心协力，不同意见纷纷被否决，真正关键的问题成为焦点，其他一切靠边站。**“会议的后半段总是会出现很多此种实质性的进展。”**\n \n### 管窥得“失”\n* 书中举了一个真实的例子：消防员竟然在救火的路上牺牲了。原因就是接到火警电话后，消防员往往只有短短几分钟的时候，要在任何情况下穿好所有防护装备，然后上车出发，在到达现场之前就要制定出消防策略：起火建筑的结构和布局、消防栓的位置救火的路线。消防员如此专注，以至于却忘记在车上系安全带这么基本的操作。\n* 工作的截止日期就要到了，这时人们往往会忽视除了工作之外的东西，比如健康（去健身）、陪孩子、给父母打电话。这些显然也是很重要的。\n\n# 带宽负担会降低人的智商\n---\n**“带宽（bandwidth） 就是心智的容量，包括两种能力，分别为认知能力和执行控制力。稀缺会降低所有这些带宽的容量，致使我们缺乏洞察力和前瞻性，还会减弱我们的执行控制力。”**\n\n**“分心、爱忘事、缺乏冲动控制能力。这些效应的规模也体现了带宽负担对各类行为所产生的实质性影响，甚至包括那些一般被归于“个性”或“才华”的耐心、忍耐力、关注力和奉献精神。”**\n\n当带宽有了沉重负担时，人们的行为就会呈现出以上3种形式的一种：\n* 满腹心事的经理人在冲着女儿发火时，似乎不是一位合格的家长；\n* 为学费发愁的学生连简单的试题都答错了，好像是能力不足、为人懒惰的表现。\n\n但这些人既非一无所长，也非情感冷漠，而是背负着沉重的带宽负担。\n\n就好像你正在使用一台电脑简单的浏览浏览网页，发现奇卡无比，难以忍受。就会觉得这台电脑也太卡了，机器肯定有问题。但你不知道，这台电脑的后台正在同时运行着几十个其他程序！\n\n**“对于我们的心智处理器来说，稀缺也会产生类似的效应。稀缺会不断地给大脑装载其他处理内容，而留给处理当前任务的“心智”就没有那么多了。这就引出了我们本章所要呈现给读者的核心假设：**\n\n**稀缺会直接减少带宽——不是减少某人与生俱来的带宽容量，而是减少其当下能用得上的容量。”**\n\n当作者谈论到穷人时，这样说：\n\n**“举例来说，贫穷状态会比彻夜不眠对人的认知能力产生的影响更大。产生这个问题的原因并不是穷人的带宽不及富人，而是因为贫困的经历会降低任何一个人的带宽。”**\n\n**负担过重时：**\n* 你讲的笑话是不是都不那么好笑了？\n* 你是不是也变得不那么友善了？\n* 你做出的决定是不是更不明智了？\n* 你是否曾经这样说过：“我现在不想做这个重要决定，因为我的带宽超负荷了。”\n\n# 过度关注：稀缺锁定注意力\n---\n\n### 孤独就是社交稀缺\n孤独者太想被其他人喜欢而做得过犹不及，源自太过专注于自身的稀缺。\n\n孤独者在理解他人情感方面比普通人更擅长，这正是他们得到的专注红利。而当利害关系增大时，他们就无法灵活运用这方面技能了。觉得自己的笑话讲的一点不好笑、一直琢磨接下来要说什么、过度解读他人的行为和言语，从然导致 **“发挥失常”**\n\n在球场上，球员也常会出现“发挥失常”的情况。比如一位篮球选手在一个赛季中的三分球命中率竟然比罚球命中率还要高。要知道三分球距离更远，角度通常十分诡异，而且还可能会有对方球员过来干扰你。但是罚球十分简单，首先距离更近，速度和节奏完全由罚球者自由掌握，还不会受到对方球员的干扰。\n\n### 表现与关注度\n\n**“发挥失常，是一种更宽泛现象的冰山一角而已。心理学家们在研究各类任务的过程中发现，表现与关注度或称“觉醒”是相互关联的，其关联性呈现为倒转的U型弧线——如果关注度过低，表现就会变弱；而若关注度过高，表现同样会被消弱”**\n\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/11/19/gxUyh7VopTIWa5C.jpg\" width = \"300\" height=\"200\" alt=\"表现与关注度\">\n</div>\n\n**“如果我们所从事的任务位于波峰的左侧，那么过多的关注就是好事。对于其他任务来说，比如自由投篮，如果你是职业选手，就有可能因为在动作上投入了过多的精力而到达波峰的另一侧。自由投篮对于一些优秀运动员来说颇有难度，因为他们总是太过专注。”**\n\n**“孤独者之所以会表现得很糟糕，是因为他们越过了倒转U型弧线的波峰，做得过犹不及。他们无法倾听对方的讲话，无法从容地闲聊，而是聚精会神地专注在“他们是否喜欢我”或“讲这个故事会不会好笑”等想法上。就像专业自由投篮选手将注意力转移到别处，随手一抛就能命中一样，孤独者如果将注意力从他们的社交需求上转移开来，就能做得更好。但是，稀缺却阻碍了这种变化，将孤独者的思想拉回了本该避免的状态”**\n\n# 如何从稀缺走向富足\n---\n\n待续\n\n\n\n","slug":"read/稀缺：我们是如何陷入贫穷与忙碌的","published":1,"updated":"2019-11-24T07:26:21.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44vaz0042hcr7yghv9w8l","content":"<div align=\"center\"><br><img src=\"https://i.loli.net/2019/11/10/61O7IspMNE5mPhW.png\" width=\"300\" height=\"400\" alt=\"书的封面\"><br></div>\n\n<h1 id=\"关于这本书和它的作者\"><a href=\"#关于这本书和它的作者\" class=\"headerlink\" title=\"关于这本书和它的作者\"></a>关于这本书和它的作者</h1><hr>\n<ul>\n<li>本书的作者之一，是一位行为经济学家，他曾在印度贫穷的的地方参与了扶贫工作。</li>\n<li>回国后和另外一位认知心理学家，一起合作写出了这本书。</li>\n<li>可以说是强强联合哈。</li>\n<li>两位作者将我们日常生活的直观感受上升到了理论高度。</li>\n</ul>\n<p><strong>“本书所要表达的观点十分简单。稀缺会俘获我们的注意力，并带来一点点好处：我们能够在应对迫切需求时，做得更好。但从长远的角度来看，我们的损失更大：我们会忽视其他需要关注的事项，在生活的其他方面变得不那么有成效”</strong></p>\n<h1 id=\"稀缺俘获大脑\"><a href=\"#稀缺俘获大脑\" class=\"headerlink\" title=\"稀缺俘获大脑\"></a>稀缺俘获大脑</h1><hr>\n<p>不管是饥饿的实验对象头脑里只有食物；还是作者自己面对一拖再拖的计划表，着急的不知所措；亦或者每个月都为各种账单头疼的办公室经理。他们的共同点都是：<strong>稀缺</strong>，只不过是缺食物，缺时间，缺钱的区别而已。（亦或是缺爱，各种形式的爱，只不过作者没有针对这种形式的稀缺给出解决方案。。。）</p>\n<p>稀缺会俘获我们的大脑，<strong>并且是无意识的，</strong> 不管大脑现在的主人是谁，也不管你是否愿意。</p>\n<h1 id=\"专注的“得”与管窥得“失”\"><a href=\"#专注的“得”与管窥得“失”\" class=\"headerlink\" title=\"专注的“得”与管窥得“失”\"></a>专注的“得”与管窥得“失”</h1><hr>\n<p><strong>“当稀缺俘获大脑时，人们的注意力会集中在紧急的事情上，并将其他事物排除在外。这种专注会让人们从稀缺中获益，让人们获得“专注红利”。由于“目标抑制”的作用，人们在专注于某项重要事物的同时，就不容易想到其他重要事物。因此，专注也会导致管窥，让人们的视野变窄，从而付出沉重代价。”</strong></p>\n<h3 id=\"专注的“得”\"><a href=\"#专注的“得”\" class=\"headerlink\" title=\"专注的“得”\"></a>专注的“得”</h3><ul>\n<li>最常见的就是：<strong>deadline能显著提高一个人的工作效率</strong>，因为deadline产生了时间稀缺。</li>\n<li>对于大学四年即将毕业的学生，在最后的几周里，即便是在宿舍躺了三年半的人，也会开始走出舍门，上上课，参加参加活动，校园四处逛逛。这也是稀缺在作祟。因为学生开始意识到快乐的大学时光就要没有了！</li>\n<li>作者自己描述自己写作的经历，在离交稿还有很长时间的时候，写一章内容非常缓慢。一上午喝杯咖啡，查收查收邮件，刷刷手机就过去了，一天下来发现根本没写几行字。但是在离交稿只剩几天的时候，写作速度得到了惊人的提升！</li>\n<li>很多人都讨厌开会，所有会议一开始都是没有重点的，经常会脱离会议的主题：原本简单的要点总是要费尽周折才能说明白；每个人都有自己的见解，却没有人能给出解决方法；时间都花费在了与主题无关的细节上。但是会议开到一半时，情况开始发生变化。与会者发现时间快不够了，于是变的认真起来，大家齐心协力，不同意见纷纷被否决，真正关键的问题成为焦点，其他一切靠边站。<strong>“会议的后半段总是会出现很多此种实质性的进展。”</strong></li>\n</ul>\n<h3 id=\"管窥得“失”\"><a href=\"#管窥得“失”\" class=\"headerlink\" title=\"管窥得“失”\"></a>管窥得“失”</h3><ul>\n<li>书中举了一个真实的例子：消防员竟然在救火的路上牺牲了。原因就是接到火警电话后，消防员往往只有短短几分钟的时候，要在任何情况下穿好所有防护装备，然后上车出发，在到达现场之前就要制定出消防策略：起火建筑的结构和布局、消防栓的位置救火的路线。消防员如此专注，以至于却忘记在车上系安全带这么基本的操作。</li>\n<li>工作的截止日期就要到了，这时人们往往会忽视除了工作之外的东西，比如健康（去健身）、陪孩子、给父母打电话。这些显然也是很重要的。</li>\n</ul>\n<h1 id=\"带宽负担会降低人的智商\"><a href=\"#带宽负担会降低人的智商\" class=\"headerlink\" title=\"带宽负担会降低人的智商\"></a>带宽负担会降低人的智商</h1><hr>\n<p><strong>“带宽（bandwidth） 就是心智的容量，包括两种能力，分别为认知能力和执行控制力。稀缺会降低所有这些带宽的容量，致使我们缺乏洞察力和前瞻性，还会减弱我们的执行控制力。”</strong></p>\n<p><strong>“分心、爱忘事、缺乏冲动控制能力。这些效应的规模也体现了带宽负担对各类行为所产生的实质性影响，甚至包括那些一般被归于“个性”或“才华”的耐心、忍耐力、关注力和奉献精神。”</strong></p>\n<p>当带宽有了沉重负担时，人们的行为就会呈现出以上3种形式的一种：</p>\n<ul>\n<li>满腹心事的经理人在冲着女儿发火时，似乎不是一位合格的家长；</li>\n<li>为学费发愁的学生连简单的试题都答错了，好像是能力不足、为人懒惰的表现。</li>\n</ul>\n<p>但这些人既非一无所长，也非情感冷漠，而是背负着沉重的带宽负担。</p>\n<p>就好像你正在使用一台电脑简单的浏览浏览网页，发现奇卡无比，难以忍受。就会觉得这台电脑也太卡了，机器肯定有问题。但你不知道，这台电脑的后台正在同时运行着几十个其他程序！</p>\n<p><strong>“对于我们的心智处理器来说，稀缺也会产生类似的效应。稀缺会不断地给大脑装载其他处理内容，而留给处理当前任务的“心智”就没有那么多了。这就引出了我们本章所要呈现给读者的核心假设：</strong></p>\n<p><strong>稀缺会直接减少带宽——不是减少某人与生俱来的带宽容量，而是减少其当下能用得上的容量。”</strong></p>\n<p>当作者谈论到穷人时，这样说：</p>\n<p><strong>“举例来说，贫穷状态会比彻夜不眠对人的认知能力产生的影响更大。产生这个问题的原因并不是穷人的带宽不及富人，而是因为贫困的经历会降低任何一个人的带宽。”</strong></p>\n<p><strong>负担过重时：</strong></p>\n<ul>\n<li>你讲的笑话是不是都不那么好笑了？</li>\n<li>你是不是也变得不那么友善了？</li>\n<li>你做出的决定是不是更不明智了？</li>\n<li>你是否曾经这样说过：“我现在不想做这个重要决定，因为我的带宽超负荷了。”</li>\n</ul>\n<h1 id=\"过度关注：稀缺锁定注意力\"><a href=\"#过度关注：稀缺锁定注意力\" class=\"headerlink\" title=\"过度关注：稀缺锁定注意力\"></a>过度关注：稀缺锁定注意力</h1><hr>\n<h3 id=\"孤独就是社交稀缺\"><a href=\"#孤独就是社交稀缺\" class=\"headerlink\" title=\"孤独就是社交稀缺\"></a>孤独就是社交稀缺</h3><p>孤独者太想被其他人喜欢而做得过犹不及，源自太过专注于自身的稀缺。</p>\n<p>孤独者在理解他人情感方面比普通人更擅长，这正是他们得到的专注红利。而当利害关系增大时，他们就无法灵活运用这方面技能了。觉得自己的笑话讲的一点不好笑、一直琢磨接下来要说什么、过度解读他人的行为和言语，从然导致 <strong>“发挥失常”</strong></p>\n<p>在球场上，球员也常会出现“发挥失常”的情况。比如一位篮球选手在一个赛季中的三分球命中率竟然比罚球命中率还要高。要知道三分球距离更远，角度通常十分诡异，而且还可能会有对方球员过来干扰你。但是罚球十分简单，首先距离更近，速度和节奏完全由罚球者自由掌握，还不会受到对方球员的干扰。</p>\n<h3 id=\"表现与关注度\"><a href=\"#表现与关注度\" class=\"headerlink\" title=\"表现与关注度\"></a>表现与关注度</h3><p><strong>“发挥失常，是一种更宽泛现象的冰山一角而已。心理学家们在研究各类任务的过程中发现，表现与关注度或称“觉醒”是相互关联的，其关联性呈现为倒转的U型弧线——如果关注度过低，表现就会变弱；而若关注度过高，表现同样会被消弱”</strong></p>\n<div align=\"center\"><br><img src=\"https://i.loli.net/2019/11/19/gxUyh7VopTIWa5C.jpg\" width=\"300\" height=\"200\" alt=\"表现与关注度\"><br></div>\n\n<p><strong>“如果我们所从事的任务位于波峰的左侧，那么过多的关注就是好事。对于其他任务来说，比如自由投篮，如果你是职业选手，就有可能因为在动作上投入了过多的精力而到达波峰的另一侧。自由投篮对于一些优秀运动员来说颇有难度，因为他们总是太过专注。”</strong></p>\n<p><strong>“孤独者之所以会表现得很糟糕，是因为他们越过了倒转U型弧线的波峰，做得过犹不及。他们无法倾听对方的讲话，无法从容地闲聊，而是聚精会神地专注在“他们是否喜欢我”或“讲这个故事会不会好笑”等想法上。就像专业自由投篮选手将注意力转移到别处，随手一抛就能命中一样，孤独者如果将注意力从他们的社交需求上转移开来，就能做得更好。但是，稀缺却阻碍了这种变化，将孤独者的思想拉回了本该避免的状态”</strong></p>\n<h1 id=\"如何从稀缺走向富足\"><a href=\"#如何从稀缺走向富足\" class=\"headerlink\" title=\"如何从稀缺走向富足\"></a>如何从稀缺走向富足</h1><hr>\n<p>待续</p>\n","site":{"data":{}},"excerpt":"","more":"<div align=\"center\"><br><img src=\"https://i.loli.net/2019/11/10/61O7IspMNE5mPhW.png\" width=\"300\" height=\"400\" alt=\"书的封面\"><br></div>\n\n<h1 id=\"关于这本书和它的作者\"><a href=\"#关于这本书和它的作者\" class=\"headerlink\" title=\"关于这本书和它的作者\"></a>关于这本书和它的作者</h1><hr>\n<ul>\n<li>本书的作者之一，是一位行为经济学家，他曾在印度贫穷的的地方参与了扶贫工作。</li>\n<li>回国后和另外一位认知心理学家，一起合作写出了这本书。</li>\n<li>可以说是强强联合哈。</li>\n<li>两位作者将我们日常生活的直观感受上升到了理论高度。</li>\n</ul>\n<p><strong>“本书所要表达的观点十分简单。稀缺会俘获我们的注意力，并带来一点点好处：我们能够在应对迫切需求时，做得更好。但从长远的角度来看，我们的损失更大：我们会忽视其他需要关注的事项，在生活的其他方面变得不那么有成效”</strong></p>\n<h1 id=\"稀缺俘获大脑\"><a href=\"#稀缺俘获大脑\" class=\"headerlink\" title=\"稀缺俘获大脑\"></a>稀缺俘获大脑</h1><hr>\n<p>不管是饥饿的实验对象头脑里只有食物；还是作者自己面对一拖再拖的计划表，着急的不知所措；亦或者每个月都为各种账单头疼的办公室经理。他们的共同点都是：<strong>稀缺</strong>，只不过是缺食物，缺时间，缺钱的区别而已。（亦或是缺爱，各种形式的爱，只不过作者没有针对这种形式的稀缺给出解决方案。。。）</p>\n<p>稀缺会俘获我们的大脑，<strong>并且是无意识的，</strong> 不管大脑现在的主人是谁，也不管你是否愿意。</p>\n<h1 id=\"专注的“得”与管窥得“失”\"><a href=\"#专注的“得”与管窥得“失”\" class=\"headerlink\" title=\"专注的“得”与管窥得“失”\"></a>专注的“得”与管窥得“失”</h1><hr>\n<p><strong>“当稀缺俘获大脑时，人们的注意力会集中在紧急的事情上，并将其他事物排除在外。这种专注会让人们从稀缺中获益，让人们获得“专注红利”。由于“目标抑制”的作用，人们在专注于某项重要事物的同时，就不容易想到其他重要事物。因此，专注也会导致管窥，让人们的视野变窄，从而付出沉重代价。”</strong></p>\n<h3 id=\"专注的“得”\"><a href=\"#专注的“得”\" class=\"headerlink\" title=\"专注的“得”\"></a>专注的“得”</h3><ul>\n<li>最常见的就是：<strong>deadline能显著提高一个人的工作效率</strong>，因为deadline产生了时间稀缺。</li>\n<li>对于大学四年即将毕业的学生，在最后的几周里，即便是在宿舍躺了三年半的人，也会开始走出舍门，上上课，参加参加活动，校园四处逛逛。这也是稀缺在作祟。因为学生开始意识到快乐的大学时光就要没有了！</li>\n<li>作者自己描述自己写作的经历，在离交稿还有很长时间的时候，写一章内容非常缓慢。一上午喝杯咖啡，查收查收邮件，刷刷手机就过去了，一天下来发现根本没写几行字。但是在离交稿只剩几天的时候，写作速度得到了惊人的提升！</li>\n<li>很多人都讨厌开会，所有会议一开始都是没有重点的，经常会脱离会议的主题：原本简单的要点总是要费尽周折才能说明白；每个人都有自己的见解，却没有人能给出解决方法；时间都花费在了与主题无关的细节上。但是会议开到一半时，情况开始发生变化。与会者发现时间快不够了，于是变的认真起来，大家齐心协力，不同意见纷纷被否决，真正关键的问题成为焦点，其他一切靠边站。<strong>“会议的后半段总是会出现很多此种实质性的进展。”</strong></li>\n</ul>\n<h3 id=\"管窥得“失”\"><a href=\"#管窥得“失”\" class=\"headerlink\" title=\"管窥得“失”\"></a>管窥得“失”</h3><ul>\n<li>书中举了一个真实的例子：消防员竟然在救火的路上牺牲了。原因就是接到火警电话后，消防员往往只有短短几分钟的时候，要在任何情况下穿好所有防护装备，然后上车出发，在到达现场之前就要制定出消防策略：起火建筑的结构和布局、消防栓的位置救火的路线。消防员如此专注，以至于却忘记在车上系安全带这么基本的操作。</li>\n<li>工作的截止日期就要到了，这时人们往往会忽视除了工作之外的东西，比如健康（去健身）、陪孩子、给父母打电话。这些显然也是很重要的。</li>\n</ul>\n<h1 id=\"带宽负担会降低人的智商\"><a href=\"#带宽负担会降低人的智商\" class=\"headerlink\" title=\"带宽负担会降低人的智商\"></a>带宽负担会降低人的智商</h1><hr>\n<p><strong>“带宽（bandwidth） 就是心智的容量，包括两种能力，分别为认知能力和执行控制力。稀缺会降低所有这些带宽的容量，致使我们缺乏洞察力和前瞻性，还会减弱我们的执行控制力。”</strong></p>\n<p><strong>“分心、爱忘事、缺乏冲动控制能力。这些效应的规模也体现了带宽负担对各类行为所产生的实质性影响，甚至包括那些一般被归于“个性”或“才华”的耐心、忍耐力、关注力和奉献精神。”</strong></p>\n<p>当带宽有了沉重负担时，人们的行为就会呈现出以上3种形式的一种：</p>\n<ul>\n<li>满腹心事的经理人在冲着女儿发火时，似乎不是一位合格的家长；</li>\n<li>为学费发愁的学生连简单的试题都答错了，好像是能力不足、为人懒惰的表现。</li>\n</ul>\n<p>但这些人既非一无所长，也非情感冷漠，而是背负着沉重的带宽负担。</p>\n<p>就好像你正在使用一台电脑简单的浏览浏览网页，发现奇卡无比，难以忍受。就会觉得这台电脑也太卡了，机器肯定有问题。但你不知道，这台电脑的后台正在同时运行着几十个其他程序！</p>\n<p><strong>“对于我们的心智处理器来说，稀缺也会产生类似的效应。稀缺会不断地给大脑装载其他处理内容，而留给处理当前任务的“心智”就没有那么多了。这就引出了我们本章所要呈现给读者的核心假设：</strong></p>\n<p><strong>稀缺会直接减少带宽——不是减少某人与生俱来的带宽容量，而是减少其当下能用得上的容量。”</strong></p>\n<p>当作者谈论到穷人时，这样说：</p>\n<p><strong>“举例来说，贫穷状态会比彻夜不眠对人的认知能力产生的影响更大。产生这个问题的原因并不是穷人的带宽不及富人，而是因为贫困的经历会降低任何一个人的带宽。”</strong></p>\n<p><strong>负担过重时：</strong></p>\n<ul>\n<li>你讲的笑话是不是都不那么好笑了？</li>\n<li>你是不是也变得不那么友善了？</li>\n<li>你做出的决定是不是更不明智了？</li>\n<li>你是否曾经这样说过：“我现在不想做这个重要决定，因为我的带宽超负荷了。”</li>\n</ul>\n<h1 id=\"过度关注：稀缺锁定注意力\"><a href=\"#过度关注：稀缺锁定注意力\" class=\"headerlink\" title=\"过度关注：稀缺锁定注意力\"></a>过度关注：稀缺锁定注意力</h1><hr>\n<h3 id=\"孤独就是社交稀缺\"><a href=\"#孤独就是社交稀缺\" class=\"headerlink\" title=\"孤独就是社交稀缺\"></a>孤独就是社交稀缺</h3><p>孤独者太想被其他人喜欢而做得过犹不及，源自太过专注于自身的稀缺。</p>\n<p>孤独者在理解他人情感方面比普通人更擅长，这正是他们得到的专注红利。而当利害关系增大时，他们就无法灵活运用这方面技能了。觉得自己的笑话讲的一点不好笑、一直琢磨接下来要说什么、过度解读他人的行为和言语，从然导致 <strong>“发挥失常”</strong></p>\n<p>在球场上，球员也常会出现“发挥失常”的情况。比如一位篮球选手在一个赛季中的三分球命中率竟然比罚球命中率还要高。要知道三分球距离更远，角度通常十分诡异，而且还可能会有对方球员过来干扰你。但是罚球十分简单，首先距离更近，速度和节奏完全由罚球者自由掌握，还不会受到对方球员的干扰。</p>\n<h3 id=\"表现与关注度\"><a href=\"#表现与关注度\" class=\"headerlink\" title=\"表现与关注度\"></a>表现与关注度</h3><p><strong>“发挥失常，是一种更宽泛现象的冰山一角而已。心理学家们在研究各类任务的过程中发现，表现与关注度或称“觉醒”是相互关联的，其关联性呈现为倒转的U型弧线——如果关注度过低，表现就会变弱；而若关注度过高，表现同样会被消弱”</strong></p>\n<div align=\"center\"><br><img src=\"https://i.loli.net/2019/11/19/gxUyh7VopTIWa5C.jpg\" width=\"300\" height=\"200\" alt=\"表现与关注度\"><br></div>\n\n<p><strong>“如果我们所从事的任务位于波峰的左侧，那么过多的关注就是好事。对于其他任务来说，比如自由投篮，如果你是职业选手，就有可能因为在动作上投入了过多的精力而到达波峰的另一侧。自由投篮对于一些优秀运动员来说颇有难度，因为他们总是太过专注。”</strong></p>\n<p><strong>“孤独者之所以会表现得很糟糕，是因为他们越过了倒转U型弧线的波峰，做得过犹不及。他们无法倾听对方的讲话，无法从容地闲聊，而是聚精会神地专注在“他们是否喜欢我”或“讲这个故事会不会好笑”等想法上。就像专业自由投篮选手将注意力转移到别处，随手一抛就能命中一样，孤独者如果将注意力从他们的社交需求上转移开来，就能做得更好。但是，稀缺却阻碍了这种变化，将孤独者的思想拉回了本该避免的状态”</strong></p>\n<h1 id=\"如何从稀缺走向富足\"><a href=\"#如何从稀缺走向富足\" class=\"headerlink\" title=\"如何从稀缺走向富足\"></a>如何从稀缺走向富足</h1><hr>\n<p>待续</p>\n"},{"title":"《原则》","date":"2019-12-05T16:00:00.000Z","_content":"\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/12/06/ZaoOtR8F7NQKYdi.png\" width = \"300\" height=\"400\" alt=\"书的封面\">\n</div>\n\n作者是桥水基金（Bridge Water）的创始人，而桥水基金则是全世界最大的避险基金公司。2019年时，他是全球最有钱的前100人。\n\n这本书除了作者总结了自己在工作和生活中处事的许多原则外，也回顾了自己的一生。\n\n这些原则被作者分为生活原则和工作原则\n\n### 一、拥抱现实，应对现实。\n---\n> 世界上最重要的事情是理解现实如何运行，以及如何应对现实。面对这一过程的心态至关重要。我发现很有帮助的做法是，把生活想象为一场游戏，我面临的每个问题都是一个需要破解的谜。我通过解谜获得一块宝石，即一项原则，它能帮助我在未来避免同样的问题。不断收集这样的宝石能够提高我的决策水平，这样我就能进入更高一级的游戏，游戏变得更难，涉及的利益也变得越来越大。\n\n#### 1.1、做一个超级现实的人\n> 理解现实，接受现实，处理现实问题，既是务实的，也是美妙的。我已经是一个超级现实的人，所以我学会了欣赏所有现实的美好，包括严酷的现实，并开始鄙视不现实的理想主义。不要理解错了：我相信实现梦想的重要性。在我看来，生命中最美好的事情就是实现梦想。追求梦想让生活有了韵味。我要强调的是，创造伟大事物的人不是空想者，而是彻底地扎根于现实。做一个超级现实的人将帮助你明智地选择自己的梦想并实现它。\n\n#### 1.2、做到头脑极度开放、极度透明\n> 学习过程是一连串的实时反馈循环：我们做决定，看到结果，然后根据结果改进对现实的理解。做到头脑极度开放能够增强这些反馈循环的效率，因为这能让你和其他人无比清晰地看到你在做什么、为什么这么做，而不会产生误解。\n\n> 做到极度透明、头脑极度开放，可以加快这一学习进程。这也可能很难，因为极度透明而不是有所遮掩，可能会招致批评。惧怕这一点是很自然的。但如果你不能坦然地让自己做到极度透明，你就学不到东西。\n\n##### a、不要担心其他人的看法，使之成为你的障碍\n> 学着做到极度透明，就像学习如何公开发言一样：一开始你会难堪，但你练得越多，你就越能应付自如。我就是这样。例如，我现在依然本能地觉得，我像在本书中这样极度透明是不舒服的，因为我在公开展示我的个人情况，这会引人注意，也会招致批评。但我还是这么做了，因为我知道这样做是最好的，而如果我让恐惧阻碍自己，我将对自己不满意。\n\n> 除了让我能自由做自己之外，这样做还会让我和其他人相互理解，与彼此不理解相比，这更有效而且更让人快乐。想想看，如果人们不是隐藏看法，而是公开分享看法，这将减少多少误解，世界的运转将会变得多么高效，我们将会多么接近真相\n\n#### 1.3、观察自然，学习现实规律\n> 人在尝试理解任何东西（经济、市场、天气等）时，都可以从两种视角出发：</br>1．自上而下：努力找到这些东西背后的唯一驱动法则或规律。例如，在理解市场时，人可以研究影响所有经济和市场的普适法则，如供求关系；在理解物种时，人可以集中了解基因密码是如何对所有物种发生作用的。</br>2．自下而上：研究每种具体情况及其背后的法则或规律，例如，小麦市场独特的法则或规律，或者使鸭子区别于其他物种的基因序列。\n\n##### a、不要固守你对事物“应该”是什么样的看法，这将使你无法了解真实的情况\n> 很重要的是，不要让偏见阻碍我们保持客观。想要取得好结果，我们需要冷静而不是情绪化。\n\n> 多年前我去非洲时，看到一群鬣狗扑倒了一只幼小的角马。这让我觉得反胃。我对那只角马感到同情，并且认为我看到的景象很糟糕。但问题是，这件事是真的很糟糕，还是因为我有偏见所以认为它很糟糕，而事实上它好极了？这让我陷入思索。假如我看到的事情没有发生，世界会变好还是变差？这个视角促使我考虑这件事后续、再后续的影响，于是我发现那样的话世界将会变差。我现在认识到，自然会走向整体的最优化，而不是个体的最优化，但多数人只是根据事物对自身的影响判断好坏。我看到的情况是正在运行的自然进程，它能有效促进整个世界的改善，比人类发明的任何程序都有效得多。\n\n##### b、不存在完美\n> 想想你知道的任何产品、组织或人，你就会知道这是真的。世界上到处都是曾经辉煌但逐渐衰落和毁灭的东西，只有极少数东西一直在重塑自身，不断达到伟大的新高度。所有机器最终都会崩坏、分解，机器的零件会被回收用来制造新的机器。我们人类也会经历这样的过程。有时这让我们悲伤，因为我们已经和我们的机器产生了感情，但如果从更高的层面来看的话，观察机器如何进化，其实是件很美妙的事。\n\n> 从这个角度，我们可以看到完美是不存在的，它是一个目标，激发永不停息的进化过程。假如自然或任何东西是完美的，它就不会进化。生物、组织和个人总是高度不完美的，但都拥有改善的能力。所以，与其顽固地隐藏我们的缺点，假装自己是完美的，还不如找出并应对我们的缺陷。你可以从自己犯的错误中获得教益，不断坚持，为成功做出更好的准备，否则就将失败。\n\n##### c、意识到你既是一切又什么都不是，并决定你想成为什么样子\n> 个体的人既是一切又什么都不是，这是一个巨大的悖论。在我们自己看来，我们就是一切，例如，我们的生命终止了，对于我们而言，全世界也就消失了。因此对大多数人（以及其他物种）而言，失去生命是最糟糕不过的事情，因此尽量拥有最好的生活就是无比重要的。但是，如果从自然的视角俯视自身，我们显然又是毫无分量的。现实是，今天的每个人都只是约70亿人类中的一员，而人类又只是地球上约1000万物种中的一个。地球只是银河系约1000亿颗行星中的一个，而全宇宙有约2万亿个星系。人的寿命只是人类历史的约3000分之一，而人类历史又只是地球历史的2万分之一。换言之，我们渺小、短命得不可思议，无论取得什么样的成就，其影响都是微不足道的。同时，我们又本能地希望有意义，希望进化，而我们只能产生一丁点儿意义。所有这些一点点的意义加起来，才是宇宙进化的推动力。\n\n> 问题是我们有多重要，以及如何进化。我们对其他人重要吗？（他们和我们一样，从宏大的视角来看也不重要。）我们是否在某种更大的、我们永远无法真正理解的意义上重要？还是说，我们重不重要这个问题根本不重要，所以我们应该忘掉它，及时行乐？\n\n##### d、你的未来取决于你的视角\n> 就个人而言，我现在发现，拥抱现实、从自然的视角俯视自身、做宇宙整体微不足道的一小部分，是件很美妙的事。我本能的和有意识的目标都只是进化，利用自己的生命和特性，以某种微弱的方式为进化做贡献。同时，我最喜欢的东西（我的工作和人际关系）是我的驱动力。所以，我发现现实和自然的规律——包括我以及一切东西会如何分解、重组——都是美好的。尽管在情感上，对于将与我关心的东西最终分离，我很难接受。\n\n#### 1.4、理解自然提供的现实教训\n> 我发现，理解自然和进化的规律，在很多方面对我有好处。最重要的是，这会帮助我更有效地应对自己遇到的现实，做出艰难的抉择。当我开始从理解现实规律的视角看待现实，而不是认为现实不对时，我发现几乎所有起初看起来“不好”的东西，如雨天、缺点甚至死亡，都是由于我对于自己想要拥有的东西持有先入为主之见。我逐渐意识到，我产生这些最初的反应，是因为我没有把事物放到大背景下看待，即现实的构造是让整体实现最优，而不是尽力实现我的愿望。\n\n##### a、自然的一项根本法则是，为了赢得力量，人必须努力突破极限，而这是痛苦的\n> 正像卡尔·荣格所说，“人需要困难，这对健康来说是必需的”。但多数人本能地躲避痛苦。不论是锻炼身体还是历练头脑，人都会躲避痛苦，如举重的痛苦，如沮丧、思想挣扎、尴尬、耻辱的痛苦。当人面对自身存在缺陷这个严酷现实时，这一点就体现得更明显了。\n\n#### 1.5、痛苦+反思=进步\n> 人避免不了痛苦，尤其是在追求雄心勃勃的目标时。信不信由你，如果以正确的态度对待痛苦，感到痛苦就是你的幸运，因为这将提示你寻找解决方案以便继续前进。如果你能养成一种习惯，面对精神痛苦时能够自动地反思痛苦而不是躲避痛苦，你将能够快速地学习和进化。直面你的问题、错误和弱点导致的痛苦现实，会大幅提高你的效率，我相信，只要你看到了这种做法的好处，你就不会再用别的做法了。你只需要把这种做法养成习惯。\n\n> 大多数人在痛苦时不愿反思，而一旦痛苦消失他们的注意力就会转移，所以他们难以通过反思得到教益。如果你在痛苦时就能好好反思（这个要求也许太高），这非常好。如果你能记得在痛苦消失后反思，这也很有价值。\n\n> **如果你选择在这条常常很痛苦的个人进化之路上拼搏，你将自然而然地不断“更上一层楼”。当你到达了更高一层的境界，你就会发现，你原来只是因为境界低才觉得之前包围着你的那些纷至沓来的东西令人头疼，但其实并没有那么糟。生活中的大多数东西都不过是“同类情况的重演”。你的层次越高，你就越能有效地应对现实，塑造符合你目标的结果。而曾经看起来复杂得不可思议的东西，也会变得简单。**\n\n##### a、迎接而非躲避痛苦\n> 每当你遇到痛苦的东西时，你就处在生活中一个潜在的重要节点：你可以选择健康并痛苦的事实，也可以选择不健康但舒适的幻觉。妙处在于，如果你选择了健康之路，痛苦将很快变成快乐。痛苦就是信号！就像不锻炼的人开始锻炼，养成享受痛苦的习惯，从痛苦中学习，将让人“步入新境界”。\n\n> 我所说的“步入新境界”是指，你将喜欢上以下三点：</br>（1）找到、接受，并学会如何应对你的弱点；</br>（2）更喜欢周围的人对你坦诚，而不是隐瞒对你的负面看法；</br>（3）展现真实的自我，而不是强行把弱点伪装成优势。\n\n##### b、接受严厉的爱\n> 这在情感上会让人难以接受，尽管他们在理智上明白，他们需要通过困难体验增强能力，如果我只是给他们想要的东西，就会削弱他们，最终导致他们需要更多的帮助。\n\n> 当然，大多数人都希望自己没有缺点。我们接受的各种教育和现实经历让我们对自身的缺点感到难堪，并试图掩盖缺点。但能够真实展现自我的人是最快乐的。如果你能以开放的心态看待自身缺点，这将解放你，帮助你更好地应对缺点。我建议你不要为自己的缺点感到羞愧，要明白任何人都有缺点。把缺点摆上桌面将帮助你戒掉坏习惯，养成好习惯，获得真正的能力，拥有充足的理由保持乐观。\n\n> **许多经历挫折的人，在成功适应挫折后变得和以前一样快乐，甚至更快乐，尽管当初的挫折似乎是毁灭性的**。你的生活质量如何，将取决于你在这些痛苦时刻做出的抉择。一个人妥善适应的能力越强越好。无论你想实现什么样的生活愿望，你的适应能力、在个人进化之路上快速有效前进的能力，将决定你能否成功和幸福。**如果你做得好，你就能改变自己的心理反应模式，使痛苦成为某种你渴望的东西。**\n\n##### c、考虑后续与再后续的结果\n> 在认识到自然进化带来的更高层面的结果后，我开始发现，如果人们过度重视决策的直接结果而忽视后续和再后续的结果，他们就很难实现目标。这是因为直接结果和后续结果的值得追求性通常是相反的，这会造成决策的重大错误。例如，锻炼的直接结果是痛苦和花费时间，通常被视为不值得追求的，但后续结果是更健康和更具吸引力的形象，这是值得追求的。类似地，好吃的食物往往对你身体不好，反之亦然。\n\n##### d、接受结果\n> 大部分时候，生活让你做许多决策，给你许多从错误中恢复的机会，所以只要你处理得好，就能拥有美妙的生活。当然，有时某些我们无法控制的因素会严重影响我们的生活质量，例如生下来所处的环境、事故与疾病等。但大多数时候，只要以正确的方式应对，最差的情况也能被扭转。\n\n> 我的观点很简单：不管在生活中遇到什么情况，如果你能负起责任，进行良好的决策，而不是抱怨你无法控制的东西，你将更有可能成功并找到幸福。心理学家称此为拥有“内控点”，各种研究不断显示，拥有“内控点”的人比其他人做得更好。\n\n> 所以不要为喜不喜欢自己的处境担忧。生活根本不关心你喜欢什么。\n\n#### 1.6、从更高的层次俯视机器\n> 人类拥有独特的从更高层次俯视的能力，这不仅适用于理解现实和现实背后的因果关系，也适用于俯视自身和周围的人。我把这种超越自己和其他人的处境并客观地俯视处境的能力，称为“更高层次的思考”。更高层次的思考能让你学习和影响生活中的各种因果关系，利用这些因果关系得到你想要的结果。\n\n##### a、把自己想象成一部在大机器里运转的小机器，并明白你有能力改变你的机器以实现更好的结果\n> 你有你的目标。你用来实现目标的方式，我称为你的机器。它包括设计（必须做的事）和人（由谁来做这些必须做的事）。人包括你和帮助你的人。例如，想象你的目标是军事目标：从敌人手中夺过一个山头。你设计的机器可能包含两名侦察兵、两名狙击手、四名步兵，等等。尽管合理的设计必不可少，但这只是战斗的一半。同样重要的是让合适的人来执行这些任务。为了完成各自的任务，他们需要不同的特性：侦察兵必须跑得快，狙击手必须射得准。这样这部机器才能创造出你追求的结果。\n\n##### b、通过比较你实现的结果和你的目标，你就能确定如何改进你的机器\n> 这一评估和改进的过程，与我之前描述的进化过程一模一样。这意味着要看看如何改进或改变设计或人员，以实现你的目标。用图形来展示，这个过程就是一个反馈循环\n\n##### c、区别作为机器设计者的你和作为机器中工作者的你\n> **对人来说最难做的事情之一是客观地在自身所处环境（即机器）中看待自身，从而成为机器的设计者和管理者。大多数人一直都把自己看作机器中的工作者。如果你能够看到这两种角色之间的区别，并且看到成为自身生活的良好设计者与管理者要比成为机器中的工作者重要得多，你就走到了正确的道路上。想要取得成功，作为设计者和管理者的你必须客观看待作为工作者的你，不高看自己，也不让自己承担不应该承担的任务。大多数人都是凭情感行动，只看眼前，而没有从上述战略性的视角出发。他们的生活中充满了没有方向性的情感体验，随波逐流。如果你想在晚年回顾一生时觉得实现了人生愿望的话，你就不应该这样做**\n\n##### d、大多数人犯下的最大错误是不客观看待自己以及其他人，这导致他们一次次地栽在自己或其他人的弱点上\n> 这么做的人不会成功，因为他们固执己见。如果能克服这种倾向，他们就能充分发挥自己的潜能。所以更高层次的思考是成功的关键。\n\n##### e、成功的人能超越自身，客观看待事物，并管理事物以塑造改变\n> 他们能接受其他人的观点，而不是固执己见。他们能客观看待自身（包括自己的长处和弱点）和其他人，从而可以让正确的人扮演恰当的角色，以实现他们的目标。如果你学会了这么做，你会发现几乎没有你无法实现的成绩。你只需要学习如何面对自身所处的现实，并把你能利用的所有资源用到极致。例如，假如作为设计者和管理者的你发现，作为工作者的你某件事情做不好，你就应该解雇这个作为工作者的你，找到一个好的替代者，而在此过程中你必须一直作为自身生活的设计者和管理者。如果你发现自己不擅长做什么，你不应该为此难过，而是应该为发现这一点感到高兴，因为知晓这一点并妥善应对，将提升你实现自身愿望的可能性。\n\n> 如果你发现自己不能把所有事都做到最好，并为此难过的话，你就太幼稚了。没有人能把一切都做好。你会让爱因斯坦加入你的篮球队吗？如果爱因斯坦运球和投篮做得不好，你会看不起他吗？他应该为此感到耻辱吗？想想爱因斯坦会在多少领域无法胜任，再想想即使在那个他独步全球的领域，他付出了多少努力才变得如此优秀。\n\n> 面对自身缺点，你有4种选择：</br>1．你可以否认缺点（这是大多数人的做法）。</br>2．你可以承认缺点并应对缺点，努力把缺点转化为优势（能不能成功取决于你的自我改变能力）。</br>3．你可以承认缺点并找到绕过缺点的方法。</br>4．或者，你可以改变你的目标。</br>你如何选择对你的人生走向至关重要。第一种是最不好的选择，否认只会导致你不断地栽在自己的缺点上，不断经受痛苦，而不会有其他结果。第二种选择，承认缺点的同时努力把缺点转化为优势，如果能成功的话，这也许是最好的做法。但有些事情你永远也不会擅长，改变也需要花费很多时间和精力。如果要用一个标准来判断你是否应该沿着这条路走下去的话，最好的标准是看你要做的事是否符合自己的特性（即你天然具有的各种能力）。第三种选择，承认缺点的同时努力想办法绕过去，是最容易、通常也最可行的道路，但这是走的人最少的路。第四种选择，改变自己的目标，也是一种不错的选择，但这需要你有很大的灵活性，能够克服自己的各种先入之见，努力找到和你匹配的目标并享受新的过程。\n\n##### f、在你不擅长的领域请教擅长的其他人，这是一个你无论如何都应该培养的出色技能，这将帮助你建立起安全护栏，避免自己做错事\n> 所有成功的人都善于这么做。\n\n##### g、因为客观看待自身很困难，所以你需要依赖其他人的意见，以及全部证据\n> 我知道自己的一生也充满了错误，也得到了许多很好的反馈意见。凭借着从更高的层次俯视所有这些证据，我才得以克服我的错误，追求我的目标。尽管我已经这样做了很久，但我依然明白我无法客观地看待自己，所以我至今仍然很依赖其他人的意见。\n\n##### h、如果你的头脑足够开放，足够有决心，你几乎可以实现任何愿望\n> 所以可以肯定的是，我不会劝阻你追求自己设定的目标。同时，我建议你思考你追求的目标是否符合你的特性。不管你的特性是什么，总是有很多条道路适合你，所以不要固守一条道路。如果一条特定的道路走不通，你只需要找到另一条适合自己特性的好道路。\n\n> 但大多数人缺乏勇气克服自身弱点，也缺乏勇气做出这一改变所要求的不容易做出的抉择。归根到底，这可以总结为以下5项抉择：</br>1．不要混淆你的愿望和事实。</br>2．不要为自身形象担心，只需关心能不能实现你的目标。</br>3．不要过于重视直接结果而忽视后续、再后续的结果。</br>4．不要让痛苦妨碍进步。</br>5．不要把不好的结果归咎于任何人，从自己身上找原因。","source":"_posts/read/原则.md","raw":"---\ntitle: 《原则》\ncategories: 读书\ndate: 2019-12-06\n---\n\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/12/06/ZaoOtR8F7NQKYdi.png\" width = \"300\" height=\"400\" alt=\"书的封面\">\n</div>\n\n作者是桥水基金（Bridge Water）的创始人，而桥水基金则是全世界最大的避险基金公司。2019年时，他是全球最有钱的前100人。\n\n这本书除了作者总结了自己在工作和生活中处事的许多原则外，也回顾了自己的一生。\n\n这些原则被作者分为生活原则和工作原则\n\n### 一、拥抱现实，应对现实。\n---\n> 世界上最重要的事情是理解现实如何运行，以及如何应对现实。面对这一过程的心态至关重要。我发现很有帮助的做法是，把生活想象为一场游戏，我面临的每个问题都是一个需要破解的谜。我通过解谜获得一块宝石，即一项原则，它能帮助我在未来避免同样的问题。不断收集这样的宝石能够提高我的决策水平，这样我就能进入更高一级的游戏，游戏变得更难，涉及的利益也变得越来越大。\n\n#### 1.1、做一个超级现实的人\n> 理解现实，接受现实，处理现实问题，既是务实的，也是美妙的。我已经是一个超级现实的人，所以我学会了欣赏所有现实的美好，包括严酷的现实，并开始鄙视不现实的理想主义。不要理解错了：我相信实现梦想的重要性。在我看来，生命中最美好的事情就是实现梦想。追求梦想让生活有了韵味。我要强调的是，创造伟大事物的人不是空想者，而是彻底地扎根于现实。做一个超级现实的人将帮助你明智地选择自己的梦想并实现它。\n\n#### 1.2、做到头脑极度开放、极度透明\n> 学习过程是一连串的实时反馈循环：我们做决定，看到结果，然后根据结果改进对现实的理解。做到头脑极度开放能够增强这些反馈循环的效率，因为这能让你和其他人无比清晰地看到你在做什么、为什么这么做，而不会产生误解。\n\n> 做到极度透明、头脑极度开放，可以加快这一学习进程。这也可能很难，因为极度透明而不是有所遮掩，可能会招致批评。惧怕这一点是很自然的。但如果你不能坦然地让自己做到极度透明，你就学不到东西。\n\n##### a、不要担心其他人的看法，使之成为你的障碍\n> 学着做到极度透明，就像学习如何公开发言一样：一开始你会难堪，但你练得越多，你就越能应付自如。我就是这样。例如，我现在依然本能地觉得，我像在本书中这样极度透明是不舒服的，因为我在公开展示我的个人情况，这会引人注意，也会招致批评。但我还是这么做了，因为我知道这样做是最好的，而如果我让恐惧阻碍自己，我将对自己不满意。\n\n> 除了让我能自由做自己之外，这样做还会让我和其他人相互理解，与彼此不理解相比，这更有效而且更让人快乐。想想看，如果人们不是隐藏看法，而是公开分享看法，这将减少多少误解，世界的运转将会变得多么高效，我们将会多么接近真相\n\n#### 1.3、观察自然，学习现实规律\n> 人在尝试理解任何东西（经济、市场、天气等）时，都可以从两种视角出发：</br>1．自上而下：努力找到这些东西背后的唯一驱动法则或规律。例如，在理解市场时，人可以研究影响所有经济和市场的普适法则，如供求关系；在理解物种时，人可以集中了解基因密码是如何对所有物种发生作用的。</br>2．自下而上：研究每种具体情况及其背后的法则或规律，例如，小麦市场独特的法则或规律，或者使鸭子区别于其他物种的基因序列。\n\n##### a、不要固守你对事物“应该”是什么样的看法，这将使你无法了解真实的情况\n> 很重要的是，不要让偏见阻碍我们保持客观。想要取得好结果，我们需要冷静而不是情绪化。\n\n> 多年前我去非洲时，看到一群鬣狗扑倒了一只幼小的角马。这让我觉得反胃。我对那只角马感到同情，并且认为我看到的景象很糟糕。但问题是，这件事是真的很糟糕，还是因为我有偏见所以认为它很糟糕，而事实上它好极了？这让我陷入思索。假如我看到的事情没有发生，世界会变好还是变差？这个视角促使我考虑这件事后续、再后续的影响，于是我发现那样的话世界将会变差。我现在认识到，自然会走向整体的最优化，而不是个体的最优化，但多数人只是根据事物对自身的影响判断好坏。我看到的情况是正在运行的自然进程，它能有效促进整个世界的改善，比人类发明的任何程序都有效得多。\n\n##### b、不存在完美\n> 想想你知道的任何产品、组织或人，你就会知道这是真的。世界上到处都是曾经辉煌但逐渐衰落和毁灭的东西，只有极少数东西一直在重塑自身，不断达到伟大的新高度。所有机器最终都会崩坏、分解，机器的零件会被回收用来制造新的机器。我们人类也会经历这样的过程。有时这让我们悲伤，因为我们已经和我们的机器产生了感情，但如果从更高的层面来看的话，观察机器如何进化，其实是件很美妙的事。\n\n> 从这个角度，我们可以看到完美是不存在的，它是一个目标，激发永不停息的进化过程。假如自然或任何东西是完美的，它就不会进化。生物、组织和个人总是高度不完美的，但都拥有改善的能力。所以，与其顽固地隐藏我们的缺点，假装自己是完美的，还不如找出并应对我们的缺陷。你可以从自己犯的错误中获得教益，不断坚持，为成功做出更好的准备，否则就将失败。\n\n##### c、意识到你既是一切又什么都不是，并决定你想成为什么样子\n> 个体的人既是一切又什么都不是，这是一个巨大的悖论。在我们自己看来，我们就是一切，例如，我们的生命终止了，对于我们而言，全世界也就消失了。因此对大多数人（以及其他物种）而言，失去生命是最糟糕不过的事情，因此尽量拥有最好的生活就是无比重要的。但是，如果从自然的视角俯视自身，我们显然又是毫无分量的。现实是，今天的每个人都只是约70亿人类中的一员，而人类又只是地球上约1000万物种中的一个。地球只是银河系约1000亿颗行星中的一个，而全宇宙有约2万亿个星系。人的寿命只是人类历史的约3000分之一，而人类历史又只是地球历史的2万分之一。换言之，我们渺小、短命得不可思议，无论取得什么样的成就，其影响都是微不足道的。同时，我们又本能地希望有意义，希望进化，而我们只能产生一丁点儿意义。所有这些一点点的意义加起来，才是宇宙进化的推动力。\n\n> 问题是我们有多重要，以及如何进化。我们对其他人重要吗？（他们和我们一样，从宏大的视角来看也不重要。）我们是否在某种更大的、我们永远无法真正理解的意义上重要？还是说，我们重不重要这个问题根本不重要，所以我们应该忘掉它，及时行乐？\n\n##### d、你的未来取决于你的视角\n> 就个人而言，我现在发现，拥抱现实、从自然的视角俯视自身、做宇宙整体微不足道的一小部分，是件很美妙的事。我本能的和有意识的目标都只是进化，利用自己的生命和特性，以某种微弱的方式为进化做贡献。同时，我最喜欢的东西（我的工作和人际关系）是我的驱动力。所以，我发现现实和自然的规律——包括我以及一切东西会如何分解、重组——都是美好的。尽管在情感上，对于将与我关心的东西最终分离，我很难接受。\n\n#### 1.4、理解自然提供的现实教训\n> 我发现，理解自然和进化的规律，在很多方面对我有好处。最重要的是，这会帮助我更有效地应对自己遇到的现实，做出艰难的抉择。当我开始从理解现实规律的视角看待现实，而不是认为现实不对时，我发现几乎所有起初看起来“不好”的东西，如雨天、缺点甚至死亡，都是由于我对于自己想要拥有的东西持有先入为主之见。我逐渐意识到，我产生这些最初的反应，是因为我没有把事物放到大背景下看待，即现实的构造是让整体实现最优，而不是尽力实现我的愿望。\n\n##### a、自然的一项根本法则是，为了赢得力量，人必须努力突破极限，而这是痛苦的\n> 正像卡尔·荣格所说，“人需要困难，这对健康来说是必需的”。但多数人本能地躲避痛苦。不论是锻炼身体还是历练头脑，人都会躲避痛苦，如举重的痛苦，如沮丧、思想挣扎、尴尬、耻辱的痛苦。当人面对自身存在缺陷这个严酷现实时，这一点就体现得更明显了。\n\n#### 1.5、痛苦+反思=进步\n> 人避免不了痛苦，尤其是在追求雄心勃勃的目标时。信不信由你，如果以正确的态度对待痛苦，感到痛苦就是你的幸运，因为这将提示你寻找解决方案以便继续前进。如果你能养成一种习惯，面对精神痛苦时能够自动地反思痛苦而不是躲避痛苦，你将能够快速地学习和进化。直面你的问题、错误和弱点导致的痛苦现实，会大幅提高你的效率，我相信，只要你看到了这种做法的好处，你就不会再用别的做法了。你只需要把这种做法养成习惯。\n\n> 大多数人在痛苦时不愿反思，而一旦痛苦消失他们的注意力就会转移，所以他们难以通过反思得到教益。如果你在痛苦时就能好好反思（这个要求也许太高），这非常好。如果你能记得在痛苦消失后反思，这也很有价值。\n\n> **如果你选择在这条常常很痛苦的个人进化之路上拼搏，你将自然而然地不断“更上一层楼”。当你到达了更高一层的境界，你就会发现，你原来只是因为境界低才觉得之前包围着你的那些纷至沓来的东西令人头疼，但其实并没有那么糟。生活中的大多数东西都不过是“同类情况的重演”。你的层次越高，你就越能有效地应对现实，塑造符合你目标的结果。而曾经看起来复杂得不可思议的东西，也会变得简单。**\n\n##### a、迎接而非躲避痛苦\n> 每当你遇到痛苦的东西时，你就处在生活中一个潜在的重要节点：你可以选择健康并痛苦的事实，也可以选择不健康但舒适的幻觉。妙处在于，如果你选择了健康之路，痛苦将很快变成快乐。痛苦就是信号！就像不锻炼的人开始锻炼，养成享受痛苦的习惯，从痛苦中学习，将让人“步入新境界”。\n\n> 我所说的“步入新境界”是指，你将喜欢上以下三点：</br>（1）找到、接受，并学会如何应对你的弱点；</br>（2）更喜欢周围的人对你坦诚，而不是隐瞒对你的负面看法；</br>（3）展现真实的自我，而不是强行把弱点伪装成优势。\n\n##### b、接受严厉的爱\n> 这在情感上会让人难以接受，尽管他们在理智上明白，他们需要通过困难体验增强能力，如果我只是给他们想要的东西，就会削弱他们，最终导致他们需要更多的帮助。\n\n> 当然，大多数人都希望自己没有缺点。我们接受的各种教育和现实经历让我们对自身的缺点感到难堪，并试图掩盖缺点。但能够真实展现自我的人是最快乐的。如果你能以开放的心态看待自身缺点，这将解放你，帮助你更好地应对缺点。我建议你不要为自己的缺点感到羞愧，要明白任何人都有缺点。把缺点摆上桌面将帮助你戒掉坏习惯，养成好习惯，获得真正的能力，拥有充足的理由保持乐观。\n\n> **许多经历挫折的人，在成功适应挫折后变得和以前一样快乐，甚至更快乐，尽管当初的挫折似乎是毁灭性的**。你的生活质量如何，将取决于你在这些痛苦时刻做出的抉择。一个人妥善适应的能力越强越好。无论你想实现什么样的生活愿望，你的适应能力、在个人进化之路上快速有效前进的能力，将决定你能否成功和幸福。**如果你做得好，你就能改变自己的心理反应模式，使痛苦成为某种你渴望的东西。**\n\n##### c、考虑后续与再后续的结果\n> 在认识到自然进化带来的更高层面的结果后，我开始发现，如果人们过度重视决策的直接结果而忽视后续和再后续的结果，他们就很难实现目标。这是因为直接结果和后续结果的值得追求性通常是相反的，这会造成决策的重大错误。例如，锻炼的直接结果是痛苦和花费时间，通常被视为不值得追求的，但后续结果是更健康和更具吸引力的形象，这是值得追求的。类似地，好吃的食物往往对你身体不好，反之亦然。\n\n##### d、接受结果\n> 大部分时候，生活让你做许多决策，给你许多从错误中恢复的机会，所以只要你处理得好，就能拥有美妙的生活。当然，有时某些我们无法控制的因素会严重影响我们的生活质量，例如生下来所处的环境、事故与疾病等。但大多数时候，只要以正确的方式应对，最差的情况也能被扭转。\n\n> 我的观点很简单：不管在生活中遇到什么情况，如果你能负起责任，进行良好的决策，而不是抱怨你无法控制的东西，你将更有可能成功并找到幸福。心理学家称此为拥有“内控点”，各种研究不断显示，拥有“内控点”的人比其他人做得更好。\n\n> 所以不要为喜不喜欢自己的处境担忧。生活根本不关心你喜欢什么。\n\n#### 1.6、从更高的层次俯视机器\n> 人类拥有独特的从更高层次俯视的能力，这不仅适用于理解现实和现实背后的因果关系，也适用于俯视自身和周围的人。我把这种超越自己和其他人的处境并客观地俯视处境的能力，称为“更高层次的思考”。更高层次的思考能让你学习和影响生活中的各种因果关系，利用这些因果关系得到你想要的结果。\n\n##### a、把自己想象成一部在大机器里运转的小机器，并明白你有能力改变你的机器以实现更好的结果\n> 你有你的目标。你用来实现目标的方式，我称为你的机器。它包括设计（必须做的事）和人（由谁来做这些必须做的事）。人包括你和帮助你的人。例如，想象你的目标是军事目标：从敌人手中夺过一个山头。你设计的机器可能包含两名侦察兵、两名狙击手、四名步兵，等等。尽管合理的设计必不可少，但这只是战斗的一半。同样重要的是让合适的人来执行这些任务。为了完成各自的任务，他们需要不同的特性：侦察兵必须跑得快，狙击手必须射得准。这样这部机器才能创造出你追求的结果。\n\n##### b、通过比较你实现的结果和你的目标，你就能确定如何改进你的机器\n> 这一评估和改进的过程，与我之前描述的进化过程一模一样。这意味着要看看如何改进或改变设计或人员，以实现你的目标。用图形来展示，这个过程就是一个反馈循环\n\n##### c、区别作为机器设计者的你和作为机器中工作者的你\n> **对人来说最难做的事情之一是客观地在自身所处环境（即机器）中看待自身，从而成为机器的设计者和管理者。大多数人一直都把自己看作机器中的工作者。如果你能够看到这两种角色之间的区别，并且看到成为自身生活的良好设计者与管理者要比成为机器中的工作者重要得多，你就走到了正确的道路上。想要取得成功，作为设计者和管理者的你必须客观看待作为工作者的你，不高看自己，也不让自己承担不应该承担的任务。大多数人都是凭情感行动，只看眼前，而没有从上述战略性的视角出发。他们的生活中充满了没有方向性的情感体验，随波逐流。如果你想在晚年回顾一生时觉得实现了人生愿望的话，你就不应该这样做**\n\n##### d、大多数人犯下的最大错误是不客观看待自己以及其他人，这导致他们一次次地栽在自己或其他人的弱点上\n> 这么做的人不会成功，因为他们固执己见。如果能克服这种倾向，他们就能充分发挥自己的潜能。所以更高层次的思考是成功的关键。\n\n##### e、成功的人能超越自身，客观看待事物，并管理事物以塑造改变\n> 他们能接受其他人的观点，而不是固执己见。他们能客观看待自身（包括自己的长处和弱点）和其他人，从而可以让正确的人扮演恰当的角色，以实现他们的目标。如果你学会了这么做，你会发现几乎没有你无法实现的成绩。你只需要学习如何面对自身所处的现实，并把你能利用的所有资源用到极致。例如，假如作为设计者和管理者的你发现，作为工作者的你某件事情做不好，你就应该解雇这个作为工作者的你，找到一个好的替代者，而在此过程中你必须一直作为自身生活的设计者和管理者。如果你发现自己不擅长做什么，你不应该为此难过，而是应该为发现这一点感到高兴，因为知晓这一点并妥善应对，将提升你实现自身愿望的可能性。\n\n> 如果你发现自己不能把所有事都做到最好，并为此难过的话，你就太幼稚了。没有人能把一切都做好。你会让爱因斯坦加入你的篮球队吗？如果爱因斯坦运球和投篮做得不好，你会看不起他吗？他应该为此感到耻辱吗？想想爱因斯坦会在多少领域无法胜任，再想想即使在那个他独步全球的领域，他付出了多少努力才变得如此优秀。\n\n> 面对自身缺点，你有4种选择：</br>1．你可以否认缺点（这是大多数人的做法）。</br>2．你可以承认缺点并应对缺点，努力把缺点转化为优势（能不能成功取决于你的自我改变能力）。</br>3．你可以承认缺点并找到绕过缺点的方法。</br>4．或者，你可以改变你的目标。</br>你如何选择对你的人生走向至关重要。第一种是最不好的选择，否认只会导致你不断地栽在自己的缺点上，不断经受痛苦，而不会有其他结果。第二种选择，承认缺点的同时努力把缺点转化为优势，如果能成功的话，这也许是最好的做法。但有些事情你永远也不会擅长，改变也需要花费很多时间和精力。如果要用一个标准来判断你是否应该沿着这条路走下去的话，最好的标准是看你要做的事是否符合自己的特性（即你天然具有的各种能力）。第三种选择，承认缺点的同时努力想办法绕过去，是最容易、通常也最可行的道路，但这是走的人最少的路。第四种选择，改变自己的目标，也是一种不错的选择，但这需要你有很大的灵活性，能够克服自己的各种先入之见，努力找到和你匹配的目标并享受新的过程。\n\n##### f、在你不擅长的领域请教擅长的其他人，这是一个你无论如何都应该培养的出色技能，这将帮助你建立起安全护栏，避免自己做错事\n> 所有成功的人都善于这么做。\n\n##### g、因为客观看待自身很困难，所以你需要依赖其他人的意见，以及全部证据\n> 我知道自己的一生也充满了错误，也得到了许多很好的反馈意见。凭借着从更高的层次俯视所有这些证据，我才得以克服我的错误，追求我的目标。尽管我已经这样做了很久，但我依然明白我无法客观地看待自己，所以我至今仍然很依赖其他人的意见。\n\n##### h、如果你的头脑足够开放，足够有决心，你几乎可以实现任何愿望\n> 所以可以肯定的是，我不会劝阻你追求自己设定的目标。同时，我建议你思考你追求的目标是否符合你的特性。不管你的特性是什么，总是有很多条道路适合你，所以不要固守一条道路。如果一条特定的道路走不通，你只需要找到另一条适合自己特性的好道路。\n\n> 但大多数人缺乏勇气克服自身弱点，也缺乏勇气做出这一改变所要求的不容易做出的抉择。归根到底，这可以总结为以下5项抉择：</br>1．不要混淆你的愿望和事实。</br>2．不要为自身形象担心，只需关心能不能实现你的目标。</br>3．不要过于重视直接结果而忽视后续、再后续的结果。</br>4．不要让痛苦妨碍进步。</br>5．不要把不好的结果归咎于任何人，从自己身上找原因。","slug":"read/原则","published":1,"updated":"2020-01-01T08:16:41.342Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44vb70046hcr7h54lx71x","content":"<div align=\"center\"><br><img src=\"https://i.loli.net/2019/12/06/ZaoOtR8F7NQKYdi.png\" width=\"300\" height=\"400\" alt=\"书的封面\"><br></div>\n\n<p>作者是桥水基金（Bridge Water）的创始人，而桥水基金则是全世界最大的避险基金公司。2019年时，他是全球最有钱的前100人。</p>\n<p>这本书除了作者总结了自己在工作和生活中处事的许多原则外，也回顾了自己的一生。</p>\n<p>这些原则被作者分为生活原则和工作原则</p>\n<h3 id=\"一、拥抱现实，应对现实。\"><a href=\"#一、拥抱现实，应对现实。\" class=\"headerlink\" title=\"一、拥抱现实，应对现实。\"></a>一、拥抱现实，应对现实。</h3><hr>\n<blockquote>\n<p>世界上最重要的事情是理解现实如何运行，以及如何应对现实。面对这一过程的心态至关重要。我发现很有帮助的做法是，把生活想象为一场游戏，我面临的每个问题都是一个需要破解的谜。我通过解谜获得一块宝石，即一项原则，它能帮助我在未来避免同样的问题。不断收集这样的宝石能够提高我的决策水平，这样我就能进入更高一级的游戏，游戏变得更难，涉及的利益也变得越来越大。</p>\n</blockquote>\n<h4 id=\"1-1、做一个超级现实的人\"><a href=\"#1-1、做一个超级现实的人\" class=\"headerlink\" title=\"1.1、做一个超级现实的人\"></a>1.1、做一个超级现实的人</h4><blockquote>\n<p>理解现实，接受现实，处理现实问题，既是务实的，也是美妙的。我已经是一个超级现实的人，所以我学会了欣赏所有现实的美好，包括严酷的现实，并开始鄙视不现实的理想主义。不要理解错了：我相信实现梦想的重要性。在我看来，生命中最美好的事情就是实现梦想。追求梦想让生活有了韵味。我要强调的是，创造伟大事物的人不是空想者，而是彻底地扎根于现实。做一个超级现实的人将帮助你明智地选择自己的梦想并实现它。</p>\n</blockquote>\n<h4 id=\"1-2、做到头脑极度开放、极度透明\"><a href=\"#1-2、做到头脑极度开放、极度透明\" class=\"headerlink\" title=\"1.2、做到头脑极度开放、极度透明\"></a>1.2、做到头脑极度开放、极度透明</h4><blockquote>\n<p>学习过程是一连串的实时反馈循环：我们做决定，看到结果，然后根据结果改进对现实的理解。做到头脑极度开放能够增强这些反馈循环的效率，因为这能让你和其他人无比清晰地看到你在做什么、为什么这么做，而不会产生误解。</p>\n</blockquote>\n<blockquote>\n<p>做到极度透明、头脑极度开放，可以加快这一学习进程。这也可能很难，因为极度透明而不是有所遮掩，可能会招致批评。惧怕这一点是很自然的。但如果你不能坦然地让自己做到极度透明，你就学不到东西。</p>\n</blockquote>\n<h5 id=\"a、不要担心其他人的看法，使之成为你的障碍\"><a href=\"#a、不要担心其他人的看法，使之成为你的障碍\" class=\"headerlink\" title=\"a、不要担心其他人的看法，使之成为你的障碍\"></a>a、不要担心其他人的看法，使之成为你的障碍</h5><blockquote>\n<p>学着做到极度透明，就像学习如何公开发言一样：一开始你会难堪，但你练得越多，你就越能应付自如。我就是这样。例如，我现在依然本能地觉得，我像在本书中这样极度透明是不舒服的，因为我在公开展示我的个人情况，这会引人注意，也会招致批评。但我还是这么做了，因为我知道这样做是最好的，而如果我让恐惧阻碍自己，我将对自己不满意。</p>\n</blockquote>\n<blockquote>\n<p>除了让我能自由做自己之外，这样做还会让我和其他人相互理解，与彼此不理解相比，这更有效而且更让人快乐。想想看，如果人们不是隐藏看法，而是公开分享看法，这将减少多少误解，世界的运转将会变得多么高效，我们将会多么接近真相</p>\n</blockquote>\n<h4 id=\"1-3、观察自然，学习现实规律\"><a href=\"#1-3、观察自然，学习现实规律\" class=\"headerlink\" title=\"1.3、观察自然，学习现实规律\"></a>1.3、观察自然，学习现实规律</h4><blockquote>\n<p>人在尝试理解任何东西（经济、市场、天气等）时，都可以从两种视角出发：<br>1．自上而下：努力找到这些东西背后的唯一驱动法则或规律。例如，在理解市场时，人可以研究影响所有经济和市场的普适法则，如供求关系；在理解物种时，人可以集中了解基因密码是如何对所有物种发生作用的。<br>2．自下而上：研究每种具体情况及其背后的法则或规律，例如，小麦市场独特的法则或规律，或者使鸭子区别于其他物种的基因序列。</p>\n</blockquote>\n<h5 id=\"a、不要固守你对事物“应该”是什么样的看法，这将使你无法了解真实的情况\"><a href=\"#a、不要固守你对事物“应该”是什么样的看法，这将使你无法了解真实的情况\" class=\"headerlink\" title=\"a、不要固守你对事物“应该”是什么样的看法，这将使你无法了解真实的情况\"></a>a、不要固守你对事物“应该”是什么样的看法，这将使你无法了解真实的情况</h5><blockquote>\n<p>很重要的是，不要让偏见阻碍我们保持客观。想要取得好结果，我们需要冷静而不是情绪化。</p>\n</blockquote>\n<blockquote>\n<p>多年前我去非洲时，看到一群鬣狗扑倒了一只幼小的角马。这让我觉得反胃。我对那只角马感到同情，并且认为我看到的景象很糟糕。但问题是，这件事是真的很糟糕，还是因为我有偏见所以认为它很糟糕，而事实上它好极了？这让我陷入思索。假如我看到的事情没有发生，世界会变好还是变差？这个视角促使我考虑这件事后续、再后续的影响，于是我发现那样的话世界将会变差。我现在认识到，自然会走向整体的最优化，而不是个体的最优化，但多数人只是根据事物对自身的影响判断好坏。我看到的情况是正在运行的自然进程，它能有效促进整个世界的改善，比人类发明的任何程序都有效得多。</p>\n</blockquote>\n<h5 id=\"b、不存在完美\"><a href=\"#b、不存在完美\" class=\"headerlink\" title=\"b、不存在完美\"></a>b、不存在完美</h5><blockquote>\n<p>想想你知道的任何产品、组织或人，你就会知道这是真的。世界上到处都是曾经辉煌但逐渐衰落和毁灭的东西，只有极少数东西一直在重塑自身，不断达到伟大的新高度。所有机器最终都会崩坏、分解，机器的零件会被回收用来制造新的机器。我们人类也会经历这样的过程。有时这让我们悲伤，因为我们已经和我们的机器产生了感情，但如果从更高的层面来看的话，观察机器如何进化，其实是件很美妙的事。</p>\n</blockquote>\n<blockquote>\n<p>从这个角度，我们可以看到完美是不存在的，它是一个目标，激发永不停息的进化过程。假如自然或任何东西是完美的，它就不会进化。生物、组织和个人总是高度不完美的，但都拥有改善的能力。所以，与其顽固地隐藏我们的缺点，假装自己是完美的，还不如找出并应对我们的缺陷。你可以从自己犯的错误中获得教益，不断坚持，为成功做出更好的准备，否则就将失败。</p>\n</blockquote>\n<h5 id=\"c、意识到你既是一切又什么都不是，并决定你想成为什么样子\"><a href=\"#c、意识到你既是一切又什么都不是，并决定你想成为什么样子\" class=\"headerlink\" title=\"c、意识到你既是一切又什么都不是，并决定你想成为什么样子\"></a>c、意识到你既是一切又什么都不是，并决定你想成为什么样子</h5><blockquote>\n<p>个体的人既是一切又什么都不是，这是一个巨大的悖论。在我们自己看来，我们就是一切，例如，我们的生命终止了，对于我们而言，全世界也就消失了。因此对大多数人（以及其他物种）而言，失去生命是最糟糕不过的事情，因此尽量拥有最好的生活就是无比重要的。但是，如果从自然的视角俯视自身，我们显然又是毫无分量的。现实是，今天的每个人都只是约70亿人类中的一员，而人类又只是地球上约1000万物种中的一个。地球只是银河系约1000亿颗行星中的一个，而全宇宙有约2万亿个星系。人的寿命只是人类历史的约3000分之一，而人类历史又只是地球历史的2万分之一。换言之，我们渺小、短命得不可思议，无论取得什么样的成就，其影响都是微不足道的。同时，我们又本能地希望有意义，希望进化，而我们只能产生一丁点儿意义。所有这些一点点的意义加起来，才是宇宙进化的推动力。</p>\n</blockquote>\n<blockquote>\n<p>问题是我们有多重要，以及如何进化。我们对其他人重要吗？（他们和我们一样，从宏大的视角来看也不重要。）我们是否在某种更大的、我们永远无法真正理解的意义上重要？还是说，我们重不重要这个问题根本不重要，所以我们应该忘掉它，及时行乐？</p>\n</blockquote>\n<h5 id=\"d、你的未来取决于你的视角\"><a href=\"#d、你的未来取决于你的视角\" class=\"headerlink\" title=\"d、你的未来取决于你的视角\"></a>d、你的未来取决于你的视角</h5><blockquote>\n<p>就个人而言，我现在发现，拥抱现实、从自然的视角俯视自身、做宇宙整体微不足道的一小部分，是件很美妙的事。我本能的和有意识的目标都只是进化，利用自己的生命和特性，以某种微弱的方式为进化做贡献。同时，我最喜欢的东西（我的工作和人际关系）是我的驱动力。所以，我发现现实和自然的规律——包括我以及一切东西会如何分解、重组——都是美好的。尽管在情感上，对于将与我关心的东西最终分离，我很难接受。</p>\n</blockquote>\n<h4 id=\"1-4、理解自然提供的现实教训\"><a href=\"#1-4、理解自然提供的现实教训\" class=\"headerlink\" title=\"1.4、理解自然提供的现实教训\"></a>1.4、理解自然提供的现实教训</h4><blockquote>\n<p>我发现，理解自然和进化的规律，在很多方面对我有好处。最重要的是，这会帮助我更有效地应对自己遇到的现实，做出艰难的抉择。当我开始从理解现实规律的视角看待现实，而不是认为现实不对时，我发现几乎所有起初看起来“不好”的东西，如雨天、缺点甚至死亡，都是由于我对于自己想要拥有的东西持有先入为主之见。我逐渐意识到，我产生这些最初的反应，是因为我没有把事物放到大背景下看待，即现实的构造是让整体实现最优，而不是尽力实现我的愿望。</p>\n</blockquote>\n<h5 id=\"a、自然的一项根本法则是，为了赢得力量，人必须努力突破极限，而这是痛苦的\"><a href=\"#a、自然的一项根本法则是，为了赢得力量，人必须努力突破极限，而这是痛苦的\" class=\"headerlink\" title=\"a、自然的一项根本法则是，为了赢得力量，人必须努力突破极限，而这是痛苦的\"></a>a、自然的一项根本法则是，为了赢得力量，人必须努力突破极限，而这是痛苦的</h5><blockquote>\n<p>正像卡尔·荣格所说，“人需要困难，这对健康来说是必需的”。但多数人本能地躲避痛苦。不论是锻炼身体还是历练头脑，人都会躲避痛苦，如举重的痛苦，如沮丧、思想挣扎、尴尬、耻辱的痛苦。当人面对自身存在缺陷这个严酷现实时，这一点就体现得更明显了。</p>\n</blockquote>\n<h4 id=\"1-5、痛苦-反思-进步\"><a href=\"#1-5、痛苦-反思-进步\" class=\"headerlink\" title=\"1.5、痛苦+反思=进步\"></a>1.5、痛苦+反思=进步</h4><blockquote>\n<p>人避免不了痛苦，尤其是在追求雄心勃勃的目标时。信不信由你，如果以正确的态度对待痛苦，感到痛苦就是你的幸运，因为这将提示你寻找解决方案以便继续前进。如果你能养成一种习惯，面对精神痛苦时能够自动地反思痛苦而不是躲避痛苦，你将能够快速地学习和进化。直面你的问题、错误和弱点导致的痛苦现实，会大幅提高你的效率，我相信，只要你看到了这种做法的好处，你就不会再用别的做法了。你只需要把这种做法养成习惯。</p>\n</blockquote>\n<blockquote>\n<p>大多数人在痛苦时不愿反思，而一旦痛苦消失他们的注意力就会转移，所以他们难以通过反思得到教益。如果你在痛苦时就能好好反思（这个要求也许太高），这非常好。如果你能记得在痛苦消失后反思，这也很有价值。</p>\n</blockquote>\n<blockquote>\n<p><strong>如果你选择在这条常常很痛苦的个人进化之路上拼搏，你将自然而然地不断“更上一层楼”。当你到达了更高一层的境界，你就会发现，你原来只是因为境界低才觉得之前包围着你的那些纷至沓来的东西令人头疼，但其实并没有那么糟。生活中的大多数东西都不过是“同类情况的重演”。你的层次越高，你就越能有效地应对现实，塑造符合你目标的结果。而曾经看起来复杂得不可思议的东西，也会变得简单。</strong></p>\n</blockquote>\n<h5 id=\"a、迎接而非躲避痛苦\"><a href=\"#a、迎接而非躲避痛苦\" class=\"headerlink\" title=\"a、迎接而非躲避痛苦\"></a>a、迎接而非躲避痛苦</h5><blockquote>\n<p>每当你遇到痛苦的东西时，你就处在生活中一个潜在的重要节点：你可以选择健康并痛苦的事实，也可以选择不健康但舒适的幻觉。妙处在于，如果你选择了健康之路，痛苦将很快变成快乐。痛苦就是信号！就像不锻炼的人开始锻炼，养成享受痛苦的习惯，从痛苦中学习，将让人“步入新境界”。</p>\n</blockquote>\n<blockquote>\n<p>我所说的“步入新境界”是指，你将喜欢上以下三点：<br>（1）找到、接受，并学会如何应对你的弱点；<br>（2）更喜欢周围的人对你坦诚，而不是隐瞒对你的负面看法；<br>（3）展现真实的自我，而不是强行把弱点伪装成优势。</p>\n</blockquote>\n<h5 id=\"b、接受严厉的爱\"><a href=\"#b、接受严厉的爱\" class=\"headerlink\" title=\"b、接受严厉的爱\"></a>b、接受严厉的爱</h5><blockquote>\n<p>这在情感上会让人难以接受，尽管他们在理智上明白，他们需要通过困难体验增强能力，如果我只是给他们想要的东西，就会削弱他们，最终导致他们需要更多的帮助。</p>\n</blockquote>\n<blockquote>\n<p>当然，大多数人都希望自己没有缺点。我们接受的各种教育和现实经历让我们对自身的缺点感到难堪，并试图掩盖缺点。但能够真实展现自我的人是最快乐的。如果你能以开放的心态看待自身缺点，这将解放你，帮助你更好地应对缺点。我建议你不要为自己的缺点感到羞愧，要明白任何人都有缺点。把缺点摆上桌面将帮助你戒掉坏习惯，养成好习惯，获得真正的能力，拥有充足的理由保持乐观。</p>\n</blockquote>\n<blockquote>\n<p><strong>许多经历挫折的人，在成功适应挫折后变得和以前一样快乐，甚至更快乐，尽管当初的挫折似乎是毁灭性的</strong>。你的生活质量如何，将取决于你在这些痛苦时刻做出的抉择。一个人妥善适应的能力越强越好。无论你想实现什么样的生活愿望，你的适应能力、在个人进化之路上快速有效前进的能力，将决定你能否成功和幸福。<strong>如果你做得好，你就能改变自己的心理反应模式，使痛苦成为某种你渴望的东西。</strong></p>\n</blockquote>\n<h5 id=\"c、考虑后续与再后续的结果\"><a href=\"#c、考虑后续与再后续的结果\" class=\"headerlink\" title=\"c、考虑后续与再后续的结果\"></a>c、考虑后续与再后续的结果</h5><blockquote>\n<p>在认识到自然进化带来的更高层面的结果后，我开始发现，如果人们过度重视决策的直接结果而忽视后续和再后续的结果，他们就很难实现目标。这是因为直接结果和后续结果的值得追求性通常是相反的，这会造成决策的重大错误。例如，锻炼的直接结果是痛苦和花费时间，通常被视为不值得追求的，但后续结果是更健康和更具吸引力的形象，这是值得追求的。类似地，好吃的食物往往对你身体不好，反之亦然。</p>\n</blockquote>\n<h5 id=\"d、接受结果\"><a href=\"#d、接受结果\" class=\"headerlink\" title=\"d、接受结果\"></a>d、接受结果</h5><blockquote>\n<p>大部分时候，生活让你做许多决策，给你许多从错误中恢复的机会，所以只要你处理得好，就能拥有美妙的生活。当然，有时某些我们无法控制的因素会严重影响我们的生活质量，例如生下来所处的环境、事故与疾病等。但大多数时候，只要以正确的方式应对，最差的情况也能被扭转。</p>\n</blockquote>\n<blockquote>\n<p>我的观点很简单：不管在生活中遇到什么情况，如果你能负起责任，进行良好的决策，而不是抱怨你无法控制的东西，你将更有可能成功并找到幸福。心理学家称此为拥有“内控点”，各种研究不断显示，拥有“内控点”的人比其他人做得更好。</p>\n</blockquote>\n<blockquote>\n<p>所以不要为喜不喜欢自己的处境担忧。生活根本不关心你喜欢什么。</p>\n</blockquote>\n<h4 id=\"1-6、从更高的层次俯视机器\"><a href=\"#1-6、从更高的层次俯视机器\" class=\"headerlink\" title=\"1.6、从更高的层次俯视机器\"></a>1.6、从更高的层次俯视机器</h4><blockquote>\n<p>人类拥有独特的从更高层次俯视的能力，这不仅适用于理解现实和现实背后的因果关系，也适用于俯视自身和周围的人。我把这种超越自己和其他人的处境并客观地俯视处境的能力，称为“更高层次的思考”。更高层次的思考能让你学习和影响生活中的各种因果关系，利用这些因果关系得到你想要的结果。</p>\n</blockquote>\n<h5 id=\"a、把自己想象成一部在大机器里运转的小机器，并明白你有能力改变你的机器以实现更好的结果\"><a href=\"#a、把自己想象成一部在大机器里运转的小机器，并明白你有能力改变你的机器以实现更好的结果\" class=\"headerlink\" title=\"a、把自己想象成一部在大机器里运转的小机器，并明白你有能力改变你的机器以实现更好的结果\"></a>a、把自己想象成一部在大机器里运转的小机器，并明白你有能力改变你的机器以实现更好的结果</h5><blockquote>\n<p>你有你的目标。你用来实现目标的方式，我称为你的机器。它包括设计（必须做的事）和人（由谁来做这些必须做的事）。人包括你和帮助你的人。例如，想象你的目标是军事目标：从敌人手中夺过一个山头。你设计的机器可能包含两名侦察兵、两名狙击手、四名步兵，等等。尽管合理的设计必不可少，但这只是战斗的一半。同样重要的是让合适的人来执行这些任务。为了完成各自的任务，他们需要不同的特性：侦察兵必须跑得快，狙击手必须射得准。这样这部机器才能创造出你追求的结果。</p>\n</blockquote>\n<h5 id=\"b、通过比较你实现的结果和你的目标，你就能确定如何改进你的机器\"><a href=\"#b、通过比较你实现的结果和你的目标，你就能确定如何改进你的机器\" class=\"headerlink\" title=\"b、通过比较你实现的结果和你的目标，你就能确定如何改进你的机器\"></a>b、通过比较你实现的结果和你的目标，你就能确定如何改进你的机器</h5><blockquote>\n<p>这一评估和改进的过程，与我之前描述的进化过程一模一样。这意味着要看看如何改进或改变设计或人员，以实现你的目标。用图形来展示，这个过程就是一个反馈循环</p>\n</blockquote>\n<h5 id=\"c、区别作为机器设计者的你和作为机器中工作者的你\"><a href=\"#c、区别作为机器设计者的你和作为机器中工作者的你\" class=\"headerlink\" title=\"c、区别作为机器设计者的你和作为机器中工作者的你\"></a>c、区别作为机器设计者的你和作为机器中工作者的你</h5><blockquote>\n<p><strong>对人来说最难做的事情之一是客观地在自身所处环境（即机器）中看待自身，从而成为机器的设计者和管理者。大多数人一直都把自己看作机器中的工作者。如果你能够看到这两种角色之间的区别，并且看到成为自身生活的良好设计者与管理者要比成为机器中的工作者重要得多，你就走到了正确的道路上。想要取得成功，作为设计者和管理者的你必须客观看待作为工作者的你，不高看自己，也不让自己承担不应该承担的任务。大多数人都是凭情感行动，只看眼前，而没有从上述战略性的视角出发。他们的生活中充满了没有方向性的情感体验，随波逐流。如果你想在晚年回顾一生时觉得实现了人生愿望的话，你就不应该这样做</strong></p>\n</blockquote>\n<h5 id=\"d、大多数人犯下的最大错误是不客观看待自己以及其他人，这导致他们一次次地栽在自己或其他人的弱点上\"><a href=\"#d、大多数人犯下的最大错误是不客观看待自己以及其他人，这导致他们一次次地栽在自己或其他人的弱点上\" class=\"headerlink\" title=\"d、大多数人犯下的最大错误是不客观看待自己以及其他人，这导致他们一次次地栽在自己或其他人的弱点上\"></a>d、大多数人犯下的最大错误是不客观看待自己以及其他人，这导致他们一次次地栽在自己或其他人的弱点上</h5><blockquote>\n<p>这么做的人不会成功，因为他们固执己见。如果能克服这种倾向，他们就能充分发挥自己的潜能。所以更高层次的思考是成功的关键。</p>\n</blockquote>\n<h5 id=\"e、成功的人能超越自身，客观看待事物，并管理事物以塑造改变\"><a href=\"#e、成功的人能超越自身，客观看待事物，并管理事物以塑造改变\" class=\"headerlink\" title=\"e、成功的人能超越自身，客观看待事物，并管理事物以塑造改变\"></a>e、成功的人能超越自身，客观看待事物，并管理事物以塑造改变</h5><blockquote>\n<p>他们能接受其他人的观点，而不是固执己见。他们能客观看待自身（包括自己的长处和弱点）和其他人，从而可以让正确的人扮演恰当的角色，以实现他们的目标。如果你学会了这么做，你会发现几乎没有你无法实现的成绩。你只需要学习如何面对自身所处的现实，并把你能利用的所有资源用到极致。例如，假如作为设计者和管理者的你发现，作为工作者的你某件事情做不好，你就应该解雇这个作为工作者的你，找到一个好的替代者，而在此过程中你必须一直作为自身生活的设计者和管理者。如果你发现自己不擅长做什么，你不应该为此难过，而是应该为发现这一点感到高兴，因为知晓这一点并妥善应对，将提升你实现自身愿望的可能性。</p>\n</blockquote>\n<blockquote>\n<p>如果你发现自己不能把所有事都做到最好，并为此难过的话，你就太幼稚了。没有人能把一切都做好。你会让爱因斯坦加入你的篮球队吗？如果爱因斯坦运球和投篮做得不好，你会看不起他吗？他应该为此感到耻辱吗？想想爱因斯坦会在多少领域无法胜任，再想想即使在那个他独步全球的领域，他付出了多少努力才变得如此优秀。</p>\n</blockquote>\n<blockquote>\n<p>面对自身缺点，你有4种选择：<br>1．你可以否认缺点（这是大多数人的做法）。<br>2．你可以承认缺点并应对缺点，努力把缺点转化为优势（能不能成功取决于你的自我改变能力）。<br>3．你可以承认缺点并找到绕过缺点的方法。<br>4．或者，你可以改变你的目标。<br>你如何选择对你的人生走向至关重要。第一种是最不好的选择，否认只会导致你不断地栽在自己的缺点上，不断经受痛苦，而不会有其他结果。第二种选择，承认缺点的同时努力把缺点转化为优势，如果能成功的话，这也许是最好的做法。但有些事情你永远也不会擅长，改变也需要花费很多时间和精力。如果要用一个标准来判断你是否应该沿着这条路走下去的话，最好的标准是看你要做的事是否符合自己的特性（即你天然具有的各种能力）。第三种选择，承认缺点的同时努力想办法绕过去，是最容易、通常也最可行的道路，但这是走的人最少的路。第四种选择，改变自己的目标，也是一种不错的选择，但这需要你有很大的灵活性，能够克服自己的各种先入之见，努力找到和你匹配的目标并享受新的过程。</p>\n</blockquote>\n<h5 id=\"f、在你不擅长的领域请教擅长的其他人，这是一个你无论如何都应该培养的出色技能，这将帮助你建立起安全护栏，避免自己做错事\"><a href=\"#f、在你不擅长的领域请教擅长的其他人，这是一个你无论如何都应该培养的出色技能，这将帮助你建立起安全护栏，避免自己做错事\" class=\"headerlink\" title=\"f、在你不擅长的领域请教擅长的其他人，这是一个你无论如何都应该培养的出色技能，这将帮助你建立起安全护栏，避免自己做错事\"></a>f、在你不擅长的领域请教擅长的其他人，这是一个你无论如何都应该培养的出色技能，这将帮助你建立起安全护栏，避免自己做错事</h5><blockquote>\n<p>所有成功的人都善于这么做。</p>\n</blockquote>\n<h5 id=\"g、因为客观看待自身很困难，所以你需要依赖其他人的意见，以及全部证据\"><a href=\"#g、因为客观看待自身很困难，所以你需要依赖其他人的意见，以及全部证据\" class=\"headerlink\" title=\"g、因为客观看待自身很困难，所以你需要依赖其他人的意见，以及全部证据\"></a>g、因为客观看待自身很困难，所以你需要依赖其他人的意见，以及全部证据</h5><blockquote>\n<p>我知道自己的一生也充满了错误，也得到了许多很好的反馈意见。凭借着从更高的层次俯视所有这些证据，我才得以克服我的错误，追求我的目标。尽管我已经这样做了很久，但我依然明白我无法客观地看待自己，所以我至今仍然很依赖其他人的意见。</p>\n</blockquote>\n<h5 id=\"h、如果你的头脑足够开放，足够有决心，你几乎可以实现任何愿望\"><a href=\"#h、如果你的头脑足够开放，足够有决心，你几乎可以实现任何愿望\" class=\"headerlink\" title=\"h、如果你的头脑足够开放，足够有决心，你几乎可以实现任何愿望\"></a>h、如果你的头脑足够开放，足够有决心，你几乎可以实现任何愿望</h5><blockquote>\n<p>所以可以肯定的是，我不会劝阻你追求自己设定的目标。同时，我建议你思考你追求的目标是否符合你的特性。不管你的特性是什么，总是有很多条道路适合你，所以不要固守一条道路。如果一条特定的道路走不通，你只需要找到另一条适合自己特性的好道路。</p>\n</blockquote>\n<blockquote>\n<p>但大多数人缺乏勇气克服自身弱点，也缺乏勇气做出这一改变所要求的不容易做出的抉择。归根到底，这可以总结为以下5项抉择：<br>1．不要混淆你的愿望和事实。<br>2．不要为自身形象担心，只需关心能不能实现你的目标。<br>3．不要过于重视直接结果而忽视后续、再后续的结果。<br>4．不要让痛苦妨碍进步。<br>5．不要把不好的结果归咎于任何人，从自己身上找原因。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<div align=\"center\"><br><img src=\"https://i.loli.net/2019/12/06/ZaoOtR8F7NQKYdi.png\" width=\"300\" height=\"400\" alt=\"书的封面\"><br></div>\n\n<p>作者是桥水基金（Bridge Water）的创始人，而桥水基金则是全世界最大的避险基金公司。2019年时，他是全球最有钱的前100人。</p>\n<p>这本书除了作者总结了自己在工作和生活中处事的许多原则外，也回顾了自己的一生。</p>\n<p>这些原则被作者分为生活原则和工作原则</p>\n<h3 id=\"一、拥抱现实，应对现实。\"><a href=\"#一、拥抱现实，应对现实。\" class=\"headerlink\" title=\"一、拥抱现实，应对现实。\"></a>一、拥抱现实，应对现实。</h3><hr>\n<blockquote>\n<p>世界上最重要的事情是理解现实如何运行，以及如何应对现实。面对这一过程的心态至关重要。我发现很有帮助的做法是，把生活想象为一场游戏，我面临的每个问题都是一个需要破解的谜。我通过解谜获得一块宝石，即一项原则，它能帮助我在未来避免同样的问题。不断收集这样的宝石能够提高我的决策水平，这样我就能进入更高一级的游戏，游戏变得更难，涉及的利益也变得越来越大。</p>\n</blockquote>\n<h4 id=\"1-1、做一个超级现实的人\"><a href=\"#1-1、做一个超级现实的人\" class=\"headerlink\" title=\"1.1、做一个超级现实的人\"></a>1.1、做一个超级现实的人</h4><blockquote>\n<p>理解现实，接受现实，处理现实问题，既是务实的，也是美妙的。我已经是一个超级现实的人，所以我学会了欣赏所有现实的美好，包括严酷的现实，并开始鄙视不现实的理想主义。不要理解错了：我相信实现梦想的重要性。在我看来，生命中最美好的事情就是实现梦想。追求梦想让生活有了韵味。我要强调的是，创造伟大事物的人不是空想者，而是彻底地扎根于现实。做一个超级现实的人将帮助你明智地选择自己的梦想并实现它。</p>\n</blockquote>\n<h4 id=\"1-2、做到头脑极度开放、极度透明\"><a href=\"#1-2、做到头脑极度开放、极度透明\" class=\"headerlink\" title=\"1.2、做到头脑极度开放、极度透明\"></a>1.2、做到头脑极度开放、极度透明</h4><blockquote>\n<p>学习过程是一连串的实时反馈循环：我们做决定，看到结果，然后根据结果改进对现实的理解。做到头脑极度开放能够增强这些反馈循环的效率，因为这能让你和其他人无比清晰地看到你在做什么、为什么这么做，而不会产生误解。</p>\n</blockquote>\n<blockquote>\n<p>做到极度透明、头脑极度开放，可以加快这一学习进程。这也可能很难，因为极度透明而不是有所遮掩，可能会招致批评。惧怕这一点是很自然的。但如果你不能坦然地让自己做到极度透明，你就学不到东西。</p>\n</blockquote>\n<h5 id=\"a、不要担心其他人的看法，使之成为你的障碍\"><a href=\"#a、不要担心其他人的看法，使之成为你的障碍\" class=\"headerlink\" title=\"a、不要担心其他人的看法，使之成为你的障碍\"></a>a、不要担心其他人的看法，使之成为你的障碍</h5><blockquote>\n<p>学着做到极度透明，就像学习如何公开发言一样：一开始你会难堪，但你练得越多，你就越能应付自如。我就是这样。例如，我现在依然本能地觉得，我像在本书中这样极度透明是不舒服的，因为我在公开展示我的个人情况，这会引人注意，也会招致批评。但我还是这么做了，因为我知道这样做是最好的，而如果我让恐惧阻碍自己，我将对自己不满意。</p>\n</blockquote>\n<blockquote>\n<p>除了让我能自由做自己之外，这样做还会让我和其他人相互理解，与彼此不理解相比，这更有效而且更让人快乐。想想看，如果人们不是隐藏看法，而是公开分享看法，这将减少多少误解，世界的运转将会变得多么高效，我们将会多么接近真相</p>\n</blockquote>\n<h4 id=\"1-3、观察自然，学习现实规律\"><a href=\"#1-3、观察自然，学习现实规律\" class=\"headerlink\" title=\"1.3、观察自然，学习现实规律\"></a>1.3、观察自然，学习现实规律</h4><blockquote>\n<p>人在尝试理解任何东西（经济、市场、天气等）时，都可以从两种视角出发：<br>1．自上而下：努力找到这些东西背后的唯一驱动法则或规律。例如，在理解市场时，人可以研究影响所有经济和市场的普适法则，如供求关系；在理解物种时，人可以集中了解基因密码是如何对所有物种发生作用的。<br>2．自下而上：研究每种具体情况及其背后的法则或规律，例如，小麦市场独特的法则或规律，或者使鸭子区别于其他物种的基因序列。</p>\n</blockquote>\n<h5 id=\"a、不要固守你对事物“应该”是什么样的看法，这将使你无法了解真实的情况\"><a href=\"#a、不要固守你对事物“应该”是什么样的看法，这将使你无法了解真实的情况\" class=\"headerlink\" title=\"a、不要固守你对事物“应该”是什么样的看法，这将使你无法了解真实的情况\"></a>a、不要固守你对事物“应该”是什么样的看法，这将使你无法了解真实的情况</h5><blockquote>\n<p>很重要的是，不要让偏见阻碍我们保持客观。想要取得好结果，我们需要冷静而不是情绪化。</p>\n</blockquote>\n<blockquote>\n<p>多年前我去非洲时，看到一群鬣狗扑倒了一只幼小的角马。这让我觉得反胃。我对那只角马感到同情，并且认为我看到的景象很糟糕。但问题是，这件事是真的很糟糕，还是因为我有偏见所以认为它很糟糕，而事实上它好极了？这让我陷入思索。假如我看到的事情没有发生，世界会变好还是变差？这个视角促使我考虑这件事后续、再后续的影响，于是我发现那样的话世界将会变差。我现在认识到，自然会走向整体的最优化，而不是个体的最优化，但多数人只是根据事物对自身的影响判断好坏。我看到的情况是正在运行的自然进程，它能有效促进整个世界的改善，比人类发明的任何程序都有效得多。</p>\n</blockquote>\n<h5 id=\"b、不存在完美\"><a href=\"#b、不存在完美\" class=\"headerlink\" title=\"b、不存在完美\"></a>b、不存在完美</h5><blockquote>\n<p>想想你知道的任何产品、组织或人，你就会知道这是真的。世界上到处都是曾经辉煌但逐渐衰落和毁灭的东西，只有极少数东西一直在重塑自身，不断达到伟大的新高度。所有机器最终都会崩坏、分解，机器的零件会被回收用来制造新的机器。我们人类也会经历这样的过程。有时这让我们悲伤，因为我们已经和我们的机器产生了感情，但如果从更高的层面来看的话，观察机器如何进化，其实是件很美妙的事。</p>\n</blockquote>\n<blockquote>\n<p>从这个角度，我们可以看到完美是不存在的，它是一个目标，激发永不停息的进化过程。假如自然或任何东西是完美的，它就不会进化。生物、组织和个人总是高度不完美的，但都拥有改善的能力。所以，与其顽固地隐藏我们的缺点，假装自己是完美的，还不如找出并应对我们的缺陷。你可以从自己犯的错误中获得教益，不断坚持，为成功做出更好的准备，否则就将失败。</p>\n</blockquote>\n<h5 id=\"c、意识到你既是一切又什么都不是，并决定你想成为什么样子\"><a href=\"#c、意识到你既是一切又什么都不是，并决定你想成为什么样子\" class=\"headerlink\" title=\"c、意识到你既是一切又什么都不是，并决定你想成为什么样子\"></a>c、意识到你既是一切又什么都不是，并决定你想成为什么样子</h5><blockquote>\n<p>个体的人既是一切又什么都不是，这是一个巨大的悖论。在我们自己看来，我们就是一切，例如，我们的生命终止了，对于我们而言，全世界也就消失了。因此对大多数人（以及其他物种）而言，失去生命是最糟糕不过的事情，因此尽量拥有最好的生活就是无比重要的。但是，如果从自然的视角俯视自身，我们显然又是毫无分量的。现实是，今天的每个人都只是约70亿人类中的一员，而人类又只是地球上约1000万物种中的一个。地球只是银河系约1000亿颗行星中的一个，而全宇宙有约2万亿个星系。人的寿命只是人类历史的约3000分之一，而人类历史又只是地球历史的2万分之一。换言之，我们渺小、短命得不可思议，无论取得什么样的成就，其影响都是微不足道的。同时，我们又本能地希望有意义，希望进化，而我们只能产生一丁点儿意义。所有这些一点点的意义加起来，才是宇宙进化的推动力。</p>\n</blockquote>\n<blockquote>\n<p>问题是我们有多重要，以及如何进化。我们对其他人重要吗？（他们和我们一样，从宏大的视角来看也不重要。）我们是否在某种更大的、我们永远无法真正理解的意义上重要？还是说，我们重不重要这个问题根本不重要，所以我们应该忘掉它，及时行乐？</p>\n</blockquote>\n<h5 id=\"d、你的未来取决于你的视角\"><a href=\"#d、你的未来取决于你的视角\" class=\"headerlink\" title=\"d、你的未来取决于你的视角\"></a>d、你的未来取决于你的视角</h5><blockquote>\n<p>就个人而言，我现在发现，拥抱现实、从自然的视角俯视自身、做宇宙整体微不足道的一小部分，是件很美妙的事。我本能的和有意识的目标都只是进化，利用自己的生命和特性，以某种微弱的方式为进化做贡献。同时，我最喜欢的东西（我的工作和人际关系）是我的驱动力。所以，我发现现实和自然的规律——包括我以及一切东西会如何分解、重组——都是美好的。尽管在情感上，对于将与我关心的东西最终分离，我很难接受。</p>\n</blockquote>\n<h4 id=\"1-4、理解自然提供的现实教训\"><a href=\"#1-4、理解自然提供的现实教训\" class=\"headerlink\" title=\"1.4、理解自然提供的现实教训\"></a>1.4、理解自然提供的现实教训</h4><blockquote>\n<p>我发现，理解自然和进化的规律，在很多方面对我有好处。最重要的是，这会帮助我更有效地应对自己遇到的现实，做出艰难的抉择。当我开始从理解现实规律的视角看待现实，而不是认为现实不对时，我发现几乎所有起初看起来“不好”的东西，如雨天、缺点甚至死亡，都是由于我对于自己想要拥有的东西持有先入为主之见。我逐渐意识到，我产生这些最初的反应，是因为我没有把事物放到大背景下看待，即现实的构造是让整体实现最优，而不是尽力实现我的愿望。</p>\n</blockquote>\n<h5 id=\"a、自然的一项根本法则是，为了赢得力量，人必须努力突破极限，而这是痛苦的\"><a href=\"#a、自然的一项根本法则是，为了赢得力量，人必须努力突破极限，而这是痛苦的\" class=\"headerlink\" title=\"a、自然的一项根本法则是，为了赢得力量，人必须努力突破极限，而这是痛苦的\"></a>a、自然的一项根本法则是，为了赢得力量，人必须努力突破极限，而这是痛苦的</h5><blockquote>\n<p>正像卡尔·荣格所说，“人需要困难，这对健康来说是必需的”。但多数人本能地躲避痛苦。不论是锻炼身体还是历练头脑，人都会躲避痛苦，如举重的痛苦，如沮丧、思想挣扎、尴尬、耻辱的痛苦。当人面对自身存在缺陷这个严酷现实时，这一点就体现得更明显了。</p>\n</blockquote>\n<h4 id=\"1-5、痛苦-反思-进步\"><a href=\"#1-5、痛苦-反思-进步\" class=\"headerlink\" title=\"1.5、痛苦+反思=进步\"></a>1.5、痛苦+反思=进步</h4><blockquote>\n<p>人避免不了痛苦，尤其是在追求雄心勃勃的目标时。信不信由你，如果以正确的态度对待痛苦，感到痛苦就是你的幸运，因为这将提示你寻找解决方案以便继续前进。如果你能养成一种习惯，面对精神痛苦时能够自动地反思痛苦而不是躲避痛苦，你将能够快速地学习和进化。直面你的问题、错误和弱点导致的痛苦现实，会大幅提高你的效率，我相信，只要你看到了这种做法的好处，你就不会再用别的做法了。你只需要把这种做法养成习惯。</p>\n</blockquote>\n<blockquote>\n<p>大多数人在痛苦时不愿反思，而一旦痛苦消失他们的注意力就会转移，所以他们难以通过反思得到教益。如果你在痛苦时就能好好反思（这个要求也许太高），这非常好。如果你能记得在痛苦消失后反思，这也很有价值。</p>\n</blockquote>\n<blockquote>\n<p><strong>如果你选择在这条常常很痛苦的个人进化之路上拼搏，你将自然而然地不断“更上一层楼”。当你到达了更高一层的境界，你就会发现，你原来只是因为境界低才觉得之前包围着你的那些纷至沓来的东西令人头疼，但其实并没有那么糟。生活中的大多数东西都不过是“同类情况的重演”。你的层次越高，你就越能有效地应对现实，塑造符合你目标的结果。而曾经看起来复杂得不可思议的东西，也会变得简单。</strong></p>\n</blockquote>\n<h5 id=\"a、迎接而非躲避痛苦\"><a href=\"#a、迎接而非躲避痛苦\" class=\"headerlink\" title=\"a、迎接而非躲避痛苦\"></a>a、迎接而非躲避痛苦</h5><blockquote>\n<p>每当你遇到痛苦的东西时，你就处在生活中一个潜在的重要节点：你可以选择健康并痛苦的事实，也可以选择不健康但舒适的幻觉。妙处在于，如果你选择了健康之路，痛苦将很快变成快乐。痛苦就是信号！就像不锻炼的人开始锻炼，养成享受痛苦的习惯，从痛苦中学习，将让人“步入新境界”。</p>\n</blockquote>\n<blockquote>\n<p>我所说的“步入新境界”是指，你将喜欢上以下三点：<br>（1）找到、接受，并学会如何应对你的弱点；<br>（2）更喜欢周围的人对你坦诚，而不是隐瞒对你的负面看法；<br>（3）展现真实的自我，而不是强行把弱点伪装成优势。</p>\n</blockquote>\n<h5 id=\"b、接受严厉的爱\"><a href=\"#b、接受严厉的爱\" class=\"headerlink\" title=\"b、接受严厉的爱\"></a>b、接受严厉的爱</h5><blockquote>\n<p>这在情感上会让人难以接受，尽管他们在理智上明白，他们需要通过困难体验增强能力，如果我只是给他们想要的东西，就会削弱他们，最终导致他们需要更多的帮助。</p>\n</blockquote>\n<blockquote>\n<p>当然，大多数人都希望自己没有缺点。我们接受的各种教育和现实经历让我们对自身的缺点感到难堪，并试图掩盖缺点。但能够真实展现自我的人是最快乐的。如果你能以开放的心态看待自身缺点，这将解放你，帮助你更好地应对缺点。我建议你不要为自己的缺点感到羞愧，要明白任何人都有缺点。把缺点摆上桌面将帮助你戒掉坏习惯，养成好习惯，获得真正的能力，拥有充足的理由保持乐观。</p>\n</blockquote>\n<blockquote>\n<p><strong>许多经历挫折的人，在成功适应挫折后变得和以前一样快乐，甚至更快乐，尽管当初的挫折似乎是毁灭性的</strong>。你的生活质量如何，将取决于你在这些痛苦时刻做出的抉择。一个人妥善适应的能力越强越好。无论你想实现什么样的生活愿望，你的适应能力、在个人进化之路上快速有效前进的能力，将决定你能否成功和幸福。<strong>如果你做得好，你就能改变自己的心理反应模式，使痛苦成为某种你渴望的东西。</strong></p>\n</blockquote>\n<h5 id=\"c、考虑后续与再后续的结果\"><a href=\"#c、考虑后续与再后续的结果\" class=\"headerlink\" title=\"c、考虑后续与再后续的结果\"></a>c、考虑后续与再后续的结果</h5><blockquote>\n<p>在认识到自然进化带来的更高层面的结果后，我开始发现，如果人们过度重视决策的直接结果而忽视后续和再后续的结果，他们就很难实现目标。这是因为直接结果和后续结果的值得追求性通常是相反的，这会造成决策的重大错误。例如，锻炼的直接结果是痛苦和花费时间，通常被视为不值得追求的，但后续结果是更健康和更具吸引力的形象，这是值得追求的。类似地，好吃的食物往往对你身体不好，反之亦然。</p>\n</blockquote>\n<h5 id=\"d、接受结果\"><a href=\"#d、接受结果\" class=\"headerlink\" title=\"d、接受结果\"></a>d、接受结果</h5><blockquote>\n<p>大部分时候，生活让你做许多决策，给你许多从错误中恢复的机会，所以只要你处理得好，就能拥有美妙的生活。当然，有时某些我们无法控制的因素会严重影响我们的生活质量，例如生下来所处的环境、事故与疾病等。但大多数时候，只要以正确的方式应对，最差的情况也能被扭转。</p>\n</blockquote>\n<blockquote>\n<p>我的观点很简单：不管在生活中遇到什么情况，如果你能负起责任，进行良好的决策，而不是抱怨你无法控制的东西，你将更有可能成功并找到幸福。心理学家称此为拥有“内控点”，各种研究不断显示，拥有“内控点”的人比其他人做得更好。</p>\n</blockquote>\n<blockquote>\n<p>所以不要为喜不喜欢自己的处境担忧。生活根本不关心你喜欢什么。</p>\n</blockquote>\n<h4 id=\"1-6、从更高的层次俯视机器\"><a href=\"#1-6、从更高的层次俯视机器\" class=\"headerlink\" title=\"1.6、从更高的层次俯视机器\"></a>1.6、从更高的层次俯视机器</h4><blockquote>\n<p>人类拥有独特的从更高层次俯视的能力，这不仅适用于理解现实和现实背后的因果关系，也适用于俯视自身和周围的人。我把这种超越自己和其他人的处境并客观地俯视处境的能力，称为“更高层次的思考”。更高层次的思考能让你学习和影响生活中的各种因果关系，利用这些因果关系得到你想要的结果。</p>\n</blockquote>\n<h5 id=\"a、把自己想象成一部在大机器里运转的小机器，并明白你有能力改变你的机器以实现更好的结果\"><a href=\"#a、把自己想象成一部在大机器里运转的小机器，并明白你有能力改变你的机器以实现更好的结果\" class=\"headerlink\" title=\"a、把自己想象成一部在大机器里运转的小机器，并明白你有能力改变你的机器以实现更好的结果\"></a>a、把自己想象成一部在大机器里运转的小机器，并明白你有能力改变你的机器以实现更好的结果</h5><blockquote>\n<p>你有你的目标。你用来实现目标的方式，我称为你的机器。它包括设计（必须做的事）和人（由谁来做这些必须做的事）。人包括你和帮助你的人。例如，想象你的目标是军事目标：从敌人手中夺过一个山头。你设计的机器可能包含两名侦察兵、两名狙击手、四名步兵，等等。尽管合理的设计必不可少，但这只是战斗的一半。同样重要的是让合适的人来执行这些任务。为了完成各自的任务，他们需要不同的特性：侦察兵必须跑得快，狙击手必须射得准。这样这部机器才能创造出你追求的结果。</p>\n</blockquote>\n<h5 id=\"b、通过比较你实现的结果和你的目标，你就能确定如何改进你的机器\"><a href=\"#b、通过比较你实现的结果和你的目标，你就能确定如何改进你的机器\" class=\"headerlink\" title=\"b、通过比较你实现的结果和你的目标，你就能确定如何改进你的机器\"></a>b、通过比较你实现的结果和你的目标，你就能确定如何改进你的机器</h5><blockquote>\n<p>这一评估和改进的过程，与我之前描述的进化过程一模一样。这意味着要看看如何改进或改变设计或人员，以实现你的目标。用图形来展示，这个过程就是一个反馈循环</p>\n</blockquote>\n<h5 id=\"c、区别作为机器设计者的你和作为机器中工作者的你\"><a href=\"#c、区别作为机器设计者的你和作为机器中工作者的你\" class=\"headerlink\" title=\"c、区别作为机器设计者的你和作为机器中工作者的你\"></a>c、区别作为机器设计者的你和作为机器中工作者的你</h5><blockquote>\n<p><strong>对人来说最难做的事情之一是客观地在自身所处环境（即机器）中看待自身，从而成为机器的设计者和管理者。大多数人一直都把自己看作机器中的工作者。如果你能够看到这两种角色之间的区别，并且看到成为自身生活的良好设计者与管理者要比成为机器中的工作者重要得多，你就走到了正确的道路上。想要取得成功，作为设计者和管理者的你必须客观看待作为工作者的你，不高看自己，也不让自己承担不应该承担的任务。大多数人都是凭情感行动，只看眼前，而没有从上述战略性的视角出发。他们的生活中充满了没有方向性的情感体验，随波逐流。如果你想在晚年回顾一生时觉得实现了人生愿望的话，你就不应该这样做</strong></p>\n</blockquote>\n<h5 id=\"d、大多数人犯下的最大错误是不客观看待自己以及其他人，这导致他们一次次地栽在自己或其他人的弱点上\"><a href=\"#d、大多数人犯下的最大错误是不客观看待自己以及其他人，这导致他们一次次地栽在自己或其他人的弱点上\" class=\"headerlink\" title=\"d、大多数人犯下的最大错误是不客观看待自己以及其他人，这导致他们一次次地栽在自己或其他人的弱点上\"></a>d、大多数人犯下的最大错误是不客观看待自己以及其他人，这导致他们一次次地栽在自己或其他人的弱点上</h5><blockquote>\n<p>这么做的人不会成功，因为他们固执己见。如果能克服这种倾向，他们就能充分发挥自己的潜能。所以更高层次的思考是成功的关键。</p>\n</blockquote>\n<h5 id=\"e、成功的人能超越自身，客观看待事物，并管理事物以塑造改变\"><a href=\"#e、成功的人能超越自身，客观看待事物，并管理事物以塑造改变\" class=\"headerlink\" title=\"e、成功的人能超越自身，客观看待事物，并管理事物以塑造改变\"></a>e、成功的人能超越自身，客观看待事物，并管理事物以塑造改变</h5><blockquote>\n<p>他们能接受其他人的观点，而不是固执己见。他们能客观看待自身（包括自己的长处和弱点）和其他人，从而可以让正确的人扮演恰当的角色，以实现他们的目标。如果你学会了这么做，你会发现几乎没有你无法实现的成绩。你只需要学习如何面对自身所处的现实，并把你能利用的所有资源用到极致。例如，假如作为设计者和管理者的你发现，作为工作者的你某件事情做不好，你就应该解雇这个作为工作者的你，找到一个好的替代者，而在此过程中你必须一直作为自身生活的设计者和管理者。如果你发现自己不擅长做什么，你不应该为此难过，而是应该为发现这一点感到高兴，因为知晓这一点并妥善应对，将提升你实现自身愿望的可能性。</p>\n</blockquote>\n<blockquote>\n<p>如果你发现自己不能把所有事都做到最好，并为此难过的话，你就太幼稚了。没有人能把一切都做好。你会让爱因斯坦加入你的篮球队吗？如果爱因斯坦运球和投篮做得不好，你会看不起他吗？他应该为此感到耻辱吗？想想爱因斯坦会在多少领域无法胜任，再想想即使在那个他独步全球的领域，他付出了多少努力才变得如此优秀。</p>\n</blockquote>\n<blockquote>\n<p>面对自身缺点，你有4种选择：<br>1．你可以否认缺点（这是大多数人的做法）。<br>2．你可以承认缺点并应对缺点，努力把缺点转化为优势（能不能成功取决于你的自我改变能力）。<br>3．你可以承认缺点并找到绕过缺点的方法。<br>4．或者，你可以改变你的目标。<br>你如何选择对你的人生走向至关重要。第一种是最不好的选择，否认只会导致你不断地栽在自己的缺点上，不断经受痛苦，而不会有其他结果。第二种选择，承认缺点的同时努力把缺点转化为优势，如果能成功的话，这也许是最好的做法。但有些事情你永远也不会擅长，改变也需要花费很多时间和精力。如果要用一个标准来判断你是否应该沿着这条路走下去的话，最好的标准是看你要做的事是否符合自己的特性（即你天然具有的各种能力）。第三种选择，承认缺点的同时努力想办法绕过去，是最容易、通常也最可行的道路，但这是走的人最少的路。第四种选择，改变自己的目标，也是一种不错的选择，但这需要你有很大的灵活性，能够克服自己的各种先入之见，努力找到和你匹配的目标并享受新的过程。</p>\n</blockquote>\n<h5 id=\"f、在你不擅长的领域请教擅长的其他人，这是一个你无论如何都应该培养的出色技能，这将帮助你建立起安全护栏，避免自己做错事\"><a href=\"#f、在你不擅长的领域请教擅长的其他人，这是一个你无论如何都应该培养的出色技能，这将帮助你建立起安全护栏，避免自己做错事\" class=\"headerlink\" title=\"f、在你不擅长的领域请教擅长的其他人，这是一个你无论如何都应该培养的出色技能，这将帮助你建立起安全护栏，避免自己做错事\"></a>f、在你不擅长的领域请教擅长的其他人，这是一个你无论如何都应该培养的出色技能，这将帮助你建立起安全护栏，避免自己做错事</h5><blockquote>\n<p>所有成功的人都善于这么做。</p>\n</blockquote>\n<h5 id=\"g、因为客观看待自身很困难，所以你需要依赖其他人的意见，以及全部证据\"><a href=\"#g、因为客观看待自身很困难，所以你需要依赖其他人的意见，以及全部证据\" class=\"headerlink\" title=\"g、因为客观看待自身很困难，所以你需要依赖其他人的意见，以及全部证据\"></a>g、因为客观看待自身很困难，所以你需要依赖其他人的意见，以及全部证据</h5><blockquote>\n<p>我知道自己的一生也充满了错误，也得到了许多很好的反馈意见。凭借着从更高的层次俯视所有这些证据，我才得以克服我的错误，追求我的目标。尽管我已经这样做了很久，但我依然明白我无法客观地看待自己，所以我至今仍然很依赖其他人的意见。</p>\n</blockquote>\n<h5 id=\"h、如果你的头脑足够开放，足够有决心，你几乎可以实现任何愿望\"><a href=\"#h、如果你的头脑足够开放，足够有决心，你几乎可以实现任何愿望\" class=\"headerlink\" title=\"h、如果你的头脑足够开放，足够有决心，你几乎可以实现任何愿望\"></a>h、如果你的头脑足够开放，足够有决心，你几乎可以实现任何愿望</h5><blockquote>\n<p>所以可以肯定的是，我不会劝阻你追求自己设定的目标。同时，我建议你思考你追求的目标是否符合你的特性。不管你的特性是什么，总是有很多条道路适合你，所以不要固守一条道路。如果一条特定的道路走不通，你只需要找到另一条适合自己特性的好道路。</p>\n</blockquote>\n<blockquote>\n<p>但大多数人缺乏勇气克服自身弱点，也缺乏勇气做出这一改变所要求的不容易做出的抉择。归根到底，这可以总结为以下5项抉择：<br>1．不要混淆你的愿望和事实。<br>2．不要为自身形象担心，只需关心能不能实现你的目标。<br>3．不要过于重视直接结果而忽视后续、再后续的结果。<br>4．不要让痛苦妨碍进步。<br>5．不要把不好的结果归咎于任何人，从自己身上找原因。</p>\n</blockquote>\n"},{"title":"《金融的本质》","date":"2019-12-09T16:00:00.000Z","_content":"\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/12/11/S46gvxNeUqcKihD.jpg\" width = \"300\" height=\"400\" alt=\"书的封面\">\n</div>\n\n实际上，这并不是一本被翻译成中文的外国书籍，这只是国内出版社把美联储的主席伯南克的四次演讲合在一起，出了一本叫《金融的本质》这样一本中文书籍。\n\n2009年，时任美联储主席伯南克，因带领美国度过大萧条以来最恶劣的经济危机，被《时代杂志》评选为“年度风云人物”。\n\n四次演讲，主要讲了美联储的中央银行的金融史以及应对危机的金融政策演变史。\n\n### 什么是中央银行？\n---\n中央银行并不是普通的银行，它实际上是个政府机构，处于一个国家货币和金融体系的核心。它引导了现代货币及金融体系的发展，并在经济政策制定中发挥重要作用。\n\n\n#### 中央银行的两大职能\n* 经济稳定职能：维持宏观经济稳定，即追求经济稳定增长，避免大幅波动，并维持稳定的低通胀。\n* 金融稳定职能：中央银行要尽可能地保证金融系统的正常运作，尤其是要尽可能防止金融恐慌，避免发生金融危机。\n\n\n要履行这两大职能，中央银行都有哪些工具可用呢？简单地说，主要有两套基本工具。\n\n#### 稳定经济方面的工具主要是货币政策\n\n> 例如，在通常情况下美联储可以通过在公开市场买卖证券，来降低或提高短期利率。**当经济增长过缓或通胀水平过低时**，美联储可以通过降息来刺激经济发展。美联储的低利率会传导至其他各种利率，进而刺激房产购置、建筑施工和企业投资等。低利率会创造更多的需求、消费以及投资，从而拉动经济增长。同样，**如果经济增长过热或通胀问题严重**，那么央行常用的应对措施就是提高利率。提高隔夜拆借利率，也就是提高各银行向美联储借钱的成本，这个利率在美国被称为联邦基金利率。美联储提高利率将会系统性带动其他利率的上涨，这样就可以通过提高车贷、房贷及其他类型贷款的成本，或是提高生产资料的投资成本，来减轻经济过热的压力，从而抑制经济过快增长。\n\n货币政策是中央银行多年来试图让经济在增长和通胀两方面都保持稳定而使用的一个基本工具。\n\n#### 应对金融恐慌或金融危机的主要工具是流动性供给\n\n> 出于对金融稳定性的考虑，中央银行会向金融机构提供短期贷款。在金融恐慌或危机期间，向金融机构提供短期信贷能平息市场情绪，有利于维持这些金融机构的稳定性，有助于缓解甚至终结金融危机。**央行的上述行为被称作“最后贷款人”工具**。如果金融市场崩溃，金融机构又没有其他资金来源，那么中央银行就要随时准备做最后贷款人，通过提供流动性支持来帮助稳定金融系统。\n\n### 什么是金融恐慌？\n---\n#### 总体来说，金融恐慌是由大家对金融机构失去信心而引起的\n\n> 要解释这个问题，最好的办法是举一个大家都熟悉的例子。如果你看过电影《生活多美好》，你就会知道詹姆斯·斯图尔特在片中扮演的银行家所遭遇的问题之一，就是他的银行面临挤兑威胁。**什么是挤兑呢**？我们可以设想一种类似的情况。想象一下，在存款保险制度和联邦存款保险公司出现之前，美国的某一个街角有一家普通商业银行，我们姑且称之为华盛顿第一银行。这家银行以向企业发放贷款为生，其资金主要来源于所吸收的公众存款。这些存款被称为活期存款，也就意味着储户可以随时提取。随时可提取这一点很重要，因为人们在日常生活中会经常用到存款，比如购物。\n\n> 现在想象一下，假设出于某些原因，有传言说这家银行出现了不良贷款并导致其陷入亏损。作为储户，你会这么想：“我不知道谣言是不是真的，但是我知道，如果坐等其他人把存款取出来，那等到自己最后一个去取钱时，也许一分钱也取不到了。”接下来你会做什么呢？你会去跟银行说：“我也不知道谣言是不是真的，但我知道大家都会来银行取钱，所以现在我也要把我的钱取出来。”这样一来，储户们就都在银行门前排起了长队。\n\n> **如今，没有一家银行会持有与储户存款相当的现金，银行一般将现金贷出，形成贷款**。所以一旦银行的最低现金储备耗尽，银行就只能通过出售或处置其贷款来满足储户的提款需求。但出售商业贷款很困难，这不仅需要时间，而且往往还得折价出售。可能在银行还没来得及着手出售的时候，储户们就已经找上门来了，吵着问：“我的钱呢？”所以说恐慌是一种自我实现的预言。储户恐慌使得银行遭遇挤兑，银行不得不折价销售资产来应对，最终导致银行破产，同时许多储户也可能面临存款损失，就像“大萧条”时期一样。\n\n> **恐慌是个非常严重的问题。如果一家银行出了问题，隔壁银行的储户可能就会担心他们存钱的银行是不是也会出问题，因此，一家银行遭到挤兑会导致更普遍的银行挤兑或更大范围的银行体系恐慌**。在联邦存款保险公司成立之前，有时银行为了应对恐慌或挤兑会拒绝储户提款，他们会说：“不能再取款了，我们停止营业了。”限制储户取款会产生负面影响，也会给那些需要支付工资或需要买东西的人带来麻烦。不只是许多银行会倒闭，更为严重的是，银行业恐慌常常会蔓延到其他市场，例如常常伴随而来的是股市崩盘。可想而知，所有这些事情加起来，会对经济产生怎样的不利影响。\n\n> **如果金融机构持有期限较长的非流动性资产——非流动性意味着出售这些资产（如贷款）需要花费相当多的时间和精力，而支持这些资产的资金（如发放贷款的资金）却主要来自资产负债表另一侧的短期负债（如储蓄），那么金融恐慌随时都有可能发生**。在这种情况下，很有可能储户会说“等等，我不想把钱存在这儿了，我要取走”，这样金融机构就会遇到严峻的问题。\n\n#### 那么，中央银行（美联储）该如何通过合法途径帮助这些商业银行呢？\n> **记住，中央银行能够行使最后贷款人职能**。想象一下，商业银行正在将现金交到要求取款的储户手上，但其银行储备的现金可能满足不了所有提现需求。银行有足量的优质贷款，但不能直接变现，而这时储户又在门口等着要立刻提走他们的钱。这时，美联储就发挥作用了。商业银行可以联系当地的美联储办事处：“你看，我有一大把优质贷款，可以抵押给你，请你贷一些现金给我。”这样一来，商业银行就可以从中央银行提出钱来兑付给储户。只要这家银行的确有偿付能力（即只要贷款确实优质安全），那么挤兑就会被平息，恐慌也就结束了。因此通过接受金融机构的非流动性资产作为抵押而向其提供短期贷款，中央银行可以为金融系统注入资金，支付给储户和短期借款人，从而稳定局势，结束恐慌。\n\n### 什么是量化宽松？\n---\n也叫**大规模资产购买计划**，即媒体和其他地方所说的量化宽松。这是在传统的货币政策已经用尽了的情况下（利率下调至接近为0），美联储转向了非传统的货币政策。\n> 到了2008年12月，传统的货币政策已经用尽了，我们已经不能再下调联邦基金利率了。然而，经济显然还需要额外的支持。进入2009年，经济仍然在急剧衰退。我们需要一些其他的政策来支持经济恢复，于是我们转向了非传统的货币政策。我们采用的主要工具是大规模资产购买计划，即媒体和其他地方所说的量化宽松。这些大规模资产购买计划是宽松货币政策的替代方案，为经济提供支持。\n\n#### 量化宽松政策是如何发挥作用的？\n> 为了影响长期利率，美联储开始大规模购买国债和政府支持型企业抵押的相关证券。这里要澄清一下，美联储购买的都是政府担保证券，或者是国债，即美国政府债务。\n\n> 为什么美联储要购买这些资产呢？顺便插一句，这是米尔顿·弗里德曼和其他货币学派学者所提到的，他们的基本观点是，当你购买国债或者政府支持型企业证券并把它们写进资产负债表时，市场中可供应的同类证券就减少了。如果投资者想要持有这些证券，就必须接受较低的收益率。换句话说，如果市场中可供应的同类证券减少了，投资者就会愿意为这些证券支付更高的价格，这与收益率是相反的。\n\n> 因而，通过购买国债、写入资产负债表、减少这些国债的有效供应，我们就有效降低了国债和政府支持型企业证券的利率。而且，当投资者的投资组合中不再有国债和政府支持型企业证券时，他们就不得不转向其他类型的证券，比如公司债券，而这将提高其他证券的价格，降低其收益率。所以，这些行为的净效应是降低大范围内证券的收益率。通常，较低的利率对经济增长具有有益的刺激效应。\n\n> 因此，这实际上是另一种货币政策：我们聚焦长期利率，而不是短期利率上。但是，这里的基本逻辑是一致的，都是降低利率，刺激经济增长。\n\n#### 美联储购买了两万亿美元的证券，那用什么支付的？\n> 答案是，通过贷记出售证券给美联储的人的银行账户来支付这些款项。这些银行账户是银行在美联储中持有的储备。美联储是银行的银行。实际上，银行可以在美联储开立储蓄账户，这些账户被称为储备账户。所以，当购买证券的交易发生时，我们支付的方式只是增加了银行在美联储账户的储备数量。\n\n#### 量化宽松的影响\n\n> 那么，大规模资产购买计划或者说量化宽松到底是怎么回事呢？我们实施这项政策时，期望它能够降低利率，后来证实这差不多成功了。比如，30年期抵押贷款利率降至4%以下，这是历史最低点，而其他利率也都下降了。企业需要支付的债券利率也下降了，不仅基础安全利率下降了，而且企业债券利率和国债利率的利差也下降了，反映出金融市场对整个经济的信心提升了。从我的观点和美联储的分析来看，长期利率的下降对经济复苏和增长有提振作用。\n\n> 然而，上述政策对房价的影响比我们期待中的要小得多。虽然我们已经把抵押贷款利率降到很低，以为这会刺激楼市，但是楼市依然没有回暖。\n\n#### 控制利率并不是一个万能工具\n> 有证据表明，1928-1929年间美国股市溢价过高，美联储对此非常担心。它只想着通过提高利率来应对，而没有考虑到会对经济产生多大的影响。于是美联储通过提高利率来抑制股市狂热，当然它的确做到了！但是提高利率同样对经济产生了很多副作用。我们当然知道资产价格泡沫十分危险，也想尽可能地化解这些泡沫。但若要通过金融监管途径来解决，那就应该采用更具针对性的解决办法，而不是仅仅是提高利率水平这种带有普遍杀伤力的方法。\n\n### 金融体系的漏洞\n---\n\n#### 私人部门\n\n**金融衍生品的泛滥**\n\n就我个人的了解，是银行把一些优质的贷款和次一点的贷款组合在一起，形成新的证券在市场上出售。这些新发明的金融衍生品的复杂程度已经让金融机构无法准确评估其中的风险了。\n> 这些公司不会特别关注贷款的质量，因为他们要做的是将贷款卖给其他机构。在住房抵押贷款被卖给大型金融机构之后，这些金融机构会将住房抵押贷款或其他证券进行组合，形成另一种证券。\n\n> 不幸的是，这些证券太过复杂，金融机构对于自身风险的监管远远不够。然而，问题并不仅仅在于这些公司蒙受的损失。即使美国所有的次级住房抵押贷款都变得一文不值，其对金融体系造成的损失也只相当于一个糟糕的股票交易日：规模并不是很大。**关键问题在于，这些住房抵押贷款分布于不同的证券之中，并在不同的市场上流动，没有人真正知道这些证券的源头，也没有知道谁将会遭受损失。这给金融市场带来了很大的不确定性。**\n\n**许多人借债过多，杠杆过度**\n> 在经历了20年经济繁荣和金融稳定后，人们过于自信，愿意举借更多的债务，这样做的后果就是，在盈利空间不大、资产价值又缩水的时候，就会出现资不抵债的情况。\n\n**近年来金融交易日益复杂化，但银行和其他金融机构监控、计量和管理风险的能力却没能跟上步伐**\n> 也就是说，投入到风险管理的信息技术和资源不足以帮助人们充分意识到风险的存在和严重程度。假设2006年你向银行询问房价下跌20%的影响，银行很有可能大大低估其对资产负债表的影响，因为他们有没能力准确完整地计量所面临的风险。\n\n**金融机构一向偏爱诸如商业票据之类的短期融资方式**\n> 这些融资方式短则1天，大多不到90天。因此，如同19世纪依赖存贷款的银行一样，如今金融机构也持有大量的短期流动负债，这些负债和19世纪的存款一样容易受到挤兑。\n\n#### 公共部门\n\n**金融监管机构未能与时俱进**\n* 和19世纪30年代“大萧条”时期相比基本没有变化\n* 许多重要的金融机构并没有受到来自任何金融监管机构的全面而严格的监管\n\n**监管银行和银行持股公司时，对风险计量做的不够**\n\n**在消费者保护上做的不够**\n\n**政府缺少对整个系统而不仅是对某个企业关注的公共部门**\n\n### 这次的经济复苏为何如此缓慢？\n---\n> 为什么这次经济恢复的速度比以往要缓慢呢？其中一个原因就是房地产市场复苏很缓慢。在往常的复苏中，房地产都会很快回到常态，**这是整个复苏过程中的一个重要部分。建筑工人重新开始工作，相关产业如家具业、家用电器也开始扩张，这些都是复苏过程的一部分**。但是这一次没有出现这样的现象，为什么呢？\n\n> 房地产市场中仍然存在很多结构性因素，这些因素阻碍了更加强劲的复苏。在供给方面，房屋的超额供应量和空置率依旧很高。**衰退期空置率峰值超过2.5%**。（*沃日，看到这里我比较担心天朝的现状*）\n\n> 在需求方面，你或许会认为许多人都在买房子，因为现在的房价大家负担得起。房价大幅下跌，住房抵押贷款利率又低。因此，如果你有能力买房，只要支付月供，就可以比几年前更容易买到房。**但是，要想从低房价和低利率中获利，前提是你可以获得住房抵押贷款**。然而，经济危机以来，房贷的状况比原先紧张了许多。就连很多信用评分很高的人也无法获得贷款，尽管他们负担得起房价和月供。\n\n### 大而不倒的问题\n---\n为何美联储优先救助那些大的金融机构，却置无家可归的普通公民于不顾呢？\n> 美国国际集团，它在2008年10月已濒临破产。美国国际集团是世界上最大的保险集团，机构组成非常复杂。作为一家跨国金融服务集团，它由很多部分组成，其中包括许多全球性的保险公司。\n\n> **在我们看来，美国国际集团的倒闭基本上意味着末日到来**。它不仅与众多企业相关联，它还与美国和欧洲的金融体系及全球性银行联系密切。我们非常担心，**一旦美国国际集团破产，我们将再也无法掌控金融危机的走向。**\n\n> 于是，为避免美国国际集团破产，美联储以其资产作为抵押，为其提供了850亿美元的贷款。以补充流动性和维持日常运营。\n\n> 我想要强调的是，美联储被迫为贝尔斯登和美国国际集团所采取的措施，显然并非是未来进行金融危机管理的良方。首先，这种为阻止整个体系崩溃而不得不进行的干预，不仅相当艰难，还让人难受。显然，一个体系中若有一些企业“大而不倒”(too big to fail)，那么这个体系一定存在根本性缺陷。如果一家企业的规模大到它认为自己一定会得到救助，这对其他企业就非常不公平。除此之外，“大而不倒”现象的存在还会激励这些大公司过度冒险，**它们会说：“我们很愿意承担巨大风险。就像抛硬币，正面我赢，反面你输。如果赌对了，我们会赚得盆满钵满。如果赌错了，还有政府会救助我们**。”这样的现象我们难以容忍。\n\n*最后，我想说的是，美联储主席的演讲，果然是干货满满！*\n","source":"_posts/read/金融的本质.md","raw":"---\ntitle: 《金融的本质》\ncategories: 读书\ndate: 2019-12-10\n---\n\n<div align=\"center\">\n<img src=\"https://i.loli.net/2019/12/11/S46gvxNeUqcKihD.jpg\" width = \"300\" height=\"400\" alt=\"书的封面\">\n</div>\n\n实际上，这并不是一本被翻译成中文的外国书籍，这只是国内出版社把美联储的主席伯南克的四次演讲合在一起，出了一本叫《金融的本质》这样一本中文书籍。\n\n2009年，时任美联储主席伯南克，因带领美国度过大萧条以来最恶劣的经济危机，被《时代杂志》评选为“年度风云人物”。\n\n四次演讲，主要讲了美联储的中央银行的金融史以及应对危机的金融政策演变史。\n\n### 什么是中央银行？\n---\n中央银行并不是普通的银行，它实际上是个政府机构，处于一个国家货币和金融体系的核心。它引导了现代货币及金融体系的发展，并在经济政策制定中发挥重要作用。\n\n\n#### 中央银行的两大职能\n* 经济稳定职能：维持宏观经济稳定，即追求经济稳定增长，避免大幅波动，并维持稳定的低通胀。\n* 金融稳定职能：中央银行要尽可能地保证金融系统的正常运作，尤其是要尽可能防止金融恐慌，避免发生金融危机。\n\n\n要履行这两大职能，中央银行都有哪些工具可用呢？简单地说，主要有两套基本工具。\n\n#### 稳定经济方面的工具主要是货币政策\n\n> 例如，在通常情况下美联储可以通过在公开市场买卖证券，来降低或提高短期利率。**当经济增长过缓或通胀水平过低时**，美联储可以通过降息来刺激经济发展。美联储的低利率会传导至其他各种利率，进而刺激房产购置、建筑施工和企业投资等。低利率会创造更多的需求、消费以及投资，从而拉动经济增长。同样，**如果经济增长过热或通胀问题严重**，那么央行常用的应对措施就是提高利率。提高隔夜拆借利率，也就是提高各银行向美联储借钱的成本，这个利率在美国被称为联邦基金利率。美联储提高利率将会系统性带动其他利率的上涨，这样就可以通过提高车贷、房贷及其他类型贷款的成本，或是提高生产资料的投资成本，来减轻经济过热的压力，从而抑制经济过快增长。\n\n货币政策是中央银行多年来试图让经济在增长和通胀两方面都保持稳定而使用的一个基本工具。\n\n#### 应对金融恐慌或金融危机的主要工具是流动性供给\n\n> 出于对金融稳定性的考虑，中央银行会向金融机构提供短期贷款。在金融恐慌或危机期间，向金融机构提供短期信贷能平息市场情绪，有利于维持这些金融机构的稳定性，有助于缓解甚至终结金融危机。**央行的上述行为被称作“最后贷款人”工具**。如果金融市场崩溃，金融机构又没有其他资金来源，那么中央银行就要随时准备做最后贷款人，通过提供流动性支持来帮助稳定金融系统。\n\n### 什么是金融恐慌？\n---\n#### 总体来说，金融恐慌是由大家对金融机构失去信心而引起的\n\n> 要解释这个问题，最好的办法是举一个大家都熟悉的例子。如果你看过电影《生活多美好》，你就会知道詹姆斯·斯图尔特在片中扮演的银行家所遭遇的问题之一，就是他的银行面临挤兑威胁。**什么是挤兑呢**？我们可以设想一种类似的情况。想象一下，在存款保险制度和联邦存款保险公司出现之前，美国的某一个街角有一家普通商业银行，我们姑且称之为华盛顿第一银行。这家银行以向企业发放贷款为生，其资金主要来源于所吸收的公众存款。这些存款被称为活期存款，也就意味着储户可以随时提取。随时可提取这一点很重要，因为人们在日常生活中会经常用到存款，比如购物。\n\n> 现在想象一下，假设出于某些原因，有传言说这家银行出现了不良贷款并导致其陷入亏损。作为储户，你会这么想：“我不知道谣言是不是真的，但是我知道，如果坐等其他人把存款取出来，那等到自己最后一个去取钱时，也许一分钱也取不到了。”接下来你会做什么呢？你会去跟银行说：“我也不知道谣言是不是真的，但我知道大家都会来银行取钱，所以现在我也要把我的钱取出来。”这样一来，储户们就都在银行门前排起了长队。\n\n> **如今，没有一家银行会持有与储户存款相当的现金，银行一般将现金贷出，形成贷款**。所以一旦银行的最低现金储备耗尽，银行就只能通过出售或处置其贷款来满足储户的提款需求。但出售商业贷款很困难，这不仅需要时间，而且往往还得折价出售。可能在银行还没来得及着手出售的时候，储户们就已经找上门来了，吵着问：“我的钱呢？”所以说恐慌是一种自我实现的预言。储户恐慌使得银行遭遇挤兑，银行不得不折价销售资产来应对，最终导致银行破产，同时许多储户也可能面临存款损失，就像“大萧条”时期一样。\n\n> **恐慌是个非常严重的问题。如果一家银行出了问题，隔壁银行的储户可能就会担心他们存钱的银行是不是也会出问题，因此，一家银行遭到挤兑会导致更普遍的银行挤兑或更大范围的银行体系恐慌**。在联邦存款保险公司成立之前，有时银行为了应对恐慌或挤兑会拒绝储户提款，他们会说：“不能再取款了，我们停止营业了。”限制储户取款会产生负面影响，也会给那些需要支付工资或需要买东西的人带来麻烦。不只是许多银行会倒闭，更为严重的是，银行业恐慌常常会蔓延到其他市场，例如常常伴随而来的是股市崩盘。可想而知，所有这些事情加起来，会对经济产生怎样的不利影响。\n\n> **如果金融机构持有期限较长的非流动性资产——非流动性意味着出售这些资产（如贷款）需要花费相当多的时间和精力，而支持这些资产的资金（如发放贷款的资金）却主要来自资产负债表另一侧的短期负债（如储蓄），那么金融恐慌随时都有可能发生**。在这种情况下，很有可能储户会说“等等，我不想把钱存在这儿了，我要取走”，这样金融机构就会遇到严峻的问题。\n\n#### 那么，中央银行（美联储）该如何通过合法途径帮助这些商业银行呢？\n> **记住，中央银行能够行使最后贷款人职能**。想象一下，商业银行正在将现金交到要求取款的储户手上，但其银行储备的现金可能满足不了所有提现需求。银行有足量的优质贷款，但不能直接变现，而这时储户又在门口等着要立刻提走他们的钱。这时，美联储就发挥作用了。商业银行可以联系当地的美联储办事处：“你看，我有一大把优质贷款，可以抵押给你，请你贷一些现金给我。”这样一来，商业银行就可以从中央银行提出钱来兑付给储户。只要这家银行的确有偿付能力（即只要贷款确实优质安全），那么挤兑就会被平息，恐慌也就结束了。因此通过接受金融机构的非流动性资产作为抵押而向其提供短期贷款，中央银行可以为金融系统注入资金，支付给储户和短期借款人，从而稳定局势，结束恐慌。\n\n### 什么是量化宽松？\n---\n也叫**大规模资产购买计划**，即媒体和其他地方所说的量化宽松。这是在传统的货币政策已经用尽了的情况下（利率下调至接近为0），美联储转向了非传统的货币政策。\n> 到了2008年12月，传统的货币政策已经用尽了，我们已经不能再下调联邦基金利率了。然而，经济显然还需要额外的支持。进入2009年，经济仍然在急剧衰退。我们需要一些其他的政策来支持经济恢复，于是我们转向了非传统的货币政策。我们采用的主要工具是大规模资产购买计划，即媒体和其他地方所说的量化宽松。这些大规模资产购买计划是宽松货币政策的替代方案，为经济提供支持。\n\n#### 量化宽松政策是如何发挥作用的？\n> 为了影响长期利率，美联储开始大规模购买国债和政府支持型企业抵押的相关证券。这里要澄清一下，美联储购买的都是政府担保证券，或者是国债，即美国政府债务。\n\n> 为什么美联储要购买这些资产呢？顺便插一句，这是米尔顿·弗里德曼和其他货币学派学者所提到的，他们的基本观点是，当你购买国债或者政府支持型企业证券并把它们写进资产负债表时，市场中可供应的同类证券就减少了。如果投资者想要持有这些证券，就必须接受较低的收益率。换句话说，如果市场中可供应的同类证券减少了，投资者就会愿意为这些证券支付更高的价格，这与收益率是相反的。\n\n> 因而，通过购买国债、写入资产负债表、减少这些国债的有效供应，我们就有效降低了国债和政府支持型企业证券的利率。而且，当投资者的投资组合中不再有国债和政府支持型企业证券时，他们就不得不转向其他类型的证券，比如公司债券，而这将提高其他证券的价格，降低其收益率。所以，这些行为的净效应是降低大范围内证券的收益率。通常，较低的利率对经济增长具有有益的刺激效应。\n\n> 因此，这实际上是另一种货币政策：我们聚焦长期利率，而不是短期利率上。但是，这里的基本逻辑是一致的，都是降低利率，刺激经济增长。\n\n#### 美联储购买了两万亿美元的证券，那用什么支付的？\n> 答案是，通过贷记出售证券给美联储的人的银行账户来支付这些款项。这些银行账户是银行在美联储中持有的储备。美联储是银行的银行。实际上，银行可以在美联储开立储蓄账户，这些账户被称为储备账户。所以，当购买证券的交易发生时，我们支付的方式只是增加了银行在美联储账户的储备数量。\n\n#### 量化宽松的影响\n\n> 那么，大规模资产购买计划或者说量化宽松到底是怎么回事呢？我们实施这项政策时，期望它能够降低利率，后来证实这差不多成功了。比如，30年期抵押贷款利率降至4%以下，这是历史最低点，而其他利率也都下降了。企业需要支付的债券利率也下降了，不仅基础安全利率下降了，而且企业债券利率和国债利率的利差也下降了，反映出金融市场对整个经济的信心提升了。从我的观点和美联储的分析来看，长期利率的下降对经济复苏和增长有提振作用。\n\n> 然而，上述政策对房价的影响比我们期待中的要小得多。虽然我们已经把抵押贷款利率降到很低，以为这会刺激楼市，但是楼市依然没有回暖。\n\n#### 控制利率并不是一个万能工具\n> 有证据表明，1928-1929年间美国股市溢价过高，美联储对此非常担心。它只想着通过提高利率来应对，而没有考虑到会对经济产生多大的影响。于是美联储通过提高利率来抑制股市狂热，当然它的确做到了！但是提高利率同样对经济产生了很多副作用。我们当然知道资产价格泡沫十分危险，也想尽可能地化解这些泡沫。但若要通过金融监管途径来解决，那就应该采用更具针对性的解决办法，而不是仅仅是提高利率水平这种带有普遍杀伤力的方法。\n\n### 金融体系的漏洞\n---\n\n#### 私人部门\n\n**金融衍生品的泛滥**\n\n就我个人的了解，是银行把一些优质的贷款和次一点的贷款组合在一起，形成新的证券在市场上出售。这些新发明的金融衍生品的复杂程度已经让金融机构无法准确评估其中的风险了。\n> 这些公司不会特别关注贷款的质量，因为他们要做的是将贷款卖给其他机构。在住房抵押贷款被卖给大型金融机构之后，这些金融机构会将住房抵押贷款或其他证券进行组合，形成另一种证券。\n\n> 不幸的是，这些证券太过复杂，金融机构对于自身风险的监管远远不够。然而，问题并不仅仅在于这些公司蒙受的损失。即使美国所有的次级住房抵押贷款都变得一文不值，其对金融体系造成的损失也只相当于一个糟糕的股票交易日：规模并不是很大。**关键问题在于，这些住房抵押贷款分布于不同的证券之中，并在不同的市场上流动，没有人真正知道这些证券的源头，也没有知道谁将会遭受损失。这给金融市场带来了很大的不确定性。**\n\n**许多人借债过多，杠杆过度**\n> 在经历了20年经济繁荣和金融稳定后，人们过于自信，愿意举借更多的债务，这样做的后果就是，在盈利空间不大、资产价值又缩水的时候，就会出现资不抵债的情况。\n\n**近年来金融交易日益复杂化，但银行和其他金融机构监控、计量和管理风险的能力却没能跟上步伐**\n> 也就是说，投入到风险管理的信息技术和资源不足以帮助人们充分意识到风险的存在和严重程度。假设2006年你向银行询问房价下跌20%的影响，银行很有可能大大低估其对资产负债表的影响，因为他们有没能力准确完整地计量所面临的风险。\n\n**金融机构一向偏爱诸如商业票据之类的短期融资方式**\n> 这些融资方式短则1天，大多不到90天。因此，如同19世纪依赖存贷款的银行一样，如今金融机构也持有大量的短期流动负债，这些负债和19世纪的存款一样容易受到挤兑。\n\n#### 公共部门\n\n**金融监管机构未能与时俱进**\n* 和19世纪30年代“大萧条”时期相比基本没有变化\n* 许多重要的金融机构并没有受到来自任何金融监管机构的全面而严格的监管\n\n**监管银行和银行持股公司时，对风险计量做的不够**\n\n**在消费者保护上做的不够**\n\n**政府缺少对整个系统而不仅是对某个企业关注的公共部门**\n\n### 这次的经济复苏为何如此缓慢？\n---\n> 为什么这次经济恢复的速度比以往要缓慢呢？其中一个原因就是房地产市场复苏很缓慢。在往常的复苏中，房地产都会很快回到常态，**这是整个复苏过程中的一个重要部分。建筑工人重新开始工作，相关产业如家具业、家用电器也开始扩张，这些都是复苏过程的一部分**。但是这一次没有出现这样的现象，为什么呢？\n\n> 房地产市场中仍然存在很多结构性因素，这些因素阻碍了更加强劲的复苏。在供给方面，房屋的超额供应量和空置率依旧很高。**衰退期空置率峰值超过2.5%**。（*沃日，看到这里我比较担心天朝的现状*）\n\n> 在需求方面，你或许会认为许多人都在买房子，因为现在的房价大家负担得起。房价大幅下跌，住房抵押贷款利率又低。因此，如果你有能力买房，只要支付月供，就可以比几年前更容易买到房。**但是，要想从低房价和低利率中获利，前提是你可以获得住房抵押贷款**。然而，经济危机以来，房贷的状况比原先紧张了许多。就连很多信用评分很高的人也无法获得贷款，尽管他们负担得起房价和月供。\n\n### 大而不倒的问题\n---\n为何美联储优先救助那些大的金融机构，却置无家可归的普通公民于不顾呢？\n> 美国国际集团，它在2008年10月已濒临破产。美国国际集团是世界上最大的保险集团，机构组成非常复杂。作为一家跨国金融服务集团，它由很多部分组成，其中包括许多全球性的保险公司。\n\n> **在我们看来，美国国际集团的倒闭基本上意味着末日到来**。它不仅与众多企业相关联，它还与美国和欧洲的金融体系及全球性银行联系密切。我们非常担心，**一旦美国国际集团破产，我们将再也无法掌控金融危机的走向。**\n\n> 于是，为避免美国国际集团破产，美联储以其资产作为抵押，为其提供了850亿美元的贷款。以补充流动性和维持日常运营。\n\n> 我想要强调的是，美联储被迫为贝尔斯登和美国国际集团所采取的措施，显然并非是未来进行金融危机管理的良方。首先，这种为阻止整个体系崩溃而不得不进行的干预，不仅相当艰难，还让人难受。显然，一个体系中若有一些企业“大而不倒”(too big to fail)，那么这个体系一定存在根本性缺陷。如果一家企业的规模大到它认为自己一定会得到救助，这对其他企业就非常不公平。除此之外，“大而不倒”现象的存在还会激励这些大公司过度冒险，**它们会说：“我们很愿意承担巨大风险。就像抛硬币，正面我赢，反面你输。如果赌对了，我们会赚得盆满钵满。如果赌错了，还有政府会救助我们**。”这样的现象我们难以容忍。\n\n*最后，我想说的是，美联储主席的演讲，果然是干货满满！*\n","slug":"read/金融的本质","published":1,"updated":"2019-12-16T04:20:55.789Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4v44vb80047hcr7rxnv4pka","content":"<div align=\"center\"><br><img src=\"https://i.loli.net/2019/12/11/S46gvxNeUqcKihD.jpg\" width=\"300\" height=\"400\" alt=\"书的封面\"><br></div>\n\n<p>实际上，这并不是一本被翻译成中文的外国书籍，这只是国内出版社把美联储的主席伯南克的四次演讲合在一起，出了一本叫《金融的本质》这样一本中文书籍。</p>\n<p>2009年，时任美联储主席伯南克，因带领美国度过大萧条以来最恶劣的经济危机，被《时代杂志》评选为“年度风云人物”。</p>\n<p>四次演讲，主要讲了美联储的中央银行的金融史以及应对危机的金融政策演变史。</p>\n<h3 id=\"什么是中央银行？\"><a href=\"#什么是中央银行？\" class=\"headerlink\" title=\"什么是中央银行？\"></a>什么是中央银行？</h3><hr>\n<p>中央银行并不是普通的银行，它实际上是个政府机构，处于一个国家货币和金融体系的核心。它引导了现代货币及金融体系的发展，并在经济政策制定中发挥重要作用。</p>\n<h4 id=\"中央银行的两大职能\"><a href=\"#中央银行的两大职能\" class=\"headerlink\" title=\"中央银行的两大职能\"></a>中央银行的两大职能</h4><ul>\n<li>经济稳定职能：维持宏观经济稳定，即追求经济稳定增长，避免大幅波动，并维持稳定的低通胀。</li>\n<li>金融稳定职能：中央银行要尽可能地保证金融系统的正常运作，尤其是要尽可能防止金融恐慌，避免发生金融危机。</li>\n</ul>\n<p>要履行这两大职能，中央银行都有哪些工具可用呢？简单地说，主要有两套基本工具。</p>\n<h4 id=\"稳定经济方面的工具主要是货币政策\"><a href=\"#稳定经济方面的工具主要是货币政策\" class=\"headerlink\" title=\"稳定经济方面的工具主要是货币政策\"></a>稳定经济方面的工具主要是货币政策</h4><blockquote>\n<p>例如，在通常情况下美联储可以通过在公开市场买卖证券，来降低或提高短期利率。<strong>当经济增长过缓或通胀水平过低时</strong>，美联储可以通过降息来刺激经济发展。美联储的低利率会传导至其他各种利率，进而刺激房产购置、建筑施工和企业投资等。低利率会创造更多的需求、消费以及投资，从而拉动经济增长。同样，<strong>如果经济增长过热或通胀问题严重</strong>，那么央行常用的应对措施就是提高利率。提高隔夜拆借利率，也就是提高各银行向美联储借钱的成本，这个利率在美国被称为联邦基金利率。美联储提高利率将会系统性带动其他利率的上涨，这样就可以通过提高车贷、房贷及其他类型贷款的成本，或是提高生产资料的投资成本，来减轻经济过热的压力，从而抑制经济过快增长。</p>\n</blockquote>\n<p>货币政策是中央银行多年来试图让经济在增长和通胀两方面都保持稳定而使用的一个基本工具。</p>\n<h4 id=\"应对金融恐慌或金融危机的主要工具是流动性供给\"><a href=\"#应对金融恐慌或金融危机的主要工具是流动性供给\" class=\"headerlink\" title=\"应对金融恐慌或金融危机的主要工具是流动性供给\"></a>应对金融恐慌或金融危机的主要工具是流动性供给</h4><blockquote>\n<p>出于对金融稳定性的考虑，中央银行会向金融机构提供短期贷款。在金融恐慌或危机期间，向金融机构提供短期信贷能平息市场情绪，有利于维持这些金融机构的稳定性，有助于缓解甚至终结金融危机。<strong>央行的上述行为被称作“最后贷款人”工具</strong>。如果金融市场崩溃，金融机构又没有其他资金来源，那么中央银行就要随时准备做最后贷款人，通过提供流动性支持来帮助稳定金融系统。</p>\n</blockquote>\n<h3 id=\"什么是金融恐慌？\"><a href=\"#什么是金融恐慌？\" class=\"headerlink\" title=\"什么是金融恐慌？\"></a>什么是金融恐慌？</h3><hr>\n<h4 id=\"总体来说，金融恐慌是由大家对金融机构失去信心而引起的\"><a href=\"#总体来说，金融恐慌是由大家对金融机构失去信心而引起的\" class=\"headerlink\" title=\"总体来说，金融恐慌是由大家对金融机构失去信心而引起的\"></a>总体来说，金融恐慌是由大家对金融机构失去信心而引起的</h4><blockquote>\n<p>要解释这个问题，最好的办法是举一个大家都熟悉的例子。如果你看过电影《生活多美好》，你就会知道詹姆斯·斯图尔特在片中扮演的银行家所遭遇的问题之一，就是他的银行面临挤兑威胁。<strong>什么是挤兑呢</strong>？我们可以设想一种类似的情况。想象一下，在存款保险制度和联邦存款保险公司出现之前，美国的某一个街角有一家普通商业银行，我们姑且称之为华盛顿第一银行。这家银行以向企业发放贷款为生，其资金主要来源于所吸收的公众存款。这些存款被称为活期存款，也就意味着储户可以随时提取。随时可提取这一点很重要，因为人们在日常生活中会经常用到存款，比如购物。</p>\n</blockquote>\n<blockquote>\n<p>现在想象一下，假设出于某些原因，有传言说这家银行出现了不良贷款并导致其陷入亏损。作为储户，你会这么想：“我不知道谣言是不是真的，但是我知道，如果坐等其他人把存款取出来，那等到自己最后一个去取钱时，也许一分钱也取不到了。”接下来你会做什么呢？你会去跟银行说：“我也不知道谣言是不是真的，但我知道大家都会来银行取钱，所以现在我也要把我的钱取出来。”这样一来，储户们就都在银行门前排起了长队。</p>\n</blockquote>\n<blockquote>\n<p><strong>如今，没有一家银行会持有与储户存款相当的现金，银行一般将现金贷出，形成贷款</strong>。所以一旦银行的最低现金储备耗尽，银行就只能通过出售或处置其贷款来满足储户的提款需求。但出售商业贷款很困难，这不仅需要时间，而且往往还得折价出售。可能在银行还没来得及着手出售的时候，储户们就已经找上门来了，吵着问：“我的钱呢？”所以说恐慌是一种自我实现的预言。储户恐慌使得银行遭遇挤兑，银行不得不折价销售资产来应对，最终导致银行破产，同时许多储户也可能面临存款损失，就像“大萧条”时期一样。</p>\n</blockquote>\n<blockquote>\n<p><strong>恐慌是个非常严重的问题。如果一家银行出了问题，隔壁银行的储户可能就会担心他们存钱的银行是不是也会出问题，因此，一家银行遭到挤兑会导致更普遍的银行挤兑或更大范围的银行体系恐慌</strong>。在联邦存款保险公司成立之前，有时银行为了应对恐慌或挤兑会拒绝储户提款，他们会说：“不能再取款了，我们停止营业了。”限制储户取款会产生负面影响，也会给那些需要支付工资或需要买东西的人带来麻烦。不只是许多银行会倒闭，更为严重的是，银行业恐慌常常会蔓延到其他市场，例如常常伴随而来的是股市崩盘。可想而知，所有这些事情加起来，会对经济产生怎样的不利影响。</p>\n</blockquote>\n<blockquote>\n<p><strong>如果金融机构持有期限较长的非流动性资产——非流动性意味着出售这些资产（如贷款）需要花费相当多的时间和精力，而支持这些资产的资金（如发放贷款的资金）却主要来自资产负债表另一侧的短期负债（如储蓄），那么金融恐慌随时都有可能发生</strong>。在这种情况下，很有可能储户会说“等等，我不想把钱存在这儿了，我要取走”，这样金融机构就会遇到严峻的问题。</p>\n</blockquote>\n<h4 id=\"那么，中央银行（美联储）该如何通过合法途径帮助这些商业银行呢？\"><a href=\"#那么，中央银行（美联储）该如何通过合法途径帮助这些商业银行呢？\" class=\"headerlink\" title=\"那么，中央银行（美联储）该如何通过合法途径帮助这些商业银行呢？\"></a>那么，中央银行（美联储）该如何通过合法途径帮助这些商业银行呢？</h4><blockquote>\n<p><strong>记住，中央银行能够行使最后贷款人职能</strong>。想象一下，商业银行正在将现金交到要求取款的储户手上，但其银行储备的现金可能满足不了所有提现需求。银行有足量的优质贷款，但不能直接变现，而这时储户又在门口等着要立刻提走他们的钱。这时，美联储就发挥作用了。商业银行可以联系当地的美联储办事处：“你看，我有一大把优质贷款，可以抵押给你，请你贷一些现金给我。”这样一来，商业银行就可以从中央银行提出钱来兑付给储户。只要这家银行的确有偿付能力（即只要贷款确实优质安全），那么挤兑就会被平息，恐慌也就结束了。因此通过接受金融机构的非流动性资产作为抵押而向其提供短期贷款，中央银行可以为金融系统注入资金，支付给储户和短期借款人，从而稳定局势，结束恐慌。</p>\n</blockquote>\n<h3 id=\"什么是量化宽松？\"><a href=\"#什么是量化宽松？\" class=\"headerlink\" title=\"什么是量化宽松？\"></a>什么是量化宽松？</h3><hr>\n<p>也叫<strong>大规模资产购买计划</strong>，即媒体和其他地方所说的量化宽松。这是在传统的货币政策已经用尽了的情况下（利率下调至接近为0），美联储转向了非传统的货币政策。</p>\n<blockquote>\n<p>到了2008年12月，传统的货币政策已经用尽了，我们已经不能再下调联邦基金利率了。然而，经济显然还需要额外的支持。进入2009年，经济仍然在急剧衰退。我们需要一些其他的政策来支持经济恢复，于是我们转向了非传统的货币政策。我们采用的主要工具是大规模资产购买计划，即媒体和其他地方所说的量化宽松。这些大规模资产购买计划是宽松货币政策的替代方案，为经济提供支持。</p>\n</blockquote>\n<h4 id=\"量化宽松政策是如何发挥作用的？\"><a href=\"#量化宽松政策是如何发挥作用的？\" class=\"headerlink\" title=\"量化宽松政策是如何发挥作用的？\"></a>量化宽松政策是如何发挥作用的？</h4><blockquote>\n<p>为了影响长期利率，美联储开始大规模购买国债和政府支持型企业抵押的相关证券。这里要澄清一下，美联储购买的都是政府担保证券，或者是国债，即美国政府债务。</p>\n</blockquote>\n<blockquote>\n<p>为什么美联储要购买这些资产呢？顺便插一句，这是米尔顿·弗里德曼和其他货币学派学者所提到的，他们的基本观点是，当你购买国债或者政府支持型企业证券并把它们写进资产负债表时，市场中可供应的同类证券就减少了。如果投资者想要持有这些证券，就必须接受较低的收益率。换句话说，如果市场中可供应的同类证券减少了，投资者就会愿意为这些证券支付更高的价格，这与收益率是相反的。</p>\n</blockquote>\n<blockquote>\n<p>因而，通过购买国债、写入资产负债表、减少这些国债的有效供应，我们就有效降低了国债和政府支持型企业证券的利率。而且，当投资者的投资组合中不再有国债和政府支持型企业证券时，他们就不得不转向其他类型的证券，比如公司债券，而这将提高其他证券的价格，降低其收益率。所以，这些行为的净效应是降低大范围内证券的收益率。通常，较低的利率对经济增长具有有益的刺激效应。</p>\n</blockquote>\n<blockquote>\n<p>因此，这实际上是另一种货币政策：我们聚焦长期利率，而不是短期利率上。但是，这里的基本逻辑是一致的，都是降低利率，刺激经济增长。</p>\n</blockquote>\n<h4 id=\"美联储购买了两万亿美元的证券，那用什么支付的？\"><a href=\"#美联储购买了两万亿美元的证券，那用什么支付的？\" class=\"headerlink\" title=\"美联储购买了两万亿美元的证券，那用什么支付的？\"></a>美联储购买了两万亿美元的证券，那用什么支付的？</h4><blockquote>\n<p>答案是，通过贷记出售证券给美联储的人的银行账户来支付这些款项。这些银行账户是银行在美联储中持有的储备。美联储是银行的银行。实际上，银行可以在美联储开立储蓄账户，这些账户被称为储备账户。所以，当购买证券的交易发生时，我们支付的方式只是增加了银行在美联储账户的储备数量。</p>\n</blockquote>\n<h4 id=\"量化宽松的影响\"><a href=\"#量化宽松的影响\" class=\"headerlink\" title=\"量化宽松的影响\"></a>量化宽松的影响</h4><blockquote>\n<p>那么，大规模资产购买计划或者说量化宽松到底是怎么回事呢？我们实施这项政策时，期望它能够降低利率，后来证实这差不多成功了。比如，30年期抵押贷款利率降至4%以下，这是历史最低点，而其他利率也都下降了。企业需要支付的债券利率也下降了，不仅基础安全利率下降了，而且企业债券利率和国债利率的利差也下降了，反映出金融市场对整个经济的信心提升了。从我的观点和美联储的分析来看，长期利率的下降对经济复苏和增长有提振作用。</p>\n</blockquote>\n<blockquote>\n<p>然而，上述政策对房价的影响比我们期待中的要小得多。虽然我们已经把抵押贷款利率降到很低，以为这会刺激楼市，但是楼市依然没有回暖。</p>\n</blockquote>\n<h4 id=\"控制利率并不是一个万能工具\"><a href=\"#控制利率并不是一个万能工具\" class=\"headerlink\" title=\"控制利率并不是一个万能工具\"></a>控制利率并不是一个万能工具</h4><blockquote>\n<p>有证据表明，1928-1929年间美国股市溢价过高，美联储对此非常担心。它只想着通过提高利率来应对，而没有考虑到会对经济产生多大的影响。于是美联储通过提高利率来抑制股市狂热，当然它的确做到了！但是提高利率同样对经济产生了很多副作用。我们当然知道资产价格泡沫十分危险，也想尽可能地化解这些泡沫。但若要通过金融监管途径来解决，那就应该采用更具针对性的解决办法，而不是仅仅是提高利率水平这种带有普遍杀伤力的方法。</p>\n</blockquote>\n<h3 id=\"金融体系的漏洞\"><a href=\"#金融体系的漏洞\" class=\"headerlink\" title=\"金融体系的漏洞\"></a>金融体系的漏洞</h3><hr>\n<h4 id=\"私人部门\"><a href=\"#私人部门\" class=\"headerlink\" title=\"私人部门\"></a>私人部门</h4><p><strong>金融衍生品的泛滥</strong></p>\n<p>就我个人的了解，是银行把一些优质的贷款和次一点的贷款组合在一起，形成新的证券在市场上出售。这些新发明的金融衍生品的复杂程度已经让金融机构无法准确评估其中的风险了。</p>\n<blockquote>\n<p>这些公司不会特别关注贷款的质量，因为他们要做的是将贷款卖给其他机构。在住房抵押贷款被卖给大型金融机构之后，这些金融机构会将住房抵押贷款或其他证券进行组合，形成另一种证券。</p>\n</blockquote>\n<blockquote>\n<p>不幸的是，这些证券太过复杂，金融机构对于自身风险的监管远远不够。然而，问题并不仅仅在于这些公司蒙受的损失。即使美国所有的次级住房抵押贷款都变得一文不值，其对金融体系造成的损失也只相当于一个糟糕的股票交易日：规模并不是很大。<strong>关键问题在于，这些住房抵押贷款分布于不同的证券之中，并在不同的市场上流动，没有人真正知道这些证券的源头，也没有知道谁将会遭受损失。这给金融市场带来了很大的不确定性。</strong></p>\n</blockquote>\n<p><strong>许多人借债过多，杠杆过度</strong></p>\n<blockquote>\n<p>在经历了20年经济繁荣和金融稳定后，人们过于自信，愿意举借更多的债务，这样做的后果就是，在盈利空间不大、资产价值又缩水的时候，就会出现资不抵债的情况。</p>\n</blockquote>\n<p><strong>近年来金融交易日益复杂化，但银行和其他金融机构监控、计量和管理风险的能力却没能跟上步伐</strong></p>\n<blockquote>\n<p>也就是说，投入到风险管理的信息技术和资源不足以帮助人们充分意识到风险的存在和严重程度。假设2006年你向银行询问房价下跌20%的影响，银行很有可能大大低估其对资产负债表的影响，因为他们有没能力准确完整地计量所面临的风险。</p>\n</blockquote>\n<p><strong>金融机构一向偏爱诸如商业票据之类的短期融资方式</strong></p>\n<blockquote>\n<p>这些融资方式短则1天，大多不到90天。因此，如同19世纪依赖存贷款的银行一样，如今金融机构也持有大量的短期流动负债，这些负债和19世纪的存款一样容易受到挤兑。</p>\n</blockquote>\n<h4 id=\"公共部门\"><a href=\"#公共部门\" class=\"headerlink\" title=\"公共部门\"></a>公共部门</h4><p><strong>金融监管机构未能与时俱进</strong></p>\n<ul>\n<li>和19世纪30年代“大萧条”时期相比基本没有变化</li>\n<li>许多重要的金融机构并没有受到来自任何金融监管机构的全面而严格的监管</li>\n</ul>\n<p><strong>监管银行和银行持股公司时，对风险计量做的不够</strong></p>\n<p><strong>在消费者保护上做的不够</strong></p>\n<p><strong>政府缺少对整个系统而不仅是对某个企业关注的公共部门</strong></p>\n<h3 id=\"这次的经济复苏为何如此缓慢？\"><a href=\"#这次的经济复苏为何如此缓慢？\" class=\"headerlink\" title=\"这次的经济复苏为何如此缓慢？\"></a>这次的经济复苏为何如此缓慢？</h3><hr>\n<blockquote>\n<p>为什么这次经济恢复的速度比以往要缓慢呢？其中一个原因就是房地产市场复苏很缓慢。在往常的复苏中，房地产都会很快回到常态，<strong>这是整个复苏过程中的一个重要部分。建筑工人重新开始工作，相关产业如家具业、家用电器也开始扩张，这些都是复苏过程的一部分</strong>。但是这一次没有出现这样的现象，为什么呢？</p>\n</blockquote>\n<blockquote>\n<p>房地产市场中仍然存在很多结构性因素，这些因素阻碍了更加强劲的复苏。在供给方面，房屋的超额供应量和空置率依旧很高。<strong>衰退期空置率峰值超过2.5%</strong>。（<em>沃日，看到这里我比较担心天朝的现状</em>）</p>\n</blockquote>\n<blockquote>\n<p>在需求方面，你或许会认为许多人都在买房子，因为现在的房价大家负担得起。房价大幅下跌，住房抵押贷款利率又低。因此，如果你有能力买房，只要支付月供，就可以比几年前更容易买到房。<strong>但是，要想从低房价和低利率中获利，前提是你可以获得住房抵押贷款</strong>。然而，经济危机以来，房贷的状况比原先紧张了许多。就连很多信用评分很高的人也无法获得贷款，尽管他们负担得起房价和月供。</p>\n</blockquote>\n<h3 id=\"大而不倒的问题\"><a href=\"#大而不倒的问题\" class=\"headerlink\" title=\"大而不倒的问题\"></a>大而不倒的问题</h3><hr>\n<p>为何美联储优先救助那些大的金融机构，却置无家可归的普通公民于不顾呢？</p>\n<blockquote>\n<p>美国国际集团，它在2008年10月已濒临破产。美国国际集团是世界上最大的保险集团，机构组成非常复杂。作为一家跨国金融服务集团，它由很多部分组成，其中包括许多全球性的保险公司。</p>\n</blockquote>\n<blockquote>\n<p><strong>在我们看来，美国国际集团的倒闭基本上意味着末日到来</strong>。它不仅与众多企业相关联，它还与美国和欧洲的金融体系及全球性银行联系密切。我们非常担心，<strong>一旦美国国际集团破产，我们将再也无法掌控金融危机的走向。</strong></p>\n</blockquote>\n<blockquote>\n<p>于是，为避免美国国际集团破产，美联储以其资产作为抵押，为其提供了850亿美元的贷款。以补充流动性和维持日常运营。</p>\n</blockquote>\n<blockquote>\n<p>我想要强调的是，美联储被迫为贝尔斯登和美国国际集团所采取的措施，显然并非是未来进行金融危机管理的良方。首先，这种为阻止整个体系崩溃而不得不进行的干预，不仅相当艰难，还让人难受。显然，一个体系中若有一些企业“大而不倒”(too big to fail)，那么这个体系一定存在根本性缺陷。如果一家企业的规模大到它认为自己一定会得到救助，这对其他企业就非常不公平。除此之外，“大而不倒”现象的存在还会激励这些大公司过度冒险，<strong>它们会说：“我们很愿意承担巨大风险。就像抛硬币，正面我赢，反面你输。如果赌对了，我们会赚得盆满钵满。如果赌错了，还有政府会救助我们</strong>。”这样的现象我们难以容忍。</p>\n</blockquote>\n<p><em>最后，我想说的是，美联储主席的演讲，果然是干货满满！</em></p>\n","site":{"data":{}},"excerpt":"","more":"<div align=\"center\"><br><img src=\"https://i.loli.net/2019/12/11/S46gvxNeUqcKihD.jpg\" width=\"300\" height=\"400\" alt=\"书的封面\"><br></div>\n\n<p>实际上，这并不是一本被翻译成中文的外国书籍，这只是国内出版社把美联储的主席伯南克的四次演讲合在一起，出了一本叫《金融的本质》这样一本中文书籍。</p>\n<p>2009年，时任美联储主席伯南克，因带领美国度过大萧条以来最恶劣的经济危机，被《时代杂志》评选为“年度风云人物”。</p>\n<p>四次演讲，主要讲了美联储的中央银行的金融史以及应对危机的金融政策演变史。</p>\n<h3 id=\"什么是中央银行？\"><a href=\"#什么是中央银行？\" class=\"headerlink\" title=\"什么是中央银行？\"></a>什么是中央银行？</h3><hr>\n<p>中央银行并不是普通的银行，它实际上是个政府机构，处于一个国家货币和金融体系的核心。它引导了现代货币及金融体系的发展，并在经济政策制定中发挥重要作用。</p>\n<h4 id=\"中央银行的两大职能\"><a href=\"#中央银行的两大职能\" class=\"headerlink\" title=\"中央银行的两大职能\"></a>中央银行的两大职能</h4><ul>\n<li>经济稳定职能：维持宏观经济稳定，即追求经济稳定增长，避免大幅波动，并维持稳定的低通胀。</li>\n<li>金融稳定职能：中央银行要尽可能地保证金融系统的正常运作，尤其是要尽可能防止金融恐慌，避免发生金融危机。</li>\n</ul>\n<p>要履行这两大职能，中央银行都有哪些工具可用呢？简单地说，主要有两套基本工具。</p>\n<h4 id=\"稳定经济方面的工具主要是货币政策\"><a href=\"#稳定经济方面的工具主要是货币政策\" class=\"headerlink\" title=\"稳定经济方面的工具主要是货币政策\"></a>稳定经济方面的工具主要是货币政策</h4><blockquote>\n<p>例如，在通常情况下美联储可以通过在公开市场买卖证券，来降低或提高短期利率。<strong>当经济增长过缓或通胀水平过低时</strong>，美联储可以通过降息来刺激经济发展。美联储的低利率会传导至其他各种利率，进而刺激房产购置、建筑施工和企业投资等。低利率会创造更多的需求、消费以及投资，从而拉动经济增长。同样，<strong>如果经济增长过热或通胀问题严重</strong>，那么央行常用的应对措施就是提高利率。提高隔夜拆借利率，也就是提高各银行向美联储借钱的成本，这个利率在美国被称为联邦基金利率。美联储提高利率将会系统性带动其他利率的上涨，这样就可以通过提高车贷、房贷及其他类型贷款的成本，或是提高生产资料的投资成本，来减轻经济过热的压力，从而抑制经济过快增长。</p>\n</blockquote>\n<p>货币政策是中央银行多年来试图让经济在增长和通胀两方面都保持稳定而使用的一个基本工具。</p>\n<h4 id=\"应对金融恐慌或金融危机的主要工具是流动性供给\"><a href=\"#应对金融恐慌或金融危机的主要工具是流动性供给\" class=\"headerlink\" title=\"应对金融恐慌或金融危机的主要工具是流动性供给\"></a>应对金融恐慌或金融危机的主要工具是流动性供给</h4><blockquote>\n<p>出于对金融稳定性的考虑，中央银行会向金融机构提供短期贷款。在金融恐慌或危机期间，向金融机构提供短期信贷能平息市场情绪，有利于维持这些金融机构的稳定性，有助于缓解甚至终结金融危机。<strong>央行的上述行为被称作“最后贷款人”工具</strong>。如果金融市场崩溃，金融机构又没有其他资金来源，那么中央银行就要随时准备做最后贷款人，通过提供流动性支持来帮助稳定金融系统。</p>\n</blockquote>\n<h3 id=\"什么是金融恐慌？\"><a href=\"#什么是金融恐慌？\" class=\"headerlink\" title=\"什么是金融恐慌？\"></a>什么是金融恐慌？</h3><hr>\n<h4 id=\"总体来说，金融恐慌是由大家对金融机构失去信心而引起的\"><a href=\"#总体来说，金融恐慌是由大家对金融机构失去信心而引起的\" class=\"headerlink\" title=\"总体来说，金融恐慌是由大家对金融机构失去信心而引起的\"></a>总体来说，金融恐慌是由大家对金融机构失去信心而引起的</h4><blockquote>\n<p>要解释这个问题，最好的办法是举一个大家都熟悉的例子。如果你看过电影《生活多美好》，你就会知道詹姆斯·斯图尔特在片中扮演的银行家所遭遇的问题之一，就是他的银行面临挤兑威胁。<strong>什么是挤兑呢</strong>？我们可以设想一种类似的情况。想象一下，在存款保险制度和联邦存款保险公司出现之前，美国的某一个街角有一家普通商业银行，我们姑且称之为华盛顿第一银行。这家银行以向企业发放贷款为生，其资金主要来源于所吸收的公众存款。这些存款被称为活期存款，也就意味着储户可以随时提取。随时可提取这一点很重要，因为人们在日常生活中会经常用到存款，比如购物。</p>\n</blockquote>\n<blockquote>\n<p>现在想象一下，假设出于某些原因，有传言说这家银行出现了不良贷款并导致其陷入亏损。作为储户，你会这么想：“我不知道谣言是不是真的，但是我知道，如果坐等其他人把存款取出来，那等到自己最后一个去取钱时，也许一分钱也取不到了。”接下来你会做什么呢？你会去跟银行说：“我也不知道谣言是不是真的，但我知道大家都会来银行取钱，所以现在我也要把我的钱取出来。”这样一来，储户们就都在银行门前排起了长队。</p>\n</blockquote>\n<blockquote>\n<p><strong>如今，没有一家银行会持有与储户存款相当的现金，银行一般将现金贷出，形成贷款</strong>。所以一旦银行的最低现金储备耗尽，银行就只能通过出售或处置其贷款来满足储户的提款需求。但出售商业贷款很困难，这不仅需要时间，而且往往还得折价出售。可能在银行还没来得及着手出售的时候，储户们就已经找上门来了，吵着问：“我的钱呢？”所以说恐慌是一种自我实现的预言。储户恐慌使得银行遭遇挤兑，银行不得不折价销售资产来应对，最终导致银行破产，同时许多储户也可能面临存款损失，就像“大萧条”时期一样。</p>\n</blockquote>\n<blockquote>\n<p><strong>恐慌是个非常严重的问题。如果一家银行出了问题，隔壁银行的储户可能就会担心他们存钱的银行是不是也会出问题，因此，一家银行遭到挤兑会导致更普遍的银行挤兑或更大范围的银行体系恐慌</strong>。在联邦存款保险公司成立之前，有时银行为了应对恐慌或挤兑会拒绝储户提款，他们会说：“不能再取款了，我们停止营业了。”限制储户取款会产生负面影响，也会给那些需要支付工资或需要买东西的人带来麻烦。不只是许多银行会倒闭，更为严重的是，银行业恐慌常常会蔓延到其他市场，例如常常伴随而来的是股市崩盘。可想而知，所有这些事情加起来，会对经济产生怎样的不利影响。</p>\n</blockquote>\n<blockquote>\n<p><strong>如果金融机构持有期限较长的非流动性资产——非流动性意味着出售这些资产（如贷款）需要花费相当多的时间和精力，而支持这些资产的资金（如发放贷款的资金）却主要来自资产负债表另一侧的短期负债（如储蓄），那么金融恐慌随时都有可能发生</strong>。在这种情况下，很有可能储户会说“等等，我不想把钱存在这儿了，我要取走”，这样金融机构就会遇到严峻的问题。</p>\n</blockquote>\n<h4 id=\"那么，中央银行（美联储）该如何通过合法途径帮助这些商业银行呢？\"><a href=\"#那么，中央银行（美联储）该如何通过合法途径帮助这些商业银行呢？\" class=\"headerlink\" title=\"那么，中央银行（美联储）该如何通过合法途径帮助这些商业银行呢？\"></a>那么，中央银行（美联储）该如何通过合法途径帮助这些商业银行呢？</h4><blockquote>\n<p><strong>记住，中央银行能够行使最后贷款人职能</strong>。想象一下，商业银行正在将现金交到要求取款的储户手上，但其银行储备的现金可能满足不了所有提现需求。银行有足量的优质贷款，但不能直接变现，而这时储户又在门口等着要立刻提走他们的钱。这时，美联储就发挥作用了。商业银行可以联系当地的美联储办事处：“你看，我有一大把优质贷款，可以抵押给你，请你贷一些现金给我。”这样一来，商业银行就可以从中央银行提出钱来兑付给储户。只要这家银行的确有偿付能力（即只要贷款确实优质安全），那么挤兑就会被平息，恐慌也就结束了。因此通过接受金融机构的非流动性资产作为抵押而向其提供短期贷款，中央银行可以为金融系统注入资金，支付给储户和短期借款人，从而稳定局势，结束恐慌。</p>\n</blockquote>\n<h3 id=\"什么是量化宽松？\"><a href=\"#什么是量化宽松？\" class=\"headerlink\" title=\"什么是量化宽松？\"></a>什么是量化宽松？</h3><hr>\n<p>也叫<strong>大规模资产购买计划</strong>，即媒体和其他地方所说的量化宽松。这是在传统的货币政策已经用尽了的情况下（利率下调至接近为0），美联储转向了非传统的货币政策。</p>\n<blockquote>\n<p>到了2008年12月，传统的货币政策已经用尽了，我们已经不能再下调联邦基金利率了。然而，经济显然还需要额外的支持。进入2009年，经济仍然在急剧衰退。我们需要一些其他的政策来支持经济恢复，于是我们转向了非传统的货币政策。我们采用的主要工具是大规模资产购买计划，即媒体和其他地方所说的量化宽松。这些大规模资产购买计划是宽松货币政策的替代方案，为经济提供支持。</p>\n</blockquote>\n<h4 id=\"量化宽松政策是如何发挥作用的？\"><a href=\"#量化宽松政策是如何发挥作用的？\" class=\"headerlink\" title=\"量化宽松政策是如何发挥作用的？\"></a>量化宽松政策是如何发挥作用的？</h4><blockquote>\n<p>为了影响长期利率，美联储开始大规模购买国债和政府支持型企业抵押的相关证券。这里要澄清一下，美联储购买的都是政府担保证券，或者是国债，即美国政府债务。</p>\n</blockquote>\n<blockquote>\n<p>为什么美联储要购买这些资产呢？顺便插一句，这是米尔顿·弗里德曼和其他货币学派学者所提到的，他们的基本观点是，当你购买国债或者政府支持型企业证券并把它们写进资产负债表时，市场中可供应的同类证券就减少了。如果投资者想要持有这些证券，就必须接受较低的收益率。换句话说，如果市场中可供应的同类证券减少了，投资者就会愿意为这些证券支付更高的价格，这与收益率是相反的。</p>\n</blockquote>\n<blockquote>\n<p>因而，通过购买国债、写入资产负债表、减少这些国债的有效供应，我们就有效降低了国债和政府支持型企业证券的利率。而且，当投资者的投资组合中不再有国债和政府支持型企业证券时，他们就不得不转向其他类型的证券，比如公司债券，而这将提高其他证券的价格，降低其收益率。所以，这些行为的净效应是降低大范围内证券的收益率。通常，较低的利率对经济增长具有有益的刺激效应。</p>\n</blockquote>\n<blockquote>\n<p>因此，这实际上是另一种货币政策：我们聚焦长期利率，而不是短期利率上。但是，这里的基本逻辑是一致的，都是降低利率，刺激经济增长。</p>\n</blockquote>\n<h4 id=\"美联储购买了两万亿美元的证券，那用什么支付的？\"><a href=\"#美联储购买了两万亿美元的证券，那用什么支付的？\" class=\"headerlink\" title=\"美联储购买了两万亿美元的证券，那用什么支付的？\"></a>美联储购买了两万亿美元的证券，那用什么支付的？</h4><blockquote>\n<p>答案是，通过贷记出售证券给美联储的人的银行账户来支付这些款项。这些银行账户是银行在美联储中持有的储备。美联储是银行的银行。实际上，银行可以在美联储开立储蓄账户，这些账户被称为储备账户。所以，当购买证券的交易发生时，我们支付的方式只是增加了银行在美联储账户的储备数量。</p>\n</blockquote>\n<h4 id=\"量化宽松的影响\"><a href=\"#量化宽松的影响\" class=\"headerlink\" title=\"量化宽松的影响\"></a>量化宽松的影响</h4><blockquote>\n<p>那么，大规模资产购买计划或者说量化宽松到底是怎么回事呢？我们实施这项政策时，期望它能够降低利率，后来证实这差不多成功了。比如，30年期抵押贷款利率降至4%以下，这是历史最低点，而其他利率也都下降了。企业需要支付的债券利率也下降了，不仅基础安全利率下降了，而且企业债券利率和国债利率的利差也下降了，反映出金融市场对整个经济的信心提升了。从我的观点和美联储的分析来看，长期利率的下降对经济复苏和增长有提振作用。</p>\n</blockquote>\n<blockquote>\n<p>然而，上述政策对房价的影响比我们期待中的要小得多。虽然我们已经把抵押贷款利率降到很低，以为这会刺激楼市，但是楼市依然没有回暖。</p>\n</blockquote>\n<h4 id=\"控制利率并不是一个万能工具\"><a href=\"#控制利率并不是一个万能工具\" class=\"headerlink\" title=\"控制利率并不是一个万能工具\"></a>控制利率并不是一个万能工具</h4><blockquote>\n<p>有证据表明，1928-1929年间美国股市溢价过高，美联储对此非常担心。它只想着通过提高利率来应对，而没有考虑到会对经济产生多大的影响。于是美联储通过提高利率来抑制股市狂热，当然它的确做到了！但是提高利率同样对经济产生了很多副作用。我们当然知道资产价格泡沫十分危险，也想尽可能地化解这些泡沫。但若要通过金融监管途径来解决，那就应该采用更具针对性的解决办法，而不是仅仅是提高利率水平这种带有普遍杀伤力的方法。</p>\n</blockquote>\n<h3 id=\"金融体系的漏洞\"><a href=\"#金融体系的漏洞\" class=\"headerlink\" title=\"金融体系的漏洞\"></a>金融体系的漏洞</h3><hr>\n<h4 id=\"私人部门\"><a href=\"#私人部门\" class=\"headerlink\" title=\"私人部门\"></a>私人部门</h4><p><strong>金融衍生品的泛滥</strong></p>\n<p>就我个人的了解，是银行把一些优质的贷款和次一点的贷款组合在一起，形成新的证券在市场上出售。这些新发明的金融衍生品的复杂程度已经让金融机构无法准确评估其中的风险了。</p>\n<blockquote>\n<p>这些公司不会特别关注贷款的质量，因为他们要做的是将贷款卖给其他机构。在住房抵押贷款被卖给大型金融机构之后，这些金融机构会将住房抵押贷款或其他证券进行组合，形成另一种证券。</p>\n</blockquote>\n<blockquote>\n<p>不幸的是，这些证券太过复杂，金融机构对于自身风险的监管远远不够。然而，问题并不仅仅在于这些公司蒙受的损失。即使美国所有的次级住房抵押贷款都变得一文不值，其对金融体系造成的损失也只相当于一个糟糕的股票交易日：规模并不是很大。<strong>关键问题在于，这些住房抵押贷款分布于不同的证券之中，并在不同的市场上流动，没有人真正知道这些证券的源头，也没有知道谁将会遭受损失。这给金融市场带来了很大的不确定性。</strong></p>\n</blockquote>\n<p><strong>许多人借债过多，杠杆过度</strong></p>\n<blockquote>\n<p>在经历了20年经济繁荣和金融稳定后，人们过于自信，愿意举借更多的债务，这样做的后果就是，在盈利空间不大、资产价值又缩水的时候，就会出现资不抵债的情况。</p>\n</blockquote>\n<p><strong>近年来金融交易日益复杂化，但银行和其他金融机构监控、计量和管理风险的能力却没能跟上步伐</strong></p>\n<blockquote>\n<p>也就是说，投入到风险管理的信息技术和资源不足以帮助人们充分意识到风险的存在和严重程度。假设2006年你向银行询问房价下跌20%的影响，银行很有可能大大低估其对资产负债表的影响，因为他们有没能力准确完整地计量所面临的风险。</p>\n</blockquote>\n<p><strong>金融机构一向偏爱诸如商业票据之类的短期融资方式</strong></p>\n<blockquote>\n<p>这些融资方式短则1天，大多不到90天。因此，如同19世纪依赖存贷款的银行一样，如今金融机构也持有大量的短期流动负债，这些负债和19世纪的存款一样容易受到挤兑。</p>\n</blockquote>\n<h4 id=\"公共部门\"><a href=\"#公共部门\" class=\"headerlink\" title=\"公共部门\"></a>公共部门</h4><p><strong>金融监管机构未能与时俱进</strong></p>\n<ul>\n<li>和19世纪30年代“大萧条”时期相比基本没有变化</li>\n<li>许多重要的金融机构并没有受到来自任何金融监管机构的全面而严格的监管</li>\n</ul>\n<p><strong>监管银行和银行持股公司时，对风险计量做的不够</strong></p>\n<p><strong>在消费者保护上做的不够</strong></p>\n<p><strong>政府缺少对整个系统而不仅是对某个企业关注的公共部门</strong></p>\n<h3 id=\"这次的经济复苏为何如此缓慢？\"><a href=\"#这次的经济复苏为何如此缓慢？\" class=\"headerlink\" title=\"这次的经济复苏为何如此缓慢？\"></a>这次的经济复苏为何如此缓慢？</h3><hr>\n<blockquote>\n<p>为什么这次经济恢复的速度比以往要缓慢呢？其中一个原因就是房地产市场复苏很缓慢。在往常的复苏中，房地产都会很快回到常态，<strong>这是整个复苏过程中的一个重要部分。建筑工人重新开始工作，相关产业如家具业、家用电器也开始扩张，这些都是复苏过程的一部分</strong>。但是这一次没有出现这样的现象，为什么呢？</p>\n</blockquote>\n<blockquote>\n<p>房地产市场中仍然存在很多结构性因素，这些因素阻碍了更加强劲的复苏。在供给方面，房屋的超额供应量和空置率依旧很高。<strong>衰退期空置率峰值超过2.5%</strong>。（<em>沃日，看到这里我比较担心天朝的现状</em>）</p>\n</blockquote>\n<blockquote>\n<p>在需求方面，你或许会认为许多人都在买房子，因为现在的房价大家负担得起。房价大幅下跌，住房抵押贷款利率又低。因此，如果你有能力买房，只要支付月供，就可以比几年前更容易买到房。<strong>但是，要想从低房价和低利率中获利，前提是你可以获得住房抵押贷款</strong>。然而，经济危机以来，房贷的状况比原先紧张了许多。就连很多信用评分很高的人也无法获得贷款，尽管他们负担得起房价和月供。</p>\n</blockquote>\n<h3 id=\"大而不倒的问题\"><a href=\"#大而不倒的问题\" class=\"headerlink\" title=\"大而不倒的问题\"></a>大而不倒的问题</h3><hr>\n<p>为何美联储优先救助那些大的金融机构，却置无家可归的普通公民于不顾呢？</p>\n<blockquote>\n<p>美国国际集团，它在2008年10月已濒临破产。美国国际集团是世界上最大的保险集团，机构组成非常复杂。作为一家跨国金融服务集团，它由很多部分组成，其中包括许多全球性的保险公司。</p>\n</blockquote>\n<blockquote>\n<p><strong>在我们看来，美国国际集团的倒闭基本上意味着末日到来</strong>。它不仅与众多企业相关联，它还与美国和欧洲的金融体系及全球性银行联系密切。我们非常担心，<strong>一旦美国国际集团破产，我们将再也无法掌控金融危机的走向。</strong></p>\n</blockquote>\n<blockquote>\n<p>于是，为避免美国国际集团破产，美联储以其资产作为抵押，为其提供了850亿美元的贷款。以补充流动性和维持日常运营。</p>\n</blockquote>\n<blockquote>\n<p>我想要强调的是，美联储被迫为贝尔斯登和美国国际集团所采取的措施，显然并非是未来进行金融危机管理的良方。首先，这种为阻止整个体系崩溃而不得不进行的干预，不仅相当艰难，还让人难受。显然，一个体系中若有一些企业“大而不倒”(too big to fail)，那么这个体系一定存在根本性缺陷。如果一家企业的规模大到它认为自己一定会得到救助，这对其他企业就非常不公平。除此之外，“大而不倒”现象的存在还会激励这些大公司过度冒险，<strong>它们会说：“我们很愿意承担巨大风险。就像抛硬币，正面我赢，反面你输。如果赌对了，我们会赚得盆满钵满。如果赌错了，还有政府会救助我们</strong>。”这样的现象我们难以容忍。</p>\n</blockquote>\n<p><em>最后，我想说的是，美联储主席的演讲，果然是干货满满！</em></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck4v44v5h0000hcr7l3elo6j6","category_id":"ck4v44v5n0003hcr70yqxkjzz","_id":"ck4v44v5u000ahcr7jlz49lgd"},{"post_id":"ck4v44v5s0008hcr7gxal1o7b","category_id":"ck4v44v5n0003hcr70yqxkjzz","_id":"ck4v44v5y000ehcr7lxuo34da"},{"post_id":"ck4v44v5m0002hcr7hv6x88n8","category_id":"ck4v44v5r0007hcr7r7rz0e1d","_id":"ck4v44v5z000hhcr71yyrb5n0"},{"post_id":"ck4v44v5p0004hcr7sokxd4mx","category_id":"ck4v44v5v000bhcr70xl9rxmp","_id":"ck4v44v61000jhcr7r74hotaa"},{"post_id":"ck4v44v5q0005hcr79e3xd07f","category_id":"ck4v44v5y000fhcr7eazblmqx","_id":"ck4v44v65000ohcr7rjf64c4g"},{"post_id":"ck4v44v5q0006hcr7qg5f7bpv","category_id":"ck4v44v5r0007hcr7r7rz0e1d","_id":"ck4v44v66000qhcr7hooqg0qq"},{"post_id":"ck4v44v63000mhcr7cb9rnfk9","category_id":"ck4v44v5r0007hcr7r7rz0e1d","_id":"ck4v44v67000shcr76qpacge9"},{"post_id":"ck4v44v65000phcr7xd7yys0t","category_id":"ck4v44v5y000fhcr7eazblmqx","_id":"ck4v44v67000thcr76iursgqf"},{"post_id":"ck4v44v5t0009hcr7uf53isc7","category_id":"ck4v44v64000nhcr772closo8","_id":"ck4v44v68000vhcr7a1f7mlgo"},{"post_id":"ck4v44v5w000chcr7n52p7tz5","category_id":"ck4v44v66000rhcr7gn017xzu","_id":"ck4v44v68000whcr724w2xg4b"},{"post_id":"ck4v44v5x000dhcr7teu6tcm5","category_id":"ck4v44v68000uhcr7p45ztuoj","_id":"ck4v44v6a000zhcr79mxyaikk"},{"post_id":"ck4v44v5z000ghcr7qmh916g1","category_id":"ck4v44v64000nhcr772closo8","_id":"ck4v44v6b0010hcr7ew2xucpn"},{"post_id":"ck4v44v60000ihcr76v6vewqr","category_id":"ck4v44v6a000yhcr7qjlfl5hj","_id":"ck4v44v6c0012hcr7m880ve1z"},{"post_id":"ck4v44v61000lhcr7vdp1b3i5","category_id":"ck4v44v6b0011hcr7m3vqsw0l","_id":"ck4v44v6c0013hcr7l85u7gf8"},{"post_id":"ck4v44v7y0019hcr7ciovef0v","category_id":"ck4v44v7x0017hcr7t57q0hxx","_id":"ck4v44v82001ehcr7cvr68ibu"},{"post_id":"ck4v44v7w0015hcr7l7b7j79o","category_id":"ck4v44v7x0017hcr7t57q0hxx","_id":"ck4v44v84001hhcr7uqhc5dfs"},{"post_id":"ck4v44v80001chcr7gm68x6p4","category_id":"ck4v44v7x0017hcr7t57q0hxx","_id":"ck4v44v85001jhcr7rq61qmbv"},{"post_id":"ck4v44v7x0016hcr78cwtf9g0","category_id":"ck4v44v7x0017hcr7t57q0hxx","_id":"ck4v44v87001mhcr7mp4legmk"},{"post_id":"ck4v44v7x0018hcr7k3iym3ie","category_id":"ck4v44v7x0017hcr7t57q0hxx","_id":"ck4v44v88001ohcr7l4d6etmj"},{"post_id":"ck4v44v7z001ahcr7sqhg315x","category_id":"ck4v44v86001khcr7260fvkbk","_id":"ck4v44v8a001shcr7z0zmmpa0"},{"post_id":"ck4v44v81001dhcr7p7ltbkw4","category_id":"ck4v44v88001phcr7tgl8yw72","_id":"ck4v44v8c001xhcr7sn47e72c"},{"post_id":"ck4v44v84001ghcr7shqoydpi","category_id":"ck4v44v88001phcr7tgl8yw72","_id":"ck4v44v8e0020hcr7h3sw3mft"},{"post_id":"ck4v44v85001ihcr7n5vhj006","category_id":"ck4v44v8c001whcr742dct7y7","_id":"ck4v44v8h0025hcr7lepx13u6"},{"post_id":"ck4v44v86001lhcr729opb2im","category_id":"ck4v44v8c001whcr742dct7y7","_id":"ck4v44v8j0029hcr7vwtgjvbq"},{"post_id":"ck4v44v87001nhcr71datwjwi","category_id":"ck4v44v8c001whcr742dct7y7","_id":"ck4v44v8l002dhcr746o8ymn7"},{"post_id":"ck4v44v88001qhcr7tvd1xhlh","category_id":"ck4v44v8c001whcr742dct7y7","_id":"ck4v44v8n002ghcr7ezcfs39s"},{"post_id":"ck4v44v89001rhcr7ypszayrw","category_id":"ck4v44v8l002chcr71pco93ol","_id":"ck4v44v8q002mhcr7d7vs5zeb"},{"post_id":"ck4v44v8a001uhcr7mwft7ikl","category_id":"ck4v44v8l002chcr71pco93ol","_id":"ck4v44v8s002qhcr7rpplnk0k"},{"post_id":"ck4v44v8b001vhcr75kq33oxa","category_id":"ck4v44v8l002chcr71pco93ol","_id":"ck4v44v8v002uhcr7mfi3tqgm"},{"post_id":"ck4v44v8c001yhcr7dhrhd1vk","category_id":"ck4v44v8l002chcr71pco93ol","_id":"ck4v44v8x002yhcr7acobkp1k"},{"post_id":"ck4v44v8d001zhcr7q61jgfp7","category_id":"ck4v44v8l002chcr71pco93ol","_id":"ck4v44v900031hcr7a4rd5jat"},{"post_id":"ck4v44v8e0022hcr7u36p4j75","category_id":"ck4v44v8l002chcr71pco93ol","_id":"ck4v44v910032hcr7ow6geg0x"},{"post_id":"ck4v44v8g0023hcr7bzbyhrv9","category_id":"ck4v44v8z0030hcr7xffn3fi9","_id":"ck4v44v920035hcr7k3x3cn3g"},{"post_id":"ck4v44v8h0026hcr7bilirv37","category_id":"ck4v44v8z0030hcr7xffn3fi9","_id":"ck4v44v930037hcr7rsvco7ew"},{"post_id":"ck4v44v8i0027hcr74wydziiw","category_id":"ck4v44v8z0030hcr7xffn3fi9","_id":"ck4v44v930039hcr78pxksb80"},{"post_id":"ck4v44v8j002ahcr7m6r5s0jb","category_id":"ck4v44v8z0030hcr7xffn3fi9","_id":"ck4v44v94003bhcr7ncqc57yf"},{"post_id":"ck4v44v8k002bhcr7vvgzcmyb","category_id":"ck4v44v8z0030hcr7xffn3fi9","_id":"ck4v44v95003dhcr7fwondjgl"},{"post_id":"ck4v44v8m002ehcr7ps2i5657","category_id":"ck4v44v8z0030hcr7xffn3fi9","_id":"ck4v44v95003fhcr7i0rrii16"},{"post_id":"ck4v44v8m002fhcr7vjnx41pz","category_id":"ck4v44v8z0030hcr7xffn3fi9","_id":"ck4v44v96003hhcr7q6uf8v23"},{"post_id":"ck4v44v8o002hhcr75s99qk3c","category_id":"ck4v44v8z0030hcr7xffn3fi9","_id":"ck4v44v96003ihcr7kxuzgf7b"},{"post_id":"ck4v44v8p002jhcr7vuzcss64","category_id":"ck4v44v96003ghcr708lc14ad","_id":"ck4v44v97003lhcr73aa1bipv"},{"post_id":"ck4v44v8q002khcr7cau8a0pq","category_id":"ck4v44v96003ghcr708lc14ad","_id":"ck4v44v97003nhcr7in031fax"},{"post_id":"ck4v44v8r002nhcr7c0rfkcpq","category_id":"ck4v44v96003ghcr708lc14ad","_id":"ck4v44v98003phcr78tnyyz1f"},{"post_id":"ck4v44v8s002ohcr7yd9e10r5","category_id":"ck4v44v96003ghcr708lc14ad","_id":"ck4v44v98003qhcr7fa2ssvqp"},{"post_id":"ck4v44v8t002rhcr76570wdlm","category_id":"ck4v44v98003ohcr7baf36id2","_id":"ck4v44v9a003thcr75loz9apb"},{"post_id":"ck4v44v8u002shcr7zzmhwi8m","category_id":"ck4v44v98003ohcr7baf36id2","_id":"ck4v44v9b003vhcr76ip5foal"},{"post_id":"ck4v44v8v002vhcr7otofnpa9","category_id":"ck4v44v98003ohcr7baf36id2","_id":"ck4v44v9c003xhcr7or0w4g1r"},{"post_id":"ck4v44v8w002whcr75vyye2ny","category_id":"ck4v44v98003ohcr7baf36id2","_id":"ck4v44v9c003yhcr7fhlj1lxy"},{"post_id":"ck4v44v8y002zhcr7tb1twxag","category_id":"ck4v44v98003ohcr7baf36id2","_id":"ck4v44v9d003zhcr75idusmxc"},{"post_id":"ck4v44vay0040hcr7djuiywnt","category_id":"ck4v44v88001phcr7tgl8yw72","_id":"ck4v44vb00043hcr7lmav3sj1"},{"post_id":"ck4v44vay0041hcr7ztv35b0x","category_id":"ck4v44v98003ohcr7baf36id2","_id":"ck4v44vb10044hcr7ur1zipe8"},{"post_id":"ck4v44vaz0042hcr7yghv9w8l","category_id":"ck4v44v98003ohcr7baf36id2","_id":"ck4v44vb10045hcr76caaksjm"},{"post_id":"ck4v44vb70046hcr7h54lx71x","category_id":"ck4v44v98003ohcr7baf36id2","_id":"ck4v44vb90048hcr72ip5vxre"},{"post_id":"ck4v44vb80047hcr7rxnv4pka","category_id":"ck4v44v98003ohcr7baf36id2","_id":"ck4v44vb90049hcr7yj5hsv4z"}],"PostTag":[],"Tag":[]}}