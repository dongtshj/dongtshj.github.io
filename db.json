{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/muse.js","path":"js/src/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1550453562792},{"_id":"source/robots.txt","hash":"95e1971d2a428993b8859bcdb7a8b6926fac85c5","modified":1552480453638},{"_id":"themes/next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1550453562795},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1550453562792},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1550453562792},{"_id":"themes/next/.all-contributorsrc","hash":"0ca0200bb5cba4cd157f2cb74703c4cb4c29cda5","modified":1550453562792},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1550453562793},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1550453562795},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1550453562796},{"_id":"themes/next/bower.json","hash":"fd8b18788ca1bdabad013110562e7c4af0c96ff3","modified":1550453562797},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1550453562797},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1550453562796},{"_id":"themes/next/_config.yml","hash":"4849ddae10efedd71a0c3a1e93fbc167ecf9a9ae","modified":1557466804050},{"_id":"themes/next/package.json","hash":"311d3d04301b1930058f631624d2a0976408c46a","modified":1550453562852},{"_id":"themes/next/README.md","hash":"943f9fd6ed1781350cdd05a26a1cfad24d035c8b","modified":1550453562796},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1550453562810},{"_id":"source/_posts/2019年的7月内必须减到70kg！.md","hash":"1dab6b0c54c9d4d3d90a1f74d19f8f3463e30cda","modified":1562059815658},{"_id":"source/_posts/Git常用命令.md","hash":"065aaa069cbe0e98d7878aec889bb91277180574","modified":1557477238206},{"_id":"source/_posts/C++版本的XXTEA实现.md","hash":"5243b995b70ecece192f9ad638c49062ec48be0d","modified":1557285202517},{"_id":"source/about/index.md","hash":"fb9bd5799930f7fb39f25b618cc5e61e915770bb","modified":1561614337267},{"_id":"source/_posts/Linux常用命令.md","hash":"e52952950c76e7cb62dfe7e625fae633d9a14e12","modified":1556161686381},{"_id":"source/_posts/OOP中的继承.md","hash":"2b6e72061ec58760e50ab408ea72158f59933b81","modified":1556160865018},{"_id":"source/_posts/cocos2dx-lua的报错.md","hash":"d01d2dcbd66b857f07b8bc9a25c9e2f02985e096","modified":1558612477661},{"_id":"source/_posts/goto语句 VS 函数调用.md","hash":"65170302d94009d1b858ffd5ec6899a149d8afb7","modified":1557475089296},{"_id":"source/_posts/值得收藏的网站.md","hash":"bfd7a9a525dbd2a410fbd9b7cb8e48268112bcf7","modified":1558612521274},{"_id":"source/_posts/SVN合并操作.md","hash":"0da0cd097f8718dc0f331a8f1a2abbcd29efa1a6","modified":1557477235174},{"_id":"source/_posts/Python版本的XXTEA实现.md","hash":"06caa3af404669ca9ecc5697ae04d8ea354b3003","modified":1557284773494},{"_id":"source/_posts/拿起，放下。.md","hash":"60a8424f595e69db1bb6e9f3fdff9c1a9dea87bf","modified":1558612521275},{"_id":"source/_posts/使用VSCode调试C++代码.md","hash":"420c5af54ab9ef76ac0b67cdc22d2b6bcfa6f075","modified":1557307121482},{"_id":"source/_posts/使用VSCode调试JavaScript代码.md","hash":"c5291db79ec92efcc76925927b1abd47193b2bc6","modified":1557477248187},{"_id":"source/_posts/在Visual Studio中搜索文件名.md","hash":"7e8a5503d1596e8e4ec74bfbd3f2a919baaa35e0","modified":1561381696570},{"_id":"source/categories/index.md","hash":"8cbb8f9bcfe59ba70a1aa0c1da2795552494b547","modified":1550453562791},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"22f2ccc5522563b67c8663849fc1d6cbae93a8ff","modified":1550453562793},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"40b0fd9fdb8586fab98e23f713940e7a2f80e2f9","modified":1550453562794},{"_id":"source/_posts/编程语言的分类.md","hash":"d13c498a7fa38cc2e610f4e657bc1e0f790da9eb","modified":1557741775718},{"_id":"source/_posts/图形用户界面 VS 命令行界面.md","hash":"e506756e3a816056c607deea7eef1067002533fe","modified":1557469810257},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"557cc83af06b46418fd4d18e2ddcfd56bd5d69c6","modified":1550453562794},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1550453562794},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1550453562795},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1550453562798},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1550453562799},{"_id":"source/_posts/解决SVN树冲突.md","hash":"c2c30f2f42f719aaa90158020d99341c47c7746a","modified":1557478601757},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1550453562799},{"_id":"themes/next/.github/stale.yml","hash":"a24e464fa77d6687010ffe89af9aa10cb1270efe","modified":1550453562795},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1550453562801},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"721a1aa9feed1b580ab99af8e69ed22699121e88","modified":1550453562802},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1550453562802},{"_id":"themes/next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1550453562802},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1550453562803},{"_id":"themes/next/languages/de.yml","hash":"641e49587d41bb87e4d5932dc3d975754ded7953","modified":1550453562810},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1550453562810},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1550453562798},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1550453562811},{"_id":"themes/next/languages/fr.yml","hash":"ebcd1f188af8c3f5ef1f0923e794c839fbfae2d4","modified":1550453562811},{"_id":"themes/next/languages/it.yml","hash":"4e3adeb10c0fa627935d69ae1783ce0894f5dee5","modified":1550453562812},{"_id":"themes/next/languages/ja.yml","hash":"82afb0a5637ad67065fa5b2624fa56c7c240c3c6","modified":1550453562813},{"_id":"themes/next/languages/id.yml","hash":"9709a4dbacc56a1571a96b139b872128d6959e90","modified":1550453562811},{"_id":"themes/next/languages/nl.yml","hash":"060efc260c1c529469d739d97dcee79683e8f411","modified":1550453562813},{"_id":"themes/next/languages/ko.yml","hash":"33e065ceb21590b8eb32430a69e76c2f057eb758","modified":1550453562813},{"_id":"themes/next/languages/pt-BR.yml","hash":"dc09e290e908744ca28e093dbdd859ca2a20290e","modified":1550453562814},{"_id":"themes/next/languages/pt.yml","hash":"53e2a52b9d5dc20c04080acd4f5b954e8699780f","modified":1550453562814},{"_id":"themes/next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1550453562815},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1550453562814},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1550453562814},{"_id":"themes/next/languages/vi.yml","hash":"e2b3b18359ab41d58c64b2002acfedd60a7505a4","modified":1550453562815},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1550453562815},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1550453562815},{"_id":"themes/next/layout/category.swig","hash":"f0e3338bfa5efb205d2c28e635e9611f1fff3b55","modified":1550453562850},{"_id":"themes/next/layout/_layout.swig","hash":"3743b7b8d10e40d9a4b1b6cb4d4001226cafd462","modified":1550453562817},{"_id":"themes/next/layout/page.swig","hash":"1d28997ec69d3c236c0dac86cc7a8fbcfdbbb03f","modified":1550453562851},{"_id":"themes/next/layout/post.swig","hash":"af74e97d57cf00cde6f8dbd4364f27910915454e","modified":1550453562851},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1550453562851},{"_id":"themes/next/layout/tag.swig","hash":"7cda2822e50b9fee9848a6b81e6c2d1aca830aeb","modified":1550453562852},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1550453562853},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1550453562854},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1550453562947},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1550453562947},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1550453562816},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550453562911},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1550453562947},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1557457584884},{"_id":"source/_posts/Android/“此应用专为旧版Android打造，因此可能无法正常运行。请尝试检查更新或与开发者联系”.md","hash":"8d3a37e2192162e256128a9450a3964c0bc96c3e","modified":1562590503671},{"_id":"source/_posts/Android/使用logcat查看android系统日志.md","hash":"244a78022b50521f6b19de077f8a15e02bac534c","modified":1556161670193},{"_id":"source/_posts/Android/安卓APP的安装目录.md","hash":"95e96bb65c69c1b178ea47f5cdb0901b04556289","modified":1562931233137},{"_id":"themes/next/layout/archive.swig","hash":"4b53070008775ecfd03953bd1b4adfcb0fabcaac","modified":1557457593621},{"_id":"source/_posts/Lua/Lua中加载代码的方式.md","hash":"6a8ca0de855af6c625d54fa56abf8bcaa70b65fd","modified":1556161560653},{"_id":"source/_posts/Android/ADB常用命令.md","hash":"ade9b469981b7943df6fae0a50ff76870fe573d2","modified":1556161670194},{"_id":"source/_posts/Lua/Lua中的String常见操作.md","hash":"4c06a5ba914f0fa8a94cc71fa38cd8023220634e","modified":1556161560653},{"_id":"source/_posts/Lua/Lua官网提供的win平台zip包内容.md","hash":"d6d92ee35733471217cff6a45ce00c5bbc4528a2","modified":1557736655694},{"_id":"source/_posts/Lua/Lua中的Table常见操作.md","hash":"1c1e84eaf25d1e4e5d47a4982abc5decd68b7d7b","modified":1556161560653},{"_id":"source/_posts/Lua/Lua的元表与元方法.md","hash":"b6eadcef191e8c7672b6395db2d98b0582650caf","modified":1556161560653},{"_id":"source/_posts/Lua/Lua遍历Table的几种方式.md","hash":"0521b9749d2c4e09349c6df5f574f64fd4c75f34","modified":1556161560653},{"_id":"source/_posts/Android/Android开发中的名称缩写.md","hash":"c9bc6095d34c56d89c203024641c34f3e8ff950e","modified":1562591592264},{"_id":"themes/next/docs/ru/README.md","hash":"0b69e831b4617f801d9b49e8ce810daacbbee6c1","modified":1550453562804},{"_id":"source/_posts/游戏开发/心跳机制.md","hash":"065494af5029b316107daf3535f6e2fa591c2737","modified":1559297482212},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1550453562803},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1550453562803},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1550453562806},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1550453562805},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1550453562808},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1550453562805},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"6ea741f380dc3e90661d12db7e115a94b77643a4","modified":1550453562806},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1550453562809},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"734b371a0dd910eb9fe087f50c95ce35340bb832","modified":1550453562809},{"_id":"themes/next/docs/zh-CN/README.md","hash":"7fb215a0a633384948ac9228ac14617b4a974dbd","modified":1550453562809},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"b17fc344ff61603f83387c0f9b2b2189aae81d50","modified":1550453562808},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1550453562816},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1550453562816},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1550453562808},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1550453562817},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"891ab67815969dd8736cb22fbbb3f791b8fff4e4","modified":1550453562818},{"_id":"themes/next/layout/_partials/comments.swig","hash":"54afb7b78509ed8fac5d23daecc147b0fe615d1d","modified":1550453562820},{"_id":"themes/next/layout/_macro/post.swig","hash":"0fd71b1324cceea61a7eec9433f990c4de891324","modified":1553484017523},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1550453562826},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1550453562826},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"6337747816219616916e73bdfd6961a164f872cf","modified":1550453562832},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"c31d54154eed347f603009d2d65f7bf8d9a6885a","modified":1550453562832},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1550453562833},{"_id":"themes/next/layout/_partials/footer.swig","hash":"f6d0f42414b40b442d79547143449dddf3aa179e","modified":1557458705504},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b315b5885abcbed75debc8049e9fc943d9fafb5c","modified":1550453562842},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"4b93dc7ac0573c402aabcb5c933bbcb893b07c51","modified":1550453562843},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"c80b04aabdeef0e03a08284c82324089710abd45","modified":1550453562846},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"9e00cb9b3fdfe2e2c4877a874d0d3ecb7fd0f3ee","modified":1550453562846},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"76f5933925670044ec65b454295ba7e0a8439986","modified":1550453562848},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"7db4ad4a8dd5420dad2f6890f5299945df0af970","modified":1550453562848},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"d66dec72ea7ad5026260914e3545551645e0ab37","modified":1550453562848},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"c476dc3693a9dd0be2d136a45b0d7fdef55d4d92","modified":1550453562848},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"838686a5d2c3ae5c03b69842e931d9efe276e55a","modified":1550453562820},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"f58463133bf8cfef5ff07f686b834ff8cbbe492f","modified":1550453562849},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1550453562853},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"3db90c52bc8af57c6fa4a9dbdc524e1ecdc8b7b1","modified":1550453562853},{"_id":"themes/next/scripts/tags/button.js","hash":"dba55534ef4a11fb6723ec73e3ef4dcf7589ed9f","modified":1550453562854},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1550453562855},{"_id":"themes/next/scripts/tags/exturl.js","hash":"e9dab948e6327b22b4fc0c66cf97f6600a444dd5","modified":1550453562855},{"_id":"themes/next/scripts/tags/full-image.js","hash":"b2ed8de4065c302fac1654f0d3d3ecb5fa6e0f80","modified":1550453562855},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"03575b534303f42c81ba6187ec601a5578913a39","modified":1550453562856},{"_id":"themes/next/scripts/tags/label.js","hash":"48f68ab33d42e638c2ab5f89f40c34fc2fa1e6dc","modified":1550453562857},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1550453562857},{"_id":"themes/next/scripts/tags/note.js","hash":"f1b560d6e63d1b06fd80e12bbac32660125c223c","modified":1550453562857},{"_id":"themes/next/scripts/tags/tabs.js","hash":"ca885c8fa46a76a7b8977730575551622497410b","modified":1550453562858},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"85ca359866325ce82f5f0f88576fae13a763b5eb","modified":1550453562849},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1550453562911},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"0c920fe1ce2f09c9c7641266ff4155053909ec18","modified":1550453562912},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"68ad21aef6481d014e7ec0b674e469f2f82ea231","modified":1550453562836},{"_id":"themes/next/source/images/avatar.png","hash":"2741c4051e98ed6e9402e3264b3b00c723be74fb","modified":1550453562912},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1550453562913},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"710ae10cb6cafc21e40c57dd9b31f0980b030f4b","modified":1550453562821},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1550453562914},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1550453562914},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1550453562913},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1550453562914},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1550453562914},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1550453562915},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1550453562916},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"c26ea7914a8724554946427df0ccad765ffbfce3","modified":1550453562915},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1550453562916},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1550453562916},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1550453562916},{"_id":"themes/next/source/css/main.styl","hash":"5e7d28bc539e84f8b03e68df82292f7fc0f2d023","modified":1550453562911},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1550453562917},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"c3321e9650169793e4d726934d8f326295a6dfa3","modified":1550453562915},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1550453562917},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550453562895},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550453562896},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550453562897},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550453562908},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550453562910},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1550453562817},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"25aea3d764b952f3f6d28ab86d7212d138e892df","modified":1550453562818},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"4b53a0659a7e800871d8e9a4bd20f7b892a8e29b","modified":1557458086634},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1550453562823},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"9524140b2046ed850e3aa69d955a6fc790443255","modified":1552480453639},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"39c4ad0e36b7c1260da98ba345f7bd72a2ac0f2e","modified":1550453562823},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"2177da1d3c64abb6b3398f90885cf543ae6fe6da","modified":1550453562823},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1550453562825},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"b57bf9c865bed0f22157176a8085de168a1aef77","modified":1550453562822},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1550453562825},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"fc69f1f3950d9b81b0d474735e512053be169e8e","modified":1550453562827},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"0949c72a944b9abd5e5cc654b5556ac9450d431b","modified":1550453562828},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"daa6e5b7dbc409d6bf8a031d5413d8229e9c0995","modified":1550453562825},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"71b2fb364563cacc6afdf15d1f6876255ae2f9f2","modified":1550453562829},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1550453562829},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"31245e09ce0465b994cebd94223a531585c4eab4","modified":1550453562830},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c609097b95eb6127c2784f47f2230e6e6efc0be2","modified":1550453562831},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1550453562828},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"e0f0a753d4920ffb37ddbc8270515654a0b9b92a","modified":1550453562834},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1550453562834},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1550453562835},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"23c6d15aa2a305f9d29caee1b60cfae84d32fa09","modified":1550453562836},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"66d562b3778dbc839f7c00103bd0099c5d61602a","modified":1550453562837},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f331ad02beea8990066d32ad6ec9f859672c3615","modified":1550453562827},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1550453562838},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"83dd7df11b100bae38c9faab9a478f92149a0315","modified":1550453562837},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"335005a9f8b36349f0ad0a7beeba6969c55fc7f7","modified":1550453562839},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"2e1de38f44af00209129d4051b7ae307cb11ad68","modified":1550453562839},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"84018384d00e4a584d613589adae6674a3060a36","modified":1550453562835},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"53202062267391353d49f269e7eb74eb87d30921","modified":1550453562839},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"623e73bedef067ac24a398ef27c8197295da872d","modified":1550453562840},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"69d7697cbf423efad54d47dad038a5afc2e02695","modified":1550453562840},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1550453562840},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1550453562840},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1550453562841},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a22d1ea29a5ffe46199ab7d108a291a05af8d5b6","modified":1550453562841},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"6143aa0ed0d9bbe24c5859f66ea0a5611d73ecd2","modified":1550453562841},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"55de88525c05af6053524c78ef4b42b46c3bfb6d","modified":1550453562826},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"54b43d406cf37932e7b60f46814e864d31b1842c","modified":1550453562831},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"a4d752d17ddfc579730401ff3e3dfd4ec290c8de","modified":1550453562841},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"8bcc3430241e267a06abfbb4e9ca125838bc5a71","modified":1551079323420},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"0149e803ed7d30163df3b3ba3f578e5584a2e4af","modified":1550453562845},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"bd529bf26f28745eb8ded3be7652d33d55fec8d4","modified":1550453562845},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1a5d94f5779a2ce13abc886dd78e0617f89c34b9","modified":1550453562846},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"43a20fa0e9ae2f4254f04813f9c619dd36b49ae5","modified":1550453562847},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"ea1c136f960667a0a13b334db497b9b19c41f629","modified":1550453562847},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"bd6d763c1233cd89512c323ce0992daf7f9fd0e5","modified":1550453562846},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"6f7217ff64cf67ee239954d3499a3c9e76bad061","modified":1550453562847},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"078bd2d5815eb23e8c5f74467dc0042babea00ae","modified":1550453562850},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"89e41d4c298d8d70b4d1c833c7e599d089f2b3d4","modified":1550453562849},{"_id":"themes/next/scripts/filters/after_post_render/exturl.js","hash":"bfa8e5a91d22a5ba22e8f3da337fdb5e8b2600fd","modified":1550453562853},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"d45ca53af17d1d83fd27f8ed0917a72f0060e1a9","modified":1550453562850},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1550453562895},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1550453562895},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1550453562897},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"d1deb849e697cfb6258b8ab7bfb47e219210ccd9","modified":1550453562897},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e9b0752f08398709e787546a246baca12b4c557f","modified":1550453562908},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1550453562908},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e37aab667be94576f6145b61a78cfe87836c68b6","modified":1550453562909},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"da7049f3d9a157abe0ecc62611edcf43605ba84d","modified":1550453562909},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"c7e2a588b679d46379124141bb2f30bc2f3210e2","modified":1550453562918},{"_id":"themes/next/source/js/src/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1550453562918},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1550453562918},{"_id":"themes/next/source/js/src/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1550453562918},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1550453562940},{"_id":"themes/next/source/js/src/motion.js","hash":"e70f961d24e4e61a2df5bf640ab51acee8f1ffbd","modified":1550453562940},{"_id":"themes/next/source/js/src/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1550453562941},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1550453562941},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1550453562942},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"d685df1516cb138d7a83bac5d7878a1e0fa8bc04","modified":1550453562844},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"bc3fc9d053b3d1fc0cd3918bf9a629a6f38f6414","modified":1550453562843},{"_id":"themes/next/source/js/src/utils.js","hash":"a9d04f6ffea45938a2dca885c23642b9c9cdc3be","modified":1550453562942},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1550453562945},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1550453562946},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1550453562945},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"bbb788b453236e5b4af7c81df8efcfc6bde08903","modified":1550453562858},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"1a4ac0d119f2126ef8951897338706edce112235","modified":1550453562891},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1550453562860},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1550453562860},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1550453562859},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1550453562860},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1550453562868},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1550453562881},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"c0e8647244e1ef106e94c3c8ac4a64bca2677159","modified":1550453562892},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1550453562894},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"33a74fcd6c38cea356f6d2994a19f46dcfd5d8a4","modified":1550453562893},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"cb2c0beb69bfc56c0ed86e609bc1c35edb799b99","modified":1550453562892},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1550453562902},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1550453562903},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1550453562894},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"c4bfce1fca9ea5d0fd991d98e08b8e771d33d731","modified":1550453562894},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"9f35b95beb344f4eeca5ca584fbe7206f791372e","modified":1550453562904},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1550453562904},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"30d61fa31e405fcfe3d2ff6174ccad60be1745f9","modified":1550453562905},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"5f1e5d7b9d44ef3e6ad442e083753fee76d3b112","modified":1550453562898},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1550453562907},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4ed12bf17eeb7cd4f22dd01fdd486cda68d169a8","modified":1550453562903},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"28f0444ccdc85a34ada651d8ee52479e16311167","modified":1550453562905},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1550453562907},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1550453562899},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"11fcaaf7524445a194801e1048ea2fb84b316414","modified":1550453562906},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1550453562899},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"a5395766dfdda81285d0cd3ddebe8e8bc924fa2a","modified":1550453562907},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1550453562907},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"eecb2081ee1eef1e2152c7fea9310366e33b1eac","modified":1550453562899},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"9f35b95beb344f4eeca5ca584fbe7206f791372e","modified":1550453562901},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"a80782a6eb3b40da2e14251da49069aff3115d8a","modified":1550453562900},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"15254414a52f05618c54a2ac7f4635f99077ec30","modified":1550453562901},{"_id":"themes/next/source/js/src/schemes/muse.js","hash":"ccc0c5cd4ec6f8159c98990ad83f11a5c0b0234c","modified":1550453562941},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"3eea56cc9ce47bb4760930c4c69cebf847a7fbb2","modified":1550453562941},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"b0f58a5076caaeedca0dd27ab2728a7caf3b57c8","modified":1553484017525},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1550453562943},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1550453562861},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1550453562862},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fa1cea6fcc3f552d57cc7d28380a304859139bf6","modified":1550453562866},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1550453562865},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1550453562864},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"2df409df04fdb52d7234876a9f6e502edd4e3929","modified":1550453562861},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1550453562866},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1550453562864},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1550453562867},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"48bb741f6bda73b322a25a8fbe37fd3d5e0ff601","modified":1550453562861},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1550453562867},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1ec3102ee8f5b8cc0877da1fd109d37470401e7b","modified":1550453562863},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1550453562863},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1550453562868},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1550453562865},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"77da38898bdd99cf8fd3e0ae8cc4d2ac943bcb60","modified":1550453562869},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"b6a241626783d2ac115d683fd59ec283af68e5bb","modified":1550453562870},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1550453562869},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"db1df0186a4572844d69d0d7bb974bd120cb64d5","modified":1550453562867},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"32bbf059c57677e754a918c927ac63e2d843108f","modified":1550453562864},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"8703ff5ebfc76420565b92b1b873e03fb9d9cf15","modified":1550453562870},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"2ea91d7b75966d471bf857a9f3fbf87fd01aea90","modified":1550453562871},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"3241c9ae85ca11b6c4e125ac471aa4342ba1ce9c","modified":1550453562868},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"a0e84b21ecc1f69d8d42c83630c1004d3419e3fd","modified":1550453562870},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1550453562871},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1550453562871},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1550453562872},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"7b69c1ad392f8a386854e318d4c8ddeb9ba8d793","modified":1550453562870},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"989b7d718914b5242506947aa5767b3f2480d8f9","modified":1550453562871},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1550453562872},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"41858f2dfd34a57d0a2016b1bce08efb61943b7a","modified":1550453562874},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1550453562875},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"981795aad232c8bd3f52a0ed8720db696d18a234","modified":1550453562872},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"2e36956c5f8802f703c7ce3893d16323a0e09d4c","modified":1550453562872},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"4c1705e5c3fbf0e3f5d3fb29edec4a29c87b4c95","modified":1550453562876},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1550453562873},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"2e26e4429c2457b8ca12555426659c2fc65a5cea","modified":1550453562873},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"7e2ba73073daaea0a18c3d67ff137dd683af7011","modified":1550453562877},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"b9a19654b6a2685b5426afac8b09cdbd80fae00c","modified":1550453562879},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"dd5f7057680faefc9306fab3172106f762c1a517","modified":1550453562878},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"4ec203c52db47bca67c229ef1f3693c9d40b4ef9","modified":1550453562879},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1550453562882},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1550453562884},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1550453562881},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"f1fdfd0bc6b66a38581a4fbe096b25aadfc53246","modified":1550453562880},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1550453562883},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"f1640253cbbf71d0c04c34c25bd61045894f98bc","modified":1550453562886},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"72cabf6edfd64697e37950cc3e66fbea6ba47b66","modified":1550453562884},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"2937e566ad0f3d9adc0865b269fdca62b7576fdd","modified":1550453562885},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1550453562887},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"49913bb2b702d52d77528cd9378126aa67c0082c","modified":1550453562888},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"2a1008f1044b450b806adc166754ba9513e68375","modified":1550453562889},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"30ccc107061dc23943198f087759079161ee24e9","modified":1550453562885},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1550453562890},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"74412b0bf4ec0d28aedd2e60b27affd4d5cd1452","modified":1550453562890},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3529aae283864fa0f09925ee8217905632e9a930","modified":1550453562890},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1550453562889},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1550453562905},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"f26c32a0c3045e5ae826b983abc3a3c139456663","modified":1550453562887},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1550453562902},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1550453562902},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1550453562945},{"_id":"public/sitemap.xml","hash":"3105474ece10bf856181b945a2d8fc76e855ced0","modified":1562931253322},{"_id":"public/about/index.html","hash":"eed5b3755c46c94e350593a1841bb79af488764a","modified":1562931253337},{"_id":"public/categories/index.html","hash":"51f6b1d2e4ba2668e803188b113825216be6b8db","modified":1562931253337},{"_id":"public/Android/Android/安卓APP的安装目录/index.html","hash":"ae7963b11a696f8930711a7a331ae9d14d531b84","modified":1562931253337},{"_id":"public/Android/Android/Android开发中的名称缩写/index.html","hash":"2bfaa6b0a0730feec4dc4e20a46a15404dc83ba7","modified":1562931253337},{"_id":"public/Android/Android/“此应用专为旧版Android打造，因此可能无法正常运行。请尝试检查更新或与开发者联系”/index.html","hash":"1a22d7d752e1375151861687f8e080713bc57107","modified":1562931253337},{"_id":"public/其他/2019年的7月内必须减到70kg！/index.html","hash":"348f2884cd3b91d35de92c2787e3edb0fe151eb1","modified":1562931253337},{"_id":"public/Visual-Studio/在Visual Studio中搜索文件名/index.html","hash":"511ec5ac3b71b29014b9b491c0f69c981175e344","modified":1562931253337},{"_id":"public/游戏开发/游戏开发/心跳机制/index.html","hash":"cfd0ffce899b95a7fb94bf153f087167b908587f","modified":1562931253337},{"_id":"public/cocos2dx-lua/cocos2dx-lua的报错/index.html","hash":"6ccef212f314bda08f7cd9d743ba01248e9562e4","modified":1562931253337},{"_id":"public/其他/拿起，放下。/index.html","hash":"3a8e441a4b482fa7081d138e78e47ca12e756b70","modified":1562931253337},{"_id":"public/Lua/Lua/Lua官网提供的win平台zip包内容/index.html","hash":"2e66c9aaaac941e6af575a4e76d27cfddc323e15","modified":1562931253337},{"_id":"public/软件工程/编程语言的分类/index.html","hash":"664f5f303e11a7d29f84fe93d021c7b627c3eae5","modified":1562931253337},{"_id":"public/版本控制/解决SVN树冲突/index.html","hash":"7debbd733507c8b3c9a9a9c0a583fe1d135a624b","modified":1562931253337},{"_id":"public/JavaScript/使用VSCode调试JavaScript代码/index.html","hash":"ecc36db613f813c24d2e2026e64a74df5b872028","modified":1562931253337},{"_id":"public/C/使用VSCode调试C++代码/index.html","hash":"53b63fbab17546e741b849e5b6d2a75461b91f65","modified":1562931253337},{"_id":"public/Android/Android/ADB常用命令/index.html","hash":"0b4fa27b96434eb4cc28755a1689e223e7bfb912","modified":1562931253337},{"_id":"public/Lua/Lua/Lua的元表与元方法/index.html","hash":"0d7557f819c357b5cdef64982f8a7dc0f303d47e","modified":1562931253337},{"_id":"public/Lua/Lua/Lua中加载代码的方式/index.html","hash":"d0665e06fe01135adc7860b2718ddcc3917a256d","modified":1562931253337},{"_id":"public/Android/Android/使用logcat查看android系统日志/index.html","hash":"42f97a8e53fcacafd83d968f0b88a7cff1c5bc07","modified":1562931253337},{"_id":"public/版本控制/Git常用命令/index.html","hash":"61e7cab5e942ed869412150b4cf13271968e6cda","modified":1562931253337},{"_id":"public/在类比中学习/图形用户界面 VS 命令行界面/index.html","hash":"a447f8ca2e574d1e5d9ffa71b99f3de5507fd318","modified":1562931253338},{"_id":"public/OOP/OOP中的继承/index.html","hash":"6e0e447e9e54fdfcb02866ec189a443376486e4e","modified":1562931253338},{"_id":"public/版本控制/SVN合并操作/index.html","hash":"70d356f2489d0fdaec2e5185c96a0974835805d2","modified":1562931253338},{"_id":"public/Linux/Linux常用命令/index.html","hash":"3137ee33a7df60857bd0189696d65a28ed45a508","modified":1562931253338},{"_id":"public/categories/其他/index.html","hash":"24779092c5b95523793f5d94fe28c6bc19c7e8d6","modified":1562931253338},{"_id":"public/categories/版本控制/index.html","hash":"b186130878897932c482119c49f5a9d1c72843a5","modified":1562931253338},{"_id":"public/categories/C/index.html","hash":"70a6c3a3b392972cfee99fc630d8e0cffd1d5338","modified":1562931253338},{"_id":"public/categories/Linux/index.html","hash":"4e8df4d35715429077f3a0b57416c0c142e04bff","modified":1562931253338},{"_id":"public/categories/OOP/index.html","hash":"78214a65d9026e907bcc4052147b6668b76dca5b","modified":1562931253338},{"_id":"public/categories/cocos2dx-lua/index.html","hash":"1f01dba1fa10eab97a10da5c2efed8b01fff5179","modified":1562931253338},{"_id":"public/categories/在类比中学习/index.html","hash":"6be16550ef2c5af427401925f263ca6af5b87fc6","modified":1562931253338},{"_id":"public/categories/推荐/index.html","hash":"4f1e7039b2c9fa8d7c92b01ef01cadbdd9637536","modified":1562931253338},{"_id":"public/categories/Python/index.html","hash":"7573ad02dad4744b742beed04e1283c839f78d70","modified":1562931253338},{"_id":"public/categories/JavaScript/index.html","hash":"62f625a69a249f5506e0e7489aa8371e7f5d680f","modified":1562931253338},{"_id":"public/categories/Visual-Studio/index.html","hash":"40ca5a6a183f90d59949f0054fa123cde205c60b","modified":1562931253338},{"_id":"public/categories/软件工程/index.html","hash":"e2030a589ef87baf8d87d91499a5aa5a75322c1a","modified":1562931253338},{"_id":"public/categories/Android/index.html","hash":"9e175d53ecba5e8ca72cd4a674eb09fd8f63baf3","modified":1562931253338},{"_id":"public/categories/Lua/index.html","hash":"02a895df31b93139707fc6e9d62794af580bc687","modified":1562931253338},{"_id":"public/categories/游戏开发/index.html","hash":"cb25092fa8a99a0303a81eaa4112abf616c56f6e","modified":1562931253338},{"_id":"public/archives/index.html","hash":"5df7611116593ddab922ff3a262e3a547c121073","modified":1562931253338},{"_id":"public/archives/page/2/index.html","hash":"a97bf900086a6cac10709030b33e7d07e8eea41f","modified":1562931253338},{"_id":"public/archives/page/3/index.html","hash":"a3e6ac49e1a1a7977670851ccb7d8707a5e9c656","modified":1562931253338},{"_id":"public/archives/2019/index.html","hash":"733d3b2c0920399cb4462f02e078c444506ed802","modified":1562931253338},{"_id":"public/archives/2019/page/2/index.html","hash":"4cab25f5d5d8502dc32fe75b68cf0bd63a3e42b1","modified":1562931253338},{"_id":"public/archives/2019/page/3/index.html","hash":"93af07b9c9149bd303f1103e046d84eaf449ebd7","modified":1562931253338},{"_id":"public/archives/2019/02/index.html","hash":"67dd2f64c3f3d8af463aec02ce4d5549518eaae6","modified":1562931253338},{"_id":"public/archives/2019/03/index.html","hash":"5eb127da0cd628e205507dbf6f3551cc7fab7388","modified":1562931253339},{"_id":"public/archives/2019/04/index.html","hash":"04654b771625447e9646555b82c2554c14a77cd6","modified":1562931253339},{"_id":"public/archives/2019/05/index.html","hash":"4a3f688b58ed6f1309fdb858a877adea1820a431","modified":1562931253339},{"_id":"public/archives/2019/05/page/2/index.html","hash":"6803c73e100842aa43e4b98d93531c66a727cce1","modified":1562931253339},{"_id":"public/archives/2019/06/index.html","hash":"e61b2108b7cba0c50c480bed3b58f875894c32ee","modified":1562931253339},{"_id":"public/archives/2019/07/index.html","hash":"a4ddb2545ad4545a2beee4f960db79f3e63f494b","modified":1562931253339},{"_id":"public/在类比中学习/goto语句 VS 函数调用/index.html","hash":"d0c143b10982a6dc31806ef11710006f23b03f78","modified":1562931253339},{"_id":"public/C/C++版本的XXTEA实现/index.html","hash":"ff840220d07377fe21e28f8bf84063404af25495","modified":1562931253339},{"_id":"public/Python/Python版本的XXTEA实现/index.html","hash":"707ab185acfd2f7de0c4a910c4895757b2279df3","modified":1562931253339},{"_id":"public/Lua/Lua/Lua遍历Table的几种方式/index.html","hash":"0746be26f2d7bb418d4f0671be09ee7bee375499","modified":1562931253339},{"_id":"public/Lua/Lua/Lua中的Table常见操作/index.html","hash":"8c1cfc7ea910adb57b0b4e5c3a3fc134dce0f8ad","modified":1562931253339},{"_id":"public/Lua/Lua/Lua中的String常见操作/index.html","hash":"fd579cf964d0b50ccb806cbfa4c94b30d942546d","modified":1562931253339},{"_id":"public/推荐/值得收藏的网站/index.html","hash":"c051ccb3d38932dc65fb42d1a96ab78f18c1f7d4","modified":1562931253339},{"_id":"public/index.html","hash":"c10e12985d150a78cf128e85e35dd82e830d61c9","modified":1562931253339},{"_id":"public/page/2/index.html","hash":"51448e6c4dc37595e0eec153201b9225b1893f8b","modified":1562931253339},{"_id":"public/page/3/index.html","hash":"edc356d3f12cf62ceb66c8a3e2798fe3d7c78e29","modified":1562931253339},{"_id":"public/robots.txt","hash":"95e1971d2a428993b8859bcdb7a8b6926fac85c5","modified":1562931253344},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1562931253344},{"_id":"public/images/apple-touch-icon-next.png","hash":"0c920fe1ce2f09c9c7641266ff4155053909ec18","modified":1562931253344},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1562931253344},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1562931253344},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1562931253344},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1562931253344},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1562931253344},{"_id":"public/images/avatar.png","hash":"2741c4051e98ed6e9402e3264b3b00c723be74fb","modified":1562931253344},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1562931253344},{"_id":"public/images/favicon-32x32-next.png","hash":"c26ea7914a8724554946427df0ccad765ffbfce3","modified":1562931253344},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1562931253344},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1562931253344},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1562931253344},{"_id":"public/images/favicon-16x16-next.png","hash":"c3321e9650169793e4d726934d8f326295a6dfa3","modified":1562931253344},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1562931253344},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1562931253344},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1562931253344},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1562931253915},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1562931253920},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1562931253920},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1562931253920},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1562931253920},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1562931253920},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1562931253920},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1562931253920},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1562931253920},{"_id":"public/js/src/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1562931253920},{"_id":"public/js/src/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1562931253920},{"_id":"public/css/main.css","hash":"843f57bcdd9322afae8a28c545d249196ee61eba","modified":1562931253921},{"_id":"public/js/src/motion.js","hash":"7933a30382a84b655238f6e78d42ea1b99af4de6","modified":1562931253932},{"_id":"public/js/src/utils.js","hash":"1e515f5c5e9872b875090481b5bebfbf175d32fe","modified":1562931253932},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1562931253933},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1562931253950},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1562931253950},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1562931253984},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1562931253988}],"Category":[{"name":"其他","_id":"cjy00wux10003vsr7jxrvymhc"},{"name":"版本控制","_id":"cjy00wux60007vsr7vtc6o122"},{"name":"C++","_id":"cjy00wux9000bvsr7tf1maiqz"},{"name":"Linux","_id":"cjy00wuxc000fvsr7mn9qjbcj"},{"name":"OOP","_id":"cjy00wuxe000jvsr7e4lk75ln"},{"name":"cocos2dx-lua","_id":"cjy00wuxh000pvsr7tbomxaf3"},{"name":"在类比中学习","_id":"cjy00wuxh000svsr7ukxk9o1z"},{"name":"推荐","_id":"cjy00wuxi000vvsr7okjqxg8l"},{"name":"Python","_id":"cjy00wuxi000xvsr7svrg83qw"},{"name":"JavaScript","_id":"cjy00wuxj000zvsr7l5gulrun"},{"name":"Visual Studio","_id":"cjy00wuxj0011vsr7j7d4kbl4"},{"name":"软件工程","_id":"cjy00wv0h0017vsr7vdt6ljpf"},{"name":"Android","_id":"cjy00wv28001evsr7rgf80p8h"},{"name":"Lua","_id":"cjy00wv2e001nvsr7ucwrdi49"},{"name":"游戏开发","_id":"cjy00wv3k0022vsr7y4z9nnz4"}],"Data":[],"Page":[{"type":"about","date":"2019-02-16T09:06:30.000Z","_content":"\n---\n\n### 未来属于善用闲暇的人\n**“我们并不创作音乐，而只听身价数百万美元的歌手的白金唱片；**\n**我们不从事艺术创作，只会对拍卖会场上喊得最高价的名画赞叹不已；**\n**我们也不肯冒险贯彻自己的信念，只会每天花几个小时，看演员在虚拟的情境中，假扮出生入死。**\n**这种替代的参与方式，至少暂时粉饰了浪费时间的空洞感。但是跟投注在真实挑战上的专注相比，它实在太薄弱了。从技巧的运用中产生的心流体验，会带来成长；纯属被动的娱乐背后，什么也没有。”**\n\n---\n\n### 对待生命，你不妨大胆冒险点，因为你最终都要失去它\n不要辜负它！\n\n---\n\n### 多一点善意\n生活中，你明明是举手之劳，却偏偏不想帮助别人。你明明可以提醒一下别人，却偏偏带着小心机不说\n\n---\n\n### 对他人抱有一种友好的态度\n本质上，每个人都是心地善良的\n\n---\n\n### 阐释\n取决于，如何对外在事物与日常体验的**阐释**\n\n---\n","source":"about/index.md","raw":"---\ntype: about\ndate: 2019-02-16 17:06:30\n---\n\n---\n\n### 未来属于善用闲暇的人\n**“我们并不创作音乐，而只听身价数百万美元的歌手的白金唱片；**\n**我们不从事艺术创作，只会对拍卖会场上喊得最高价的名画赞叹不已；**\n**我们也不肯冒险贯彻自己的信念，只会每天花几个小时，看演员在虚拟的情境中，假扮出生入死。**\n**这种替代的参与方式，至少暂时粉饰了浪费时间的空洞感。但是跟投注在真实挑战上的专注相比，它实在太薄弱了。从技巧的运用中产生的心流体验，会带来成长；纯属被动的娱乐背后，什么也没有。”**\n\n---\n\n### 对待生命，你不妨大胆冒险点，因为你最终都要失去它\n不要辜负它！\n\n---\n\n### 多一点善意\n生活中，你明明是举手之劳，却偏偏不想帮助别人。你明明可以提醒一下别人，却偏偏带着小心机不说\n\n---\n\n### 对他人抱有一种友好的态度\n本质上，每个人都是心地善良的\n\n---\n\n### 阐释\n取决于，如何对外在事物与日常体验的**阐释**\n\n---\n","updated":"2019-06-27T05:45:37.267Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cjy00wuwz0001vsr70yad6ny2","content":"<hr>\n<h3 id=\"未来属于善用闲暇的人\"><a href=\"#未来属于善用闲暇的人\" class=\"headerlink\" title=\"未来属于善用闲暇的人\"></a>未来属于善用闲暇的人</h3><p><strong>“我们并不创作音乐，而只听身价数百万美元的歌手的白金唱片；</strong><br><strong>我们不从事艺术创作，只会对拍卖会场上喊得最高价的名画赞叹不已；</strong><br><strong>我们也不肯冒险贯彻自己的信念，只会每天花几个小时，看演员在虚拟的情境中，假扮出生入死。</strong><br><strong>这种替代的参与方式，至少暂时粉饰了浪费时间的空洞感。但是跟投注在真实挑战上的专注相比，它实在太薄弱了。从技巧的运用中产生的心流体验，会带来成长；纯属被动的娱乐背后，什么也没有。”</strong></p>\n<hr>\n<h3 id=\"对待生命，你不妨大胆冒险点，因为你最终都要失去它\"><a href=\"#对待生命，你不妨大胆冒险点，因为你最终都要失去它\" class=\"headerlink\" title=\"对待生命，你不妨大胆冒险点，因为你最终都要失去它\"></a>对待生命，你不妨大胆冒险点，因为你最终都要失去它</h3><p>不要辜负它！</p>\n<hr>\n<h3 id=\"多一点善意\"><a href=\"#多一点善意\" class=\"headerlink\" title=\"多一点善意\"></a>多一点善意</h3><p>生活中，你明明是举手之劳，却偏偏不想帮助别人。你明明可以提醒一下别人，却偏偏带着小心机不说</p>\n<hr>\n<h3 id=\"对他人抱有一种友好的态度\"><a href=\"#对他人抱有一种友好的态度\" class=\"headerlink\" title=\"对他人抱有一种友好的态度\"></a>对他人抱有一种友好的态度</h3><p>本质上，每个人都是心地善良的</p>\n<hr>\n<h3 id=\"阐释\"><a href=\"#阐释\" class=\"headerlink\" title=\"阐释\"></a>阐释</h3><p>取决于，如何对外在事物与日常体验的<strong>阐释</strong></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h3 id=\"未来属于善用闲暇的人\"><a href=\"#未来属于善用闲暇的人\" class=\"headerlink\" title=\"未来属于善用闲暇的人\"></a>未来属于善用闲暇的人</h3><p><strong>“我们并不创作音乐，而只听身价数百万美元的歌手的白金唱片；</strong><br><strong>我们不从事艺术创作，只会对拍卖会场上喊得最高价的名画赞叹不已；</strong><br><strong>我们也不肯冒险贯彻自己的信念，只会每天花几个小时，看演员在虚拟的情境中，假扮出生入死。</strong><br><strong>这种替代的参与方式，至少暂时粉饰了浪费时间的空洞感。但是跟投注在真实挑战上的专注相比，它实在太薄弱了。从技巧的运用中产生的心流体验，会带来成长；纯属被动的娱乐背后，什么也没有。”</strong></p>\n<hr>\n<h3 id=\"对待生命，你不妨大胆冒险点，因为你最终都要失去它\"><a href=\"#对待生命，你不妨大胆冒险点，因为你最终都要失去它\" class=\"headerlink\" title=\"对待生命，你不妨大胆冒险点，因为你最终都要失去它\"></a>对待生命，你不妨大胆冒险点，因为你最终都要失去它</h3><p>不要辜负它！</p>\n<hr>\n<h3 id=\"多一点善意\"><a href=\"#多一点善意\" class=\"headerlink\" title=\"多一点善意\"></a>多一点善意</h3><p>生活中，你明明是举手之劳，却偏偏不想帮助别人。你明明可以提醒一下别人，却偏偏带着小心机不说</p>\n<hr>\n<h3 id=\"对他人抱有一种友好的态度\"><a href=\"#对他人抱有一种友好的态度\" class=\"headerlink\" title=\"对他人抱有一种友好的态度\"></a>对他人抱有一种友好的态度</h3><p>本质上，每个人都是心地善良的</p>\n<hr>\n<h3 id=\"阐释\"><a href=\"#阐释\" class=\"headerlink\" title=\"阐释\"></a>阐释</h3><p>取决于，如何对外在事物与日常体验的<strong>阐释</strong></p>\n<hr>\n"},{"date":"2019-02-16T09:06:47.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\n#title: 分类\ndate: 2019-02-16 17:06:47\ntype: \"categories\"\n---\n","updated":"2019-02-18T01:32:42.791Z","path":"categories/index.html","title":"","comments":1,"layout":"page","_id":"cjy00wv0d0014vsr7bzgwel5n","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2019年的7月内必须减到70kg！","date":"2019-07-01T16:00:00.000Z","_content":"\n### 一、现在是7月初，体重大概78kg、79kg\n\n### 二、flag是一定要立的！\n\n### 三、务必减到70kg，否则怎么找对象啊😭\n\n### 四、身体质量指数（简称：BMI）\n---\n\n`BMI = m / h ^ 2`\n\n* m：体重，单位千克\n* h：身高，单位米\n\n### 五、关于BMI需要注意的几点:\n* 按照世界标准：正常体重和过重的BMI指数分界线是：25\n* 按照中国标准（更符合亚洲人种的体型）：上面的分界线是：24\n\n按本人1.7m的身高，79kg的体重计算：BMI = 79 / (1.7 * 1.7) = 27.34。无论是按照世界还是中国标准，我都超重了😭！\n\n要想达到中国标准，我的体重需要减到：m = 24 * 1.7 * 1.7 = 69.36kg！\n\n\n","source":"_posts/2019年的7月内必须减到70kg！.md","raw":"---\ntitle: 2019年的7月内必须减到70kg！\ncategories: 其他\ndate: 2019-07-02\n---\n\n### 一、现在是7月初，体重大概78kg、79kg\n\n### 二、flag是一定要立的！\n\n### 三、务必减到70kg，否则怎么找对象啊😭\n\n### 四、身体质量指数（简称：BMI）\n---\n\n`BMI = m / h ^ 2`\n\n* m：体重，单位千克\n* h：身高，单位米\n\n### 五、关于BMI需要注意的几点:\n* 按照世界标准：正常体重和过重的BMI指数分界线是：25\n* 按照中国标准（更符合亚洲人种的体型）：上面的分界线是：24\n\n按本人1.7m的身高，79kg的体重计算：BMI = 79 / (1.7 * 1.7) = 27.34。无论是按照世界还是中国标准，我都超重了😭！\n\n要想达到中国标准，我的体重需要减到：m = 24 * 1.7 * 1.7 = 69.36kg！\n\n\n","slug":"2019年的7月内必须减到70kg！","published":1,"updated":"2019-07-02T09:30:15.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wuws0000vsr7sesx1u8e","content":"<h3 id=\"一、现在是7月初，体重大概78kg、79kg\"><a href=\"#一、现在是7月初，体重大概78kg、79kg\" class=\"headerlink\" title=\"一、现在是7月初，体重大概78kg、79kg\"></a>一、现在是7月初，体重大概78kg、79kg</h3><h3 id=\"二、flag是一定要立的！\"><a href=\"#二、flag是一定要立的！\" class=\"headerlink\" title=\"二、flag是一定要立的！\"></a>二、flag是一定要立的！</h3><h3 id=\"三、务必减到70kg，否则怎么找对象啊😭\"><a href=\"#三、务必减到70kg，否则怎么找对象啊😭\" class=\"headerlink\" title=\"三、务必减到70kg，否则怎么找对象啊😭\"></a>三、务必减到70kg，否则怎么找对象啊😭</h3><h3 id=\"四、身体质量指数（简称：BMI）\"><a href=\"#四、身体质量指数（简称：BMI）\" class=\"headerlink\" title=\"四、身体质量指数（简称：BMI）\"></a>四、身体质量指数（简称：BMI）</h3><hr>\n<p><code>BMI = m / h ^ 2</code></p>\n<ul>\n<li>m：体重，单位千克</li>\n<li>h：身高，单位米</li>\n</ul>\n<h3 id=\"五、关于BMI需要注意的几点\"><a href=\"#五、关于BMI需要注意的几点\" class=\"headerlink\" title=\"五、关于BMI需要注意的几点:\"></a>五、关于BMI需要注意的几点:</h3><ul>\n<li>按照世界标准：正常体重和过重的BMI指数分界线是：25</li>\n<li>按照中国标准（更符合亚洲人种的体型）：上面的分界线是：24</li>\n</ul>\n<p>按本人1.7m的身高，79kg的体重计算：BMI = 79 / (1.7 * 1.7) = 27.34。无论是按照世界还是中国标准，我都超重了😭！</p>\n<p>要想达到中国标准，我的体重需要减到：m = 24 <em> 1.7 </em> 1.7 = 69.36kg！</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、现在是7月初，体重大概78kg、79kg\"><a href=\"#一、现在是7月初，体重大概78kg、79kg\" class=\"headerlink\" title=\"一、现在是7月初，体重大概78kg、79kg\"></a>一、现在是7月初，体重大概78kg、79kg</h3><h3 id=\"二、flag是一定要立的！\"><a href=\"#二、flag是一定要立的！\" class=\"headerlink\" title=\"二、flag是一定要立的！\"></a>二、flag是一定要立的！</h3><h3 id=\"三、务必减到70kg，否则怎么找对象啊😭\"><a href=\"#三、务必减到70kg，否则怎么找对象啊😭\" class=\"headerlink\" title=\"三、务必减到70kg，否则怎么找对象啊😭\"></a>三、务必减到70kg，否则怎么找对象啊😭</h3><h3 id=\"四、身体质量指数（简称：BMI）\"><a href=\"#四、身体质量指数（简称：BMI）\" class=\"headerlink\" title=\"四、身体质量指数（简称：BMI）\"></a>四、身体质量指数（简称：BMI）</h3><hr>\n<p><code>BMI = m / h ^ 2</code></p>\n<ul>\n<li>m：体重，单位千克</li>\n<li>h：身高，单位米</li>\n</ul>\n<h3 id=\"五、关于BMI需要注意的几点\"><a href=\"#五、关于BMI需要注意的几点\" class=\"headerlink\" title=\"五、关于BMI需要注意的几点:\"></a>五、关于BMI需要注意的几点:</h3><ul>\n<li>按照世界标准：正常体重和过重的BMI指数分界线是：25</li>\n<li>按照中国标准（更符合亚洲人种的体型）：上面的分界线是：24</li>\n</ul>\n<p>按本人1.7m的身高，79kg的体重计算：BMI = 79 / (1.7 * 1.7) = 27.34。无论是按照世界还是中国标准，我都超重了😭！</p>\n<p>要想达到中国标准，我的体重需要减到：m = 24 <em> 1.7 </em> 1.7 = 69.36kg！</p>\n"},{"title":"Git常用命令","date":"2019-03-12T16:00:00.000Z","_content":"\n### 生成ssh key\n---\n我是为了用来访问github上的repo，带.pub的是公钥，不带后缀的使密钥。把公钥内容粘贴到github的账户设置里就可以访问远程repo了,如果本地机器已经有了公钥，注意会提示你是否执行覆盖操作，然后一路回车就行了。\n`ssh-keygen -t rsa -C \"your_email@example.com\"`\n\n### 新建分支\n---\n* 新建分支但不切换（依然停留在当前分支）\n`git branch new_branch_name`\n* 切换分支\n`git checkout new_branch_name`\n* 新建分支并切换\n`git checkout -b new_branch_name`","source":"_posts/Git常用命令.md","raw":"---\ntitle: Git常用命令\ncategories: 版本控制\ndate: 2019-03-13\n---\n\n### 生成ssh key\n---\n我是为了用来访问github上的repo，带.pub的是公钥，不带后缀的使密钥。把公钥内容粘贴到github的账户设置里就可以访问远程repo了,如果本地机器已经有了公钥，注意会提示你是否执行覆盖操作，然后一路回车就行了。\n`ssh-keygen -t rsa -C \"your_email@example.com\"`\n\n### 新建分支\n---\n* 新建分支但不切换（依然停留在当前分支）\n`git branch new_branch_name`\n* 切换分支\n`git checkout new_branch_name`\n* 新建分支并切换\n`git checkout -b new_branch_name`","slug":"Git常用命令","published":1,"updated":"2019-05-10T08:33:58.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wux00002vsr7vqtmjhee","content":"<h3 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh key\"></a>生成ssh key</h3><hr>\n<p>我是为了用来访问github上的repo，带.pub的是公钥，不带后缀的使密钥。把公钥内容粘贴到github的账户设置里就可以访问远程repo了,如果本地机器已经有了公钥，注意会提示你是否执行覆盖操作，然后一路回车就行了。<br><code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code></p>\n<h3 id=\"新建分支\"><a href=\"#新建分支\" class=\"headerlink\" title=\"新建分支\"></a>新建分支</h3><hr>\n<ul>\n<li>新建分支但不切换（依然停留在当前分支）<br><code>git branch new_branch_name</code></li>\n<li>切换分支<br><code>git checkout new_branch_name</code></li>\n<li>新建分支并切换<br><code>git checkout -b new_branch_name</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh key\"></a>生成ssh key</h3><hr>\n<p>我是为了用来访问github上的repo，带.pub的是公钥，不带后缀的使密钥。把公钥内容粘贴到github的账户设置里就可以访问远程repo了,如果本地机器已经有了公钥，注意会提示你是否执行覆盖操作，然后一路回车就行了。<br><code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code></p>\n<h3 id=\"新建分支\"><a href=\"#新建分支\" class=\"headerlink\" title=\"新建分支\"></a>新建分支</h3><hr>\n<ul>\n<li>新建分支但不切换（依然停留在当前分支）<br><code>git branch new_branch_name</code></li>\n<li>切换分支<br><code>git checkout new_branch_name</code></li>\n<li>新建分支并切换<br><code>git checkout -b new_branch_name</code></li>\n</ul>\n"},{"title":"C++版本的XXTEA实现","date":"2019-05-07T16:00:00.000Z","_content":"\n### 算法实现\n---\n\n头文件：xxtea.h\n```\n#ifndef XXTEA_H\n#define XXTEA_H\n\n#include <stddef.h> /* for size_t & NULL declarations */\n\n#if defined(_MSC_VER)\n\ntypedef unsigned __int32 xxtea_long;\n\n#else\n\n#if defined(__FreeBSD__) && __FreeBSD__ < 5\n/* FreeBSD 4 doesn't have stdint.h file */\n#include <inttypes.h>\n#else\n#include <stdint.h>\n#endif\n\ntypedef uint32_t xxtea_long;\n\n#endif /* end of if defined(_MSC_VER) */\n\n#define XXTEA_MX (z >> 5 ^ y << 2) + (y >> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z)\n#define XXTEA_DELTA 0x9e3779b9\n\nunsigned char *xxtea_encrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length);\nunsigned char *xxtea_decrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length);\n\n#endif\n```\n\n源文件：xxtea.cpp\n```\n#include \"xxtea.h\"\n#include <memory.h>\n#include <stdlib.h>\n\nstatic void xxtea_long_encrypt(xxtea_long *v, xxtea_long len, xxtea_long *k)\n{\n    xxtea_long n = len - 1;\n    xxtea_long z = v[n], y = v[0], p, q = 6 + 52 / (n + 1), sum = 0, e;\n    if (n < 1) {\n        return;\n    }\n    while (0 < q--) {\n        sum += XXTEA_DELTA;\n        e = sum >> 2 & 3;\n        for (p = 0; p < n; p++) {\n            y = v[p + 1];\n            z = v[p] += XXTEA_MX;\n        }\n        y = v[0];\n        z = v[n] += XXTEA_MX;\n    }\n}\n\nstatic void xxtea_long_decrypt(xxtea_long *v, xxtea_long len, xxtea_long *k)\n{\n    xxtea_long n = len - 1;\n    xxtea_long z = v[n], y = v[0], p, q = 6 + 52 / (n + 1), sum = q * XXTEA_DELTA, e;\n    if (n < 1) {\n        return;\n    }\n    while (sum != 0) {\n        e = sum >> 2 & 3;\n        for (p = n; p > 0; p--) {\n            z = v[p - 1];\n            y = v[p] -= XXTEA_MX;\n        }\n        z = v[n];\n        y = v[0] -= XXTEA_MX;\n        sum -= XXTEA_DELTA;\n    }\n}\n\nstatic unsigned char *fix_key_length(unsigned char *key, xxtea_long key_len)\n{\n    unsigned char *tmp = (unsigned char *)malloc(16);\n    memcpy(tmp, key, key_len);\n    memset(tmp + key_len, '\\0', 16 - key_len);\n    return tmp;\n}\n\nstatic xxtea_long *xxtea_to_long_array(unsigned char *data, xxtea_long len, int include_length, xxtea_long *ret_len) {\n    xxtea_long i, n, *result;\n    \n    n = len >> 2;\n    n = (((len & 3) == 0) ? n : n + 1);\n    if (include_length) {\n        result = (xxtea_long *)malloc((n + 1) << 2);\n        result[n] = len;\n        *ret_len = n + 1;\n    } else {\n        result = (xxtea_long *)malloc(n << 2);\n        *ret_len = n;\n    }\n    memset(result, 0, n << 2);\n    for (i = 0; i < len; i++) {\n        result[i >> 2] |= (xxtea_long)data[i] << ((i & 3) << 3);\n    }\n    \n    return result;\n}\n\nstatic unsigned char *xxtea_to_byte_array(xxtea_long *data, xxtea_long len, int include_length, xxtea_long *ret_len) {\n    xxtea_long i, n, m;\n    unsigned char *result;\n    \n    n = len << 2;\n    if (include_length) {\n        m = data[len - 1];\n        if ((m < n - 7) || (m > n - 4)) return NULL;\n        n = m;\n    }\n    result = (unsigned char *)malloc(n + 1);\n    for (i = 0; i < n; i++) {\n        result[i] = (unsigned char)((data[i >> 2] >> ((i & 3) << 3)) & 0xff);\n    }\n    result[n] = '\\0';\n    *ret_len = n;\n    \n    return result;\n}\n\nstatic unsigned char *do_xxtea_encrypt(unsigned char *data, xxtea_long len, unsigned char *key, xxtea_long *ret_len) {\n    unsigned char *result;\n    xxtea_long *v, *k, v_len, k_len;\n    \n    v = xxtea_to_long_array(data, len, 1, &v_len);\n    k = xxtea_to_long_array(key, 16, 0, &k_len);\n    xxtea_long_encrypt(v, v_len, k);\n    result = xxtea_to_byte_array(v, v_len, 0, ret_len);\n    free(v);\n    free(k);\n    \n    return result;\n}\n\nstatic unsigned char *do_xxtea_decrypt(unsigned char *data, xxtea_long len, unsigned char *key, xxtea_long *ret_len) {\n    unsigned char *result;\n    xxtea_long *v, *k, v_len, k_len;\n    \n    v = xxtea_to_long_array(data, len, 0, &v_len);\n    k = xxtea_to_long_array(key, 16, 0, &k_len);\n    xxtea_long_decrypt(v, v_len, k);\n    result = xxtea_to_byte_array(v, v_len, 1, ret_len);\n    free(v);\n    free(k);\n    \n    return result;\n}\n\nunsigned char *xxtea_encrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length)\n{\n    unsigned char *result;\n    \n    *ret_length = 0;\n    \n    if (key_len < 16) {\n        unsigned char *key2 = fix_key_length(key, key_len);\n        result = do_xxtea_encrypt(data, data_len, key2, ret_length);\n        free(key2);\n    }\n    else\n    {\n        result = do_xxtea_encrypt(data, data_len, key, ret_length);\n    }\n    \n    return result;\n}\n\nunsigned char *xxtea_decrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length)\n{\n    unsigned char *result;\n    \n    *ret_length = 0;\n    \n    if (key_len < 16) {\n        unsigned char *key2 = fix_key_length(key, key_len);\n        result = do_xxtea_decrypt(data, data_len, key2, ret_length);\n        free(key2);\n    }\n    else\n    {\n        result = do_xxtea_decrypt(data, data_len, key, ret_length);\n    }\n    \n    return result;\n}\n```\n\n### 总结下\n---\n\n* 对比python版本，应该能看出来C++的实现写的挺复杂的\n* python这门语言的抽象能力要比C++高出很多，C++需要关注很多低层次（low level）的细节问题，python作为一门脚本语言则屏蔽了这些需要考虑的细节，极大的减轻了使用者**心智上的负担**\n* 正是因为上面的原因，C++的使用示例写起来也挺麻烦的，也就没写了:)\n\n\n","source":"_posts/C++版本的XXTEA实现.md","raw":"---\ntitle: C++版本的XXTEA实现\ncategories: C++\ndate: 2019-05-08\n---\n\n### 算法实现\n---\n\n头文件：xxtea.h\n```\n#ifndef XXTEA_H\n#define XXTEA_H\n\n#include <stddef.h> /* for size_t & NULL declarations */\n\n#if defined(_MSC_VER)\n\ntypedef unsigned __int32 xxtea_long;\n\n#else\n\n#if defined(__FreeBSD__) && __FreeBSD__ < 5\n/* FreeBSD 4 doesn't have stdint.h file */\n#include <inttypes.h>\n#else\n#include <stdint.h>\n#endif\n\ntypedef uint32_t xxtea_long;\n\n#endif /* end of if defined(_MSC_VER) */\n\n#define XXTEA_MX (z >> 5 ^ y << 2) + (y >> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z)\n#define XXTEA_DELTA 0x9e3779b9\n\nunsigned char *xxtea_encrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length);\nunsigned char *xxtea_decrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length);\n\n#endif\n```\n\n源文件：xxtea.cpp\n```\n#include \"xxtea.h\"\n#include <memory.h>\n#include <stdlib.h>\n\nstatic void xxtea_long_encrypt(xxtea_long *v, xxtea_long len, xxtea_long *k)\n{\n    xxtea_long n = len - 1;\n    xxtea_long z = v[n], y = v[0], p, q = 6 + 52 / (n + 1), sum = 0, e;\n    if (n < 1) {\n        return;\n    }\n    while (0 < q--) {\n        sum += XXTEA_DELTA;\n        e = sum >> 2 & 3;\n        for (p = 0; p < n; p++) {\n            y = v[p + 1];\n            z = v[p] += XXTEA_MX;\n        }\n        y = v[0];\n        z = v[n] += XXTEA_MX;\n    }\n}\n\nstatic void xxtea_long_decrypt(xxtea_long *v, xxtea_long len, xxtea_long *k)\n{\n    xxtea_long n = len - 1;\n    xxtea_long z = v[n], y = v[0], p, q = 6 + 52 / (n + 1), sum = q * XXTEA_DELTA, e;\n    if (n < 1) {\n        return;\n    }\n    while (sum != 0) {\n        e = sum >> 2 & 3;\n        for (p = n; p > 0; p--) {\n            z = v[p - 1];\n            y = v[p] -= XXTEA_MX;\n        }\n        z = v[n];\n        y = v[0] -= XXTEA_MX;\n        sum -= XXTEA_DELTA;\n    }\n}\n\nstatic unsigned char *fix_key_length(unsigned char *key, xxtea_long key_len)\n{\n    unsigned char *tmp = (unsigned char *)malloc(16);\n    memcpy(tmp, key, key_len);\n    memset(tmp + key_len, '\\0', 16 - key_len);\n    return tmp;\n}\n\nstatic xxtea_long *xxtea_to_long_array(unsigned char *data, xxtea_long len, int include_length, xxtea_long *ret_len) {\n    xxtea_long i, n, *result;\n    \n    n = len >> 2;\n    n = (((len & 3) == 0) ? n : n + 1);\n    if (include_length) {\n        result = (xxtea_long *)malloc((n + 1) << 2);\n        result[n] = len;\n        *ret_len = n + 1;\n    } else {\n        result = (xxtea_long *)malloc(n << 2);\n        *ret_len = n;\n    }\n    memset(result, 0, n << 2);\n    for (i = 0; i < len; i++) {\n        result[i >> 2] |= (xxtea_long)data[i] << ((i & 3) << 3);\n    }\n    \n    return result;\n}\n\nstatic unsigned char *xxtea_to_byte_array(xxtea_long *data, xxtea_long len, int include_length, xxtea_long *ret_len) {\n    xxtea_long i, n, m;\n    unsigned char *result;\n    \n    n = len << 2;\n    if (include_length) {\n        m = data[len - 1];\n        if ((m < n - 7) || (m > n - 4)) return NULL;\n        n = m;\n    }\n    result = (unsigned char *)malloc(n + 1);\n    for (i = 0; i < n; i++) {\n        result[i] = (unsigned char)((data[i >> 2] >> ((i & 3) << 3)) & 0xff);\n    }\n    result[n] = '\\0';\n    *ret_len = n;\n    \n    return result;\n}\n\nstatic unsigned char *do_xxtea_encrypt(unsigned char *data, xxtea_long len, unsigned char *key, xxtea_long *ret_len) {\n    unsigned char *result;\n    xxtea_long *v, *k, v_len, k_len;\n    \n    v = xxtea_to_long_array(data, len, 1, &v_len);\n    k = xxtea_to_long_array(key, 16, 0, &k_len);\n    xxtea_long_encrypt(v, v_len, k);\n    result = xxtea_to_byte_array(v, v_len, 0, ret_len);\n    free(v);\n    free(k);\n    \n    return result;\n}\n\nstatic unsigned char *do_xxtea_decrypt(unsigned char *data, xxtea_long len, unsigned char *key, xxtea_long *ret_len) {\n    unsigned char *result;\n    xxtea_long *v, *k, v_len, k_len;\n    \n    v = xxtea_to_long_array(data, len, 0, &v_len);\n    k = xxtea_to_long_array(key, 16, 0, &k_len);\n    xxtea_long_decrypt(v, v_len, k);\n    result = xxtea_to_byte_array(v, v_len, 1, ret_len);\n    free(v);\n    free(k);\n    \n    return result;\n}\n\nunsigned char *xxtea_encrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length)\n{\n    unsigned char *result;\n    \n    *ret_length = 0;\n    \n    if (key_len < 16) {\n        unsigned char *key2 = fix_key_length(key, key_len);\n        result = do_xxtea_encrypt(data, data_len, key2, ret_length);\n        free(key2);\n    }\n    else\n    {\n        result = do_xxtea_encrypt(data, data_len, key, ret_length);\n    }\n    \n    return result;\n}\n\nunsigned char *xxtea_decrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length)\n{\n    unsigned char *result;\n    \n    *ret_length = 0;\n    \n    if (key_len < 16) {\n        unsigned char *key2 = fix_key_length(key, key_len);\n        result = do_xxtea_decrypt(data, data_len, key2, ret_length);\n        free(key2);\n    }\n    else\n    {\n        result = do_xxtea_decrypt(data, data_len, key, ret_length);\n    }\n    \n    return result;\n}\n```\n\n### 总结下\n---\n\n* 对比python版本，应该能看出来C++的实现写的挺复杂的\n* python这门语言的抽象能力要比C++高出很多，C++需要关注很多低层次（low level）的细节问题，python作为一门脚本语言则屏蔽了这些需要考虑的细节，极大的减轻了使用者**心智上的负担**\n* 正是因为上面的原因，C++的使用示例写起来也挺麻烦的，也就没写了:)\n\n\n","slug":"C++版本的XXTEA实现","published":1,"updated":"2019-05-08T03:13:22.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wux30004vsr7ty8ra5yc","content":"<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><hr>\n<p>头文件：xxtea.h<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef XXTEA_H</span><br><span class=\"line\">#define XXTEA_H</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;stddef.h&gt; /* for size_t &amp; NULL declarations */</span><br><span class=\"line\"></span><br><span class=\"line\">#if defined(_MSC_VER)</span><br><span class=\"line\"></span><br><span class=\"line\">typedef unsigned __int32 xxtea_long;</span><br><span class=\"line\"></span><br><span class=\"line\">#else</span><br><span class=\"line\"></span><br><span class=\"line\">#if defined(__FreeBSD__) &amp;&amp; __FreeBSD__ &lt; 5</span><br><span class=\"line\">/* FreeBSD 4 doesn&apos;t have stdint.h file */</span><br><span class=\"line\">#include &lt;inttypes.h&gt;</span><br><span class=\"line\">#else</span><br><span class=\"line\">#include &lt;stdint.h&gt;</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">typedef uint32_t xxtea_long;</span><br><span class=\"line\"></span><br><span class=\"line\">#endif /* end of if defined(_MSC_VER) */</span><br><span class=\"line\"></span><br><span class=\"line\">#define XXTEA_MX (z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[p &amp; 3 ^ e] ^ z)</span><br><span class=\"line\">#define XXTEA_DELTA 0x9e3779b9</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char *xxtea_encrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length);</span><br><span class=\"line\">unsigned char *xxtea_decrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length);</span><br><span class=\"line\"></span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure></p>\n<p>源文件：xxtea.cpp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;xxtea.h&quot;</span><br><span class=\"line\">#include &lt;memory.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">static void xxtea_long_encrypt(xxtea_long *v, xxtea_long len, xxtea_long *k)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    xxtea_long n = len - 1;</span><br><span class=\"line\">    xxtea_long z = v[n], y = v[0], p, q = 6 + 52 / (n + 1), sum = 0, e;</span><br><span class=\"line\">    if (n &lt; 1) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while (0 &lt; q--) &#123;</span><br><span class=\"line\">        sum += XXTEA_DELTA;</span><br><span class=\"line\">        e = sum &gt;&gt; 2 &amp; 3;</span><br><span class=\"line\">        for (p = 0; p &lt; n; p++) &#123;</span><br><span class=\"line\">            y = v[p + 1];</span><br><span class=\"line\">            z = v[p] += XXTEA_MX;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        y = v[0];</span><br><span class=\"line\">        z = v[n] += XXTEA_MX;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static void xxtea_long_decrypt(xxtea_long *v, xxtea_long len, xxtea_long *k)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    xxtea_long n = len - 1;</span><br><span class=\"line\">    xxtea_long z = v[n], y = v[0], p, q = 6 + 52 / (n + 1), sum = q * XXTEA_DELTA, e;</span><br><span class=\"line\">    if (n &lt; 1) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while (sum != 0) &#123;</span><br><span class=\"line\">        e = sum &gt;&gt; 2 &amp; 3;</span><br><span class=\"line\">        for (p = n; p &gt; 0; p--) &#123;</span><br><span class=\"line\">            z = v[p - 1];</span><br><span class=\"line\">            y = v[p] -= XXTEA_MX;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        z = v[n];</span><br><span class=\"line\">        y = v[0] -= XXTEA_MX;</span><br><span class=\"line\">        sum -= XXTEA_DELTA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static unsigned char *fix_key_length(unsigned char *key, xxtea_long key_len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unsigned char *tmp = (unsigned char *)malloc(16);</span><br><span class=\"line\">    memcpy(tmp, key, key_len);</span><br><span class=\"line\">    memset(tmp + key_len, &apos;\\0&apos;, 16 - key_len);</span><br><span class=\"line\">    return tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static xxtea_long *xxtea_to_long_array(unsigned char *data, xxtea_long len, int include_length, xxtea_long *ret_len) &#123;</span><br><span class=\"line\">    xxtea_long i, n, *result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    n = len &gt;&gt; 2;</span><br><span class=\"line\">    n = (((len &amp; 3) == 0) ? n : n + 1);</span><br><span class=\"line\">    if (include_length) &#123;</span><br><span class=\"line\">        result = (xxtea_long *)malloc((n + 1) &lt;&lt; 2);</span><br><span class=\"line\">        result[n] = len;</span><br><span class=\"line\">        *ret_len = n + 1;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        result = (xxtea_long *)malloc(n &lt;&lt; 2);</span><br><span class=\"line\">        *ret_len = n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    memset(result, 0, n &lt;&lt; 2);</span><br><span class=\"line\">    for (i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">        result[i &gt;&gt; 2] |= (xxtea_long)data[i] &lt;&lt; ((i &amp; 3) &lt;&lt; 3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static unsigned char *xxtea_to_byte_array(xxtea_long *data, xxtea_long len, int include_length, xxtea_long *ret_len) &#123;</span><br><span class=\"line\">    xxtea_long i, n, m;</span><br><span class=\"line\">    unsigned char *result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    n = len &lt;&lt; 2;</span><br><span class=\"line\">    if (include_length) &#123;</span><br><span class=\"line\">        m = data[len - 1];</span><br><span class=\"line\">        if ((m &lt; n - 7) || (m &gt; n - 4)) return NULL;</span><br><span class=\"line\">        n = m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result = (unsigned char *)malloc(n + 1);</span><br><span class=\"line\">    for (i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">        result[i] = (unsigned char)((data[i &gt;&gt; 2] &gt;&gt; ((i &amp; 3) &lt;&lt; 3)) &amp; 0xff);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result[n] = &apos;\\0&apos;;</span><br><span class=\"line\">    *ret_len = n;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static unsigned char *do_xxtea_encrypt(unsigned char *data, xxtea_long len, unsigned char *key, xxtea_long *ret_len) &#123;</span><br><span class=\"line\">    unsigned char *result;</span><br><span class=\"line\">    xxtea_long *v, *k, v_len, k_len;</span><br><span class=\"line\">    </span><br><span class=\"line\">    v = xxtea_to_long_array(data, len, 1, &amp;v_len);</span><br><span class=\"line\">    k = xxtea_to_long_array(key, 16, 0, &amp;k_len);</span><br><span class=\"line\">    xxtea_long_encrypt(v, v_len, k);</span><br><span class=\"line\">    result = xxtea_to_byte_array(v, v_len, 0, ret_len);</span><br><span class=\"line\">    free(v);</span><br><span class=\"line\">    free(k);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static unsigned char *do_xxtea_decrypt(unsigned char *data, xxtea_long len, unsigned char *key, xxtea_long *ret_len) &#123;</span><br><span class=\"line\">    unsigned char *result;</span><br><span class=\"line\">    xxtea_long *v, *k, v_len, k_len;</span><br><span class=\"line\">    </span><br><span class=\"line\">    v = xxtea_to_long_array(data, len, 0, &amp;v_len);</span><br><span class=\"line\">    k = xxtea_to_long_array(key, 16, 0, &amp;k_len);</span><br><span class=\"line\">    xxtea_long_decrypt(v, v_len, k);</span><br><span class=\"line\">    result = xxtea_to_byte_array(v, v_len, 1, ret_len);</span><br><span class=\"line\">    free(v);</span><br><span class=\"line\">    free(k);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char *xxtea_encrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unsigned char *result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    *ret_length = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (key_len &lt; 16) &#123;</span><br><span class=\"line\">        unsigned char *key2 = fix_key_length(key, key_len);</span><br><span class=\"line\">        result = do_xxtea_encrypt(data, data_len, key2, ret_length);</span><br><span class=\"line\">        free(key2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        result = do_xxtea_encrypt(data, data_len, key, ret_length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char *xxtea_decrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unsigned char *result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    *ret_length = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (key_len &lt; 16) &#123;</span><br><span class=\"line\">        unsigned char *key2 = fix_key_length(key, key_len);</span><br><span class=\"line\">        result = do_xxtea_decrypt(data, data_len, key2, ret_length);</span><br><span class=\"line\">        free(key2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        result = do_xxtea_decrypt(data, data_len, key, ret_length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结下\"><a href=\"#总结下\" class=\"headerlink\" title=\"总结下\"></a>总结下</h3><hr>\n<ul>\n<li>对比python版本，应该能看出来C++的实现写的挺复杂的</li>\n<li>python这门语言的抽象能力要比C++高出很多，C++需要关注很多低层次（low level）的细节问题，python作为一门脚本语言则屏蔽了这些需要考虑的细节，极大的减轻了使用者<strong>心智上的负担</strong></li>\n<li>正是因为上面的原因，C++的使用示例写起来也挺麻烦的，也就没写了:)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><hr>\n<p>头文件：xxtea.h<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef XXTEA_H</span><br><span class=\"line\">#define XXTEA_H</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;stddef.h&gt; /* for size_t &amp; NULL declarations */</span><br><span class=\"line\"></span><br><span class=\"line\">#if defined(_MSC_VER)</span><br><span class=\"line\"></span><br><span class=\"line\">typedef unsigned __int32 xxtea_long;</span><br><span class=\"line\"></span><br><span class=\"line\">#else</span><br><span class=\"line\"></span><br><span class=\"line\">#if defined(__FreeBSD__) &amp;&amp; __FreeBSD__ &lt; 5</span><br><span class=\"line\">/* FreeBSD 4 doesn&apos;t have stdint.h file */</span><br><span class=\"line\">#include &lt;inttypes.h&gt;</span><br><span class=\"line\">#else</span><br><span class=\"line\">#include &lt;stdint.h&gt;</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">typedef uint32_t xxtea_long;</span><br><span class=\"line\"></span><br><span class=\"line\">#endif /* end of if defined(_MSC_VER) */</span><br><span class=\"line\"></span><br><span class=\"line\">#define XXTEA_MX (z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[p &amp; 3 ^ e] ^ z)</span><br><span class=\"line\">#define XXTEA_DELTA 0x9e3779b9</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char *xxtea_encrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length);</span><br><span class=\"line\">unsigned char *xxtea_decrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length);</span><br><span class=\"line\"></span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure></p>\n<p>源文件：xxtea.cpp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;xxtea.h&quot;</span><br><span class=\"line\">#include &lt;memory.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">static void xxtea_long_encrypt(xxtea_long *v, xxtea_long len, xxtea_long *k)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    xxtea_long n = len - 1;</span><br><span class=\"line\">    xxtea_long z = v[n], y = v[0], p, q = 6 + 52 / (n + 1), sum = 0, e;</span><br><span class=\"line\">    if (n &lt; 1) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while (0 &lt; q--) &#123;</span><br><span class=\"line\">        sum += XXTEA_DELTA;</span><br><span class=\"line\">        e = sum &gt;&gt; 2 &amp; 3;</span><br><span class=\"line\">        for (p = 0; p &lt; n; p++) &#123;</span><br><span class=\"line\">            y = v[p + 1];</span><br><span class=\"line\">            z = v[p] += XXTEA_MX;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        y = v[0];</span><br><span class=\"line\">        z = v[n] += XXTEA_MX;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static void xxtea_long_decrypt(xxtea_long *v, xxtea_long len, xxtea_long *k)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    xxtea_long n = len - 1;</span><br><span class=\"line\">    xxtea_long z = v[n], y = v[0], p, q = 6 + 52 / (n + 1), sum = q * XXTEA_DELTA, e;</span><br><span class=\"line\">    if (n &lt; 1) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while (sum != 0) &#123;</span><br><span class=\"line\">        e = sum &gt;&gt; 2 &amp; 3;</span><br><span class=\"line\">        for (p = n; p &gt; 0; p--) &#123;</span><br><span class=\"line\">            z = v[p - 1];</span><br><span class=\"line\">            y = v[p] -= XXTEA_MX;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        z = v[n];</span><br><span class=\"line\">        y = v[0] -= XXTEA_MX;</span><br><span class=\"line\">        sum -= XXTEA_DELTA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static unsigned char *fix_key_length(unsigned char *key, xxtea_long key_len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unsigned char *tmp = (unsigned char *)malloc(16);</span><br><span class=\"line\">    memcpy(tmp, key, key_len);</span><br><span class=\"line\">    memset(tmp + key_len, &apos;\\0&apos;, 16 - key_len);</span><br><span class=\"line\">    return tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static xxtea_long *xxtea_to_long_array(unsigned char *data, xxtea_long len, int include_length, xxtea_long *ret_len) &#123;</span><br><span class=\"line\">    xxtea_long i, n, *result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    n = len &gt;&gt; 2;</span><br><span class=\"line\">    n = (((len &amp; 3) == 0) ? n : n + 1);</span><br><span class=\"line\">    if (include_length) &#123;</span><br><span class=\"line\">        result = (xxtea_long *)malloc((n + 1) &lt;&lt; 2);</span><br><span class=\"line\">        result[n] = len;</span><br><span class=\"line\">        *ret_len = n + 1;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        result = (xxtea_long *)malloc(n &lt;&lt; 2);</span><br><span class=\"line\">        *ret_len = n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    memset(result, 0, n &lt;&lt; 2);</span><br><span class=\"line\">    for (i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">        result[i &gt;&gt; 2] |= (xxtea_long)data[i] &lt;&lt; ((i &amp; 3) &lt;&lt; 3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static unsigned char *xxtea_to_byte_array(xxtea_long *data, xxtea_long len, int include_length, xxtea_long *ret_len) &#123;</span><br><span class=\"line\">    xxtea_long i, n, m;</span><br><span class=\"line\">    unsigned char *result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    n = len &lt;&lt; 2;</span><br><span class=\"line\">    if (include_length) &#123;</span><br><span class=\"line\">        m = data[len - 1];</span><br><span class=\"line\">        if ((m &lt; n - 7) || (m &gt; n - 4)) return NULL;</span><br><span class=\"line\">        n = m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result = (unsigned char *)malloc(n + 1);</span><br><span class=\"line\">    for (i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">        result[i] = (unsigned char)((data[i &gt;&gt; 2] &gt;&gt; ((i &amp; 3) &lt;&lt; 3)) &amp; 0xff);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    result[n] = &apos;\\0&apos;;</span><br><span class=\"line\">    *ret_len = n;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static unsigned char *do_xxtea_encrypt(unsigned char *data, xxtea_long len, unsigned char *key, xxtea_long *ret_len) &#123;</span><br><span class=\"line\">    unsigned char *result;</span><br><span class=\"line\">    xxtea_long *v, *k, v_len, k_len;</span><br><span class=\"line\">    </span><br><span class=\"line\">    v = xxtea_to_long_array(data, len, 1, &amp;v_len);</span><br><span class=\"line\">    k = xxtea_to_long_array(key, 16, 0, &amp;k_len);</span><br><span class=\"line\">    xxtea_long_encrypt(v, v_len, k);</span><br><span class=\"line\">    result = xxtea_to_byte_array(v, v_len, 0, ret_len);</span><br><span class=\"line\">    free(v);</span><br><span class=\"line\">    free(k);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static unsigned char *do_xxtea_decrypt(unsigned char *data, xxtea_long len, unsigned char *key, xxtea_long *ret_len) &#123;</span><br><span class=\"line\">    unsigned char *result;</span><br><span class=\"line\">    xxtea_long *v, *k, v_len, k_len;</span><br><span class=\"line\">    </span><br><span class=\"line\">    v = xxtea_to_long_array(data, len, 0, &amp;v_len);</span><br><span class=\"line\">    k = xxtea_to_long_array(key, 16, 0, &amp;k_len);</span><br><span class=\"line\">    xxtea_long_decrypt(v, v_len, k);</span><br><span class=\"line\">    result = xxtea_to_byte_array(v, v_len, 1, ret_len);</span><br><span class=\"line\">    free(v);</span><br><span class=\"line\">    free(k);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char *xxtea_encrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unsigned char *result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    *ret_length = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (key_len &lt; 16) &#123;</span><br><span class=\"line\">        unsigned char *key2 = fix_key_length(key, key_len);</span><br><span class=\"line\">        result = do_xxtea_encrypt(data, data_len, key2, ret_length);</span><br><span class=\"line\">        free(key2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        result = do_xxtea_encrypt(data, data_len, key, ret_length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char *xxtea_decrypt(unsigned char *data, xxtea_long data_len, unsigned char *key, xxtea_long key_len, xxtea_long *ret_length)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unsigned char *result;</span><br><span class=\"line\">    </span><br><span class=\"line\">    *ret_length = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (key_len &lt; 16) &#123;</span><br><span class=\"line\">        unsigned char *key2 = fix_key_length(key, key_len);</span><br><span class=\"line\">        result = do_xxtea_decrypt(data, data_len, key2, ret_length);</span><br><span class=\"line\">        free(key2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        result = do_xxtea_decrypt(data, data_len, key, ret_length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结下\"><a href=\"#总结下\" class=\"headerlink\" title=\"总结下\"></a>总结下</h3><hr>\n<ul>\n<li>对比python版本，应该能看出来C++的实现写的挺复杂的</li>\n<li>python这门语言的抽象能力要比C++高出很多，C++需要关注很多低层次（low level）的细节问题，python作为一门脚本语言则屏蔽了这些需要考虑的细节，极大的减轻了使用者<strong>心智上的负担</strong></li>\n<li>正是因为上面的原因，C++的使用示例写起来也挺麻烦的，也就没写了:)</li>\n</ul>\n"},{"title":"Linux常用命令","date":"2019-02-20T16:00:00.000Z","_content":"\n### 从一台Linux远程机器登录到另一台Linux远程机器\n---\n* 完整的命令格式\n`ssh [-l login_name] [-p port] [user@]hostname `\n* 最常用的形式\n`ssh root@192.168.0.1`\n* 退出登录\n`exit`\n\n### 从一台Linux远程机器拷贝文件到另一台Linux远程机器\n---\n这里使用scp命令，它是secure copy的缩写，中文名：安全拷贝，关于这个命令的更详细的介绍[**点这里**](https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/scp.html)\n#### 复制到远程\n* 复制文件\n`scp local_file remote_username@remote_ip:remote_file`\n* 复制文件到目录\n`scp local_file remote_username@remote_ip:remote_folder`\n* 复制目录\n`scp -r local_folder remote_username@remote_ip:remote_folder`\n\n#### 从远程复制\n从远程复制到本地的scp命令与上面的命令一样，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。\n* 复制文件\n`scp root@10.6.159.147:/opt/soft/demo.tar /opt/soft/`\n* 复制目录\n`scp -r root@10.6.159.147:/opt/soft/test /opt/soft/`\n\n### 移动/重命名文件\n---\n`mv [options] SourceFile/SourceDirectory TargetFile/TargetDirectory`\n* 重命名文件\n`mv test.log test1.txt`\n* 移动当前目录下的所有文件或目录到上层目录\n`mv * ../`\n\n### 删除文件/文件夹命令\n---\n`rm [options] file/directory`\n* 删除文件\n`rm testFile.txt`\n* 删除目录：-r表示递归删除，删除目录时必须要加上这个选项\n`rm -r testDirectory`","source":"_posts/Linux常用命令.md","raw":"---\ntitle: Linux常用命令\ncategories: Linux\ndate: 2019-02-21\n---\n\n### 从一台Linux远程机器登录到另一台Linux远程机器\n---\n* 完整的命令格式\n`ssh [-l login_name] [-p port] [user@]hostname `\n* 最常用的形式\n`ssh root@192.168.0.1`\n* 退出登录\n`exit`\n\n### 从一台Linux远程机器拷贝文件到另一台Linux远程机器\n---\n这里使用scp命令，它是secure copy的缩写，中文名：安全拷贝，关于这个命令的更详细的介绍[**点这里**](https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/scp.html)\n#### 复制到远程\n* 复制文件\n`scp local_file remote_username@remote_ip:remote_file`\n* 复制文件到目录\n`scp local_file remote_username@remote_ip:remote_folder`\n* 复制目录\n`scp -r local_folder remote_username@remote_ip:remote_folder`\n\n#### 从远程复制\n从远程复制到本地的scp命令与上面的命令一样，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。\n* 复制文件\n`scp root@10.6.159.147:/opt/soft/demo.tar /opt/soft/`\n* 复制目录\n`scp -r root@10.6.159.147:/opt/soft/test /opt/soft/`\n\n### 移动/重命名文件\n---\n`mv [options] SourceFile/SourceDirectory TargetFile/TargetDirectory`\n* 重命名文件\n`mv test.log test1.txt`\n* 移动当前目录下的所有文件或目录到上层目录\n`mv * ../`\n\n### 删除文件/文件夹命令\n---\n`rm [options] file/directory`\n* 删除文件\n`rm testFile.txt`\n* 删除目录：-r表示递归删除，删除目录时必须要加上这个选项\n`rm -r testDirectory`","slug":"Linux常用命令","published":1,"updated":"2019-04-25T03:08:06.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wux40005vsr7mgjvvl4m","content":"<h3 id=\"从一台Linux远程机器登录到另一台Linux远程机器\"><a href=\"#从一台Linux远程机器登录到另一台Linux远程机器\" class=\"headerlink\" title=\"从一台Linux远程机器登录到另一台Linux远程机器\"></a>从一台Linux远程机器登录到另一台Linux远程机器</h3><hr>\n<ul>\n<li>完整的命令格式<br><code>ssh [-l login_name] [-p port] [user@]hostname</code></li>\n<li>最常用的形式<br><code>ssh root@192.168.0.1</code></li>\n<li>退出登录<br><code>exit</code></li>\n</ul>\n<h3 id=\"从一台Linux远程机器拷贝文件到另一台Linux远程机器\"><a href=\"#从一台Linux远程机器拷贝文件到另一台Linux远程机器\" class=\"headerlink\" title=\"从一台Linux远程机器拷贝文件到另一台Linux远程机器\"></a>从一台Linux远程机器拷贝文件到另一台Linux远程机器</h3><hr>\n<p>这里使用scp命令，它是secure copy的缩写，中文名：安全拷贝，关于这个命令的更详细的介绍<a href=\"https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/scp.html\" target=\"_blank\" rel=\"noopener\"><strong>点这里</strong></a></p>\n<h4 id=\"复制到远程\"><a href=\"#复制到远程\" class=\"headerlink\" title=\"复制到远程\"></a>复制到远程</h4><ul>\n<li>复制文件<br><code>scp local_file remote_username@remote_ip:remote_file</code></li>\n<li>复制文件到目录<br><code>scp local_file remote_username@remote_ip:remote_folder</code></li>\n<li>复制目录<br><code>scp -r local_folder remote_username@remote_ip:remote_folder</code></li>\n</ul>\n<h4 id=\"从远程复制\"><a href=\"#从远程复制\" class=\"headerlink\" title=\"从远程复制\"></a>从远程复制</h4><p>从远程复制到本地的scp命令与上面的命令一样，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。</p>\n<ul>\n<li>复制文件<br><code>scp root@10.6.159.147:/opt/soft/demo.tar /opt/soft/</code></li>\n<li>复制目录<br><code>scp -r root@10.6.159.147:/opt/soft/test /opt/soft/</code></li>\n</ul>\n<h3 id=\"移动-重命名文件\"><a href=\"#移动-重命名文件\" class=\"headerlink\" title=\"移动/重命名文件\"></a>移动/重命名文件</h3><hr>\n<p><code>mv [options] SourceFile/SourceDirectory TargetFile/TargetDirectory</code></p>\n<ul>\n<li>重命名文件<br><code>mv test.log test1.txt</code></li>\n<li>移动当前目录下的所有文件或目录到上层目录<br><code>mv * ../</code></li>\n</ul>\n<h3 id=\"删除文件-文件夹命令\"><a href=\"#删除文件-文件夹命令\" class=\"headerlink\" title=\"删除文件/文件夹命令\"></a>删除文件/文件夹命令</h3><hr>\n<p><code>rm [options] file/directory</code></p>\n<ul>\n<li>删除文件<br><code>rm testFile.txt</code></li>\n<li>删除目录：-r表示递归删除，删除目录时必须要加上这个选项<br><code>rm -r testDirectory</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"从一台Linux远程机器登录到另一台Linux远程机器\"><a href=\"#从一台Linux远程机器登录到另一台Linux远程机器\" class=\"headerlink\" title=\"从一台Linux远程机器登录到另一台Linux远程机器\"></a>从一台Linux远程机器登录到另一台Linux远程机器</h3><hr>\n<ul>\n<li>完整的命令格式<br><code>ssh [-l login_name] [-p port] [user@]hostname</code></li>\n<li>最常用的形式<br><code>ssh root@192.168.0.1</code></li>\n<li>退出登录<br><code>exit</code></li>\n</ul>\n<h3 id=\"从一台Linux远程机器拷贝文件到另一台Linux远程机器\"><a href=\"#从一台Linux远程机器拷贝文件到另一台Linux远程机器\" class=\"headerlink\" title=\"从一台Linux远程机器拷贝文件到另一台Linux远程机器\"></a>从一台Linux远程机器拷贝文件到另一台Linux远程机器</h3><hr>\n<p>这里使用scp命令，它是secure copy的缩写，中文名：安全拷贝，关于这个命令的更详细的介绍<a href=\"https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/scp.html\" target=\"_blank\" rel=\"noopener\"><strong>点这里</strong></a></p>\n<h4 id=\"复制到远程\"><a href=\"#复制到远程\" class=\"headerlink\" title=\"复制到远程\"></a>复制到远程</h4><ul>\n<li>复制文件<br><code>scp local_file remote_username@remote_ip:remote_file</code></li>\n<li>复制文件到目录<br><code>scp local_file remote_username@remote_ip:remote_folder</code></li>\n<li>复制目录<br><code>scp -r local_folder remote_username@remote_ip:remote_folder</code></li>\n</ul>\n<h4 id=\"从远程复制\"><a href=\"#从远程复制\" class=\"headerlink\" title=\"从远程复制\"></a>从远程复制</h4><p>从远程复制到本地的scp命令与上面的命令一样，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。</p>\n<ul>\n<li>复制文件<br><code>scp root@10.6.159.147:/opt/soft/demo.tar /opt/soft/</code></li>\n<li>复制目录<br><code>scp -r root@10.6.159.147:/opt/soft/test /opt/soft/</code></li>\n</ul>\n<h3 id=\"移动-重命名文件\"><a href=\"#移动-重命名文件\" class=\"headerlink\" title=\"移动/重命名文件\"></a>移动/重命名文件</h3><hr>\n<p><code>mv [options] SourceFile/SourceDirectory TargetFile/TargetDirectory</code></p>\n<ul>\n<li>重命名文件<br><code>mv test.log test1.txt</code></li>\n<li>移动当前目录下的所有文件或目录到上层目录<br><code>mv * ../</code></li>\n</ul>\n<h3 id=\"删除文件-文件夹命令\"><a href=\"#删除文件-文件夹命令\" class=\"headerlink\" title=\"删除文件/文件夹命令\"></a>删除文件/文件夹命令</h3><hr>\n<p><code>rm [options] file/directory</code></p>\n<ul>\n<li>删除文件<br><code>rm testFile.txt</code></li>\n<li>删除目录：-r表示递归删除，删除目录时必须要加上这个选项<br><code>rm -r testDirectory</code></li>\n</ul>\n"},{"title":"OOP中的继承","date":"2019-03-08T16:00:00.000Z","_content":"\n### 继承的好处\n---\n* 代码复用：继承父类以后，子类不需要再次编写相同的代码，却能获得和父类相同的行为和数据，多好！简直是空手套白狼，无本万利的事情嘛！另外，要知道维护一份代码与维护两份乃至好几份相同的代码，这两种感受简直天壤之别！\n* 定制、差异化：\n    * 覆盖父类原有行为：你还可以重写某些父类方法，使其名字虽然和父类的方法名一样，但是执行的内容却完全不同，是不是很神奇！\n    * 新增行为和数据：除了以上，你还可以增加父类从来没有的东西：可以是行为或者数据，以使子类在某些方面看上去，与父类完全不同，体现出真正的差异化！\n\n### “型态”为主，而不是“行为”\n---\n虽然继承确实能够带来**代码复用**的好处，但是通常来说，它却不是发挥**代码复用**功能的最佳方式,大量的实践证明最佳方式通常是**组合**\n\n这也不是说**继承**就毫无用武之地了，就像小标题表述的那样，现今面向对象程序设计中，继承并非以继承类别的“行为”为主，而是继承类别的“型态”，使得组件的类型一致，从而易于编写通用代码。\n\n### 继承往往容易被过度使用\n---\n现在要解决一个问题：\n* 问题很简单，可能几行代码就足够了。\n* 也可能稍微复杂，要写一个或几个方法来解决它。\n* 也可能相当复杂，可能需要概括一个抽象概念以写出一个类来处理。\n* 甚至问题的规模相当之大，需要数个类相互协作，而类与类之间可能还需要构成某种层次结构。\n\n针对不同规模的问题，作为一个合格的软件工程师，我们也要懂得如何选取不同口径的武器来解决它。而继承，在面向对象设计领域中算是一个重量级、大口径的武器了。所以，除非你确定这是一个复杂度相当大的问题，否则请不要轻易掏出**继承**这把大口径武器。\n\n### 滥用继承的危害\n---\n类层次结构演变的越深越宽，引发的问题就越致命。一个类越是在类层次结构中越深的地方，就越难理解、维护及修改。因为要理解一个，就需要理解其所有父类。例如，在子类中修改一个看似无害的虚函数，就可能会违背了众多父类中某个父类的假设，从而产生微妙又难以找到的bug。","source":"_posts/OOP中的继承.md","raw":"---\ntitle: OOP中的继承\ncategories: OOP\ndate: 2019-03-09\n---\n\n### 继承的好处\n---\n* 代码复用：继承父类以后，子类不需要再次编写相同的代码，却能获得和父类相同的行为和数据，多好！简直是空手套白狼，无本万利的事情嘛！另外，要知道维护一份代码与维护两份乃至好几份相同的代码，这两种感受简直天壤之别！\n* 定制、差异化：\n    * 覆盖父类原有行为：你还可以重写某些父类方法，使其名字虽然和父类的方法名一样，但是执行的内容却完全不同，是不是很神奇！\n    * 新增行为和数据：除了以上，你还可以增加父类从来没有的东西：可以是行为或者数据，以使子类在某些方面看上去，与父类完全不同，体现出真正的差异化！\n\n### “型态”为主，而不是“行为”\n---\n虽然继承确实能够带来**代码复用**的好处，但是通常来说，它却不是发挥**代码复用**功能的最佳方式,大量的实践证明最佳方式通常是**组合**\n\n这也不是说**继承**就毫无用武之地了，就像小标题表述的那样，现今面向对象程序设计中，继承并非以继承类别的“行为”为主，而是继承类别的“型态”，使得组件的类型一致，从而易于编写通用代码。\n\n### 继承往往容易被过度使用\n---\n现在要解决一个问题：\n* 问题很简单，可能几行代码就足够了。\n* 也可能稍微复杂，要写一个或几个方法来解决它。\n* 也可能相当复杂，可能需要概括一个抽象概念以写出一个类来处理。\n* 甚至问题的规模相当之大，需要数个类相互协作，而类与类之间可能还需要构成某种层次结构。\n\n针对不同规模的问题，作为一个合格的软件工程师，我们也要懂得如何选取不同口径的武器来解决它。而继承，在面向对象设计领域中算是一个重量级、大口径的武器了。所以，除非你确定这是一个复杂度相当大的问题，否则请不要轻易掏出**继承**这把大口径武器。\n\n### 滥用继承的危害\n---\n类层次结构演变的越深越宽，引发的问题就越致命。一个类越是在类层次结构中越深的地方，就越难理解、维护及修改。因为要理解一个，就需要理解其所有父类。例如，在子类中修改一个看似无害的虚函数，就可能会违背了众多父类中某个父类的假设，从而产生微妙又难以找到的bug。","slug":"OOP中的继承","published":1,"updated":"2019-04-25T02:54:25.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wux50006vsr7m32nko7u","content":"<h3 id=\"继承的好处\"><a href=\"#继承的好处\" class=\"headerlink\" title=\"继承的好处\"></a>继承的好处</h3><hr>\n<ul>\n<li>代码复用：继承父类以后，子类不需要再次编写相同的代码，却能获得和父类相同的行为和数据，多好！简直是空手套白狼，无本万利的事情嘛！另外，要知道维护一份代码与维护两份乃至好几份相同的代码，这两种感受简直天壤之别！</li>\n<li>定制、差异化：<ul>\n<li>覆盖父类原有行为：你还可以重写某些父类方法，使其名字虽然和父类的方法名一样，但是执行的内容却完全不同，是不是很神奇！</li>\n<li>新增行为和数据：除了以上，你还可以增加父类从来没有的东西：可以是行为或者数据，以使子类在某些方面看上去，与父类完全不同，体现出真正的差异化！</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"“型态”为主，而不是“行为”\"><a href=\"#“型态”为主，而不是“行为”\" class=\"headerlink\" title=\"“型态”为主，而不是“行为”\"></a>“型态”为主，而不是“行为”</h3><hr>\n<p>虽然继承确实能够带来<strong>代码复用</strong>的好处，但是通常来说，它却不是发挥<strong>代码复用</strong>功能的最佳方式,大量的实践证明最佳方式通常是<strong>组合</strong></p>\n<p>这也不是说<strong>继承</strong>就毫无用武之地了，就像小标题表述的那样，现今面向对象程序设计中，继承并非以继承类别的“行为”为主，而是继承类别的“型态”，使得组件的类型一致，从而易于编写通用代码。</p>\n<h3 id=\"继承往往容易被过度使用\"><a href=\"#继承往往容易被过度使用\" class=\"headerlink\" title=\"继承往往容易被过度使用\"></a>继承往往容易被过度使用</h3><hr>\n<p>现在要解决一个问题：</p>\n<ul>\n<li>问题很简单，可能几行代码就足够了。</li>\n<li>也可能稍微复杂，要写一个或几个方法来解决它。</li>\n<li>也可能相当复杂，可能需要概括一个抽象概念以写出一个类来处理。</li>\n<li>甚至问题的规模相当之大，需要数个类相互协作，而类与类之间可能还需要构成某种层次结构。</li>\n</ul>\n<p>针对不同规模的问题，作为一个合格的软件工程师，我们也要懂得如何选取不同口径的武器来解决它。而继承，在面向对象设计领域中算是一个重量级、大口径的武器了。所以，除非你确定这是一个复杂度相当大的问题，否则请不要轻易掏出<strong>继承</strong>这把大口径武器。</p>\n<h3 id=\"滥用继承的危害\"><a href=\"#滥用继承的危害\" class=\"headerlink\" title=\"滥用继承的危害\"></a>滥用继承的危害</h3><hr>\n<p>类层次结构演变的越深越宽，引发的问题就越致命。一个类越是在类层次结构中越深的地方，就越难理解、维护及修改。因为要理解一个，就需要理解其所有父类。例如，在子类中修改一个看似无害的虚函数，就可能会违背了众多父类中某个父类的假设，从而产生微妙又难以找到的bug。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"继承的好处\"><a href=\"#继承的好处\" class=\"headerlink\" title=\"继承的好处\"></a>继承的好处</h3><hr>\n<ul>\n<li>代码复用：继承父类以后，子类不需要再次编写相同的代码，却能获得和父类相同的行为和数据，多好！简直是空手套白狼，无本万利的事情嘛！另外，要知道维护一份代码与维护两份乃至好几份相同的代码，这两种感受简直天壤之别！</li>\n<li>定制、差异化：<ul>\n<li>覆盖父类原有行为：你还可以重写某些父类方法，使其名字虽然和父类的方法名一样，但是执行的内容却完全不同，是不是很神奇！</li>\n<li>新增行为和数据：除了以上，你还可以增加父类从来没有的东西：可以是行为或者数据，以使子类在某些方面看上去，与父类完全不同，体现出真正的差异化！</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"“型态”为主，而不是“行为”\"><a href=\"#“型态”为主，而不是“行为”\" class=\"headerlink\" title=\"“型态”为主，而不是“行为”\"></a>“型态”为主，而不是“行为”</h3><hr>\n<p>虽然继承确实能够带来<strong>代码复用</strong>的好处，但是通常来说，它却不是发挥<strong>代码复用</strong>功能的最佳方式,大量的实践证明最佳方式通常是<strong>组合</strong></p>\n<p>这也不是说<strong>继承</strong>就毫无用武之地了，就像小标题表述的那样，现今面向对象程序设计中，继承并非以继承类别的“行为”为主，而是继承类别的“型态”，使得组件的类型一致，从而易于编写通用代码。</p>\n<h3 id=\"继承往往容易被过度使用\"><a href=\"#继承往往容易被过度使用\" class=\"headerlink\" title=\"继承往往容易被过度使用\"></a>继承往往容易被过度使用</h3><hr>\n<p>现在要解决一个问题：</p>\n<ul>\n<li>问题很简单，可能几行代码就足够了。</li>\n<li>也可能稍微复杂，要写一个或几个方法来解决它。</li>\n<li>也可能相当复杂，可能需要概括一个抽象概念以写出一个类来处理。</li>\n<li>甚至问题的规模相当之大，需要数个类相互协作，而类与类之间可能还需要构成某种层次结构。</li>\n</ul>\n<p>针对不同规模的问题，作为一个合格的软件工程师，我们也要懂得如何选取不同口径的武器来解决它。而继承，在面向对象设计领域中算是一个重量级、大口径的武器了。所以，除非你确定这是一个复杂度相当大的问题，否则请不要轻易掏出<strong>继承</strong>这把大口径武器。</p>\n<h3 id=\"滥用继承的危害\"><a href=\"#滥用继承的危害\" class=\"headerlink\" title=\"滥用继承的危害\"></a>滥用继承的危害</h3><hr>\n<p>类层次结构演变的越深越宽，引发的问题就越致命。一个类越是在类层次结构中越深的地方，就越难理解、维护及修改。因为要理解一个，就需要理解其所有父类。例如，在子类中修改一个看似无害的虚函数，就可能会违背了众多父类中某个父类的假设，从而产生微妙又难以找到的bug。</p>\n"},{"title":"invalid arguments in function 'lua_cocos2dx_ui_Text_setString'","date":"2019-05-22T16:00:00.000Z","_content":"\n### #1\n---\n\n项目中的代码类似这样：\n\n`text:setString(\"xxx\")`\n\n类似的报错：\n\n`invalid arguments in function 'bind_func_name'`\n\n之前我一直以为是调用对象为 nil 的缘故，我就使劲的找啊找，我想这不可能啊，难道cocos2dx-lua自身又有啥bug？\n\n我甚至在\n\n`text:setString(\"xxx\")`\n\n之前调用了\n\n`text:retain()`\n\n以确保垃圾回收机制没有把它干掉了，我甚至在它的各级父节点都调用 retain() ，奈何始终还是有问题。\n\n尼玛后来发现是参数的问题：\n\n`invalid arguments` \n\n我这四级英文真是白学了！\n\n### #2\n---\n\n上面那个报错，是lua绑定C++的代码在进行错误处理时打印的log。除了这个，应用程序的控制台也打印除了对定位问题有很大帮助的log\n\n`error:ccui.Text:setString argument #2 is 'table'; 'string' expected.`\n","source":"_posts/cocos2dx-lua的报错.md","raw":"---\ntitle: invalid arguments in function 'lua_cocos2dx_ui_Text_setString'\ncategories: cocos2dx-lua\ndate: 2019-05-23\n---\n\n### #1\n---\n\n项目中的代码类似这样：\n\n`text:setString(\"xxx\")`\n\n类似的报错：\n\n`invalid arguments in function 'bind_func_name'`\n\n之前我一直以为是调用对象为 nil 的缘故，我就使劲的找啊找，我想这不可能啊，难道cocos2dx-lua自身又有啥bug？\n\n我甚至在\n\n`text:setString(\"xxx\")`\n\n之前调用了\n\n`text:retain()`\n\n以确保垃圾回收机制没有把它干掉了，我甚至在它的各级父节点都调用 retain() ，奈何始终还是有问题。\n\n尼玛后来发现是参数的问题：\n\n`invalid arguments` \n\n我这四级英文真是白学了！\n\n### #2\n---\n\n上面那个报错，是lua绑定C++的代码在进行错误处理时打印的log。除了这个，应用程序的控制台也打印除了对定位问题有很大帮助的log\n\n`error:ccui.Text:setString argument #2 is 'table'; 'string' expected.`\n","slug":"cocos2dx-lua的报错","published":1,"updated":"2019-05-23T11:54:37.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wux70008vsr719kux1bu","content":"<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"#1\"></a>#1</h3><hr>\n<p>项目中的代码类似这样：</p>\n<p><code>text:setString(&quot;xxx&quot;)</code></p>\n<p>类似的报错：</p>\n<p><code>invalid arguments in function &#39;bind_func_name&#39;</code></p>\n<p>之前我一直以为是调用对象为 nil 的缘故，我就使劲的找啊找，我想这不可能啊，难道cocos2dx-lua自身又有啥bug？</p>\n<p>我甚至在</p>\n<p><code>text:setString(&quot;xxx&quot;)</code></p>\n<p>之前调用了</p>\n<p><code>text:retain()</code></p>\n<p>以确保垃圾回收机制没有把它干掉了，我甚至在它的各级父节点都调用 retain() ，奈何始终还是有问题。</p>\n<p>尼玛后来发现是参数的问题：</p>\n<p><code>invalid arguments</code> </p>\n<p>我这四级英文真是白学了！</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"#2\"></a>#2</h3><hr>\n<p>上面那个报错，是lua绑定C++的代码在进行错误处理时打印的log。除了这个，应用程序的控制台也打印除了对定位问题有很大帮助的log</p>\n<p><code>error:ccui.Text:setString argument #2 is &#39;table&#39;; &#39;string&#39; expected.</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"#1\"></a>#1</h3><hr>\n<p>项目中的代码类似这样：</p>\n<p><code>text:setString(&quot;xxx&quot;)</code></p>\n<p>类似的报错：</p>\n<p><code>invalid arguments in function &#39;bind_func_name&#39;</code></p>\n<p>之前我一直以为是调用对象为 nil 的缘故，我就使劲的找啊找，我想这不可能啊，难道cocos2dx-lua自身又有啥bug？</p>\n<p>我甚至在</p>\n<p><code>text:setString(&quot;xxx&quot;)</code></p>\n<p>之前调用了</p>\n<p><code>text:retain()</code></p>\n<p>以确保垃圾回收机制没有把它干掉了，我甚至在它的各级父节点都调用 retain() ，奈何始终还是有问题。</p>\n<p>尼玛后来发现是参数的问题：</p>\n<p><code>invalid arguments</code> </p>\n<p>我这四级英文真是白学了！</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"#2\"></a>#2</h3><hr>\n<p>上面那个报错，是lua绑定C++的代码在进行错误处理时打印的log。除了这个，应用程序的控制台也打印除了对定位问题有很大帮助的log</p>\n<p><code>error:ccui.Text:setString argument #2 is &#39;table&#39;; &#39;string&#39; expected.</code></p>\n"},{"title":"goto语句 VS 函数调用","date":"2019-05-09T16:00:00.000Z","_content":"\n### 介绍\n---\n\n函数调用操作再熟悉不过了，无论是过程式、函数式还是面向对象式的编程范式里，它随处可见。\n一般来说，调用一个函数需要一个函数调用操作符，大部分编程语言里它是一对小括号：()\n\ngoto语句的话，虽然基本上用不到它，不过大家肯定也很熟悉。因为它经常被当作反面教材来告诫\n新手：不要在你的程序里使用goto语句！否则你的代码会很难维护。\n\n一般新手在经历一段时间之后，确实做到了，有的甚至都忘记怎么使用goto语句了:)\n\n### GOTO语句\n---\n\ngoto语句虽然不适合绝大部分的应用场景，但它也不是毫无用武之地。比如，在实现一个调试器的时候，\n当被调试的代码出现错误或者异常时，此时就需要一个跳转逻辑，在代码出错的地方进行跳转：把现场\n的错误信息及时打印出来以方便调试。注意一点，跳转处下面的代码一般是不会执行的。这是goto与函数\n调用最主要的区别。\n\n在汇编层面来看，goto语句相当于JMP指令：仅仅是简单的跳转，跳转过去的代码执行完就没了，它是不会\n回来继续执行跳转处的下一行的代码的\n\n### 函数调用操作\n---\n\n函数在调用之前，需要将它下一条指令的地址（函数的返回地址）先入栈，以方面函数调用完，回来接着继续\n执行调用处的下一行代码。\n\n### 总结下\n---\n* goto:相当于汇编的jmp指令\n* 函数调用：相当于在执行jmp指令之前，先保存下返回地址（在汇编里这两个操作被抽象成一个专门的指令：call指令）\n\n### 相关的题外话\n---\n\n#### GOTO：脚本异常\n\n当时刚接触脚本语言，开发中从游戏界面的表现上来看没有任何问题。后来我发现控制台里面打印很多error，当时我想啊，这脚本语言也太不安全了吧!都出错了,程序也不闪退或者暂停啥的。我要是不看控制台打印，岂不是都发现不了这个错误！或者除非这个错误导致了很明显的游戏逻辑、UI显示异常才会被发现。\n\n之前做纯粹的C++开发，就像网上调侃的那样，控制台的warning我一般都是视而不见的，除非编译不过，或者崩溃了。我才会尝试在日志中搜寻“error”这类关键字。。。\n\n再说说上面那个使用脚本语言开发的游戏，当时感觉没啥问题了，基本上达到发布的质量了，开发环境控制台也没什么报错了。只不过那个时候项目还缺少一个捕获语言异常的模块，后来折腾很长时间才加上去（H5平台，不成熟，各种坑）。加上去后随便拿几台手机跑一跑，服务器上日志一拉，尼玛成吨的错误！（这里也不全是开发的坑，H5的各个平台不一致也占很大一部分原因）\n\n#### 函数调用：数组越界（缓冲区溢出）\n\n最后说一说函数调用让我记忆深刻的点：数组越界。在一连串的函数调用过程中，堆栈会保存完成的调用信息。出现崩溃，调试器会根据这些信息，给出精确无误的调用堆栈信息，比如最后崩溃在哪一行，崩溃的这一行在哪个函数里，所在函数又是被另外哪个函数调用的，函数中的各个局部变量的值也都完整的保存下来了。这样调试的话就相当方便了。\n\n但是如果是因为数组越界导致的崩溃，那上面的所有保证都会变得不可靠，因为越界时有可能把堆栈里保存的调用信息给覆盖了。这样的话，调试器给出的信息会变得有些不正常：崩溃的行号指示在一个没有代码的空行，或者是简单到不可能出错的一个赋值语句，或者是组成函数体边界的大括号上。简直让人崩溃！\n\n而且数组越界在第一次发生时可能不会崩溃，但在后续的逻辑执行中因第一次越界而导致更多的越界错误，直到其中一个越界错误导致了崩溃，此时程序才被调试器接管或者产生core文件（linux上）之类的。要知道，现在离真正的错误（错误的源头：第一个越界的地方）可能已经十万八千里了。\n\n* 这个时候建议使用版本控制工具，查看下最近改了哪些东西。\n* C/C++没有运行时下标检查，是因为考虑到运行性能问题\n* 个人经验：开发环境中，最好用assert宏对下标进行检查，release时关闭宏就好了，这样既不影响性能又能第一时间发现错误，岂不是一举两得。\n\n\n\n\n\n\n\n\n\n","source":"_posts/goto语句 VS 函数调用.md","raw":"---\ntitle: goto语句 VS 函数调用\ncategories: 在类比中学习\ndate: 2019-05-10\n---\n\n### 介绍\n---\n\n函数调用操作再熟悉不过了，无论是过程式、函数式还是面向对象式的编程范式里，它随处可见。\n一般来说，调用一个函数需要一个函数调用操作符，大部分编程语言里它是一对小括号：()\n\ngoto语句的话，虽然基本上用不到它，不过大家肯定也很熟悉。因为它经常被当作反面教材来告诫\n新手：不要在你的程序里使用goto语句！否则你的代码会很难维护。\n\n一般新手在经历一段时间之后，确实做到了，有的甚至都忘记怎么使用goto语句了:)\n\n### GOTO语句\n---\n\ngoto语句虽然不适合绝大部分的应用场景，但它也不是毫无用武之地。比如，在实现一个调试器的时候，\n当被调试的代码出现错误或者异常时，此时就需要一个跳转逻辑，在代码出错的地方进行跳转：把现场\n的错误信息及时打印出来以方便调试。注意一点，跳转处下面的代码一般是不会执行的。这是goto与函数\n调用最主要的区别。\n\n在汇编层面来看，goto语句相当于JMP指令：仅仅是简单的跳转，跳转过去的代码执行完就没了，它是不会\n回来继续执行跳转处的下一行的代码的\n\n### 函数调用操作\n---\n\n函数在调用之前，需要将它下一条指令的地址（函数的返回地址）先入栈，以方面函数调用完，回来接着继续\n执行调用处的下一行代码。\n\n### 总结下\n---\n* goto:相当于汇编的jmp指令\n* 函数调用：相当于在执行jmp指令之前，先保存下返回地址（在汇编里这两个操作被抽象成一个专门的指令：call指令）\n\n### 相关的题外话\n---\n\n#### GOTO：脚本异常\n\n当时刚接触脚本语言，开发中从游戏界面的表现上来看没有任何问题。后来我发现控制台里面打印很多error，当时我想啊，这脚本语言也太不安全了吧!都出错了,程序也不闪退或者暂停啥的。我要是不看控制台打印，岂不是都发现不了这个错误！或者除非这个错误导致了很明显的游戏逻辑、UI显示异常才会被发现。\n\n之前做纯粹的C++开发，就像网上调侃的那样，控制台的warning我一般都是视而不见的，除非编译不过，或者崩溃了。我才会尝试在日志中搜寻“error”这类关键字。。。\n\n再说说上面那个使用脚本语言开发的游戏，当时感觉没啥问题了，基本上达到发布的质量了，开发环境控制台也没什么报错了。只不过那个时候项目还缺少一个捕获语言异常的模块，后来折腾很长时间才加上去（H5平台，不成熟，各种坑）。加上去后随便拿几台手机跑一跑，服务器上日志一拉，尼玛成吨的错误！（这里也不全是开发的坑，H5的各个平台不一致也占很大一部分原因）\n\n#### 函数调用：数组越界（缓冲区溢出）\n\n最后说一说函数调用让我记忆深刻的点：数组越界。在一连串的函数调用过程中，堆栈会保存完成的调用信息。出现崩溃，调试器会根据这些信息，给出精确无误的调用堆栈信息，比如最后崩溃在哪一行，崩溃的这一行在哪个函数里，所在函数又是被另外哪个函数调用的，函数中的各个局部变量的值也都完整的保存下来了。这样调试的话就相当方便了。\n\n但是如果是因为数组越界导致的崩溃，那上面的所有保证都会变得不可靠，因为越界时有可能把堆栈里保存的调用信息给覆盖了。这样的话，调试器给出的信息会变得有些不正常：崩溃的行号指示在一个没有代码的空行，或者是简单到不可能出错的一个赋值语句，或者是组成函数体边界的大括号上。简直让人崩溃！\n\n而且数组越界在第一次发生时可能不会崩溃，但在后续的逻辑执行中因第一次越界而导致更多的越界错误，直到其中一个越界错误导致了崩溃，此时程序才被调试器接管或者产生core文件（linux上）之类的。要知道，现在离真正的错误（错误的源头：第一个越界的地方）可能已经十万八千里了。\n\n* 这个时候建议使用版本控制工具，查看下最近改了哪些东西。\n* C/C++没有运行时下标检查，是因为考虑到运行性能问题\n* 个人经验：开发环境中，最好用assert宏对下标进行检查，release时关闭宏就好了，这样既不影响性能又能第一时间发现错误，岂不是一举两得。\n\n\n\n\n\n\n\n\n\n","slug":"goto语句 VS 函数调用","published":1,"updated":"2019-05-10T07:58:09.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wux80009vsr7wyuwvf5j","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><hr>\n<p>函数调用操作再熟悉不过了，无论是过程式、函数式还是面向对象式的编程范式里，它随处可见。<br>一般来说，调用一个函数需要一个函数调用操作符，大部分编程语言里它是一对小括号：()</p>\n<p>goto语句的话，虽然基本上用不到它，不过大家肯定也很熟悉。因为它经常被当作反面教材来告诫<br>新手：不要在你的程序里使用goto语句！否则你的代码会很难维护。</p>\n<p>一般新手在经历一段时间之后，确实做到了，有的甚至都忘记怎么使用goto语句了:)</p>\n<h3 id=\"GOTO语句\"><a href=\"#GOTO语句\" class=\"headerlink\" title=\"GOTO语句\"></a>GOTO语句</h3><hr>\n<p>goto语句虽然不适合绝大部分的应用场景，但它也不是毫无用武之地。比如，在实现一个调试器的时候，<br>当被调试的代码出现错误或者异常时，此时就需要一个跳转逻辑，在代码出错的地方进行跳转：把现场<br>的错误信息及时打印出来以方便调试。注意一点，跳转处下面的代码一般是不会执行的。这是goto与函数<br>调用最主要的区别。</p>\n<p>在汇编层面来看，goto语句相当于JMP指令：仅仅是简单的跳转，跳转过去的代码执行完就没了，它是不会<br>回来继续执行跳转处的下一行的代码的</p>\n<h3 id=\"函数调用操作\"><a href=\"#函数调用操作\" class=\"headerlink\" title=\"函数调用操作\"></a>函数调用操作</h3><hr>\n<p>函数在调用之前，需要将它下一条指令的地址（函数的返回地址）先入栈，以方面函数调用完，回来接着继续<br>执行调用处的下一行代码。</p>\n<h3 id=\"总结下\"><a href=\"#总结下\" class=\"headerlink\" title=\"总结下\"></a>总结下</h3><hr>\n<ul>\n<li>goto:相当于汇编的jmp指令</li>\n<li>函数调用：相当于在执行jmp指令之前，先保存下返回地址（在汇编里这两个操作被抽象成一个专门的指令：call指令）</li>\n</ul>\n<h3 id=\"相关的题外话\"><a href=\"#相关的题外话\" class=\"headerlink\" title=\"相关的题外话\"></a>相关的题外话</h3><hr>\n<h4 id=\"GOTO：脚本异常\"><a href=\"#GOTO：脚本异常\" class=\"headerlink\" title=\"GOTO：脚本异常\"></a>GOTO：脚本异常</h4><p>当时刚接触脚本语言，开发中从游戏界面的表现上来看没有任何问题。后来我发现控制台里面打印很多error，当时我想啊，这脚本语言也太不安全了吧!都出错了,程序也不闪退或者暂停啥的。我要是不看控制台打印，岂不是都发现不了这个错误！或者除非这个错误导致了很明显的游戏逻辑、UI显示异常才会被发现。</p>\n<p>之前做纯粹的C++开发，就像网上调侃的那样，控制台的warning我一般都是视而不见的，除非编译不过，或者崩溃了。我才会尝试在日志中搜寻“error”这类关键字。。。</p>\n<p>再说说上面那个使用脚本语言开发的游戏，当时感觉没啥问题了，基本上达到发布的质量了，开发环境控制台也没什么报错了。只不过那个时候项目还缺少一个捕获语言异常的模块，后来折腾很长时间才加上去（H5平台，不成熟，各种坑）。加上去后随便拿几台手机跑一跑，服务器上日志一拉，尼玛成吨的错误！（这里也不全是开发的坑，H5的各个平台不一致也占很大一部分原因）</p>\n<h4 id=\"函数调用：数组越界（缓冲区溢出）\"><a href=\"#函数调用：数组越界（缓冲区溢出）\" class=\"headerlink\" title=\"函数调用：数组越界（缓冲区溢出）\"></a>函数调用：数组越界（缓冲区溢出）</h4><p>最后说一说函数调用让我记忆深刻的点：数组越界。在一连串的函数调用过程中，堆栈会保存完成的调用信息。出现崩溃，调试器会根据这些信息，给出精确无误的调用堆栈信息，比如最后崩溃在哪一行，崩溃的这一行在哪个函数里，所在函数又是被另外哪个函数调用的，函数中的各个局部变量的值也都完整的保存下来了。这样调试的话就相当方便了。</p>\n<p>但是如果是因为数组越界导致的崩溃，那上面的所有保证都会变得不可靠，因为越界时有可能把堆栈里保存的调用信息给覆盖了。这样的话，调试器给出的信息会变得有些不正常：崩溃的行号指示在一个没有代码的空行，或者是简单到不可能出错的一个赋值语句，或者是组成函数体边界的大括号上。简直让人崩溃！</p>\n<p>而且数组越界在第一次发生时可能不会崩溃，但在后续的逻辑执行中因第一次越界而导致更多的越界错误，直到其中一个越界错误导致了崩溃，此时程序才被调试器接管或者产生core文件（linux上）之类的。要知道，现在离真正的错误（错误的源头：第一个越界的地方）可能已经十万八千里了。</p>\n<ul>\n<li>这个时候建议使用版本控制工具，查看下最近改了哪些东西。</li>\n<li>C/C++没有运行时下标检查，是因为考虑到运行性能问题</li>\n<li>个人经验：开发环境中，最好用assert宏对下标进行检查，release时关闭宏就好了，这样既不影响性能又能第一时间发现错误，岂不是一举两得。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><hr>\n<p>函数调用操作再熟悉不过了，无论是过程式、函数式还是面向对象式的编程范式里，它随处可见。<br>一般来说，调用一个函数需要一个函数调用操作符，大部分编程语言里它是一对小括号：()</p>\n<p>goto语句的话，虽然基本上用不到它，不过大家肯定也很熟悉。因为它经常被当作反面教材来告诫<br>新手：不要在你的程序里使用goto语句！否则你的代码会很难维护。</p>\n<p>一般新手在经历一段时间之后，确实做到了，有的甚至都忘记怎么使用goto语句了:)</p>\n<h3 id=\"GOTO语句\"><a href=\"#GOTO语句\" class=\"headerlink\" title=\"GOTO语句\"></a>GOTO语句</h3><hr>\n<p>goto语句虽然不适合绝大部分的应用场景，但它也不是毫无用武之地。比如，在实现一个调试器的时候，<br>当被调试的代码出现错误或者异常时，此时就需要一个跳转逻辑，在代码出错的地方进行跳转：把现场<br>的错误信息及时打印出来以方便调试。注意一点，跳转处下面的代码一般是不会执行的。这是goto与函数<br>调用最主要的区别。</p>\n<p>在汇编层面来看，goto语句相当于JMP指令：仅仅是简单的跳转，跳转过去的代码执行完就没了，它是不会<br>回来继续执行跳转处的下一行的代码的</p>\n<h3 id=\"函数调用操作\"><a href=\"#函数调用操作\" class=\"headerlink\" title=\"函数调用操作\"></a>函数调用操作</h3><hr>\n<p>函数在调用之前，需要将它下一条指令的地址（函数的返回地址）先入栈，以方面函数调用完，回来接着继续<br>执行调用处的下一行代码。</p>\n<h3 id=\"总结下\"><a href=\"#总结下\" class=\"headerlink\" title=\"总结下\"></a>总结下</h3><hr>\n<ul>\n<li>goto:相当于汇编的jmp指令</li>\n<li>函数调用：相当于在执行jmp指令之前，先保存下返回地址（在汇编里这两个操作被抽象成一个专门的指令：call指令）</li>\n</ul>\n<h3 id=\"相关的题外话\"><a href=\"#相关的题外话\" class=\"headerlink\" title=\"相关的题外话\"></a>相关的题外话</h3><hr>\n<h4 id=\"GOTO：脚本异常\"><a href=\"#GOTO：脚本异常\" class=\"headerlink\" title=\"GOTO：脚本异常\"></a>GOTO：脚本异常</h4><p>当时刚接触脚本语言，开发中从游戏界面的表现上来看没有任何问题。后来我发现控制台里面打印很多error，当时我想啊，这脚本语言也太不安全了吧!都出错了,程序也不闪退或者暂停啥的。我要是不看控制台打印，岂不是都发现不了这个错误！或者除非这个错误导致了很明显的游戏逻辑、UI显示异常才会被发现。</p>\n<p>之前做纯粹的C++开发，就像网上调侃的那样，控制台的warning我一般都是视而不见的，除非编译不过，或者崩溃了。我才会尝试在日志中搜寻“error”这类关键字。。。</p>\n<p>再说说上面那个使用脚本语言开发的游戏，当时感觉没啥问题了，基本上达到发布的质量了，开发环境控制台也没什么报错了。只不过那个时候项目还缺少一个捕获语言异常的模块，后来折腾很长时间才加上去（H5平台，不成熟，各种坑）。加上去后随便拿几台手机跑一跑，服务器上日志一拉，尼玛成吨的错误！（这里也不全是开发的坑，H5的各个平台不一致也占很大一部分原因）</p>\n<h4 id=\"函数调用：数组越界（缓冲区溢出）\"><a href=\"#函数调用：数组越界（缓冲区溢出）\" class=\"headerlink\" title=\"函数调用：数组越界（缓冲区溢出）\"></a>函数调用：数组越界（缓冲区溢出）</h4><p>最后说一说函数调用让我记忆深刻的点：数组越界。在一连串的函数调用过程中，堆栈会保存完成的调用信息。出现崩溃，调试器会根据这些信息，给出精确无误的调用堆栈信息，比如最后崩溃在哪一行，崩溃的这一行在哪个函数里，所在函数又是被另外哪个函数调用的，函数中的各个局部变量的值也都完整的保存下来了。这样调试的话就相当方便了。</p>\n<p>但是如果是因为数组越界导致的崩溃，那上面的所有保证都会变得不可靠，因为越界时有可能把堆栈里保存的调用信息给覆盖了。这样的话，调试器给出的信息会变得有些不正常：崩溃的行号指示在一个没有代码的空行，或者是简单到不可能出错的一个赋值语句，或者是组成函数体边界的大括号上。简直让人崩溃！</p>\n<p>而且数组越界在第一次发生时可能不会崩溃，但在后续的逻辑执行中因第一次越界而导致更多的越界错误，直到其中一个越界错误导致了崩溃，此时程序才被调试器接管或者产生core文件（linux上）之类的。要知道，现在离真正的错误（错误的源头：第一个越界的地方）可能已经十万八千里了。</p>\n<ul>\n<li>这个时候建议使用版本控制工具，查看下最近改了哪些东西。</li>\n<li>C/C++没有运行时下标检查，是因为考虑到运行性能问题</li>\n<li>个人经验：开发环境中，最好用assert宏对下标进行检查，release时关闭宏就好了，这样既不影响性能又能第一时间发现错误，岂不是一举两得。</li>\n</ul>\n"},{"title":"值得收藏的网站","date":"2019-02-24T16:00:00.000Z","_content":"\n## 技术\n---\n* [OpenGL教程](https://learnopengl-cn.github.io)\n* [OpenGL教程](http://ogldev.atspace.co.uk/)\n* [OpenGL教程](http://www.opengl-tutorial.org/cn/)\n* [YouTube上的线性代数教程](https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab)\n* [C++参考手册](https://zh.cppreference.com)\n* [一个GCC编译器的web前端，可以进行C++在线编程](http://cpp.sh/)\n* [微软的C++文档](https://docs.microsoft.com/en-us/cpp/cpp/c-cpp-language-and-standard-libraries?view=vs-2017)\n* [C++用户指南](https://docs.oracle.com/cd/E19205-01/820-1214/index.html)\n* [Linux快速教程](https://linuxtools-rst.readthedocs.io)\n* [GDB教程](https://ftp.gnu.org/old-gnu/Manuals/gdb/html_node/gdb_toc.html)\n* [JavaScript教程](http://bonsaiden.github.io/JavaScript-Garden/zh/)\n* [阮一峰的JavaScript教程](http://javascript.ruanyifeng.com/)\n* [阮一峰的JavaScript ES6教程](http://es6.ruanyifeng.com/)\n* [Lua参考手册](https://cloudwu.github.io/lua53doc/contents.html#contents)\n* [Lua Unofficial FAQ](http://www.luafaq.org/)\n* [gitbook上的Lua教程](https://moonbingbing.gitbooks.io/openresty-best-practices/lua/main.html)\n* [看云上的Lua教程](https://www.kancloud.cn/thinkphp/lua-guide/43808)\n* [IBM中国的技术主题](https://www.ibm.com/developerworks/cn/topics)\n* [现代魔法学院](http://www.nowamagic.net/academy)\n* [游戏编程模式](https://gpp.tkchu.me)\n* [图说设计模式](https://design-patterns.readthedocs.io)\n* [软件架构模式](https://bboyfeiyu.gitbooks.io/software-architecture-patterns)\n* [markdown教程](http://www.markdown.cn/)\n* [git极简教程](http://rogerdudler.github.io/git-guide/index.zh.html)\n* [git教程书](https://git-scm.com/book/zh/)\n* [一位CS科学家关于hash的文章](http://www.partow.net/programming/hashfunctions/)\n* [2007年的一篇关于组件化游戏实体代替传统深度继承树的文章](http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/)\n* [一篇游戏优化的文章](https://www.gamasutra.com/view/feature/1879/the_top_10_myths_of_video_game_.php?print=1)\n* [五花八门的C代码](https://www.ioccc.org/)\n* [让算法呈现可视化的网站](https://visualgo.net/zh)\n* [python入门](http://www.pythondoc.com/pythontutorial3/)\n\n## 工具\n---\n* [在线压缩PDF文件](https://smallpdf.com/cn/compress-pdf)\n* [提供免费域名](https://www.freenom.com/)\n* [提供免费CDN服务](https://www.cloudflare.com/)\n* [测试的IP和端口的可用性](http://port.ping.pe/)\n* [测试节点速度](https://www.speedtest.net/zh-Hans)\n* [GLSL的在线编辑器](https://thebookofshaders.com/edit.php)\n* [wikiHow](https://zh.wikihow.com)\n* [SSH for Win32](http://linuxmafia.com/ssh/win32.html)\n* [免费接受验证码](https://smsreceivefree.com/)\n\n## 其他\n---\n* [中文MUD大全](https://mudchina.github.io/)\n* [SCP基金会](http://scp-wiki-cn.wikidot.com/)\n* [近视](http://myopiacure.blogspot.com/)\n\n## 大佬\n---\n* [云风的BLOG](https://blog.codingnow.com)\n* [叶劲峰](http://miloyip.com)\n\n## 神一般的人物\n---\n* [约翰·卡马克](https://zh.wikipedia.org/wiki/%E7%B4%84%E7%BF%B0%C2%B7%E5%8D%A1%E9%A6%AC%E5%85%8B)\n* [杰森·格雷戈里](https://www.gameenginebook.com/)\n* [余国荔](https://zh.wikipedia.org/wiki/%E4%BD%99%E5%9B%BD%E8%8D%94)","source":"_posts/值得收藏的网站.md","raw":"---\ntitle: 值得收藏的网站\ncategories: 推荐\ndate: 2019-02-25\n---\n\n## 技术\n---\n* [OpenGL教程](https://learnopengl-cn.github.io)\n* [OpenGL教程](http://ogldev.atspace.co.uk/)\n* [OpenGL教程](http://www.opengl-tutorial.org/cn/)\n* [YouTube上的线性代数教程](https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab)\n* [C++参考手册](https://zh.cppreference.com)\n* [一个GCC编译器的web前端，可以进行C++在线编程](http://cpp.sh/)\n* [微软的C++文档](https://docs.microsoft.com/en-us/cpp/cpp/c-cpp-language-and-standard-libraries?view=vs-2017)\n* [C++用户指南](https://docs.oracle.com/cd/E19205-01/820-1214/index.html)\n* [Linux快速教程](https://linuxtools-rst.readthedocs.io)\n* [GDB教程](https://ftp.gnu.org/old-gnu/Manuals/gdb/html_node/gdb_toc.html)\n* [JavaScript教程](http://bonsaiden.github.io/JavaScript-Garden/zh/)\n* [阮一峰的JavaScript教程](http://javascript.ruanyifeng.com/)\n* [阮一峰的JavaScript ES6教程](http://es6.ruanyifeng.com/)\n* [Lua参考手册](https://cloudwu.github.io/lua53doc/contents.html#contents)\n* [Lua Unofficial FAQ](http://www.luafaq.org/)\n* [gitbook上的Lua教程](https://moonbingbing.gitbooks.io/openresty-best-practices/lua/main.html)\n* [看云上的Lua教程](https://www.kancloud.cn/thinkphp/lua-guide/43808)\n* [IBM中国的技术主题](https://www.ibm.com/developerworks/cn/topics)\n* [现代魔法学院](http://www.nowamagic.net/academy)\n* [游戏编程模式](https://gpp.tkchu.me)\n* [图说设计模式](https://design-patterns.readthedocs.io)\n* [软件架构模式](https://bboyfeiyu.gitbooks.io/software-architecture-patterns)\n* [markdown教程](http://www.markdown.cn/)\n* [git极简教程](http://rogerdudler.github.io/git-guide/index.zh.html)\n* [git教程书](https://git-scm.com/book/zh/)\n* [一位CS科学家关于hash的文章](http://www.partow.net/programming/hashfunctions/)\n* [2007年的一篇关于组件化游戏实体代替传统深度继承树的文章](http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/)\n* [一篇游戏优化的文章](https://www.gamasutra.com/view/feature/1879/the_top_10_myths_of_video_game_.php?print=1)\n* [五花八门的C代码](https://www.ioccc.org/)\n* [让算法呈现可视化的网站](https://visualgo.net/zh)\n* [python入门](http://www.pythondoc.com/pythontutorial3/)\n\n## 工具\n---\n* [在线压缩PDF文件](https://smallpdf.com/cn/compress-pdf)\n* [提供免费域名](https://www.freenom.com/)\n* [提供免费CDN服务](https://www.cloudflare.com/)\n* [测试的IP和端口的可用性](http://port.ping.pe/)\n* [测试节点速度](https://www.speedtest.net/zh-Hans)\n* [GLSL的在线编辑器](https://thebookofshaders.com/edit.php)\n* [wikiHow](https://zh.wikihow.com)\n* [SSH for Win32](http://linuxmafia.com/ssh/win32.html)\n* [免费接受验证码](https://smsreceivefree.com/)\n\n## 其他\n---\n* [中文MUD大全](https://mudchina.github.io/)\n* [SCP基金会](http://scp-wiki-cn.wikidot.com/)\n* [近视](http://myopiacure.blogspot.com/)\n\n## 大佬\n---\n* [云风的BLOG](https://blog.codingnow.com)\n* [叶劲峰](http://miloyip.com)\n\n## 神一般的人物\n---\n* [约翰·卡马克](https://zh.wikipedia.org/wiki/%E7%B4%84%E7%BF%B0%C2%B7%E5%8D%A1%E9%A6%AC%E5%85%8B)\n* [杰森·格雷戈里](https://www.gameenginebook.com/)\n* [余国荔](https://zh.wikipedia.org/wiki/%E4%BD%99%E5%9B%BD%E8%8D%94)","slug":"值得收藏的网站","published":1,"updated":"2019-05-23T11:55:21.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wuxa000cvsr75xkxgoiq","content":"<h2 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h2><hr>\n<ul>\n<li><a href=\"https://learnopengl-cn.github.io\" target=\"_blank\" rel=\"noopener\">OpenGL教程</a></li>\n<li><a href=\"http://ogldev.atspace.co.uk/\" target=\"_blank\" rel=\"noopener\">OpenGL教程</a></li>\n<li><a href=\"http://www.opengl-tutorial.org/cn/\" target=\"_blank\" rel=\"noopener\">OpenGL教程</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab\" target=\"_blank\" rel=\"noopener\">YouTube上的线性代数教程</a></li>\n<li><a href=\"https://zh.cppreference.com\" target=\"_blank\" rel=\"noopener\">C++参考手册</a></li>\n<li><a href=\"http://cpp.sh/\" target=\"_blank\" rel=\"noopener\">一个GCC编译器的web前端，可以进行C++在线编程</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/cpp/cpp/c-cpp-language-and-standard-libraries?view=vs-2017\" target=\"_blank\" rel=\"noopener\">微软的C++文档</a></li>\n<li><a href=\"https://docs.oracle.com/cd/E19205-01/820-1214/index.html\" target=\"_blank\" rel=\"noopener\">C++用户指南</a></li>\n<li><a href=\"https://linuxtools-rst.readthedocs.io\" target=\"_blank\" rel=\"noopener\">Linux快速教程</a></li>\n<li><a href=\"https://ftp.gnu.org/old-gnu/Manuals/gdb/html_node/gdb_toc.html\" target=\"_blank\" rel=\"noopener\">GDB教程</a></li>\n<li><a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/\" target=\"_blank\" rel=\"noopener\">JavaScript教程</a></li>\n<li><a href=\"http://javascript.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰的JavaScript教程</a></li>\n<li><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰的JavaScript ES6教程</a></li>\n<li><a href=\"https://cloudwu.github.io/lua53doc/contents.html#contents\" target=\"_blank\" rel=\"noopener\">Lua参考手册</a></li>\n<li><a href=\"http://www.luafaq.org/\" target=\"_blank\" rel=\"noopener\">Lua Unofficial FAQ</a></li>\n<li><a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/lua/main.html\" target=\"_blank\" rel=\"noopener\">gitbook上的Lua教程</a></li>\n<li><a href=\"https://www.kancloud.cn/thinkphp/lua-guide/43808\" target=\"_blank\" rel=\"noopener\">看云上的Lua教程</a></li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/topics\" target=\"_blank\" rel=\"noopener\">IBM中国的技术主题</a></li>\n<li><a href=\"http://www.nowamagic.net/academy\" target=\"_blank\" rel=\"noopener\">现代魔法学院</a></li>\n<li><a href=\"https://gpp.tkchu.me\" target=\"_blank\" rel=\"noopener\">游戏编程模式</a></li>\n<li><a href=\"https://design-patterns.readthedocs.io\" target=\"_blank\" rel=\"noopener\">图说设计模式</a></li>\n<li><a href=\"https://bboyfeiyu.gitbooks.io/software-architecture-patterns\" target=\"_blank\" rel=\"noopener\">软件架构模式</a></li>\n<li><a href=\"http://www.markdown.cn/\" target=\"_blank\" rel=\"noopener\">markdown教程</a></li>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\" rel=\"noopener\">git极简教程</a></li>\n<li><a href=\"https://git-scm.com/book/zh/\" target=\"_blank\" rel=\"noopener\">git教程书</a></li>\n<li><a href=\"http://www.partow.net/programming/hashfunctions/\" target=\"_blank\" rel=\"noopener\">一位CS科学家关于hash的文章</a></li>\n<li><a href=\"http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/\" target=\"_blank\" rel=\"noopener\">2007年的一篇关于组件化游戏实体代替传统深度继承树的文章</a></li>\n<li><a href=\"https://www.gamasutra.com/view/feature/1879/the_top_10_myths_of_video_game_.php?print=1\" target=\"_blank\" rel=\"noopener\">一篇游戏优化的文章</a></li>\n<li><a href=\"https://www.ioccc.org/\" target=\"_blank\" rel=\"noopener\">五花八门的C代码</a></li>\n<li><a href=\"https://visualgo.net/zh\" target=\"_blank\" rel=\"noopener\">让算法呈现可视化的网站</a></li>\n<li><a href=\"http://www.pythondoc.com/pythontutorial3/\" target=\"_blank\" rel=\"noopener\">python入门</a></li>\n</ul>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><hr>\n<ul>\n<li><a href=\"https://smallpdf.com/cn/compress-pdf\" target=\"_blank\" rel=\"noopener\">在线压缩PDF文件</a></li>\n<li><a href=\"https://www.freenom.com/\" target=\"_blank\" rel=\"noopener\">提供免费域名</a></li>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">提供免费CDN服务</a></li>\n<li><a href=\"http://port.ping.pe/\" target=\"_blank\" rel=\"noopener\">测试的IP和端口的可用性</a></li>\n<li><a href=\"https://www.speedtest.net/zh-Hans\" target=\"_blank\" rel=\"noopener\">测试节点速度</a></li>\n<li><a href=\"https://thebookofshaders.com/edit.php\" target=\"_blank\" rel=\"noopener\">GLSL的在线编辑器</a></li>\n<li><a href=\"https://zh.wikihow.com\" target=\"_blank\" rel=\"noopener\">wikiHow</a></li>\n<li><a href=\"http://linuxmafia.com/ssh/win32.html\" target=\"_blank\" rel=\"noopener\">SSH for Win32</a></li>\n<li><a href=\"https://smsreceivefree.com/\" target=\"_blank\" rel=\"noopener\">免费接受验证码</a></li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><hr>\n<ul>\n<li><a href=\"https://mudchina.github.io/\" target=\"_blank\" rel=\"noopener\">中文MUD大全</a></li>\n<li><a href=\"http://scp-wiki-cn.wikidot.com/\" target=\"_blank\" rel=\"noopener\">SCP基金会</a></li>\n<li><a href=\"http://myopiacure.blogspot.com/\" target=\"_blank\" rel=\"noopener\">近视</a></li>\n</ul>\n<h2 id=\"大佬\"><a href=\"#大佬\" class=\"headerlink\" title=\"大佬\"></a>大佬</h2><hr>\n<ul>\n<li><a href=\"https://blog.codingnow.com\" target=\"_blank\" rel=\"noopener\">云风的BLOG</a></li>\n<li><a href=\"http://miloyip.com\" target=\"_blank\" rel=\"noopener\">叶劲峰</a></li>\n</ul>\n<h2 id=\"神一般的人物\"><a href=\"#神一般的人物\" class=\"headerlink\" title=\"神一般的人物\"></a>神一般的人物</h2><hr>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E7%B4%84%E7%BF%B0%C2%B7%E5%8D%A1%E9%A6%AC%E5%85%8B\" target=\"_blank\" rel=\"noopener\">约翰·卡马克</a></li>\n<li><a href=\"https://www.gameenginebook.com/\" target=\"_blank\" rel=\"noopener\">杰森·格雷戈里</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E4%BD%99%E5%9B%BD%E8%8D%94\" target=\"_blank\" rel=\"noopener\">余国荔</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h2><hr>\n<ul>\n<li><a href=\"https://learnopengl-cn.github.io\" target=\"_blank\" rel=\"noopener\">OpenGL教程</a></li>\n<li><a href=\"http://ogldev.atspace.co.uk/\" target=\"_blank\" rel=\"noopener\">OpenGL教程</a></li>\n<li><a href=\"http://www.opengl-tutorial.org/cn/\" target=\"_blank\" rel=\"noopener\">OpenGL教程</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab\" target=\"_blank\" rel=\"noopener\">YouTube上的线性代数教程</a></li>\n<li><a href=\"https://zh.cppreference.com\" target=\"_blank\" rel=\"noopener\">C++参考手册</a></li>\n<li><a href=\"http://cpp.sh/\" target=\"_blank\" rel=\"noopener\">一个GCC编译器的web前端，可以进行C++在线编程</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/cpp/cpp/c-cpp-language-and-standard-libraries?view=vs-2017\" target=\"_blank\" rel=\"noopener\">微软的C++文档</a></li>\n<li><a href=\"https://docs.oracle.com/cd/E19205-01/820-1214/index.html\" target=\"_blank\" rel=\"noopener\">C++用户指南</a></li>\n<li><a href=\"https://linuxtools-rst.readthedocs.io\" target=\"_blank\" rel=\"noopener\">Linux快速教程</a></li>\n<li><a href=\"https://ftp.gnu.org/old-gnu/Manuals/gdb/html_node/gdb_toc.html\" target=\"_blank\" rel=\"noopener\">GDB教程</a></li>\n<li><a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/\" target=\"_blank\" rel=\"noopener\">JavaScript教程</a></li>\n<li><a href=\"http://javascript.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰的JavaScript教程</a></li>\n<li><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰的JavaScript ES6教程</a></li>\n<li><a href=\"https://cloudwu.github.io/lua53doc/contents.html#contents\" target=\"_blank\" rel=\"noopener\">Lua参考手册</a></li>\n<li><a href=\"http://www.luafaq.org/\" target=\"_blank\" rel=\"noopener\">Lua Unofficial FAQ</a></li>\n<li><a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/lua/main.html\" target=\"_blank\" rel=\"noopener\">gitbook上的Lua教程</a></li>\n<li><a href=\"https://www.kancloud.cn/thinkphp/lua-guide/43808\" target=\"_blank\" rel=\"noopener\">看云上的Lua教程</a></li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/topics\" target=\"_blank\" rel=\"noopener\">IBM中国的技术主题</a></li>\n<li><a href=\"http://www.nowamagic.net/academy\" target=\"_blank\" rel=\"noopener\">现代魔法学院</a></li>\n<li><a href=\"https://gpp.tkchu.me\" target=\"_blank\" rel=\"noopener\">游戏编程模式</a></li>\n<li><a href=\"https://design-patterns.readthedocs.io\" target=\"_blank\" rel=\"noopener\">图说设计模式</a></li>\n<li><a href=\"https://bboyfeiyu.gitbooks.io/software-architecture-patterns\" target=\"_blank\" rel=\"noopener\">软件架构模式</a></li>\n<li><a href=\"http://www.markdown.cn/\" target=\"_blank\" rel=\"noopener\">markdown教程</a></li>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\" rel=\"noopener\">git极简教程</a></li>\n<li><a href=\"https://git-scm.com/book/zh/\" target=\"_blank\" rel=\"noopener\">git教程书</a></li>\n<li><a href=\"http://www.partow.net/programming/hashfunctions/\" target=\"_blank\" rel=\"noopener\">一位CS科学家关于hash的文章</a></li>\n<li><a href=\"http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/\" target=\"_blank\" rel=\"noopener\">2007年的一篇关于组件化游戏实体代替传统深度继承树的文章</a></li>\n<li><a href=\"https://www.gamasutra.com/view/feature/1879/the_top_10_myths_of_video_game_.php?print=1\" target=\"_blank\" rel=\"noopener\">一篇游戏优化的文章</a></li>\n<li><a href=\"https://www.ioccc.org/\" target=\"_blank\" rel=\"noopener\">五花八门的C代码</a></li>\n<li><a href=\"https://visualgo.net/zh\" target=\"_blank\" rel=\"noopener\">让算法呈现可视化的网站</a></li>\n<li><a href=\"http://www.pythondoc.com/pythontutorial3/\" target=\"_blank\" rel=\"noopener\">python入门</a></li>\n</ul>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><hr>\n<ul>\n<li><a href=\"https://smallpdf.com/cn/compress-pdf\" target=\"_blank\" rel=\"noopener\">在线压缩PDF文件</a></li>\n<li><a href=\"https://www.freenom.com/\" target=\"_blank\" rel=\"noopener\">提供免费域名</a></li>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">提供免费CDN服务</a></li>\n<li><a href=\"http://port.ping.pe/\" target=\"_blank\" rel=\"noopener\">测试的IP和端口的可用性</a></li>\n<li><a href=\"https://www.speedtest.net/zh-Hans\" target=\"_blank\" rel=\"noopener\">测试节点速度</a></li>\n<li><a href=\"https://thebookofshaders.com/edit.php\" target=\"_blank\" rel=\"noopener\">GLSL的在线编辑器</a></li>\n<li><a href=\"https://zh.wikihow.com\" target=\"_blank\" rel=\"noopener\">wikiHow</a></li>\n<li><a href=\"http://linuxmafia.com/ssh/win32.html\" target=\"_blank\" rel=\"noopener\">SSH for Win32</a></li>\n<li><a href=\"https://smsreceivefree.com/\" target=\"_blank\" rel=\"noopener\">免费接受验证码</a></li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><hr>\n<ul>\n<li><a href=\"https://mudchina.github.io/\" target=\"_blank\" rel=\"noopener\">中文MUD大全</a></li>\n<li><a href=\"http://scp-wiki-cn.wikidot.com/\" target=\"_blank\" rel=\"noopener\">SCP基金会</a></li>\n<li><a href=\"http://myopiacure.blogspot.com/\" target=\"_blank\" rel=\"noopener\">近视</a></li>\n</ul>\n<h2 id=\"大佬\"><a href=\"#大佬\" class=\"headerlink\" title=\"大佬\"></a>大佬</h2><hr>\n<ul>\n<li><a href=\"https://blog.codingnow.com\" target=\"_blank\" rel=\"noopener\">云风的BLOG</a></li>\n<li><a href=\"http://miloyip.com\" target=\"_blank\" rel=\"noopener\">叶劲峰</a></li>\n</ul>\n<h2 id=\"神一般的人物\"><a href=\"#神一般的人物\" class=\"headerlink\" title=\"神一般的人物\"></a>神一般的人物</h2><hr>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E7%B4%84%E7%BF%B0%C2%B7%E5%8D%A1%E9%A6%AC%E5%85%8B\" target=\"_blank\" rel=\"noopener\">约翰·卡马克</a></li>\n<li><a href=\"https://www.gameenginebook.com/\" target=\"_blank\" rel=\"noopener\">杰森·格雷戈里</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E4%BD%99%E5%9B%BD%E8%8D%94\" target=\"_blank\" rel=\"noopener\">余国荔</a></li>\n</ul>\n"},{"title":"SVN的合并操作（svn merge）","date":"2019-02-28T16:00:00.000Z","_content":"\n* 网上搜索了很多关于这个主题的文章，个人觉得最好的就是[这个了](https://www.centos.bz/2017/08/svn-merge-operate/)\n\n* 关于更详细的说明看这里的[中文文档](http://svnbook.red-bean.com/nightly/zh/svn.branchmerge.html)\n\n### 把分支（branch）合并到主干（trunk）\n---\n* 首先到你的trunk根目录下（本地的working copy），更新服务器上最新代码，提交本地还未提交的代码，解决存在的冲突。\n* 鼠标空白处右键，选择\"TortoiseSVN\"选项，然后选择“Merge...”选项\n* 在弹出的“Merge type”界面里：选择“Merger a range of revisions”选项\n* 在弹出的“Merge revision range”界面里：\n    * “URL to merge from”处，选择你想要合并到主干（trunk）的那个分支（branch）的路径\n    * “Revision range to merge”处，选择你想要合并的版本号 （这些都是对分支（branch）的修改产生的版本号）\n    * 点击“下一步（Next）”按钮\n* 在“Merge options”界面里：\n    * 使用默认的合并选项就可以了\n    * 合并之前可以先点击“测试合并（Test merge）”按钮，测试一下合并结果如何\n    * 确保没有问题后，点击“合并（Merge）”按钮进行合并\n    * 如何产生冲突了也不用担心，可以选择手动解决冲突或者撤销此次合并操作\n    * 合并后记得提交合并后的结果\n\n### 把主干（trunk）合并到分支（branch）\n---\n* 操作简直一模一样的：只是把选项“URL to merge from”处，改成选择你要合并到分支（branch）的那个主干（trunk）的路径\n\n### 注意整个合并过程其实可以分解成：**diff + apply**这两个操作的组合\n---\n* **diff**：既可以是指比较同一个tree的不同版本之间的差异（“Merger a range of revisions”），也可以是比较两个tree之间的差异（“2-URL Merges”）\n* **apply**：就是把这些差异应用到那你想要的working copy上","source":"_posts/SVN合并操作.md","raw":"---\ntitle: SVN的合并操作（svn merge）\ncategories: 版本控制\ndate: 2019-03-01\n---\n\n* 网上搜索了很多关于这个主题的文章，个人觉得最好的就是[这个了](https://www.centos.bz/2017/08/svn-merge-operate/)\n\n* 关于更详细的说明看这里的[中文文档](http://svnbook.red-bean.com/nightly/zh/svn.branchmerge.html)\n\n### 把分支（branch）合并到主干（trunk）\n---\n* 首先到你的trunk根目录下（本地的working copy），更新服务器上最新代码，提交本地还未提交的代码，解决存在的冲突。\n* 鼠标空白处右键，选择\"TortoiseSVN\"选项，然后选择“Merge...”选项\n* 在弹出的“Merge type”界面里：选择“Merger a range of revisions”选项\n* 在弹出的“Merge revision range”界面里：\n    * “URL to merge from”处，选择你想要合并到主干（trunk）的那个分支（branch）的路径\n    * “Revision range to merge”处，选择你想要合并的版本号 （这些都是对分支（branch）的修改产生的版本号）\n    * 点击“下一步（Next）”按钮\n* 在“Merge options”界面里：\n    * 使用默认的合并选项就可以了\n    * 合并之前可以先点击“测试合并（Test merge）”按钮，测试一下合并结果如何\n    * 确保没有问题后，点击“合并（Merge）”按钮进行合并\n    * 如何产生冲突了也不用担心，可以选择手动解决冲突或者撤销此次合并操作\n    * 合并后记得提交合并后的结果\n\n### 把主干（trunk）合并到分支（branch）\n---\n* 操作简直一模一样的：只是把选项“URL to merge from”处，改成选择你要合并到分支（branch）的那个主干（trunk）的路径\n\n### 注意整个合并过程其实可以分解成：**diff + apply**这两个操作的组合\n---\n* **diff**：既可以是指比较同一个tree的不同版本之间的差异（“Merger a range of revisions”），也可以是比较两个tree之间的差异（“2-URL Merges”）\n* **apply**：就是把这些差异应用到那你想要的working copy上","slug":"SVN合并操作","published":1,"updated":"2019-05-10T08:33:55.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wuxb000dvsr7quav3fx6","content":"<ul>\n<li><p>网上搜索了很多关于这个主题的文章，个人觉得最好的就是<a href=\"https://www.centos.bz/2017/08/svn-merge-operate/\" target=\"_blank\" rel=\"noopener\">这个了</a></p>\n</li>\n<li><p>关于更详细的说明看这里的<a href=\"http://svnbook.red-bean.com/nightly/zh/svn.branchmerge.html\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n</li>\n</ul>\n<h3 id=\"把分支（branch）合并到主干（trunk）\"><a href=\"#把分支（branch）合并到主干（trunk）\" class=\"headerlink\" title=\"把分支（branch）合并到主干（trunk）\"></a>把分支（branch）合并到主干（trunk）</h3><hr>\n<ul>\n<li>首先到你的trunk根目录下（本地的working copy），更新服务器上最新代码，提交本地还未提交的代码，解决存在的冲突。</li>\n<li>鼠标空白处右键，选择”TortoiseSVN”选项，然后选择“Merge…”选项</li>\n<li>在弹出的“Merge type”界面里：选择“Merger a range of revisions”选项</li>\n<li>在弹出的“Merge revision range”界面里：<ul>\n<li>“URL to merge from”处，选择你想要合并到主干（trunk）的那个分支（branch）的路径</li>\n<li>“Revision range to merge”处，选择你想要合并的版本号 （这些都是对分支（branch）的修改产生的版本号）</li>\n<li>点击“下一步（Next）”按钮</li>\n</ul>\n</li>\n<li>在“Merge options”界面里：<ul>\n<li>使用默认的合并选项就可以了</li>\n<li>合并之前可以先点击“测试合并（Test merge）”按钮，测试一下合并结果如何</li>\n<li>确保没有问题后，点击“合并（Merge）”按钮进行合并</li>\n<li>如何产生冲突了也不用担心，可以选择手动解决冲突或者撤销此次合并操作</li>\n<li>合并后记得提交合并后的结果</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"把主干（trunk）合并到分支（branch）\"><a href=\"#把主干（trunk）合并到分支（branch）\" class=\"headerlink\" title=\"把主干（trunk）合并到分支（branch）\"></a>把主干（trunk）合并到分支（branch）</h3><hr>\n<ul>\n<li>操作简直一模一样的：只是把选项“URL to merge from”处，改成选择你要合并到分支（branch）的那个主干（trunk）的路径</li>\n</ul>\n<h3 id=\"注意整个合并过程其实可以分解成：diff-apply这两个操作的组合\"><a href=\"#注意整个合并过程其实可以分解成：diff-apply这两个操作的组合\" class=\"headerlink\" title=\"注意整个合并过程其实可以分解成：diff + apply这两个操作的组合\"></a>注意整个合并过程其实可以分解成：<strong>diff + apply</strong>这两个操作的组合</h3><hr>\n<ul>\n<li><strong>diff</strong>：既可以是指比较同一个tree的不同版本之间的差异（“Merger a range of revisions”），也可以是比较两个tree之间的差异（“2-URL Merges”）</li>\n<li><strong>apply</strong>：就是把这些差异应用到那你想要的working copy上</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>网上搜索了很多关于这个主题的文章，个人觉得最好的就是<a href=\"https://www.centos.bz/2017/08/svn-merge-operate/\" target=\"_blank\" rel=\"noopener\">这个了</a></p>\n</li>\n<li><p>关于更详细的说明看这里的<a href=\"http://svnbook.red-bean.com/nightly/zh/svn.branchmerge.html\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n</li>\n</ul>\n<h3 id=\"把分支（branch）合并到主干（trunk）\"><a href=\"#把分支（branch）合并到主干（trunk）\" class=\"headerlink\" title=\"把分支（branch）合并到主干（trunk）\"></a>把分支（branch）合并到主干（trunk）</h3><hr>\n<ul>\n<li>首先到你的trunk根目录下（本地的working copy），更新服务器上最新代码，提交本地还未提交的代码，解决存在的冲突。</li>\n<li>鼠标空白处右键，选择”TortoiseSVN”选项，然后选择“Merge…”选项</li>\n<li>在弹出的“Merge type”界面里：选择“Merger a range of revisions”选项</li>\n<li>在弹出的“Merge revision range”界面里：<ul>\n<li>“URL to merge from”处，选择你想要合并到主干（trunk）的那个分支（branch）的路径</li>\n<li>“Revision range to merge”处，选择你想要合并的版本号 （这些都是对分支（branch）的修改产生的版本号）</li>\n<li>点击“下一步（Next）”按钮</li>\n</ul>\n</li>\n<li>在“Merge options”界面里：<ul>\n<li>使用默认的合并选项就可以了</li>\n<li>合并之前可以先点击“测试合并（Test merge）”按钮，测试一下合并结果如何</li>\n<li>确保没有问题后，点击“合并（Merge）”按钮进行合并</li>\n<li>如何产生冲突了也不用担心，可以选择手动解决冲突或者撤销此次合并操作</li>\n<li>合并后记得提交合并后的结果</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"把主干（trunk）合并到分支（branch）\"><a href=\"#把主干（trunk）合并到分支（branch）\" class=\"headerlink\" title=\"把主干（trunk）合并到分支（branch）\"></a>把主干（trunk）合并到分支（branch）</h3><hr>\n<ul>\n<li>操作简直一模一样的：只是把选项“URL to merge from”处，改成选择你要合并到分支（branch）的那个主干（trunk）的路径</li>\n</ul>\n<h3 id=\"注意整个合并过程其实可以分解成：diff-apply这两个操作的组合\"><a href=\"#注意整个合并过程其实可以分解成：diff-apply这两个操作的组合\" class=\"headerlink\" title=\"注意整个合并过程其实可以分解成：diff + apply这两个操作的组合\"></a>注意整个合并过程其实可以分解成：<strong>diff + apply</strong>这两个操作的组合</h3><hr>\n<ul>\n<li><strong>diff</strong>：既可以是指比较同一个tree的不同版本之间的差异（“Merger a range of revisions”），也可以是比较两个tree之间的差异（“2-URL Merges”）</li>\n<li><strong>apply</strong>：就是把这些差异应用到那你想要的working copy上</li>\n</ul>\n"},{"title":"拿起，放下。","date":"2019-05-18T16:00:00.000Z","_content":"\n### 拿得起，放得下。\n\n### 知易行难。","source":"_posts/拿起，放下。.md","raw":"---\ntitle: 拿起，放下。\ncategories: 其他\ndate: 2019-05-19\n---\n\n### 拿得起，放得下。\n\n### 知易行难。","slug":"拿起，放下。","published":1,"updated":"2019-05-23T11:55:21.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wuxc000gvsr7e3vmoptu","content":"<h3 id=\"拿得起，放得下。\"><a href=\"#拿得起，放得下。\" class=\"headerlink\" title=\"拿得起，放得下。\"></a>拿得起，放得下。</h3><h3 id=\"知易行难。\"><a href=\"#知易行难。\" class=\"headerlink\" title=\"知易行难。\"></a>知易行难。</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"拿得起，放得下。\"><a href=\"#拿得起，放得下。\" class=\"headerlink\" title=\"拿得起，放得下。\"></a>拿得起，放得下。</h3><h3 id=\"知易行难。\"><a href=\"#知易行难。\" class=\"headerlink\" title=\"知易行难。\"></a>知易行难。</h3>"},{"title":"使用VSCode调试C++代码","date":"2019-05-07T16:00:00.000Z","_content":"\n### 相关配置\n---\n\n* 这里有一份模板：https://github.com/dongtshj/debugCpp\n* **c_cpp_properties.json**：这个文件主要配置一些项目属性，include路径、定义的宏、编译器路径、C/C++版本等\n* **launch.json**：配置启动参数，只不过C++的要比其它脚本语言要复杂些。调试器路径、工作目录、生成目标架构等\n* **tasks.json**：基本上是配置一些生成构建C++程序时的参数，编译器类型、参与编译的源代码文件\n\n\n\n\n\n","source":"_posts/使用VSCode调试C++代码.md","raw":"---\ntitle: 使用VSCode调试C++代码\ncategories: C++\ndate: 2019-05-08\n---\n\n### 相关配置\n---\n\n* 这里有一份模板：https://github.com/dongtshj/debugCpp\n* **c_cpp_properties.json**：这个文件主要配置一些项目属性，include路径、定义的宏、编译器路径、C/C++版本等\n* **launch.json**：配置启动参数，只不过C++的要比其它脚本语言要复杂些。调试器路径、工作目录、生成目标架构等\n* **tasks.json**：基本上是配置一些生成构建C++程序时的参数，编译器类型、参与编译的源代码文件\n\n\n\n\n\n","slug":"使用VSCode调试C++代码","published":1,"updated":"2019-05-08T09:18:41.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wuxd000hvsr79ip2ht61","content":"<h3 id=\"相关配置\"><a href=\"#相关配置\" class=\"headerlink\" title=\"相关配置\"></a>相关配置</h3><hr>\n<ul>\n<li>这里有一份模板：<a href=\"https://github.com/dongtshj/debugCpp\" target=\"_blank\" rel=\"noopener\">https://github.com/dongtshj/debugCpp</a></li>\n<li><strong>c_cpp_properties.json</strong>：这个文件主要配置一些项目属性，include路径、定义的宏、编译器路径、C/C++版本等</li>\n<li><strong>launch.json</strong>：配置启动参数，只不过C++的要比其它脚本语言要复杂些。调试器路径、工作目录、生成目标架构等</li>\n<li><strong>tasks.json</strong>：基本上是配置一些生成构建C++程序时的参数，编译器类型、参与编译的源代码文件</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"相关配置\"><a href=\"#相关配置\" class=\"headerlink\" title=\"相关配置\"></a>相关配置</h3><hr>\n<ul>\n<li>这里有一份模板：<a href=\"https://github.com/dongtshj/debugCpp\" target=\"_blank\" rel=\"noopener\">https://github.com/dongtshj/debugCpp</a></li>\n<li><strong>c_cpp_properties.json</strong>：这个文件主要配置一些项目属性，include路径、定义的宏、编译器路径、C/C++版本等</li>\n<li><strong>launch.json</strong>：配置启动参数，只不过C++的要比其它脚本语言要复杂些。调试器路径、工作目录、生成目标架构等</li>\n<li><strong>tasks.json</strong>：基本上是配置一些生成构建C++程序时的参数，编译器类型、参与编译的源代码文件</li>\n</ul>\n"},{"title":"Python版本的XXTEA实现","date":"2019-05-07T16:00:00.000Z","_content":"\n### 关于xxtea\n---\n* xxtea一种简单、执行快速的加密方式，通常很少的代码量就能实现，缺点就是安全性不高\n* 对称密钥加密的一种：加密解密使用相同的密钥\n* 全称：Tiny Encryption Algorithm（中文：微型加密算法），前身是xtea；xtea的前身又是tea，最新的加强版本就是xxtea了\n\n### 算法实现\n---\n\nxxtea.py\n```\nimport struct  \n  \n_DELTA = 0x9E3779B9  \n  \ndef _long2str(v, w):  \n    n = (len(v) - 1) << 2  \n    if w:  \n        m = v[-1]  \n        if (m < n - 3) or (m > n): return ''  \n        n = m  \n    s = struct.pack('<%iL' % len(v), *v)  \n    return s[0:n] if w else s  \n  \ndef _str2long(s, w):  \n    n = len(s)  \n    m = (4 - (n & 3) & 3) + n  \n    s = s.ljust(m, \"\\0\")  \n    v = list(struct.unpack('<%iL' % (m >> 2), s))  \n    if w: v.append(n)  \n    return v  \n  \ndef encrypt(str, key):  \n    if str == '': return str  \n    v = _str2long(str, True)  \n    k = _str2long(key.ljust(16, \"\\0\"), False)  \n    n = len(v) - 1  \n    z = v[n]  \n    y = v[0]  \n    sum = 0  \n    q = 6 + 52 // (n + 1)  \n    while q > 0:  \n        sum = (sum + _DELTA) & 0xffffffff  \n        e = sum >> 2 & 3  \n        for p in xrange(n):  \n            y = v[p + 1]  \n            v[p] = (v[p] + ((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z))) & 0xffffffff  \n            z = v[p]  \n        y = v[0]  \n        v[n] = (v[n] + ((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4) ^ (sum ^ y) + (k[n & 3 ^ e] ^ z))) & 0xffffffff  \n        z = v[n]  \n        q -= 1  \n    return _long2str(v, False)  \n  \ndef decrypt(str, key):  \n    if str == '': return str  \n    v = _str2long(str, False)  \n    k = _str2long(key.ljust(16, \"\\0\"), False)  \n    n = len(v) - 1  \n    z = v[n]  \n    y = v[0]  \n    q = 6 + 52 // (n + 1)  \n    sum = (q * _DELTA) & 0xffffffff  \n    while (sum != 0):  \n        e = sum >> 2 & 3  \n        for p in xrange(n, 0, -1):  \n            z = v[p - 1]  \n            v[p] = (v[p] - ((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z))) & 0xffffffff  \n            y = v[p]  \n        z = v[n]  \n        v[0] = (v[0] - ((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4) ^ (sum ^ y) + (k[0 & 3 ^ e] ^ z))) & 0xffffffff  \n        y = v[0]  \n        sum = (sum - _DELTA) & 0xffffffff  \n    return _long2str(v, True)  \n  \nif __name__ == \"__main__\":  \n    print decrypt(encrypt('Hello XXTEA!', '16bytelongstring'), '16bytelongstring')  \n```\n\n### 使用\n---\n\ntest.py\n```\n#   导入加密算法\nimport xxtea\n\n#   待加密数据\ndata = \"python\"\n\n#   加密算法使用的密钥\nkey = \"03f0fdcbf5215b45fc790aaf2b965238\"\n\n#   加密：data现在的值：\"#\\xeeo`G{M\\x1b\\x08\\x8e\\x1b\\x87\"\ndata = xxtea.encrypt(data, key)\n\n#   解密：data的值现在恢复成原值：\"python\"\ndata = xxtea.decrypt(data, key)\n\n```\n\n### 为啥写这个\n---\n\n* cocos2dx-lua的客户端lua代码一般是需要进行加密的，否则别人下载客户端解压文件后是可以直接查看lua源码的\n* python操作：`arr[n:]`从第n个元素开始截取数组\n* 这个加密其实是很鸡肋的，想要破解其实也很容易。。。\n","source":"_posts/Python版本的XXTEA实现.md","raw":"---\ntitle: Python版本的XXTEA实现\ncategories: Python\ndate: 2019-05-08\n---\n\n### 关于xxtea\n---\n* xxtea一种简单、执行快速的加密方式，通常很少的代码量就能实现，缺点就是安全性不高\n* 对称密钥加密的一种：加密解密使用相同的密钥\n* 全称：Tiny Encryption Algorithm（中文：微型加密算法），前身是xtea；xtea的前身又是tea，最新的加强版本就是xxtea了\n\n### 算法实现\n---\n\nxxtea.py\n```\nimport struct  \n  \n_DELTA = 0x9E3779B9  \n  \ndef _long2str(v, w):  \n    n = (len(v) - 1) << 2  \n    if w:  \n        m = v[-1]  \n        if (m < n - 3) or (m > n): return ''  \n        n = m  \n    s = struct.pack('<%iL' % len(v), *v)  \n    return s[0:n] if w else s  \n  \ndef _str2long(s, w):  \n    n = len(s)  \n    m = (4 - (n & 3) & 3) + n  \n    s = s.ljust(m, \"\\0\")  \n    v = list(struct.unpack('<%iL' % (m >> 2), s))  \n    if w: v.append(n)  \n    return v  \n  \ndef encrypt(str, key):  \n    if str == '': return str  \n    v = _str2long(str, True)  \n    k = _str2long(key.ljust(16, \"\\0\"), False)  \n    n = len(v) - 1  \n    z = v[n]  \n    y = v[0]  \n    sum = 0  \n    q = 6 + 52 // (n + 1)  \n    while q > 0:  \n        sum = (sum + _DELTA) & 0xffffffff  \n        e = sum >> 2 & 3  \n        for p in xrange(n):  \n            y = v[p + 1]  \n            v[p] = (v[p] + ((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z))) & 0xffffffff  \n            z = v[p]  \n        y = v[0]  \n        v[n] = (v[n] + ((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4) ^ (sum ^ y) + (k[n & 3 ^ e] ^ z))) & 0xffffffff  \n        z = v[n]  \n        q -= 1  \n    return _long2str(v, False)  \n  \ndef decrypt(str, key):  \n    if str == '': return str  \n    v = _str2long(str, False)  \n    k = _str2long(key.ljust(16, \"\\0\"), False)  \n    n = len(v) - 1  \n    z = v[n]  \n    y = v[0]  \n    q = 6 + 52 // (n + 1)  \n    sum = (q * _DELTA) & 0xffffffff  \n    while (sum != 0):  \n        e = sum >> 2 & 3  \n        for p in xrange(n, 0, -1):  \n            z = v[p - 1]  \n            v[p] = (v[p] - ((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z))) & 0xffffffff  \n            y = v[p]  \n        z = v[n]  \n        v[0] = (v[0] - ((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4) ^ (sum ^ y) + (k[0 & 3 ^ e] ^ z))) & 0xffffffff  \n        y = v[0]  \n        sum = (sum - _DELTA) & 0xffffffff  \n    return _long2str(v, True)  \n  \nif __name__ == \"__main__\":  \n    print decrypt(encrypt('Hello XXTEA!', '16bytelongstring'), '16bytelongstring')  \n```\n\n### 使用\n---\n\ntest.py\n```\n#   导入加密算法\nimport xxtea\n\n#   待加密数据\ndata = \"python\"\n\n#   加密算法使用的密钥\nkey = \"03f0fdcbf5215b45fc790aaf2b965238\"\n\n#   加密：data现在的值：\"#\\xeeo`G{M\\x1b\\x08\\x8e\\x1b\\x87\"\ndata = xxtea.encrypt(data, key)\n\n#   解密：data的值现在恢复成原值：\"python\"\ndata = xxtea.decrypt(data, key)\n\n```\n\n### 为啥写这个\n---\n\n* cocos2dx-lua的客户端lua代码一般是需要进行加密的，否则别人下载客户端解压文件后是可以直接查看lua源码的\n* python操作：`arr[n:]`从第n个元素开始截取数组\n* 这个加密其实是很鸡肋的，想要破解其实也很容易。。。\n","slug":"Python版本的XXTEA实现","published":1,"updated":"2019-05-08T03:06:13.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wuxe000kvsr7j876ragi","content":"<h3 id=\"关于xxtea\"><a href=\"#关于xxtea\" class=\"headerlink\" title=\"关于xxtea\"></a>关于xxtea</h3><hr>\n<ul>\n<li>xxtea一种简单、执行快速的加密方式，通常很少的代码量就能实现，缺点就是安全性不高</li>\n<li>对称密钥加密的一种：加密解密使用相同的密钥</li>\n<li>全称：Tiny Encryption Algorithm（中文：微型加密算法），前身是xtea；xtea的前身又是tea，最新的加强版本就是xxtea了</li>\n</ul>\n<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><hr>\n<p>xxtea.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import struct  </span><br><span class=\"line\">  </span><br><span class=\"line\">_DELTA = 0x9E3779B9  </span><br><span class=\"line\">  </span><br><span class=\"line\">def _long2str(v, w):  </span><br><span class=\"line\">    n = (len(v) - 1) &lt;&lt; 2  </span><br><span class=\"line\">    if w:  </span><br><span class=\"line\">        m = v[-1]  </span><br><span class=\"line\">        if (m &lt; n - 3) or (m &gt; n): return &apos;&apos;  </span><br><span class=\"line\">        n = m  </span><br><span class=\"line\">    s = struct.pack(&apos;&lt;%iL&apos; % len(v), *v)  </span><br><span class=\"line\">    return s[0:n] if w else s  </span><br><span class=\"line\">  </span><br><span class=\"line\">def _str2long(s, w):  </span><br><span class=\"line\">    n = len(s)  </span><br><span class=\"line\">    m = (4 - (n &amp; 3) &amp; 3) + n  </span><br><span class=\"line\">    s = s.ljust(m, &quot;\\0&quot;)  </span><br><span class=\"line\">    v = list(struct.unpack(&apos;&lt;%iL&apos; % (m &gt;&gt; 2), s))  </span><br><span class=\"line\">    if w: v.append(n)  </span><br><span class=\"line\">    return v  </span><br><span class=\"line\">  </span><br><span class=\"line\">def encrypt(str, key):  </span><br><span class=\"line\">    if str == &apos;&apos;: return str  </span><br><span class=\"line\">    v = _str2long(str, True)  </span><br><span class=\"line\">    k = _str2long(key.ljust(16, &quot;\\0&quot;), False)  </span><br><span class=\"line\">    n = len(v) - 1  </span><br><span class=\"line\">    z = v[n]  </span><br><span class=\"line\">    y = v[0]  </span><br><span class=\"line\">    sum = 0  </span><br><span class=\"line\">    q = 6 + 52 // (n + 1)  </span><br><span class=\"line\">    while q &gt; 0:  </span><br><span class=\"line\">        sum = (sum + _DELTA) &amp; 0xffffffff  </span><br><span class=\"line\">        e = sum &gt;&gt; 2 &amp; 3  </span><br><span class=\"line\">        for p in xrange(n):  </span><br><span class=\"line\">            y = v[p + 1]  </span><br><span class=\"line\">            v[p] = (v[p] + ((z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[p &amp; 3 ^ e] ^ z))) &amp; 0xffffffff  </span><br><span class=\"line\">            z = v[p]  </span><br><span class=\"line\">        y = v[0]  </span><br><span class=\"line\">        v[n] = (v[n] + ((z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[n &amp; 3 ^ e] ^ z))) &amp; 0xffffffff  </span><br><span class=\"line\">        z = v[n]  </span><br><span class=\"line\">        q -= 1  </span><br><span class=\"line\">    return _long2str(v, False)  </span><br><span class=\"line\">  </span><br><span class=\"line\">def decrypt(str, key):  </span><br><span class=\"line\">    if str == &apos;&apos;: return str  </span><br><span class=\"line\">    v = _str2long(str, False)  </span><br><span class=\"line\">    k = _str2long(key.ljust(16, &quot;\\0&quot;), False)  </span><br><span class=\"line\">    n = len(v) - 1  </span><br><span class=\"line\">    z = v[n]  </span><br><span class=\"line\">    y = v[0]  </span><br><span class=\"line\">    q = 6 + 52 // (n + 1)  </span><br><span class=\"line\">    sum = (q * _DELTA) &amp; 0xffffffff  </span><br><span class=\"line\">    while (sum != 0):  </span><br><span class=\"line\">        e = sum &gt;&gt; 2 &amp; 3  </span><br><span class=\"line\">        for p in xrange(n, 0, -1):  </span><br><span class=\"line\">            z = v[p - 1]  </span><br><span class=\"line\">            v[p] = (v[p] - ((z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[p &amp; 3 ^ e] ^ z))) &amp; 0xffffffff  </span><br><span class=\"line\">            y = v[p]  </span><br><span class=\"line\">        z = v[n]  </span><br><span class=\"line\">        v[0] = (v[0] - ((z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[0 &amp; 3 ^ e] ^ z))) &amp; 0xffffffff  </span><br><span class=\"line\">        y = v[0]  </span><br><span class=\"line\">        sum = (sum - _DELTA) &amp; 0xffffffff  </span><br><span class=\"line\">    return _long2str(v, True)  </span><br><span class=\"line\">  </span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:  </span><br><span class=\"line\">    print decrypt(encrypt(&apos;Hello XXTEA!&apos;, &apos;16bytelongstring&apos;), &apos;16bytelongstring&apos;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><hr>\n<p>test.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#   导入加密算法</span><br><span class=\"line\">import xxtea</span><br><span class=\"line\"></span><br><span class=\"line\">#   待加密数据</span><br><span class=\"line\">data = &quot;python&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#   加密算法使用的密钥</span><br><span class=\"line\">key = &quot;03f0fdcbf5215b45fc790aaf2b965238&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#   加密：data现在的值：&quot;#\\xeeo`G&#123;M\\x1b\\x08\\x8e\\x1b\\x87&quot;</span><br><span class=\"line\">data = xxtea.encrypt(data, key)</span><br><span class=\"line\"></span><br><span class=\"line\">#   解密：data的值现在恢复成原值：&quot;python&quot;</span><br><span class=\"line\">data = xxtea.decrypt(data, key)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"为啥写这个\"><a href=\"#为啥写这个\" class=\"headerlink\" title=\"为啥写这个\"></a>为啥写这个</h3><hr>\n<ul>\n<li>cocos2dx-lua的客户端lua代码一般是需要进行加密的，否则别人下载客户端解压文件后是可以直接查看lua源码的</li>\n<li>python操作：<code>arr[n:]</code>从第n个元素开始截取数组</li>\n<li>这个加密其实是很鸡肋的，想要破解其实也很容易。。。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于xxtea\"><a href=\"#关于xxtea\" class=\"headerlink\" title=\"关于xxtea\"></a>关于xxtea</h3><hr>\n<ul>\n<li>xxtea一种简单、执行快速的加密方式，通常很少的代码量就能实现，缺点就是安全性不高</li>\n<li>对称密钥加密的一种：加密解密使用相同的密钥</li>\n<li>全称：Tiny Encryption Algorithm（中文：微型加密算法），前身是xtea；xtea的前身又是tea，最新的加强版本就是xxtea了</li>\n</ul>\n<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><hr>\n<p>xxtea.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import struct  </span><br><span class=\"line\">  </span><br><span class=\"line\">_DELTA = 0x9E3779B9  </span><br><span class=\"line\">  </span><br><span class=\"line\">def _long2str(v, w):  </span><br><span class=\"line\">    n = (len(v) - 1) &lt;&lt; 2  </span><br><span class=\"line\">    if w:  </span><br><span class=\"line\">        m = v[-1]  </span><br><span class=\"line\">        if (m &lt; n - 3) or (m &gt; n): return &apos;&apos;  </span><br><span class=\"line\">        n = m  </span><br><span class=\"line\">    s = struct.pack(&apos;&lt;%iL&apos; % len(v), *v)  </span><br><span class=\"line\">    return s[0:n] if w else s  </span><br><span class=\"line\">  </span><br><span class=\"line\">def _str2long(s, w):  </span><br><span class=\"line\">    n = len(s)  </span><br><span class=\"line\">    m = (4 - (n &amp; 3) &amp; 3) + n  </span><br><span class=\"line\">    s = s.ljust(m, &quot;\\0&quot;)  </span><br><span class=\"line\">    v = list(struct.unpack(&apos;&lt;%iL&apos; % (m &gt;&gt; 2), s))  </span><br><span class=\"line\">    if w: v.append(n)  </span><br><span class=\"line\">    return v  </span><br><span class=\"line\">  </span><br><span class=\"line\">def encrypt(str, key):  </span><br><span class=\"line\">    if str == &apos;&apos;: return str  </span><br><span class=\"line\">    v = _str2long(str, True)  </span><br><span class=\"line\">    k = _str2long(key.ljust(16, &quot;\\0&quot;), False)  </span><br><span class=\"line\">    n = len(v) - 1  </span><br><span class=\"line\">    z = v[n]  </span><br><span class=\"line\">    y = v[0]  </span><br><span class=\"line\">    sum = 0  </span><br><span class=\"line\">    q = 6 + 52 // (n + 1)  </span><br><span class=\"line\">    while q &gt; 0:  </span><br><span class=\"line\">        sum = (sum + _DELTA) &amp; 0xffffffff  </span><br><span class=\"line\">        e = sum &gt;&gt; 2 &amp; 3  </span><br><span class=\"line\">        for p in xrange(n):  </span><br><span class=\"line\">            y = v[p + 1]  </span><br><span class=\"line\">            v[p] = (v[p] + ((z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[p &amp; 3 ^ e] ^ z))) &amp; 0xffffffff  </span><br><span class=\"line\">            z = v[p]  </span><br><span class=\"line\">        y = v[0]  </span><br><span class=\"line\">        v[n] = (v[n] + ((z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[n &amp; 3 ^ e] ^ z))) &amp; 0xffffffff  </span><br><span class=\"line\">        z = v[n]  </span><br><span class=\"line\">        q -= 1  </span><br><span class=\"line\">    return _long2str(v, False)  </span><br><span class=\"line\">  </span><br><span class=\"line\">def decrypt(str, key):  </span><br><span class=\"line\">    if str == &apos;&apos;: return str  </span><br><span class=\"line\">    v = _str2long(str, False)  </span><br><span class=\"line\">    k = _str2long(key.ljust(16, &quot;\\0&quot;), False)  </span><br><span class=\"line\">    n = len(v) - 1  </span><br><span class=\"line\">    z = v[n]  </span><br><span class=\"line\">    y = v[0]  </span><br><span class=\"line\">    q = 6 + 52 // (n + 1)  </span><br><span class=\"line\">    sum = (q * _DELTA) &amp; 0xffffffff  </span><br><span class=\"line\">    while (sum != 0):  </span><br><span class=\"line\">        e = sum &gt;&gt; 2 &amp; 3  </span><br><span class=\"line\">        for p in xrange(n, 0, -1):  </span><br><span class=\"line\">            z = v[p - 1]  </span><br><span class=\"line\">            v[p] = (v[p] - ((z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[p &amp; 3 ^ e] ^ z))) &amp; 0xffffffff  </span><br><span class=\"line\">            y = v[p]  </span><br><span class=\"line\">        z = v[n]  </span><br><span class=\"line\">        v[0] = (v[0] - ((z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[0 &amp; 3 ^ e] ^ z))) &amp; 0xffffffff  </span><br><span class=\"line\">        y = v[0]  </span><br><span class=\"line\">        sum = (sum - _DELTA) &amp; 0xffffffff  </span><br><span class=\"line\">    return _long2str(v, True)  </span><br><span class=\"line\">  </span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:  </span><br><span class=\"line\">    print decrypt(encrypt(&apos;Hello XXTEA!&apos;, &apos;16bytelongstring&apos;), &apos;16bytelongstring&apos;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><hr>\n<p>test.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#   导入加密算法</span><br><span class=\"line\">import xxtea</span><br><span class=\"line\"></span><br><span class=\"line\">#   待加密数据</span><br><span class=\"line\">data = &quot;python&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#   加密算法使用的密钥</span><br><span class=\"line\">key = &quot;03f0fdcbf5215b45fc790aaf2b965238&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#   加密：data现在的值：&quot;#\\xeeo`G&#123;M\\x1b\\x08\\x8e\\x1b\\x87&quot;</span><br><span class=\"line\">data = xxtea.encrypt(data, key)</span><br><span class=\"line\"></span><br><span class=\"line\">#   解密：data的值现在恢复成原值：&quot;python&quot;</span><br><span class=\"line\">data = xxtea.decrypt(data, key)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"为啥写这个\"><a href=\"#为啥写这个\" class=\"headerlink\" title=\"为啥写这个\"></a>为啥写这个</h3><hr>\n<ul>\n<li>cocos2dx-lua的客户端lua代码一般是需要进行加密的，否则别人下载客户端解压文件后是可以直接查看lua源码的</li>\n<li>python操作：<code>arr[n:]</code>从第n个元素开始截取数组</li>\n<li>这个加密其实是很鸡肋的，想要破解其实也很容易。。。</li>\n</ul>\n"},{"title":"使用VSCode调试JavaScript代码","date":"2019-05-07T16:00:00.000Z","_content":"\n### 说明\n---\n\n* 这里有现成的模块：https://github.com/dongtshj/debugJS\n* 想要执行、调试JavaScript代码，就需要JavaScript的解释器、调试器程序。这些都集成在了JavaScript引擎之中，而JavaScript引擎一般是集成在浏览器程序之中的，比如Google Chrome（V8引擎）、Mozilla Firefox（SpiderMonkey引擎）\n* 这里是使用VSCode的一款微软开发的名为Debugger for Chrome的插件来完成使用chrome调试JavaScript代码\n\n### 模板项目结构\n---\n\n```\n|---debugJS\n|   |---index.html\n|   |---main.js\n|   |---.vscode\n|   |   |---launch.json\n```\n\n* 要想浏览器执行你的代码，首先需要一个HTML文件，项目里使用的是index.html\n* 然后需要一个.js文件来存放JavaScript代码，项目里使用的是main.js\n* 最后再把.js文件嵌入到HTML文件当中就可以顺利调试、执行了\n* launch.json是用来配置启动参数的，内容如下：\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"chrome\",\n            \"request\": \"launch\",\n            \"name\": \"Launch Chrome\",\n            \"sourceMaps\": true,\n            \"file\": \"${workspaceFolder}/index.html\"\n        },\n    ]\n}\n```\n\n### Python和Lua\n---\n这两个就很简单了，没啥好说的，只要下载对应的VSCode插件就能运行、调试相应的代码了。\n\n\n","source":"_posts/使用VSCode调试JavaScript代码.md","raw":"---\ntitle: 使用VSCode调试JavaScript代码\ncategories: JavaScript\ndate: 2019-05-08\n---\n\n### 说明\n---\n\n* 这里有现成的模块：https://github.com/dongtshj/debugJS\n* 想要执行、调试JavaScript代码，就需要JavaScript的解释器、调试器程序。这些都集成在了JavaScript引擎之中，而JavaScript引擎一般是集成在浏览器程序之中的，比如Google Chrome（V8引擎）、Mozilla Firefox（SpiderMonkey引擎）\n* 这里是使用VSCode的一款微软开发的名为Debugger for Chrome的插件来完成使用chrome调试JavaScript代码\n\n### 模板项目结构\n---\n\n```\n|---debugJS\n|   |---index.html\n|   |---main.js\n|   |---.vscode\n|   |   |---launch.json\n```\n\n* 要想浏览器执行你的代码，首先需要一个HTML文件，项目里使用的是index.html\n* 然后需要一个.js文件来存放JavaScript代码，项目里使用的是main.js\n* 最后再把.js文件嵌入到HTML文件当中就可以顺利调试、执行了\n* launch.json是用来配置启动参数的，内容如下：\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"chrome\",\n            \"request\": \"launch\",\n            \"name\": \"Launch Chrome\",\n            \"sourceMaps\": true,\n            \"file\": \"${workspaceFolder}/index.html\"\n        },\n    ]\n}\n```\n\n### Python和Lua\n---\n这两个就很简单了，没啥好说的，只要下载对应的VSCode插件就能运行、调试相应的代码了。\n\n\n","slug":"使用VSCode调试JavaScript代码","published":1,"updated":"2019-05-10T08:34:08.187Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wuxf000mvsr7ugh1x2zc","content":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><hr>\n<ul>\n<li>这里有现成的模块：<a href=\"https://github.com/dongtshj/debugJS\" target=\"_blank\" rel=\"noopener\">https://github.com/dongtshj/debugJS</a></li>\n<li>想要执行、调试JavaScript代码，就需要JavaScript的解释器、调试器程序。这些都集成在了JavaScript引擎之中，而JavaScript引擎一般是集成在浏览器程序之中的，比如Google Chrome（V8引擎）、Mozilla Firefox（SpiderMonkey引擎）</li>\n<li>这里是使用VSCode的一款微软开发的名为Debugger for Chrome的插件来完成使用chrome调试JavaScript代码</li>\n</ul>\n<h3 id=\"模板项目结构\"><a href=\"#模板项目结构\" class=\"headerlink\" title=\"模板项目结构\"></a>模板项目结构</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|---debugJS</span><br><span class=\"line\">|   |---index.html</span><br><span class=\"line\">|   |---main.js</span><br><span class=\"line\">|   |---.vscode</span><br><span class=\"line\">|   |   |---launch.json</span><br></pre></td></tr></table></figure>\n<ul>\n<li>要想浏览器执行你的代码，首先需要一个HTML文件，项目里使用的是index.html</li>\n<li>然后需要一个.js文件来存放JavaScript代码，项目里使用的是main.js</li>\n<li>最后再把.js文件嵌入到HTML文件当中就可以顺利调试、执行了</li>\n<li>launch.json是用来配置启动参数的，内容如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class=\"line\">    &quot;configurations&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;chrome&quot;,</span><br><span class=\"line\">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class=\"line\">            &quot;name&quot;: &quot;Launch Chrome&quot;,</span><br><span class=\"line\">            &quot;sourceMaps&quot;: true,</span><br><span class=\"line\">            &quot;file&quot;: &quot;$&#123;workspaceFolder&#125;/index.html&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Python和Lua\"><a href=\"#Python和Lua\" class=\"headerlink\" title=\"Python和Lua\"></a>Python和Lua</h3><hr>\n<p>这两个就很简单了，没啥好说的，只要下载对应的VSCode插件就能运行、调试相应的代码了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><hr>\n<ul>\n<li>这里有现成的模块：<a href=\"https://github.com/dongtshj/debugJS\" target=\"_blank\" rel=\"noopener\">https://github.com/dongtshj/debugJS</a></li>\n<li>想要执行、调试JavaScript代码，就需要JavaScript的解释器、调试器程序。这些都集成在了JavaScript引擎之中，而JavaScript引擎一般是集成在浏览器程序之中的，比如Google Chrome（V8引擎）、Mozilla Firefox（SpiderMonkey引擎）</li>\n<li>这里是使用VSCode的一款微软开发的名为Debugger for Chrome的插件来完成使用chrome调试JavaScript代码</li>\n</ul>\n<h3 id=\"模板项目结构\"><a href=\"#模板项目结构\" class=\"headerlink\" title=\"模板项目结构\"></a>模板项目结构</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|---debugJS</span><br><span class=\"line\">|   |---index.html</span><br><span class=\"line\">|   |---main.js</span><br><span class=\"line\">|   |---.vscode</span><br><span class=\"line\">|   |   |---launch.json</span><br></pre></td></tr></table></figure>\n<ul>\n<li>要想浏览器执行你的代码，首先需要一个HTML文件，项目里使用的是index.html</li>\n<li>然后需要一个.js文件来存放JavaScript代码，项目里使用的是main.js</li>\n<li>最后再把.js文件嵌入到HTML文件当中就可以顺利调试、执行了</li>\n<li>launch.json是用来配置启动参数的，内容如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class=\"line\">    &quot;configurations&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;chrome&quot;,</span><br><span class=\"line\">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class=\"line\">            &quot;name&quot;: &quot;Launch Chrome&quot;,</span><br><span class=\"line\">            &quot;sourceMaps&quot;: true,</span><br><span class=\"line\">            &quot;file&quot;: &quot;$&#123;workspaceFolder&#125;/index.html&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Python和Lua\"><a href=\"#Python和Lua\" class=\"headerlink\" title=\"Python和Lua\"></a>Python和Lua</h3><hr>\n<p>这两个就很简单了，没啥好说的，只要下载对应的VSCode插件就能运行、调试相应的代码了。</p>\n"},{"title":"在Visual Studio中搜索文件名","date":"2019-06-23T16:00:00.000Z","_content":"\n在VS Code中执行这个操作是用快捷键 `Ctrl + P` 来完成\n\n后来觉得VS Code这个功能确实好用，尤其使用脚本语言开发时，智能跳转好像不太好使。就想宇宙第一的Visual Studio肯定有类似功能吧。\n\n答案是：`Ctrl + ,`\n\n其它Visual Studio的相关搜索快捷键：\n* 全局搜索 `Ctrl + Shift + F`\n* 单个文件内搜索 `Ctrl + F`\n* 跳转到下一个搜索结果：`F3`，上一个：`Shift + F3`","source":"_posts/在Visual Studio中搜索文件名.md","raw":"---\ntitle: 在Visual Studio中搜索文件名\ncategories: Visual Studio\ndate: 2019-06-24\n---\n\n在VS Code中执行这个操作是用快捷键 `Ctrl + P` 来完成\n\n后来觉得VS Code这个功能确实好用，尤其使用脚本语言开发时，智能跳转好像不太好使。就想宇宙第一的Visual Studio肯定有类似功能吧。\n\n答案是：`Ctrl + ,`\n\n其它Visual Studio的相关搜索快捷键：\n* 全局搜索 `Ctrl + Shift + F`\n* 单个文件内搜索 `Ctrl + F`\n* 跳转到下一个搜索结果：`F3`，上一个：`Shift + F3`","slug":"在Visual Studio中搜索文件名","published":1,"updated":"2019-06-24T13:08:16.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wuxg000ovsr76m86v04w","content":"<p>在VS Code中执行这个操作是用快捷键 <code>Ctrl + P</code> 来完成</p>\n<p>后来觉得VS Code这个功能确实好用，尤其使用脚本语言开发时，智能跳转好像不太好使。就想宇宙第一的Visual Studio肯定有类似功能吧。</p>\n<p>答案是：<code>Ctrl + ,</code></p>\n<p>其它Visual Studio的相关搜索快捷键：</p>\n<ul>\n<li>全局搜索 <code>Ctrl + Shift + F</code></li>\n<li>单个文件内搜索 <code>Ctrl + F</code></li>\n<li>跳转到下一个搜索结果：<code>F3</code>，上一个：<code>Shift + F3</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>在VS Code中执行这个操作是用快捷键 <code>Ctrl + P</code> 来完成</p>\n<p>后来觉得VS Code这个功能确实好用，尤其使用脚本语言开发时，智能跳转好像不太好使。就想宇宙第一的Visual Studio肯定有类似功能吧。</p>\n<p>答案是：<code>Ctrl + ,</code></p>\n<p>其它Visual Studio的相关搜索快捷键：</p>\n<ul>\n<li>全局搜索 <code>Ctrl + Shift + F</code></li>\n<li>单个文件内搜索 <code>Ctrl + F</code></li>\n<li>跳转到下一个搜索结果：<code>F3</code>，上一个：<code>Shift + F3</code></li>\n</ul>\n"},{"title":"编程语言的分类","date":"2019-05-12T16:00:00.000Z","_content":"\n* 本来打算写的，网上搜到一个2015就已经存在的[文章了](https://www.liuchuo.net/archives/130)。\n* [知乎上的](https://www.zhihu.com/question/19918532)\n* [英文文章](https://www.coursehero.com/file/p5m8e1h/Definition-Trapped-and-Untrapped-Errors-Trapped-errors-make-a-program-halt/)\n","source":"_posts/编程语言的分类.md","raw":"---\ntitle: 编程语言的分类\ncategories: 软件工程\ndate: 2019-05-13\n---\n\n* 本来打算写的，网上搜到一个2015就已经存在的[文章了](https://www.liuchuo.net/archives/130)。\n* [知乎上的](https://www.zhihu.com/question/19918532)\n* [英文文章](https://www.coursehero.com/file/p5m8e1h/Definition-Trapped-and-Untrapped-Errors-Trapped-errors-make-a-program-halt/)\n","slug":"编程语言的分类","published":1,"updated":"2019-05-13T10:02:55.718Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wv0e0015vsr7wd06dsbo","content":"<ul>\n<li>本来打算写的，网上搜到一个2015就已经存在的<a href=\"https://www.liuchuo.net/archives/130\" target=\"_blank\" rel=\"noopener\">文章了</a>。</li>\n<li><a href=\"https://www.zhihu.com/question/19918532\" target=\"_blank\" rel=\"noopener\">知乎上的</a></li>\n<li><a href=\"https://www.coursehero.com/file/p5m8e1h/Definition-Trapped-and-Untrapped-Errors-Trapped-errors-make-a-program-halt/\" target=\"_blank\" rel=\"noopener\">英文文章</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>本来打算写的，网上搜到一个2015就已经存在的<a href=\"https://www.liuchuo.net/archives/130\" target=\"_blank\" rel=\"noopener\">文章了</a>。</li>\n<li><a href=\"https://www.zhihu.com/question/19918532\" target=\"_blank\" rel=\"noopener\">知乎上的</a></li>\n<li><a href=\"https://www.coursehero.com/file/p5m8e1h/Definition-Trapped-and-Untrapped-Errors-Trapped-errors-make-a-program-halt/\" target=\"_blank\" rel=\"noopener\">英文文章</a></li>\n</ul>\n"},{"title":"图形用户界面 VS 命令行界面","date":"2019-03-09T16:00:00.000Z","_content":"\n### 命令行界面（command-line interface，缩写CLI）\n---\n计算机早期时代，在图形用户界面（GUI）得到普及之前，CLI使用相当广泛。也有人叫做CUI（character user interface），字符用户界面。\n说实话，刚开始接触命令行界面时，我真的是很讨厌这种交互方式。试想下，要想使用这种方式操作电脑的话，对你的要求有哪些呢？\n* 最基本的，你要有一定的英文基础吧，光这一点就要刷掉不少潜在的用户了。毕竟这CLI的命令都是英文单词或者缩写组成的，而不是拼音或者中文汉字。\n* 打字的速度和准确度要有，光是记住还不行，你还要输入正确的英文单词形式的命令，即便是少一个字母都不行。想想看多难受。\n* 这种交互方式，对于用户来说可以有无数种输入组合，相比图形界面作为输入方式的一连串按钮来说，出错的可能性简直不要太高。但是换作按钮的话，就那几个按钮。输入的可能性都给你限制死了，你还能折腾出什么错误呢。\n* 另外就是键入英文命令可能会出错的问题，如果换作按钮的话，点错的概率是不是直接下降好几个数量级\n\n难怪普通用户都对这种交互方式敬而远之，通常会觉得只有电影里厉害的黑客才会使用它\n\n### 图形用户界面（Graphical User Interface，缩写GUI）\n---\n我一开始能被计算机所吸引，绝对是因为计算机显示出的绚丽多彩、五颜六色的显示屏所吸引的。太好玩了，电视机虽然也有好看的屏幕。但是和计算机相比，它的显示太死板了，都是预先设定好的，人很难从外界干预或者说和它进行交互。但是计算机就不一样了，动动鼠标，敲打键盘，计算机的显示会立刻做出相应的变化。\n\n倘若用计算机来进行游戏的话，那画面感更容易令人着迷。现在人们常说的用户体验，我想也是针对GUI来说的，软件界面的颜色搭配，按钮布局，动画效果。这些细节都能体现出“体验”二字。\n\n### CLI VS GUI\n---\n难道说CLI真的就一点用处都没有吗？\n当然不是，事实就是在某些应用场合下，CLI有着不可替代的作用！\n* 比如，现在要你去操作一台远程服务器时，我想大多数人立刻想到的就是使用CLI，这就十分方面顺手。而不是来个远程桌面连接，这显的太麻烦了。或者你也可以打个飞的，跑到服务器面前给他接个显示器来用。\n* 相比花里胡哨的图形界面，CLI可以节省更多的计算资源，想想现在还很常见几百兆内存的没有显示设备的Linux服务器配置，但是上哪去找几百兆的Windows设备去？\n* 自动化的能力，在CLI环境下使用脚本可以很容易执行一些自动化的流程，甚至在Windows上也会有人经常使用批处理来处理重复性但又容易出错的工作。这样是换成GUI的话，还要使用类似按键精灵之类的软件来录制一些操作，就显得十分笨拙！\n\n\n### 世界上没有绝对的好，也没有绝对的坏。\n---\n就像CLI不支持鼠标这一特性，似乎显的很遗憾，因为鼠标确确实实能够提供丰富的输入操作，而CLI竟然不支持！\n\n但是换一个角度来看，恰恰是因为它不支持鼠标这一特性，才能够使它在远程操作一台计算机时避免了不必要的麻烦和繁琐的点击操作，可以让用户的双手始终专注于键盘之上！才让CLI有了施展威力的机会。\n\n想想看，弱点在某些环境下竟然又成为了优势！\n\n","source":"_posts/图形用户界面 VS 命令行界面.md","raw":"---\ntitle: 图形用户界面 VS 命令行界面\ncategories: 在类比中学习\ndate: 2019-03-10\n---\n\n### 命令行界面（command-line interface，缩写CLI）\n---\n计算机早期时代，在图形用户界面（GUI）得到普及之前，CLI使用相当广泛。也有人叫做CUI（character user interface），字符用户界面。\n说实话，刚开始接触命令行界面时，我真的是很讨厌这种交互方式。试想下，要想使用这种方式操作电脑的话，对你的要求有哪些呢？\n* 最基本的，你要有一定的英文基础吧，光这一点就要刷掉不少潜在的用户了。毕竟这CLI的命令都是英文单词或者缩写组成的，而不是拼音或者中文汉字。\n* 打字的速度和准确度要有，光是记住还不行，你还要输入正确的英文单词形式的命令，即便是少一个字母都不行。想想看多难受。\n* 这种交互方式，对于用户来说可以有无数种输入组合，相比图形界面作为输入方式的一连串按钮来说，出错的可能性简直不要太高。但是换作按钮的话，就那几个按钮。输入的可能性都给你限制死了，你还能折腾出什么错误呢。\n* 另外就是键入英文命令可能会出错的问题，如果换作按钮的话，点错的概率是不是直接下降好几个数量级\n\n难怪普通用户都对这种交互方式敬而远之，通常会觉得只有电影里厉害的黑客才会使用它\n\n### 图形用户界面（Graphical User Interface，缩写GUI）\n---\n我一开始能被计算机所吸引，绝对是因为计算机显示出的绚丽多彩、五颜六色的显示屏所吸引的。太好玩了，电视机虽然也有好看的屏幕。但是和计算机相比，它的显示太死板了，都是预先设定好的，人很难从外界干预或者说和它进行交互。但是计算机就不一样了，动动鼠标，敲打键盘，计算机的显示会立刻做出相应的变化。\n\n倘若用计算机来进行游戏的话，那画面感更容易令人着迷。现在人们常说的用户体验，我想也是针对GUI来说的，软件界面的颜色搭配，按钮布局，动画效果。这些细节都能体现出“体验”二字。\n\n### CLI VS GUI\n---\n难道说CLI真的就一点用处都没有吗？\n当然不是，事实就是在某些应用场合下，CLI有着不可替代的作用！\n* 比如，现在要你去操作一台远程服务器时，我想大多数人立刻想到的就是使用CLI，这就十分方面顺手。而不是来个远程桌面连接，这显的太麻烦了。或者你也可以打个飞的，跑到服务器面前给他接个显示器来用。\n* 相比花里胡哨的图形界面，CLI可以节省更多的计算资源，想想现在还很常见几百兆内存的没有显示设备的Linux服务器配置，但是上哪去找几百兆的Windows设备去？\n* 自动化的能力，在CLI环境下使用脚本可以很容易执行一些自动化的流程，甚至在Windows上也会有人经常使用批处理来处理重复性但又容易出错的工作。这样是换成GUI的话，还要使用类似按键精灵之类的软件来录制一些操作，就显得十分笨拙！\n\n\n### 世界上没有绝对的好，也没有绝对的坏。\n---\n就像CLI不支持鼠标这一特性，似乎显的很遗憾，因为鼠标确确实实能够提供丰富的输入操作，而CLI竟然不支持！\n\n但是换一个角度来看，恰恰是因为它不支持鼠标这一特性，才能够使它在远程操作一台计算机时避免了不必要的麻烦和繁琐的点击操作，可以让用户的双手始终专注于键盘之上！才让CLI有了施展威力的机会。\n\n想想看，弱点在某些环境下竟然又成为了优势！\n\n","slug":"图形用户界面 VS 命令行界面","published":1,"updated":"2019-05-10T06:30:10.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wv0g0016vsr7g79r33xp","content":"<h3 id=\"命令行界面（command-line-interface，缩写CLI）\"><a href=\"#命令行界面（command-line-interface，缩写CLI）\" class=\"headerlink\" title=\"命令行界面（command-line interface，缩写CLI）\"></a>命令行界面（command-line interface，缩写CLI）</h3><hr>\n<p>计算机早期时代，在图形用户界面（GUI）得到普及之前，CLI使用相当广泛。也有人叫做CUI（character user interface），字符用户界面。<br>说实话，刚开始接触命令行界面时，我真的是很讨厌这种交互方式。试想下，要想使用这种方式操作电脑的话，对你的要求有哪些呢？</p>\n<ul>\n<li>最基本的，你要有一定的英文基础吧，光这一点就要刷掉不少潜在的用户了。毕竟这CLI的命令都是英文单词或者缩写组成的，而不是拼音或者中文汉字。</li>\n<li>打字的速度和准确度要有，光是记住还不行，你还要输入正确的英文单词形式的命令，即便是少一个字母都不行。想想看多难受。</li>\n<li>这种交互方式，对于用户来说可以有无数种输入组合，相比图形界面作为输入方式的一连串按钮来说，出错的可能性简直不要太高。但是换作按钮的话，就那几个按钮。输入的可能性都给你限制死了，你还能折腾出什么错误呢。</li>\n<li>另外就是键入英文命令可能会出错的问题，如果换作按钮的话，点错的概率是不是直接下降好几个数量级</li>\n</ul>\n<p>难怪普通用户都对这种交互方式敬而远之，通常会觉得只有电影里厉害的黑客才会使用它</p>\n<h3 id=\"图形用户界面（Graphical-User-Interface，缩写GUI）\"><a href=\"#图形用户界面（Graphical-User-Interface，缩写GUI）\" class=\"headerlink\" title=\"图形用户界面（Graphical User Interface，缩写GUI）\"></a>图形用户界面（Graphical User Interface，缩写GUI）</h3><hr>\n<p>我一开始能被计算机所吸引，绝对是因为计算机显示出的绚丽多彩、五颜六色的显示屏所吸引的。太好玩了，电视机虽然也有好看的屏幕。但是和计算机相比，它的显示太死板了，都是预先设定好的，人很难从外界干预或者说和它进行交互。但是计算机就不一样了，动动鼠标，敲打键盘，计算机的显示会立刻做出相应的变化。</p>\n<p>倘若用计算机来进行游戏的话，那画面感更容易令人着迷。现在人们常说的用户体验，我想也是针对GUI来说的，软件界面的颜色搭配，按钮布局，动画效果。这些细节都能体现出“体验”二字。</p>\n<h3 id=\"CLI-VS-GUI\"><a href=\"#CLI-VS-GUI\" class=\"headerlink\" title=\"CLI VS GUI\"></a>CLI VS GUI</h3><hr>\n<p>难道说CLI真的就一点用处都没有吗？<br>当然不是，事实就是在某些应用场合下，CLI有着不可替代的作用！</p>\n<ul>\n<li>比如，现在要你去操作一台远程服务器时，我想大多数人立刻想到的就是使用CLI，这就十分方面顺手。而不是来个远程桌面连接，这显的太麻烦了。或者你也可以打个飞的，跑到服务器面前给他接个显示器来用。</li>\n<li>相比花里胡哨的图形界面，CLI可以节省更多的计算资源，想想现在还很常见几百兆内存的没有显示设备的Linux服务器配置，但是上哪去找几百兆的Windows设备去？</li>\n<li>自动化的能力，在CLI环境下使用脚本可以很容易执行一些自动化的流程，甚至在Windows上也会有人经常使用批处理来处理重复性但又容易出错的工作。这样是换成GUI的话，还要使用类似按键精灵之类的软件来录制一些操作，就显得十分笨拙！</li>\n</ul>\n<h3 id=\"世界上没有绝对的好，也没有绝对的坏。\"><a href=\"#世界上没有绝对的好，也没有绝对的坏。\" class=\"headerlink\" title=\"世界上没有绝对的好，也没有绝对的坏。\"></a>世界上没有绝对的好，也没有绝对的坏。</h3><hr>\n<p>就像CLI不支持鼠标这一特性，似乎显的很遗憾，因为鼠标确确实实能够提供丰富的输入操作，而CLI竟然不支持！</p>\n<p>但是换一个角度来看，恰恰是因为它不支持鼠标这一特性，才能够使它在远程操作一台计算机时避免了不必要的麻烦和繁琐的点击操作，可以让用户的双手始终专注于键盘之上！才让CLI有了施展威力的机会。</p>\n<p>想想看，弱点在某些环境下竟然又成为了优势！</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"命令行界面（command-line-interface，缩写CLI）\"><a href=\"#命令行界面（command-line-interface，缩写CLI）\" class=\"headerlink\" title=\"命令行界面（command-line interface，缩写CLI）\"></a>命令行界面（command-line interface，缩写CLI）</h3><hr>\n<p>计算机早期时代，在图形用户界面（GUI）得到普及之前，CLI使用相当广泛。也有人叫做CUI（character user interface），字符用户界面。<br>说实话，刚开始接触命令行界面时，我真的是很讨厌这种交互方式。试想下，要想使用这种方式操作电脑的话，对你的要求有哪些呢？</p>\n<ul>\n<li>最基本的，你要有一定的英文基础吧，光这一点就要刷掉不少潜在的用户了。毕竟这CLI的命令都是英文单词或者缩写组成的，而不是拼音或者中文汉字。</li>\n<li>打字的速度和准确度要有，光是记住还不行，你还要输入正确的英文单词形式的命令，即便是少一个字母都不行。想想看多难受。</li>\n<li>这种交互方式，对于用户来说可以有无数种输入组合，相比图形界面作为输入方式的一连串按钮来说，出错的可能性简直不要太高。但是换作按钮的话，就那几个按钮。输入的可能性都给你限制死了，你还能折腾出什么错误呢。</li>\n<li>另外就是键入英文命令可能会出错的问题，如果换作按钮的话，点错的概率是不是直接下降好几个数量级</li>\n</ul>\n<p>难怪普通用户都对这种交互方式敬而远之，通常会觉得只有电影里厉害的黑客才会使用它</p>\n<h3 id=\"图形用户界面（Graphical-User-Interface，缩写GUI）\"><a href=\"#图形用户界面（Graphical-User-Interface，缩写GUI）\" class=\"headerlink\" title=\"图形用户界面（Graphical User Interface，缩写GUI）\"></a>图形用户界面（Graphical User Interface，缩写GUI）</h3><hr>\n<p>我一开始能被计算机所吸引，绝对是因为计算机显示出的绚丽多彩、五颜六色的显示屏所吸引的。太好玩了，电视机虽然也有好看的屏幕。但是和计算机相比，它的显示太死板了，都是预先设定好的，人很难从外界干预或者说和它进行交互。但是计算机就不一样了，动动鼠标，敲打键盘，计算机的显示会立刻做出相应的变化。</p>\n<p>倘若用计算机来进行游戏的话，那画面感更容易令人着迷。现在人们常说的用户体验，我想也是针对GUI来说的，软件界面的颜色搭配，按钮布局，动画效果。这些细节都能体现出“体验”二字。</p>\n<h3 id=\"CLI-VS-GUI\"><a href=\"#CLI-VS-GUI\" class=\"headerlink\" title=\"CLI VS GUI\"></a>CLI VS GUI</h3><hr>\n<p>难道说CLI真的就一点用处都没有吗？<br>当然不是，事实就是在某些应用场合下，CLI有着不可替代的作用！</p>\n<ul>\n<li>比如，现在要你去操作一台远程服务器时，我想大多数人立刻想到的就是使用CLI，这就十分方面顺手。而不是来个远程桌面连接，这显的太麻烦了。或者你也可以打个飞的，跑到服务器面前给他接个显示器来用。</li>\n<li>相比花里胡哨的图形界面，CLI可以节省更多的计算资源，想想现在还很常见几百兆内存的没有显示设备的Linux服务器配置，但是上哪去找几百兆的Windows设备去？</li>\n<li>自动化的能力，在CLI环境下使用脚本可以很容易执行一些自动化的流程，甚至在Windows上也会有人经常使用批处理来处理重复性但又容易出错的工作。这样是换成GUI的话，还要使用类似按键精灵之类的软件来录制一些操作，就显得十分笨拙！</li>\n</ul>\n<h3 id=\"世界上没有绝对的好，也没有绝对的坏。\"><a href=\"#世界上没有绝对的好，也没有绝对的坏。\" class=\"headerlink\" title=\"世界上没有绝对的好，也没有绝对的坏。\"></a>世界上没有绝对的好，也没有绝对的坏。</h3><hr>\n<p>就像CLI不支持鼠标这一特性，似乎显的很遗憾，因为鼠标确确实实能够提供丰富的输入操作，而CLI竟然不支持！</p>\n<p>但是换一个角度来看，恰恰是因为它不支持鼠标这一特性，才能够使它在远程操作一台计算机时避免了不必要的麻烦和繁琐的点击操作，可以让用户的双手始终专注于键盘之上！才让CLI有了施展威力的机会。</p>\n<p>想想看，弱点在某些环境下竟然又成为了优势！</p>\n"},{"title":"解决SVN树冲突","date":"2019-05-09T16:00:00.000Z","_content":"\n### 介绍\n---\n\n原文在这里:[SVN 树冲突解决详解](https://blog.csdn.net/xgf415/article/details/75196714)，我只是个搬运工。\n\nSVN的冲突有两种类型：\n* 内容冲突：当两名(或更多)开发人员修改了同一个文件中相邻或相同的行时就会发生文件冲突。\n* 当一名开发人员移动、重命名、删除一个文件或文件夹，而另一名开发人员也对它们进行了移动、重命名、删除或者仅仅是修改，在更新时就会发生树冲突。\n\n第一种很常见，但解决起来比较容易（一周几次的样字）。第二种不怎么常见（个把月碰到一次）\n\n### 树冲突类型和解决方法\n---\n\n#### 本地删除，外部更改\n* A（外部）修改文件并将其提交至版本库中\n* B（本地）同时删除了文件\n\nB更新时就会发生树冲突，该文件被标记为冲突。\n\n---\n#### 本地改名，外部更改\n* A（外部）修改文件，并将其提交至版本库中\n* B（本地）同时将文件改名\n\nB更新时，该文件被标记为树冲突。\n\n---\n#### 本地更改，外部删除\n* A（外部）删除了文件，并提交到了版本库\n* B（本地）同时对该文件进行了修改\n\nB更新时，该文件被标记为树冲突。\n\n---\n#### 本地更改，外部改名\n* A（外部）将文件改名，并提交到了版本库\n* B（本地）修改了文件内容\n\nB更新时，该文件被标记为树冲突。\n\n---\n#### 本地删除，外部改名\n* A（外部）将文件改名，然后提交到版本库\n* B（本地）将文件删除\n\nB更新时，该文件被标记为树冲突。\n\n---\n#### 本地改名，外部删除\n* A（外部）将文件删除，然后提交到版本库\n* B（本地）将文件改名\n\n更新时，B的该文件将发生树冲突。\n\n---\n####  本地改名，外部改名\n* （外部）将文件改名，并提交到版本库；\n* （本地）将同文件改名。\n\n更新时，B的该文件将发生树冲突。\n\n\n\n\n\n\n\n\n","source":"_posts/解决SVN树冲突.md","raw":"---\ntitle: 解决SVN树冲突\ncategories: 版本控制\ndate: 2019-05-10\n---\n\n### 介绍\n---\n\n原文在这里:[SVN 树冲突解决详解](https://blog.csdn.net/xgf415/article/details/75196714)，我只是个搬运工。\n\nSVN的冲突有两种类型：\n* 内容冲突：当两名(或更多)开发人员修改了同一个文件中相邻或相同的行时就会发生文件冲突。\n* 当一名开发人员移动、重命名、删除一个文件或文件夹，而另一名开发人员也对它们进行了移动、重命名、删除或者仅仅是修改，在更新时就会发生树冲突。\n\n第一种很常见，但解决起来比较容易（一周几次的样字）。第二种不怎么常见（个把月碰到一次）\n\n### 树冲突类型和解决方法\n---\n\n#### 本地删除，外部更改\n* A（外部）修改文件并将其提交至版本库中\n* B（本地）同时删除了文件\n\nB更新时就会发生树冲突，该文件被标记为冲突。\n\n---\n#### 本地改名，外部更改\n* A（外部）修改文件，并将其提交至版本库中\n* B（本地）同时将文件改名\n\nB更新时，该文件被标记为树冲突。\n\n---\n#### 本地更改，外部删除\n* A（外部）删除了文件，并提交到了版本库\n* B（本地）同时对该文件进行了修改\n\nB更新时，该文件被标记为树冲突。\n\n---\n#### 本地更改，外部改名\n* A（外部）将文件改名，并提交到了版本库\n* B（本地）修改了文件内容\n\nB更新时，该文件被标记为树冲突。\n\n---\n#### 本地删除，外部改名\n* A（外部）将文件改名，然后提交到版本库\n* B（本地）将文件删除\n\nB更新时，该文件被标记为树冲突。\n\n---\n#### 本地改名，外部删除\n* A（外部）将文件删除，然后提交到版本库\n* B（本地）将文件改名\n\n更新时，B的该文件将发生树冲突。\n\n---\n####  本地改名，外部改名\n* （外部）将文件改名，并提交到版本库；\n* （本地）将同文件改名。\n\n更新时，B的该文件将发生树冲突。\n\n\n\n\n\n\n\n\n","slug":"解决SVN树冲突","published":1,"updated":"2019-05-10T08:56:41.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wv0i0018vsr7xclcaz13","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><hr>\n<p>原文在这里:<a href=\"https://blog.csdn.net/xgf415/article/details/75196714\" target=\"_blank\" rel=\"noopener\">SVN 树冲突解决详解</a>，我只是个搬运工。</p>\n<p>SVN的冲突有两种类型：</p>\n<ul>\n<li>内容冲突：当两名(或更多)开发人员修改了同一个文件中相邻或相同的行时就会发生文件冲突。</li>\n<li>当一名开发人员移动、重命名、删除一个文件或文件夹，而另一名开发人员也对它们进行了移动、重命名、删除或者仅仅是修改，在更新时就会发生树冲突。</li>\n</ul>\n<p>第一种很常见，但解决起来比较容易（一周几次的样字）。第二种不怎么常见（个把月碰到一次）</p>\n<h3 id=\"树冲突类型和解决方法\"><a href=\"#树冲突类型和解决方法\" class=\"headerlink\" title=\"树冲突类型和解决方法\"></a>树冲突类型和解决方法</h3><hr>\n<h4 id=\"本地删除，外部更改\"><a href=\"#本地删除，外部更改\" class=\"headerlink\" title=\"本地删除，外部更改\"></a>本地删除，外部更改</h4><ul>\n<li>A（外部）修改文件并将其提交至版本库中</li>\n<li>B（本地）同时删除了文件</li>\n</ul>\n<p>B更新时就会发生树冲突，该文件被标记为冲突。</p>\n<hr>\n<h4 id=\"本地改名，外部更改\"><a href=\"#本地改名，外部更改\" class=\"headerlink\" title=\"本地改名，外部更改\"></a>本地改名，外部更改</h4><ul>\n<li>A（外部）修改文件，并将其提交至版本库中</li>\n<li>B（本地）同时将文件改名</li>\n</ul>\n<p>B更新时，该文件被标记为树冲突。</p>\n<hr>\n<h4 id=\"本地更改，外部删除\"><a href=\"#本地更改，外部删除\" class=\"headerlink\" title=\"本地更改，外部删除\"></a>本地更改，外部删除</h4><ul>\n<li>A（外部）删除了文件，并提交到了版本库</li>\n<li>B（本地）同时对该文件进行了修改</li>\n</ul>\n<p>B更新时，该文件被标记为树冲突。</p>\n<hr>\n<h4 id=\"本地更改，外部改名\"><a href=\"#本地更改，外部改名\" class=\"headerlink\" title=\"本地更改，外部改名\"></a>本地更改，外部改名</h4><ul>\n<li>A（外部）将文件改名，并提交到了版本库</li>\n<li>B（本地）修改了文件内容</li>\n</ul>\n<p>B更新时，该文件被标记为树冲突。</p>\n<hr>\n<h4 id=\"本地删除，外部改名\"><a href=\"#本地删除，外部改名\" class=\"headerlink\" title=\"本地删除，外部改名\"></a>本地删除，外部改名</h4><ul>\n<li>A（外部）将文件改名，然后提交到版本库</li>\n<li>B（本地）将文件删除</li>\n</ul>\n<p>B更新时，该文件被标记为树冲突。</p>\n<hr>\n<h4 id=\"本地改名，外部删除\"><a href=\"#本地改名，外部删除\" class=\"headerlink\" title=\"本地改名，外部删除\"></a>本地改名，外部删除</h4><ul>\n<li>A（外部）将文件删除，然后提交到版本库</li>\n<li>B（本地）将文件改名</li>\n</ul>\n<p>更新时，B的该文件将发生树冲突。</p>\n<hr>\n<h4 id=\"本地改名，外部改名\"><a href=\"#本地改名，外部改名\" class=\"headerlink\" title=\"本地改名，外部改名\"></a>本地改名，外部改名</h4><ul>\n<li>（外部）将文件改名，并提交到版本库；</li>\n<li>（本地）将同文件改名。</li>\n</ul>\n<p>更新时，B的该文件将发生树冲突。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><hr>\n<p>原文在这里:<a href=\"https://blog.csdn.net/xgf415/article/details/75196714\" target=\"_blank\" rel=\"noopener\">SVN 树冲突解决详解</a>，我只是个搬运工。</p>\n<p>SVN的冲突有两种类型：</p>\n<ul>\n<li>内容冲突：当两名(或更多)开发人员修改了同一个文件中相邻或相同的行时就会发生文件冲突。</li>\n<li>当一名开发人员移动、重命名、删除一个文件或文件夹，而另一名开发人员也对它们进行了移动、重命名、删除或者仅仅是修改，在更新时就会发生树冲突。</li>\n</ul>\n<p>第一种很常见，但解决起来比较容易（一周几次的样字）。第二种不怎么常见（个把月碰到一次）</p>\n<h3 id=\"树冲突类型和解决方法\"><a href=\"#树冲突类型和解决方法\" class=\"headerlink\" title=\"树冲突类型和解决方法\"></a>树冲突类型和解决方法</h3><hr>\n<h4 id=\"本地删除，外部更改\"><a href=\"#本地删除，外部更改\" class=\"headerlink\" title=\"本地删除，外部更改\"></a>本地删除，外部更改</h4><ul>\n<li>A（外部）修改文件并将其提交至版本库中</li>\n<li>B（本地）同时删除了文件</li>\n</ul>\n<p>B更新时就会发生树冲突，该文件被标记为冲突。</p>\n<hr>\n<h4 id=\"本地改名，外部更改\"><a href=\"#本地改名，外部更改\" class=\"headerlink\" title=\"本地改名，外部更改\"></a>本地改名，外部更改</h4><ul>\n<li>A（外部）修改文件，并将其提交至版本库中</li>\n<li>B（本地）同时将文件改名</li>\n</ul>\n<p>B更新时，该文件被标记为树冲突。</p>\n<hr>\n<h4 id=\"本地更改，外部删除\"><a href=\"#本地更改，外部删除\" class=\"headerlink\" title=\"本地更改，外部删除\"></a>本地更改，外部删除</h4><ul>\n<li>A（外部）删除了文件，并提交到了版本库</li>\n<li>B（本地）同时对该文件进行了修改</li>\n</ul>\n<p>B更新时，该文件被标记为树冲突。</p>\n<hr>\n<h4 id=\"本地更改，外部改名\"><a href=\"#本地更改，外部改名\" class=\"headerlink\" title=\"本地更改，外部改名\"></a>本地更改，外部改名</h4><ul>\n<li>A（外部）将文件改名，并提交到了版本库</li>\n<li>B（本地）修改了文件内容</li>\n</ul>\n<p>B更新时，该文件被标记为树冲突。</p>\n<hr>\n<h4 id=\"本地删除，外部改名\"><a href=\"#本地删除，外部改名\" class=\"headerlink\" title=\"本地删除，外部改名\"></a>本地删除，外部改名</h4><ul>\n<li>A（外部）将文件改名，然后提交到版本库</li>\n<li>B（本地）将文件删除</li>\n</ul>\n<p>B更新时，该文件被标记为树冲突。</p>\n<hr>\n<h4 id=\"本地改名，外部删除\"><a href=\"#本地改名，外部删除\" class=\"headerlink\" title=\"本地改名，外部删除\"></a>本地改名，外部删除</h4><ul>\n<li>A（外部）将文件删除，然后提交到版本库</li>\n<li>B（本地）将文件改名</li>\n</ul>\n<p>更新时，B的该文件将发生树冲突。</p>\n<hr>\n<h4 id=\"本地改名，外部改名\"><a href=\"#本地改名，外部改名\" class=\"headerlink\" title=\"本地改名，外部改名\"></a>本地改名，外部改名</h4><ul>\n<li>（外部）将文件改名，并提交到版本库；</li>\n<li>（本地）将同文件改名。</li>\n</ul>\n<p>更新时，B的该文件将发生树冲突。</p>\n"},{"title":"“此应用专为旧版Android打造，因此可能无法正常运行。请尝试检查更新或与开发者联系”","date":"2019-07-07T16:00:00.000Z","_content":"\n### 说明\n正在开发的游戏在 android 9 上出现过这个提示，但是只要用户忽略（点击提示框上的 “确定” 按钮）这个弹框就能正常进入游戏，所以也就没管它了。后来出现一例直接闪退的。。。\n\n### 解决方法\n\n* 如果你是使用 eclipse 打包 apk 的话（比如我现在就是用  eclipse 的，虽然自己也摸索过 Android Studio ）。请编辑[应用清单文件](https://developer.android.com/guide/topics/manifest/manifest-intro.html?hl=zh-cn) AndroidManifest.xml 里的 uses-sdk 字段，增加 `android:targetSdkVersion=\"22\" ` 这样一对键值对（按照网上的说法，键值对的值只要大于等于17就行，我参考公司其他项目设置成了22）进去，然后重新打包就行了。\n\n* 如果你使用 Android Studio 打包 apk 的话，请参考[这篇文章](https://blog.csdn.net/qiaoquan3/article/details/70185693)\n","source":"_posts/Android/“此应用专为旧版Android打造，因此可能无法正常运行。请尝试检查更新或与开发者联系”.md","raw":"---\ntitle: “此应用专为旧版Android打造，因此可能无法正常运行。请尝试检查更新或与开发者联系”\ncategories: Android\ndate: 2019-07-08\n---\n\n### 说明\n正在开发的游戏在 android 9 上出现过这个提示，但是只要用户忽略（点击提示框上的 “确定” 按钮）这个弹框就能正常进入游戏，所以也就没管它了。后来出现一例直接闪退的。。。\n\n### 解决方法\n\n* 如果你是使用 eclipse 打包 apk 的话（比如我现在就是用  eclipse 的，虽然自己也摸索过 Android Studio ）。请编辑[应用清单文件](https://developer.android.com/guide/topics/manifest/manifest-intro.html?hl=zh-cn) AndroidManifest.xml 里的 uses-sdk 字段，增加 `android:targetSdkVersion=\"22\" ` 这样一对键值对（按照网上的说法，键值对的值只要大于等于17就行，我参考公司其他项目设置成了22）进去，然后重新打包就行了。\n\n* 如果你使用 Android Studio 打包 apk 的话，请参考[这篇文章](https://blog.csdn.net/qiaoquan3/article/details/70185693)\n","slug":"Android/“此应用专为旧版Android打造，因此可能无法正常运行。请尝试检查更新或与开发者联系”","published":1,"updated":"2019-07-08T12:55:03.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wv26001cvsr7urj186ui","content":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>正在开发的游戏在 android 9 上出现过这个提示，但是只要用户忽略（点击提示框上的 “确定” 按钮）这个弹框就能正常进入游戏，所以也就没管它了。后来出现一例直接闪退的。。。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><ul>\n<li><p>如果你是使用 eclipse 打包 apk 的话（比如我现在就是用  eclipse 的，虽然自己也摸索过 Android Studio ）。请编辑<a href=\"https://developer.android.com/guide/topics/manifest/manifest-intro.html?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">应用清单文件</a> AndroidManifest.xml 里的 uses-sdk 字段，增加 <code>android:targetSdkVersion=&quot;22&quot;</code> 这样一对键值对（按照网上的说法，键值对的值只要大于等于17就行，我参考公司其他项目设置成了22）进去，然后重新打包就行了。</p>\n</li>\n<li><p>如果你使用 Android Studio 打包 apk 的话，请参考<a href=\"https://blog.csdn.net/qiaoquan3/article/details/70185693\" target=\"_blank\" rel=\"noopener\">这篇文章</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>正在开发的游戏在 android 9 上出现过这个提示，但是只要用户忽略（点击提示框上的 “确定” 按钮）这个弹框就能正常进入游戏，所以也就没管它了。后来出现一例直接闪退的。。。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><ul>\n<li><p>如果你是使用 eclipse 打包 apk 的话（比如我现在就是用  eclipse 的，虽然自己也摸索过 Android Studio ）。请编辑<a href=\"https://developer.android.com/guide/topics/manifest/manifest-intro.html?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">应用清单文件</a> AndroidManifest.xml 里的 uses-sdk 字段，增加 <code>android:targetSdkVersion=&quot;22&quot;</code> 这样一对键值对（按照网上的说法，键值对的值只要大于等于17就行，我参考公司其他项目设置成了22）进去，然后重新打包就行了。</p>\n</li>\n<li><p>如果你使用 Android Studio 打包 apk 的话，请参考<a href=\"https://blog.csdn.net/qiaoquan3/article/details/70185693\" target=\"_blank\" rel=\"noopener\">这篇文章</a></p>\n</li>\n</ul>\n"},{"title":"使用logcat查看android系统日志","date":"2019-03-12T16:00:00.000Z","_content":"\n对我这个做游戏开发的来说，在android平台上通常会遇到的棘手情况如下\n* 安卓游戏程序通常通过JNI技术调用游戏的C++代码，所以在eclipse或者android studio上根本没法断点调试\n* 可能会遇到开发环境下（win32）运行正常，但是打包后在android上跑时就会出现问题\n* SDK相关模块的调试只能在真机上进行调试\n\n### android系统日志\n---\n这个时候只能靠低效的查看日志来定位问题了，还好android的系统在遇到错误时，打印出来的堆栈信息相当完整，也能打印出编程语言提供的log类函数的输出。\n\n* 这个日志有个好处就是即使当时没有输出系统日志，你也可以在随后的时间里打印出以前的日志来分析问题\n* 但是，请注意，android的系统日志是存在一个环形缓冲区上的，所以当测试在真机上重现出一个不常见的bug时，最好不要让测试继续再操作这台设备，以防导致问题的日志被后续日志覆盖。\n\n### 查看android系统日志\n---\n我之前都是开着eclipse或者android studio，然后手机使用数据线连着计算机。这样就可以在IED的logcat窗口里查看手机运行时的系统日志了。后来发现使用adb可以在WLAN环境下远程获取手机的系统日志！也可以选择实时打印。\n\n### 常用的操作\n---\n* 查看adb当前连接的设备\n`adb devices`\n* 使用logcat输出日志\n`adb logcat`\n* 输出的日志将会带上打印日志时的时间\n`adb logcat -v time`\n* 将日志重定向到一个文件中\n`adb logcat -v time > log.txt`\n\n### release_print而不是print\n---\n我发现cocos2dx-lua里的print打印的日志，使用logcat竟然输出不了，换成release_print才行。\n\n### 使用adb把命令发往指定的设备\n---\n开发的pc通过USB连接多台安卓设备或者pc上运行多个安卓模拟器时，执行\n`adb devices`\n命令查看，发现list of devices attached列表下有多台设备地址。这个时候直接执行像`adb logcat`是不行的，因为adb不知道你是要往哪台设备发送命令。所以需要加上参数指定哪台设备\n`adb -s 127.0.0.1:21503 logcat`\n才行\n","source":"_posts/Android/使用logcat查看android系统日志.md","raw":"---\ntitle: 使用logcat查看android系统日志\ncategories: Android\ndate: 2019-03-13\n---\n\n对我这个做游戏开发的来说，在android平台上通常会遇到的棘手情况如下\n* 安卓游戏程序通常通过JNI技术调用游戏的C++代码，所以在eclipse或者android studio上根本没法断点调试\n* 可能会遇到开发环境下（win32）运行正常，但是打包后在android上跑时就会出现问题\n* SDK相关模块的调试只能在真机上进行调试\n\n### android系统日志\n---\n这个时候只能靠低效的查看日志来定位问题了，还好android的系统在遇到错误时，打印出来的堆栈信息相当完整，也能打印出编程语言提供的log类函数的输出。\n\n* 这个日志有个好处就是即使当时没有输出系统日志，你也可以在随后的时间里打印出以前的日志来分析问题\n* 但是，请注意，android的系统日志是存在一个环形缓冲区上的，所以当测试在真机上重现出一个不常见的bug时，最好不要让测试继续再操作这台设备，以防导致问题的日志被后续日志覆盖。\n\n### 查看android系统日志\n---\n我之前都是开着eclipse或者android studio，然后手机使用数据线连着计算机。这样就可以在IED的logcat窗口里查看手机运行时的系统日志了。后来发现使用adb可以在WLAN环境下远程获取手机的系统日志！也可以选择实时打印。\n\n### 常用的操作\n---\n* 查看adb当前连接的设备\n`adb devices`\n* 使用logcat输出日志\n`adb logcat`\n* 输出的日志将会带上打印日志时的时间\n`adb logcat -v time`\n* 将日志重定向到一个文件中\n`adb logcat -v time > log.txt`\n\n### release_print而不是print\n---\n我发现cocos2dx-lua里的print打印的日志，使用logcat竟然输出不了，换成release_print才行。\n\n### 使用adb把命令发往指定的设备\n---\n开发的pc通过USB连接多台安卓设备或者pc上运行多个安卓模拟器时，执行\n`adb devices`\n命令查看，发现list of devices attached列表下有多台设备地址。这个时候直接执行像`adb logcat`是不行的，因为adb不知道你是要往哪台设备发送命令。所以需要加上参数指定哪台设备\n`adb -s 127.0.0.1:21503 logcat`\n才行\n","slug":"Android/使用logcat查看android系统日志","published":1,"updated":"2019-04-25T03:07:50.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wv27001dvsr78lmy97gf","content":"<p>对我这个做游戏开发的来说，在android平台上通常会遇到的棘手情况如下</p>\n<ul>\n<li>安卓游戏程序通常通过JNI技术调用游戏的C++代码，所以在eclipse或者android studio上根本没法断点调试</li>\n<li>可能会遇到开发环境下（win32）运行正常，但是打包后在android上跑时就会出现问题</li>\n<li>SDK相关模块的调试只能在真机上进行调试</li>\n</ul>\n<h3 id=\"android系统日志\"><a href=\"#android系统日志\" class=\"headerlink\" title=\"android系统日志\"></a>android系统日志</h3><hr>\n<p>这个时候只能靠低效的查看日志来定位问题了，还好android的系统在遇到错误时，打印出来的堆栈信息相当完整，也能打印出编程语言提供的log类函数的输出。</p>\n<ul>\n<li>这个日志有个好处就是即使当时没有输出系统日志，你也可以在随后的时间里打印出以前的日志来分析问题</li>\n<li>但是，请注意，android的系统日志是存在一个环形缓冲区上的，所以当测试在真机上重现出一个不常见的bug时，最好不要让测试继续再操作这台设备，以防导致问题的日志被后续日志覆盖。</li>\n</ul>\n<h3 id=\"查看android系统日志\"><a href=\"#查看android系统日志\" class=\"headerlink\" title=\"查看android系统日志\"></a>查看android系统日志</h3><hr>\n<p>我之前都是开着eclipse或者android studio，然后手机使用数据线连着计算机。这样就可以在IED的logcat窗口里查看手机运行时的系统日志了。后来发现使用adb可以在WLAN环境下远程获取手机的系统日志！也可以选择实时打印。</p>\n<h3 id=\"常用的操作\"><a href=\"#常用的操作\" class=\"headerlink\" title=\"常用的操作\"></a>常用的操作</h3><hr>\n<ul>\n<li>查看adb当前连接的设备<br><code>adb devices</code></li>\n<li>使用logcat输出日志<br><code>adb logcat</code></li>\n<li>输出的日志将会带上打印日志时的时间<br><code>adb logcat -v time</code></li>\n<li>将日志重定向到一个文件中<br><code>adb logcat -v time &gt; log.txt</code></li>\n</ul>\n<h3 id=\"release-print而不是print\"><a href=\"#release-print而不是print\" class=\"headerlink\" title=\"release_print而不是print\"></a>release_print而不是print</h3><hr>\n<p>我发现cocos2dx-lua里的print打印的日志，使用logcat竟然输出不了，换成release_print才行。</p>\n<h3 id=\"使用adb把命令发往指定的设备\"><a href=\"#使用adb把命令发往指定的设备\" class=\"headerlink\" title=\"使用adb把命令发往指定的设备\"></a>使用adb把命令发往指定的设备</h3><hr>\n<p>开发的pc通过USB连接多台安卓设备或者pc上运行多个安卓模拟器时，执行<br><code>adb devices</code><br>命令查看，发现list of devices attached列表下有多台设备地址。这个时候直接执行像<code>adb logcat</code>是不行的，因为adb不知道你是要往哪台设备发送命令。所以需要加上参数指定哪台设备<br><code>adb -s 127.0.0.1:21503 logcat</code><br>才行</p>\n","site":{"data":{}},"excerpt":"","more":"<p>对我这个做游戏开发的来说，在android平台上通常会遇到的棘手情况如下</p>\n<ul>\n<li>安卓游戏程序通常通过JNI技术调用游戏的C++代码，所以在eclipse或者android studio上根本没法断点调试</li>\n<li>可能会遇到开发环境下（win32）运行正常，但是打包后在android上跑时就会出现问题</li>\n<li>SDK相关模块的调试只能在真机上进行调试</li>\n</ul>\n<h3 id=\"android系统日志\"><a href=\"#android系统日志\" class=\"headerlink\" title=\"android系统日志\"></a>android系统日志</h3><hr>\n<p>这个时候只能靠低效的查看日志来定位问题了，还好android的系统在遇到错误时，打印出来的堆栈信息相当完整，也能打印出编程语言提供的log类函数的输出。</p>\n<ul>\n<li>这个日志有个好处就是即使当时没有输出系统日志，你也可以在随后的时间里打印出以前的日志来分析问题</li>\n<li>但是，请注意，android的系统日志是存在一个环形缓冲区上的，所以当测试在真机上重现出一个不常见的bug时，最好不要让测试继续再操作这台设备，以防导致问题的日志被后续日志覆盖。</li>\n</ul>\n<h3 id=\"查看android系统日志\"><a href=\"#查看android系统日志\" class=\"headerlink\" title=\"查看android系统日志\"></a>查看android系统日志</h3><hr>\n<p>我之前都是开着eclipse或者android studio，然后手机使用数据线连着计算机。这样就可以在IED的logcat窗口里查看手机运行时的系统日志了。后来发现使用adb可以在WLAN环境下远程获取手机的系统日志！也可以选择实时打印。</p>\n<h3 id=\"常用的操作\"><a href=\"#常用的操作\" class=\"headerlink\" title=\"常用的操作\"></a>常用的操作</h3><hr>\n<ul>\n<li>查看adb当前连接的设备<br><code>adb devices</code></li>\n<li>使用logcat输出日志<br><code>adb logcat</code></li>\n<li>输出的日志将会带上打印日志时的时间<br><code>adb logcat -v time</code></li>\n<li>将日志重定向到一个文件中<br><code>adb logcat -v time &gt; log.txt</code></li>\n</ul>\n<h3 id=\"release-print而不是print\"><a href=\"#release-print而不是print\" class=\"headerlink\" title=\"release_print而不是print\"></a>release_print而不是print</h3><hr>\n<p>我发现cocos2dx-lua里的print打印的日志，使用logcat竟然输出不了，换成release_print才行。</p>\n<h3 id=\"使用adb把命令发往指定的设备\"><a href=\"#使用adb把命令发往指定的设备\" class=\"headerlink\" title=\"使用adb把命令发往指定的设备\"></a>使用adb把命令发往指定的设备</h3><hr>\n<p>开发的pc通过USB连接多台安卓设备或者pc上运行多个安卓模拟器时，执行<br><code>adb devices</code><br>命令查看，发现list of devices attached列表下有多台设备地址。这个时候直接执行像<code>adb logcat</code>是不行的，因为adb不知道你是要往哪台设备发送命令。所以需要加上参数指定哪台设备<br><code>adb -s 127.0.0.1:21503 logcat</code><br>才行</p>\n"},{"title":"安卓APP的安装目录","date":"2019-07-11T16:00:00.000Z","_content":"\n### 原由\n---\n\n在调试安卓APP涉及到缓存文件这块时，发现对APP文件的读写位置不太了解。就去网上查了查，然后总结（抄袭）一下吧（前人总结的确实已经够好了）。\n\n### 涉及到的目录如下\n---\n\n* `system/app`：系统自带的应用程序，无法删除\n* `data/app`：用户程序安装的目录，有删除权限。安装时把apk文件复制到此目录\n* `data/data`：存放应用程序的数据\n* `data/dalvik-cache`：将apk中的dex文件安装到dalvik-cache目录下(dex文件是dalvik虚拟机的可执行文件,其大小约为原始apk文件大小的四分之一)\n\n### 安装与卸载过程\n---\n\n* **APP的安装** ：复制APK安装包到data/app目录下，解压并扫描安装包，把dex文件(Dalvik字节码)保存到dalvik-cache目录，并data/data目录下创建对应的应用数据目录\n* **APP的卸载** ：删除安装过程中在上述三个目录下创建的文件及目录\n\n**注意：没有Root的手机是看不到data目录下的内容的**\n\n","source":"_posts/Android/安卓APP的安装目录.md","raw":"---\ntitle: 安卓APP的安装目录\ncategories: Android\ndate: 2019-07-12\n---\n\n### 原由\n---\n\n在调试安卓APP涉及到缓存文件这块时，发现对APP文件的读写位置不太了解。就去网上查了查，然后总结（抄袭）一下吧（前人总结的确实已经够好了）。\n\n### 涉及到的目录如下\n---\n\n* `system/app`：系统自带的应用程序，无法删除\n* `data/app`：用户程序安装的目录，有删除权限。安装时把apk文件复制到此目录\n* `data/data`：存放应用程序的数据\n* `data/dalvik-cache`：将apk中的dex文件安装到dalvik-cache目录下(dex文件是dalvik虚拟机的可执行文件,其大小约为原始apk文件大小的四分之一)\n\n### 安装与卸载过程\n---\n\n* **APP的安装** ：复制APK安装包到data/app目录下，解压并扫描安装包，把dex文件(Dalvik字节码)保存到dalvik-cache目录，并data/data目录下创建对应的应用数据目录\n* **APP的卸载** ：删除安装过程中在上述三个目录下创建的文件及目录\n\n**注意：没有Root的手机是看不到data目录下的内容的**\n\n","slug":"Android/安卓APP的安装目录","published":1,"updated":"2019-07-12T11:33:53.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wv29001fvsr79rhgwd79","content":"<h3 id=\"原由\"><a href=\"#原由\" class=\"headerlink\" title=\"原由\"></a>原由</h3><hr>\n<p>在调试安卓APP涉及到缓存文件这块时，发现对APP文件的读写位置不太了解。就去网上查了查，然后总结（抄袭）一下吧（前人总结的确实已经够好了）。</p>\n<h3 id=\"涉及到的目录如下\"><a href=\"#涉及到的目录如下\" class=\"headerlink\" title=\"涉及到的目录如下\"></a>涉及到的目录如下</h3><hr>\n<ul>\n<li><code>system/app</code>：系统自带的应用程序，无法删除</li>\n<li><code>data/app</code>：用户程序安装的目录，有删除权限。安装时把apk文件复制到此目录</li>\n<li><code>data/data</code>：存放应用程序的数据</li>\n<li><code>data/dalvik-cache</code>：将apk中的dex文件安装到dalvik-cache目录下(dex文件是dalvik虚拟机的可执行文件,其大小约为原始apk文件大小的四分之一)</li>\n</ul>\n<h3 id=\"安装与卸载过程\"><a href=\"#安装与卸载过程\" class=\"headerlink\" title=\"安装与卸载过程\"></a>安装与卸载过程</h3><hr>\n<ul>\n<li><strong>APP的安装</strong> ：复制APK安装包到data/app目录下，解压并扫描安装包，把dex文件(Dalvik字节码)保存到dalvik-cache目录，并data/data目录下创建对应的应用数据目录</li>\n<li><strong>APP的卸载</strong> ：删除安装过程中在上述三个目录下创建的文件及目录</li>\n</ul>\n<p><strong>注意：没有Root的手机是看不到data目录下的内容的</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"原由\"><a href=\"#原由\" class=\"headerlink\" title=\"原由\"></a>原由</h3><hr>\n<p>在调试安卓APP涉及到缓存文件这块时，发现对APP文件的读写位置不太了解。就去网上查了查，然后总结（抄袭）一下吧（前人总结的确实已经够好了）。</p>\n<h3 id=\"涉及到的目录如下\"><a href=\"#涉及到的目录如下\" class=\"headerlink\" title=\"涉及到的目录如下\"></a>涉及到的目录如下</h3><hr>\n<ul>\n<li><code>system/app</code>：系统自带的应用程序，无法删除</li>\n<li><code>data/app</code>：用户程序安装的目录，有删除权限。安装时把apk文件复制到此目录</li>\n<li><code>data/data</code>：存放应用程序的数据</li>\n<li><code>data/dalvik-cache</code>：将apk中的dex文件安装到dalvik-cache目录下(dex文件是dalvik虚拟机的可执行文件,其大小约为原始apk文件大小的四分之一)</li>\n</ul>\n<h3 id=\"安装与卸载过程\"><a href=\"#安装与卸载过程\" class=\"headerlink\" title=\"安装与卸载过程\"></a>安装与卸载过程</h3><hr>\n<ul>\n<li><strong>APP的安装</strong> ：复制APK安装包到data/app目录下，解压并扫描安装包，把dex文件(Dalvik字节码)保存到dalvik-cache目录，并data/data目录下创建对应的应用数据目录</li>\n<li><strong>APP的卸载</strong> ：删除安装过程中在上述三个目录下创建的文件及目录</li>\n</ul>\n<p><strong>注意：没有Root的手机是看不到data目录下的内容的</strong></p>\n"},{"title":"Lua中加载代码的方式","date":"2019-03-15T16:00:00.000Z","_content":"\n### load (chunk [, chunkname [, mode [, env]]])\n---\n**加载一个代码块，参数chunk可以是字符串或者函数**\n```\nload(\"print(\\\"dongtshj.github.io\\\")\")\n> function: 0109b970 （一个函数地址）\n\nload(\"print(\\\"dongtshj.github.io\\\")\")()\n> dongtshj.github.io （表达式加上了()表示调用了函数）\n```\n\n### loadfile ([filename [, mode [, env]]])\n---\n**和load类似，不过是从文件或标准输入中获取代码块**\n\n**loadfile从硬盘上加载lua文件，并把它编译成lua代码块**\n\n假设test.lua文件内容如下：\n`print(\"dongtshj.github.io\")`\n那么有：\n```\nloadfile(\"test.lua\")\n> function: 00634ef8 （一个函数地址）\n\nloadfile(\"test.lua\")()\n> dongtshj.github.io\n```\n\n### dofile ([filename])\n---\n**和loadfile类似，只不过它打开并执行了文件中的Lua代码块**\n\n还是拿上面那个test.lua文件举例\n```\ndofile(\"test.lua\")\n> dongtshj.github.io\n```\n\n### require\n---\n* require是用来加载**Lua模块**的，而不单单是.lua文件。Lua模块可以是一般的.Lua文件，但也可以是.dll或者.so文件\n* require会把加载起来的模块缓存起来，所以再次加载同名模块时，只是把首次加载的缓存返回了。如果你确实想要重新加载的话，请先清除缓存\n* require具体的功能取决于package.loaders（Lua 5.1）或者package.searchers（Lua 5.2/5.3）\n\n### import\n---\nLua标准库里并没有这个函数，一般是项目自身框架提供的功能性函数，所以它的功能取决于具体的实现\n\n\n参考：\n[What's the difference between loadfile, require, and import](https://stackoverflow.com/questions/34235540/whats-the-difference-between-loadfile-require-and-import)\n\n","source":"_posts/Lua/Lua中加载代码的方式.md","raw":"---\ntitle: Lua中加载代码的方式\ncategories: Lua\ndate: 2019-03-16\n---\n\n### load (chunk [, chunkname [, mode [, env]]])\n---\n**加载一个代码块，参数chunk可以是字符串或者函数**\n```\nload(\"print(\\\"dongtshj.github.io\\\")\")\n> function: 0109b970 （一个函数地址）\n\nload(\"print(\\\"dongtshj.github.io\\\")\")()\n> dongtshj.github.io （表达式加上了()表示调用了函数）\n```\n\n### loadfile ([filename [, mode [, env]]])\n---\n**和load类似，不过是从文件或标准输入中获取代码块**\n\n**loadfile从硬盘上加载lua文件，并把它编译成lua代码块**\n\n假设test.lua文件内容如下：\n`print(\"dongtshj.github.io\")`\n那么有：\n```\nloadfile(\"test.lua\")\n> function: 00634ef8 （一个函数地址）\n\nloadfile(\"test.lua\")()\n> dongtshj.github.io\n```\n\n### dofile ([filename])\n---\n**和loadfile类似，只不过它打开并执行了文件中的Lua代码块**\n\n还是拿上面那个test.lua文件举例\n```\ndofile(\"test.lua\")\n> dongtshj.github.io\n```\n\n### require\n---\n* require是用来加载**Lua模块**的，而不单单是.lua文件。Lua模块可以是一般的.Lua文件，但也可以是.dll或者.so文件\n* require会把加载起来的模块缓存起来，所以再次加载同名模块时，只是把首次加载的缓存返回了。如果你确实想要重新加载的话，请先清除缓存\n* require具体的功能取决于package.loaders（Lua 5.1）或者package.searchers（Lua 5.2/5.3）\n\n### import\n---\nLua标准库里并没有这个函数，一般是项目自身框架提供的功能性函数，所以它的功能取决于具体的实现\n\n\n参考：\n[What's the difference between loadfile, require, and import](https://stackoverflow.com/questions/34235540/whats-the-difference-between-loadfile-require-and-import)\n\n","slug":"Lua/Lua中加载代码的方式","published":1,"updated":"2019-04-25T03:06:00.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wv2a001gvsr7um6izzd2","content":"<h3 id=\"load-chunk-chunkname-mode-env\"><a href=\"#load-chunk-chunkname-mode-env\" class=\"headerlink\" title=\"load (chunk [, chunkname [, mode [, env]]])\"></a>load (chunk [, chunkname [, mode [, env]]])</h3><hr>\n<p><strong>加载一个代码块，参数chunk可以是字符串或者函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">load(&quot;print(\\&quot;dongtshj.github.io\\&quot;)&quot;)</span><br><span class=\"line\">&gt; function: 0109b970 （一个函数地址）</span><br><span class=\"line\"></span><br><span class=\"line\">load(&quot;print(\\&quot;dongtshj.github.io\\&quot;)&quot;)()</span><br><span class=\"line\">&gt; dongtshj.github.io （表达式加上了()表示调用了函数）</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"loadfile-filename-mode-env\"><a href=\"#loadfile-filename-mode-env\" class=\"headerlink\" title=\"loadfile ([filename [, mode [, env]]])\"></a>loadfile ([filename [, mode [, env]]])</h3><hr>\n<p><strong>和load类似，不过是从文件或标准输入中获取代码块</strong></p>\n<p><strong>loadfile从硬盘上加载lua文件，并把它编译成lua代码块</strong></p>\n<p>假设test.lua文件内容如下：<br><code>print(&quot;dongtshj.github.io&quot;)</code><br>那么有：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loadfile(&quot;test.lua&quot;)</span><br><span class=\"line\">&gt; function: 00634ef8 （一个函数地址）</span><br><span class=\"line\"></span><br><span class=\"line\">loadfile(&quot;test.lua&quot;)()</span><br><span class=\"line\">&gt; dongtshj.github.io</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"dofile-filename\"><a href=\"#dofile-filename\" class=\"headerlink\" title=\"dofile ([filename])\"></a>dofile ([filename])</h3><hr>\n<p><strong>和loadfile类似，只不过它打开并执行了文件中的Lua代码块</strong></p>\n<p>还是拿上面那个test.lua文件举例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dofile(&quot;test.lua&quot;)</span><br><span class=\"line\">&gt; dongtshj.github.io</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"require\"><a href=\"#require\" class=\"headerlink\" title=\"require\"></a>require</h3><hr>\n<ul>\n<li>require是用来加载<strong>Lua模块</strong>的，而不单单是.lua文件。Lua模块可以是一般的.Lua文件，但也可以是.dll或者.so文件</li>\n<li>require会把加载起来的模块缓存起来，所以再次加载同名模块时，只是把首次加载的缓存返回了。如果你确实想要重新加载的话，请先清除缓存</li>\n<li>require具体的功能取决于package.loaders（Lua 5.1）或者package.searchers（Lua 5.2/5.3）</li>\n</ul>\n<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h3><hr>\n<p>Lua标准库里并没有这个函数，一般是项目自身框架提供的功能性函数，所以它的功能取决于具体的实现</p>\n<p>参考：<br><a href=\"https://stackoverflow.com/questions/34235540/whats-the-difference-between-loadfile-require-and-import\" target=\"_blank\" rel=\"noopener\">What’s the difference between loadfile, require, and import</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"load-chunk-chunkname-mode-env\"><a href=\"#load-chunk-chunkname-mode-env\" class=\"headerlink\" title=\"load (chunk [, chunkname [, mode [, env]]])\"></a>load (chunk [, chunkname [, mode [, env]]])</h3><hr>\n<p><strong>加载一个代码块，参数chunk可以是字符串或者函数</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">load(&quot;print(\\&quot;dongtshj.github.io\\&quot;)&quot;)</span><br><span class=\"line\">&gt; function: 0109b970 （一个函数地址）</span><br><span class=\"line\"></span><br><span class=\"line\">load(&quot;print(\\&quot;dongtshj.github.io\\&quot;)&quot;)()</span><br><span class=\"line\">&gt; dongtshj.github.io （表达式加上了()表示调用了函数）</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"loadfile-filename-mode-env\"><a href=\"#loadfile-filename-mode-env\" class=\"headerlink\" title=\"loadfile ([filename [, mode [, env]]])\"></a>loadfile ([filename [, mode [, env]]])</h3><hr>\n<p><strong>和load类似，不过是从文件或标准输入中获取代码块</strong></p>\n<p><strong>loadfile从硬盘上加载lua文件，并把它编译成lua代码块</strong></p>\n<p>假设test.lua文件内容如下：<br><code>print(&quot;dongtshj.github.io&quot;)</code><br>那么有：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loadfile(&quot;test.lua&quot;)</span><br><span class=\"line\">&gt; function: 00634ef8 （一个函数地址）</span><br><span class=\"line\"></span><br><span class=\"line\">loadfile(&quot;test.lua&quot;)()</span><br><span class=\"line\">&gt; dongtshj.github.io</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"dofile-filename\"><a href=\"#dofile-filename\" class=\"headerlink\" title=\"dofile ([filename])\"></a>dofile ([filename])</h3><hr>\n<p><strong>和loadfile类似，只不过它打开并执行了文件中的Lua代码块</strong></p>\n<p>还是拿上面那个test.lua文件举例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dofile(&quot;test.lua&quot;)</span><br><span class=\"line\">&gt; dongtshj.github.io</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"require\"><a href=\"#require\" class=\"headerlink\" title=\"require\"></a>require</h3><hr>\n<ul>\n<li>require是用来加载<strong>Lua模块</strong>的，而不单单是.lua文件。Lua模块可以是一般的.Lua文件，但也可以是.dll或者.so文件</li>\n<li>require会把加载起来的模块缓存起来，所以再次加载同名模块时，只是把首次加载的缓存返回了。如果你确实想要重新加载的话，请先清除缓存</li>\n<li>require具体的功能取决于package.loaders（Lua 5.1）或者package.searchers（Lua 5.2/5.3）</li>\n</ul>\n<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h3><hr>\n<p>Lua标准库里并没有这个函数，一般是项目自身框架提供的功能性函数，所以它的功能取决于具体的实现</p>\n<p>参考：<br><a href=\"https://stackoverflow.com/questions/34235540/whats-the-difference-between-loadfile-require-and-import\" target=\"_blank\" rel=\"noopener\">What’s the difference between loadfile, require, and import</a></p>\n"},{"title":"ADB常用命令","date":"2019-04-23T16:00:00.000Z","_content":"\n### pull / push\n---\n\n* 从模拟器或设备复制文件\n`adb pull remote local`\n* 将文件复制到模拟器或设备\n`adb push local remote`\n\nlocal 和 remote 指的是开发计算机（本地）和模拟器/设备实例（远程）上目标文件/目录的路径。\n\n### 发送 shell 命令\n---\n\n* 可以选择进入或者不进入模拟器/设备实例上的 adb 远程 shell\n* 要在不进入远程 shell 的情况下发出一个 shell 命令，在命令的前面加上 `adb shell` 即可，像这样： `adb shell shell_command` ，或者直接使用命令 `adb shell` 进入远程 shell 后，再进行其它操作。\n\n### 其它命令\n* `screencap` 截屏： `adb shell screencap /sdcard/screen.png`\n* `screenrecord` 录屏： `adb shell screenrecord /sdcard/demo.mp4`","source":"_posts/Android/ADB常用命令.md","raw":"---\ntitle: ADB常用命令\ncategories: Android\ndate: 2019-04-24\n---\n\n### pull / push\n---\n\n* 从模拟器或设备复制文件\n`adb pull remote local`\n* 将文件复制到模拟器或设备\n`adb push local remote`\n\nlocal 和 remote 指的是开发计算机（本地）和模拟器/设备实例（远程）上目标文件/目录的路径。\n\n### 发送 shell 命令\n---\n\n* 可以选择进入或者不进入模拟器/设备实例上的 adb 远程 shell\n* 要在不进入远程 shell 的情况下发出一个 shell 命令，在命令的前面加上 `adb shell` 即可，像这样： `adb shell shell_command` ，或者直接使用命令 `adb shell` 进入远程 shell 后，再进行其它操作。\n\n### 其它命令\n* `screencap` 截屏： `adb shell screencap /sdcard/screen.png`\n* `screenrecord` 录屏： `adb shell screenrecord /sdcard/demo.mp4`","slug":"Android/ADB常用命令","published":1,"updated":"2019-04-25T03:07:50.194Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wv2b001hvsr7nlhy45ex","content":"<h3 id=\"pull-push\"><a href=\"#pull-push\" class=\"headerlink\" title=\"pull / push\"></a>pull / push</h3><hr>\n<ul>\n<li>从模拟器或设备复制文件<br><code>adb pull remote local</code></li>\n<li>将文件复制到模拟器或设备<br><code>adb push local remote</code></li>\n</ul>\n<p>local 和 remote 指的是开发计算机（本地）和模拟器/设备实例（远程）上目标文件/目录的路径。</p>\n<h3 id=\"发送-shell-命令\"><a href=\"#发送-shell-命令\" class=\"headerlink\" title=\"发送 shell 命令\"></a>发送 shell 命令</h3><hr>\n<ul>\n<li>可以选择进入或者不进入模拟器/设备实例上的 adb 远程 shell</li>\n<li>要在不进入远程 shell 的情况下发出一个 shell 命令，在命令的前面加上 <code>adb shell</code> 即可，像这样： <code>adb shell shell_command</code> ，或者直接使用命令 <code>adb shell</code> 进入远程 shell 后，再进行其它操作。</li>\n</ul>\n<h3 id=\"其它命令\"><a href=\"#其它命令\" class=\"headerlink\" title=\"其它命令\"></a>其它命令</h3><ul>\n<li><code>screencap</code> 截屏： <code>adb shell screencap /sdcard/screen.png</code></li>\n<li><code>screenrecord</code> 录屏： <code>adb shell screenrecord /sdcard/demo.mp4</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"pull-push\"><a href=\"#pull-push\" class=\"headerlink\" title=\"pull / push\"></a>pull / push</h3><hr>\n<ul>\n<li>从模拟器或设备复制文件<br><code>adb pull remote local</code></li>\n<li>将文件复制到模拟器或设备<br><code>adb push local remote</code></li>\n</ul>\n<p>local 和 remote 指的是开发计算机（本地）和模拟器/设备实例（远程）上目标文件/目录的路径。</p>\n<h3 id=\"发送-shell-命令\"><a href=\"#发送-shell-命令\" class=\"headerlink\" title=\"发送 shell 命令\"></a>发送 shell 命令</h3><hr>\n<ul>\n<li>可以选择进入或者不进入模拟器/设备实例上的 adb 远程 shell</li>\n<li>要在不进入远程 shell 的情况下发出一个 shell 命令，在命令的前面加上 <code>adb shell</code> 即可，像这样： <code>adb shell shell_command</code> ，或者直接使用命令 <code>adb shell</code> 进入远程 shell 后，再进行其它操作。</li>\n</ul>\n<h3 id=\"其它命令\"><a href=\"#其它命令\" class=\"headerlink\" title=\"其它命令\"></a>其它命令</h3><ul>\n<li><code>screencap</code> 截屏： <code>adb shell screencap /sdcard/screen.png</code></li>\n<li><code>screenrecord</code> 录屏： <code>adb shell screenrecord /sdcard/demo.mp4</code></li>\n</ul>\n"},{"title":"Lua中的String常见操作","date":"2019-03-08T16:00:00.000Z","_content":"\n### 替换操作\n---\n`string.gsub(s, pattern, repl [, n])`\n* s：想要被操作的整个字符串\n* pattern：整个字符串中想要被替换掉的字符串\n* repl：替换上面pattern的字符串\n* [, n]：中括号表示可选的参数n，替换n次；忽略则全部替换\n* 返回值：替换后的字符串和替换的次数\n\n```\n> string.gsub(\"dongtshj.github.io\", \".\", '')\ndongtshjgithubio 2\n\n> string.gsub(\"dongtshj.github.io\", \".\", \"\", 1)\ndongtshjgithub.io 1\n\n> string.gsub(\"dongtshj.github.io\", \"k\", \"\")\ndongtshj.github.io 0\n```\n\n### 查找操作\n---\n`string.find(s, pattern [, init [, plain]])`\n* s：想要被操作的整个字符串\n* pattern：要查找的字符串\n* [, init [, plain]]：可选参数，init表示搜索起始位置，默认为1\n* 返回值：如果找到一个匹配，则返回它在s中的起始位置；否则，返回nil\n\n```\n> string.find(\"dongtshj.github.io\", \"git\")\n10 12\n> string.find(\"dongtshj.github.io\", \"kkk\")\nnil\n```\n\n### 字符串格式化\n---\n`string.format(formatString, ...)`\n* 返回值：格式化后的字符串formatString\n\n```\nlocal str = string.format(\"It is now %d.\", 2019)\nprint(str)\n> It is now 2019.\n```\n\n### 字符串截取\n---\n`string.sub(s, i [, j])`\n* 返回s的子串，该子串在s中的位置为[i, j]，j的默认值为-1（s的末尾）\n* string.sub(s, 1, j) 返回s的[1, j]部分：长度为j的前缀串\n* string.sub(s, -i) 返回s的[i, end]：长度为i的后缀串\n\n```\nstring.sub(\"dongtshj.github.io\", 1, 8)\n> dongtshj\nstring.sub(\"dongtshj.github.io\", -2)\n> io\n```\n\n### 反转字符串\n---\n`string.reverse(s)`\n* 返回s字符序列的逆序列\n\n```\nstring.reverse(\"dongtshj.github.io\")\n> oi.buhtig.jhstgnod\n```\n\n### 字符串长度\n---\n`string.len(s)`\n* 返回字符串s的长度\n\n```\nstring.len(\"dongtshj.github.io\")\n> 18\n```\n\n### 字符串转为大写\n---\n`string.upper(s)`\n* 将s中的小写字符都转为大写，然后返回转换后的字符串\n\n```\nstring.upper(\"dongtshj.github.io\")\n> DONGTSHJ.GITHUB.IO\n```\n\n### 字符串转为小写\n---\n`string.lower(s)`\n* 将s中的大写字符都转为小写，然后返回转换后的字符串\n\n```\nstring.lower(\"DONGTSHJ.GITHUB.IO\")\n> dongtshj.github.io\n```\n\n### 将数字转换成字符\n---\n`string.char(num)`\n\n```\nstring.char(97)\n> a\n```\n\n### 将字符转换成数字\n---\n`string.byte(char)`\n\n```\nstring.byte(a)\n> 97\n```\n\n### 字符串n次拷贝\n---\n`string.rep(s, n [, sep])`\n* 返回以sep为连接符的s的n次拷贝，sep默认为空，即没有任何连接符\n\n```\nstring.rep(\"dongtshj\", 3, \"|\")\n> dongtshj|dongtshj|dongtshj\n```\n\n### 待填的坑\n---\n`string.dump(function [, strip])`\n\n`string.gmatch (s, pattern)`\n\n`string.match (s, pattern [, init])`\n\n`string.pack (fmt, v1, v2, ···)`\n\n`string.packsize (fmt)`\n\n`string.unpack (fmt, s [, pos])`\n","source":"_posts/Lua/Lua中的String常见操作.md","raw":"---\ntitle: Lua中的String常见操作\ncategories: Lua\ndate: 2019-03-09\n---\n\n### 替换操作\n---\n`string.gsub(s, pattern, repl [, n])`\n* s：想要被操作的整个字符串\n* pattern：整个字符串中想要被替换掉的字符串\n* repl：替换上面pattern的字符串\n* [, n]：中括号表示可选的参数n，替换n次；忽略则全部替换\n* 返回值：替换后的字符串和替换的次数\n\n```\n> string.gsub(\"dongtshj.github.io\", \".\", '')\ndongtshjgithubio 2\n\n> string.gsub(\"dongtshj.github.io\", \".\", \"\", 1)\ndongtshjgithub.io 1\n\n> string.gsub(\"dongtshj.github.io\", \"k\", \"\")\ndongtshj.github.io 0\n```\n\n### 查找操作\n---\n`string.find(s, pattern [, init [, plain]])`\n* s：想要被操作的整个字符串\n* pattern：要查找的字符串\n* [, init [, plain]]：可选参数，init表示搜索起始位置，默认为1\n* 返回值：如果找到一个匹配，则返回它在s中的起始位置；否则，返回nil\n\n```\n> string.find(\"dongtshj.github.io\", \"git\")\n10 12\n> string.find(\"dongtshj.github.io\", \"kkk\")\nnil\n```\n\n### 字符串格式化\n---\n`string.format(formatString, ...)`\n* 返回值：格式化后的字符串formatString\n\n```\nlocal str = string.format(\"It is now %d.\", 2019)\nprint(str)\n> It is now 2019.\n```\n\n### 字符串截取\n---\n`string.sub(s, i [, j])`\n* 返回s的子串，该子串在s中的位置为[i, j]，j的默认值为-1（s的末尾）\n* string.sub(s, 1, j) 返回s的[1, j]部分：长度为j的前缀串\n* string.sub(s, -i) 返回s的[i, end]：长度为i的后缀串\n\n```\nstring.sub(\"dongtshj.github.io\", 1, 8)\n> dongtshj\nstring.sub(\"dongtshj.github.io\", -2)\n> io\n```\n\n### 反转字符串\n---\n`string.reverse(s)`\n* 返回s字符序列的逆序列\n\n```\nstring.reverse(\"dongtshj.github.io\")\n> oi.buhtig.jhstgnod\n```\n\n### 字符串长度\n---\n`string.len(s)`\n* 返回字符串s的长度\n\n```\nstring.len(\"dongtshj.github.io\")\n> 18\n```\n\n### 字符串转为大写\n---\n`string.upper(s)`\n* 将s中的小写字符都转为大写，然后返回转换后的字符串\n\n```\nstring.upper(\"dongtshj.github.io\")\n> DONGTSHJ.GITHUB.IO\n```\n\n### 字符串转为小写\n---\n`string.lower(s)`\n* 将s中的大写字符都转为小写，然后返回转换后的字符串\n\n```\nstring.lower(\"DONGTSHJ.GITHUB.IO\")\n> dongtshj.github.io\n```\n\n### 将数字转换成字符\n---\n`string.char(num)`\n\n```\nstring.char(97)\n> a\n```\n\n### 将字符转换成数字\n---\n`string.byte(char)`\n\n```\nstring.byte(a)\n> 97\n```\n\n### 字符串n次拷贝\n---\n`string.rep(s, n [, sep])`\n* 返回以sep为连接符的s的n次拷贝，sep默认为空，即没有任何连接符\n\n```\nstring.rep(\"dongtshj\", 3, \"|\")\n> dongtshj|dongtshj|dongtshj\n```\n\n### 待填的坑\n---\n`string.dump(function [, strip])`\n\n`string.gmatch (s, pattern)`\n\n`string.match (s, pattern [, init])`\n\n`string.pack (fmt, v1, v2, ···)`\n\n`string.packsize (fmt)`\n\n`string.unpack (fmt, s [, pos])`\n","slug":"Lua/Lua中的String常见操作","published":1,"updated":"2019-04-25T03:06:00.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wv2d001jvsr78e1jr9ty","content":"<h3 id=\"替换操作\"><a href=\"#替换操作\" class=\"headerlink\" title=\"替换操作\"></a>替换操作</h3><hr>\n<p><code>string.gsub(s, pattern, repl [, n])</code></p>\n<ul>\n<li>s：想要被操作的整个字符串</li>\n<li>pattern：整个字符串中想要被替换掉的字符串</li>\n<li>repl：替换上面pattern的字符串</li>\n<li>[, n]：中括号表示可选的参数n，替换n次；忽略则全部替换</li>\n<li>返回值：替换后的字符串和替换的次数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; string.gsub(&quot;dongtshj.github.io&quot;, &quot;.&quot;, &apos;&apos;)</span><br><span class=\"line\">dongtshjgithubio 2</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; string.gsub(&quot;dongtshj.github.io&quot;, &quot;.&quot;, &quot;&quot;, 1)</span><br><span class=\"line\">dongtshjgithub.io 1</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; string.gsub(&quot;dongtshj.github.io&quot;, &quot;k&quot;, &quot;&quot;)</span><br><span class=\"line\">dongtshj.github.io 0</span><br></pre></td></tr></table></figure>\n<h3 id=\"查找操作\"><a href=\"#查找操作\" class=\"headerlink\" title=\"查找操作\"></a>查找操作</h3><hr>\n<p><code>string.find(s, pattern [, init [, plain]])</code></p>\n<ul>\n<li>s：想要被操作的整个字符串</li>\n<li>pattern：要查找的字符串</li>\n<li>[, init [, plain]]：可选参数，init表示搜索起始位置，默认为1</li>\n<li>返回值：如果找到一个匹配，则返回它在s中的起始位置；否则，返回nil</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; string.find(&quot;dongtshj.github.io&quot;, &quot;git&quot;)</span><br><span class=\"line\">10 12</span><br><span class=\"line\">&gt; string.find(&quot;dongtshj.github.io&quot;, &quot;kkk&quot;)</span><br><span class=\"line\">nil</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串格式化\"><a href=\"#字符串格式化\" class=\"headerlink\" title=\"字符串格式化\"></a>字符串格式化</h3><hr>\n<p><code>string.format(formatString, ...)</code></p>\n<ul>\n<li>返回值：格式化后的字符串formatString</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local str = string.format(&quot;It is now %d.&quot;, 2019)</span><br><span class=\"line\">print(str)</span><br><span class=\"line\">&gt; It is now 2019.</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串截取\"><a href=\"#字符串截取\" class=\"headerlink\" title=\"字符串截取\"></a>字符串截取</h3><hr>\n<p><code>string.sub(s, i [, j])</code></p>\n<ul>\n<li>返回s的子串，该子串在s中的位置为[i, j]，j的默认值为-1（s的末尾）</li>\n<li>string.sub(s, 1, j) 返回s的[1, j]部分：长度为j的前缀串</li>\n<li>string.sub(s, -i) 返回s的[i, end]：长度为i的后缀串</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.sub(&quot;dongtshj.github.io&quot;, 1, 8)</span><br><span class=\"line\">&gt; dongtshj</span><br><span class=\"line\">string.sub(&quot;dongtshj.github.io&quot;, -2)</span><br><span class=\"line\">&gt; io</span><br></pre></td></tr></table></figure>\n<h3 id=\"反转字符串\"><a href=\"#反转字符串\" class=\"headerlink\" title=\"反转字符串\"></a>反转字符串</h3><hr>\n<p><code>string.reverse(s)</code></p>\n<ul>\n<li>返回s字符序列的逆序列</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.reverse(&quot;dongtshj.github.io&quot;)</span><br><span class=\"line\">&gt; oi.buhtig.jhstgnod</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串长度\"><a href=\"#字符串长度\" class=\"headerlink\" title=\"字符串长度\"></a>字符串长度</h3><hr>\n<p><code>string.len(s)</code></p>\n<ul>\n<li>返回字符串s的长度</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.len(&quot;dongtshj.github.io&quot;)</span><br><span class=\"line\">&gt; 18</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串转为大写\"><a href=\"#字符串转为大写\" class=\"headerlink\" title=\"字符串转为大写\"></a>字符串转为大写</h3><hr>\n<p><code>string.upper(s)</code></p>\n<ul>\n<li>将s中的小写字符都转为大写，然后返回转换后的字符串</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.upper(&quot;dongtshj.github.io&quot;)</span><br><span class=\"line\">&gt; DONGTSHJ.GITHUB.IO</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串转为小写\"><a href=\"#字符串转为小写\" class=\"headerlink\" title=\"字符串转为小写\"></a>字符串转为小写</h3><hr>\n<p><code>string.lower(s)</code></p>\n<ul>\n<li>将s中的大写字符都转为小写，然后返回转换后的字符串</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.lower(&quot;DONGTSHJ.GITHUB.IO&quot;)</span><br><span class=\"line\">&gt; dongtshj.github.io</span><br></pre></td></tr></table></figure>\n<h3 id=\"将数字转换成字符\"><a href=\"#将数字转换成字符\" class=\"headerlink\" title=\"将数字转换成字符\"></a>将数字转换成字符</h3><hr>\n<p><code>string.char(num)</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.char(97)</span><br><span class=\"line\">&gt; a</span><br></pre></td></tr></table></figure>\n<h3 id=\"将字符转换成数字\"><a href=\"#将字符转换成数字\" class=\"headerlink\" title=\"将字符转换成数字\"></a>将字符转换成数字</h3><hr>\n<p><code>string.byte(char)</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.byte(a)</span><br><span class=\"line\">&gt; 97</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串n次拷贝\"><a href=\"#字符串n次拷贝\" class=\"headerlink\" title=\"字符串n次拷贝\"></a>字符串n次拷贝</h3><hr>\n<p><code>string.rep(s, n [, sep])</code></p>\n<ul>\n<li>返回以sep为连接符的s的n次拷贝，sep默认为空，即没有任何连接符</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.rep(&quot;dongtshj&quot;, 3, &quot;|&quot;)</span><br><span class=\"line\">&gt; dongtshj|dongtshj|dongtshj</span><br></pre></td></tr></table></figure>\n<h3 id=\"待填的坑\"><a href=\"#待填的坑\" class=\"headerlink\" title=\"待填的坑\"></a>待填的坑</h3><hr>\n<p><code>string.dump(function [, strip])</code></p>\n<p><code>string.gmatch (s, pattern)</code></p>\n<p><code>string.match (s, pattern [, init])</code></p>\n<p><code>string.pack (fmt, v1, v2, ···)</code></p>\n<p><code>string.packsize (fmt)</code></p>\n<p><code>string.unpack (fmt, s [, pos])</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"替换操作\"><a href=\"#替换操作\" class=\"headerlink\" title=\"替换操作\"></a>替换操作</h3><hr>\n<p><code>string.gsub(s, pattern, repl [, n])</code></p>\n<ul>\n<li>s：想要被操作的整个字符串</li>\n<li>pattern：整个字符串中想要被替换掉的字符串</li>\n<li>repl：替换上面pattern的字符串</li>\n<li>[, n]：中括号表示可选的参数n，替换n次；忽略则全部替换</li>\n<li>返回值：替换后的字符串和替换的次数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; string.gsub(&quot;dongtshj.github.io&quot;, &quot;.&quot;, &apos;&apos;)</span><br><span class=\"line\">dongtshjgithubio 2</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; string.gsub(&quot;dongtshj.github.io&quot;, &quot;.&quot;, &quot;&quot;, 1)</span><br><span class=\"line\">dongtshjgithub.io 1</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; string.gsub(&quot;dongtshj.github.io&quot;, &quot;k&quot;, &quot;&quot;)</span><br><span class=\"line\">dongtshj.github.io 0</span><br></pre></td></tr></table></figure>\n<h3 id=\"查找操作\"><a href=\"#查找操作\" class=\"headerlink\" title=\"查找操作\"></a>查找操作</h3><hr>\n<p><code>string.find(s, pattern [, init [, plain]])</code></p>\n<ul>\n<li>s：想要被操作的整个字符串</li>\n<li>pattern：要查找的字符串</li>\n<li>[, init [, plain]]：可选参数，init表示搜索起始位置，默认为1</li>\n<li>返回值：如果找到一个匹配，则返回它在s中的起始位置；否则，返回nil</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; string.find(&quot;dongtshj.github.io&quot;, &quot;git&quot;)</span><br><span class=\"line\">10 12</span><br><span class=\"line\">&gt; string.find(&quot;dongtshj.github.io&quot;, &quot;kkk&quot;)</span><br><span class=\"line\">nil</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串格式化\"><a href=\"#字符串格式化\" class=\"headerlink\" title=\"字符串格式化\"></a>字符串格式化</h3><hr>\n<p><code>string.format(formatString, ...)</code></p>\n<ul>\n<li>返回值：格式化后的字符串formatString</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local str = string.format(&quot;It is now %d.&quot;, 2019)</span><br><span class=\"line\">print(str)</span><br><span class=\"line\">&gt; It is now 2019.</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串截取\"><a href=\"#字符串截取\" class=\"headerlink\" title=\"字符串截取\"></a>字符串截取</h3><hr>\n<p><code>string.sub(s, i [, j])</code></p>\n<ul>\n<li>返回s的子串，该子串在s中的位置为[i, j]，j的默认值为-1（s的末尾）</li>\n<li>string.sub(s, 1, j) 返回s的[1, j]部分：长度为j的前缀串</li>\n<li>string.sub(s, -i) 返回s的[i, end]：长度为i的后缀串</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.sub(&quot;dongtshj.github.io&quot;, 1, 8)</span><br><span class=\"line\">&gt; dongtshj</span><br><span class=\"line\">string.sub(&quot;dongtshj.github.io&quot;, -2)</span><br><span class=\"line\">&gt; io</span><br></pre></td></tr></table></figure>\n<h3 id=\"反转字符串\"><a href=\"#反转字符串\" class=\"headerlink\" title=\"反转字符串\"></a>反转字符串</h3><hr>\n<p><code>string.reverse(s)</code></p>\n<ul>\n<li>返回s字符序列的逆序列</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.reverse(&quot;dongtshj.github.io&quot;)</span><br><span class=\"line\">&gt; oi.buhtig.jhstgnod</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串长度\"><a href=\"#字符串长度\" class=\"headerlink\" title=\"字符串长度\"></a>字符串长度</h3><hr>\n<p><code>string.len(s)</code></p>\n<ul>\n<li>返回字符串s的长度</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.len(&quot;dongtshj.github.io&quot;)</span><br><span class=\"line\">&gt; 18</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串转为大写\"><a href=\"#字符串转为大写\" class=\"headerlink\" title=\"字符串转为大写\"></a>字符串转为大写</h3><hr>\n<p><code>string.upper(s)</code></p>\n<ul>\n<li>将s中的小写字符都转为大写，然后返回转换后的字符串</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.upper(&quot;dongtshj.github.io&quot;)</span><br><span class=\"line\">&gt; DONGTSHJ.GITHUB.IO</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串转为小写\"><a href=\"#字符串转为小写\" class=\"headerlink\" title=\"字符串转为小写\"></a>字符串转为小写</h3><hr>\n<p><code>string.lower(s)</code></p>\n<ul>\n<li>将s中的大写字符都转为小写，然后返回转换后的字符串</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.lower(&quot;DONGTSHJ.GITHUB.IO&quot;)</span><br><span class=\"line\">&gt; dongtshj.github.io</span><br></pre></td></tr></table></figure>\n<h3 id=\"将数字转换成字符\"><a href=\"#将数字转换成字符\" class=\"headerlink\" title=\"将数字转换成字符\"></a>将数字转换成字符</h3><hr>\n<p><code>string.char(num)</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.char(97)</span><br><span class=\"line\">&gt; a</span><br></pre></td></tr></table></figure>\n<h3 id=\"将字符转换成数字\"><a href=\"#将字符转换成数字\" class=\"headerlink\" title=\"将字符转换成数字\"></a>将字符转换成数字</h3><hr>\n<p><code>string.byte(char)</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.byte(a)</span><br><span class=\"line\">&gt; 97</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串n次拷贝\"><a href=\"#字符串n次拷贝\" class=\"headerlink\" title=\"字符串n次拷贝\"></a>字符串n次拷贝</h3><hr>\n<p><code>string.rep(s, n [, sep])</code></p>\n<ul>\n<li>返回以sep为连接符的s的n次拷贝，sep默认为空，即没有任何连接符</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string.rep(&quot;dongtshj&quot;, 3, &quot;|&quot;)</span><br><span class=\"line\">&gt; dongtshj|dongtshj|dongtshj</span><br></pre></td></tr></table></figure>\n<h3 id=\"待填的坑\"><a href=\"#待填的坑\" class=\"headerlink\" title=\"待填的坑\"></a>待填的坑</h3><hr>\n<p><code>string.dump(function [, strip])</code></p>\n<p><code>string.gmatch (s, pattern)</code></p>\n<p><code>string.match (s, pattern [, init])</code></p>\n<p><code>string.pack (fmt, v1, v2, ···)</code></p>\n<p><code>string.packsize (fmt)</code></p>\n<p><code>string.unpack (fmt, s [, pos])</code></p>\n"},{"title":"Lua官网提供的win平台zip包内容","date":"2019-05-12T16:00:00.000Z","_content":"\n### 介绍\n---\n\n* **lua53.dll**：由lua源码生成的动态链接库\n* **lua53.exe**：这个是lua的解释器。可以执行终端输入的lua语句，或者lua代码文件，或者经过luac53.exe输出的文件\n* **luac53.exe**：这个是lua的编译器。lua虽然是脚本语言，解释执行。但它也可以拥有自己的编译器，lua的解释器可以执行经由lua编译器编译后的代码\n* **wlua53.exe**：这个网上[搜了下](https://blog.csdn.net/zrf2112/article/details/79418515)，貌似需要和GUI模块搭配使用，像是起到别的模块的插件的作用\n\n### 相关话题\n---\n\n#### 动态 VS 静态\n动态语言和静态语言的主要区别就在于：**编译、链接的时机**。C/C++的编译、链接阶段和执行期、运行时（run time）是严格区分开来的。但是lua的链接过程可以放到运行时。**实时编译**技术甚至可以把编译阶段放到运行时。\n\n#### 编译器生产的机器代码的目标机器的区别\n* C++的编译器产生的二进制文件的目标机器是诸如：X86、X64、arm等\n* lua编译器产生的二进制文件的目标机器则是lua虚拟机\n\n#### 解释器、编译器、虚拟机\n* lua编译器把lua脚本编译成lua虚拟机的指令\n* lua解释器包括编译器和虚拟机","source":"_posts/Lua/Lua官网提供的win平台zip包内容.md","raw":"---\ntitle: Lua官网提供的win平台zip包内容\ncategories: Lua\ndate: 2019-05-13\n---\n\n### 介绍\n---\n\n* **lua53.dll**：由lua源码生成的动态链接库\n* **lua53.exe**：这个是lua的解释器。可以执行终端输入的lua语句，或者lua代码文件，或者经过luac53.exe输出的文件\n* **luac53.exe**：这个是lua的编译器。lua虽然是脚本语言，解释执行。但它也可以拥有自己的编译器，lua的解释器可以执行经由lua编译器编译后的代码\n* **wlua53.exe**：这个网上[搜了下](https://blog.csdn.net/zrf2112/article/details/79418515)，貌似需要和GUI模块搭配使用，像是起到别的模块的插件的作用\n\n### 相关话题\n---\n\n#### 动态 VS 静态\n动态语言和静态语言的主要区别就在于：**编译、链接的时机**。C/C++的编译、链接阶段和执行期、运行时（run time）是严格区分开来的。但是lua的链接过程可以放到运行时。**实时编译**技术甚至可以把编译阶段放到运行时。\n\n#### 编译器生产的机器代码的目标机器的区别\n* C++的编译器产生的二进制文件的目标机器是诸如：X86、X64、arm等\n* lua编译器产生的二进制文件的目标机器则是lua虚拟机\n\n#### 解释器、编译器、虚拟机\n* lua编译器把lua脚本编译成lua虚拟机的指令\n* lua解释器包括编译器和虚拟机","slug":"Lua/Lua官网提供的win平台zip包内容","published":1,"updated":"2019-05-13T08:37:35.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wv3c001tvsr709lnagsj","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><hr>\n<ul>\n<li><strong>lua53.dll</strong>：由lua源码生成的动态链接库</li>\n<li><strong>lua53.exe</strong>：这个是lua的解释器。可以执行终端输入的lua语句，或者lua代码文件，或者经过luac53.exe输出的文件</li>\n<li><strong>luac53.exe</strong>：这个是lua的编译器。lua虽然是脚本语言，解释执行。但它也可以拥有自己的编译器，lua的解释器可以执行经由lua编译器编译后的代码</li>\n<li><strong>wlua53.exe</strong>：这个网上<a href=\"https://blog.csdn.net/zrf2112/article/details/79418515\" target=\"_blank\" rel=\"noopener\">搜了下</a>，貌似需要和GUI模块搭配使用，像是起到别的模块的插件的作用</li>\n</ul>\n<h3 id=\"相关话题\"><a href=\"#相关话题\" class=\"headerlink\" title=\"相关话题\"></a>相关话题</h3><hr>\n<h4 id=\"动态-VS-静态\"><a href=\"#动态-VS-静态\" class=\"headerlink\" title=\"动态 VS 静态\"></a>动态 VS 静态</h4><p>动态语言和静态语言的主要区别就在于：<strong>编译、链接的时机</strong>。C/C++的编译、链接阶段和执行期、运行时（run time）是严格区分开来的。但是lua的链接过程可以放到运行时。<strong>实时编译</strong>技术甚至可以把编译阶段放到运行时。</p>\n<h4 id=\"编译器生产的机器代码的目标机器的区别\"><a href=\"#编译器生产的机器代码的目标机器的区别\" class=\"headerlink\" title=\"编译器生产的机器代码的目标机器的区别\"></a>编译器生产的机器代码的目标机器的区别</h4><ul>\n<li>C++的编译器产生的二进制文件的目标机器是诸如：X86、X64、arm等</li>\n<li>lua编译器产生的二进制文件的目标机器则是lua虚拟机</li>\n</ul>\n<h4 id=\"解释器、编译器、虚拟机\"><a href=\"#解释器、编译器、虚拟机\" class=\"headerlink\" title=\"解释器、编译器、虚拟机\"></a>解释器、编译器、虚拟机</h4><ul>\n<li>lua编译器把lua脚本编译成lua虚拟机的指令</li>\n<li>lua解释器包括编译器和虚拟机</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><hr>\n<ul>\n<li><strong>lua53.dll</strong>：由lua源码生成的动态链接库</li>\n<li><strong>lua53.exe</strong>：这个是lua的解释器。可以执行终端输入的lua语句，或者lua代码文件，或者经过luac53.exe输出的文件</li>\n<li><strong>luac53.exe</strong>：这个是lua的编译器。lua虽然是脚本语言，解释执行。但它也可以拥有自己的编译器，lua的解释器可以执行经由lua编译器编译后的代码</li>\n<li><strong>wlua53.exe</strong>：这个网上<a href=\"https://blog.csdn.net/zrf2112/article/details/79418515\" target=\"_blank\" rel=\"noopener\">搜了下</a>，貌似需要和GUI模块搭配使用，像是起到别的模块的插件的作用</li>\n</ul>\n<h3 id=\"相关话题\"><a href=\"#相关话题\" class=\"headerlink\" title=\"相关话题\"></a>相关话题</h3><hr>\n<h4 id=\"动态-VS-静态\"><a href=\"#动态-VS-静态\" class=\"headerlink\" title=\"动态 VS 静态\"></a>动态 VS 静态</h4><p>动态语言和静态语言的主要区别就在于：<strong>编译、链接的时机</strong>。C/C++的编译、链接阶段和执行期、运行时（run time）是严格区分开来的。但是lua的链接过程可以放到运行时。<strong>实时编译</strong>技术甚至可以把编译阶段放到运行时。</p>\n<h4 id=\"编译器生产的机器代码的目标机器的区别\"><a href=\"#编译器生产的机器代码的目标机器的区别\" class=\"headerlink\" title=\"编译器生产的机器代码的目标机器的区别\"></a>编译器生产的机器代码的目标机器的区别</h4><ul>\n<li>C++的编译器产生的二进制文件的目标机器是诸如：X86、X64、arm等</li>\n<li>lua编译器产生的二进制文件的目标机器则是lua虚拟机</li>\n</ul>\n<h4 id=\"解释器、编译器、虚拟机\"><a href=\"#解释器、编译器、虚拟机\" class=\"headerlink\" title=\"解释器、编译器、虚拟机\"></a>解释器、编译器、虚拟机</h4><ul>\n<li>lua编译器把lua脚本编译成lua虚拟机的指令</li>\n<li>lua解释器包括编译器和虚拟机</li>\n</ul>\n"},{"title":"Lua的元表与元方法","date":"2019-03-17T16:00:00.000Z","_content":"\n### 元表（MetaTable）\n---\n* Lua中的每个值都可以有一个*元表*，这个*元表*就是一个普通的Lua表（table）；元表中的键所关联的那些值被称为*元方法*，而这些键则对应着不同的*事件名*\n* 元表用于定义原始值在特定操作下的行为，有点像函数重写的效果一样。只是这里的原始函数就是个nil（根本就没有函数，或者说重写了一个内容为空的函数）\n* 使用setmetatable来给Lua的一个表设置元表，用getmetatable来获取一个元表\n* 表一般拥有独立的元表，而其它类型的值则是整个类型共享一个元表。注意：在标准Lua中，不可以改变除表以外的其它值的元表，比如number、string等\n\n### 使用元表与元方法实现table的“操作符重载”\n---\n```\nlocal tab1 = {1, 2, 3, 4}\nlocal tab2 = {10, 20, 30, 40}\n\nlocal metaTab = {\n    __add = function (t1, t2)\n        for i = 1, #t2 do\n            table.insert(t1, t2[i])\n        end\n        return t1\n    end\n}\n\nsetmetatable(tab1, metaTab)\nlocal tab3 = tab1 + tab2\n-- tab3 = {1, 2, 3, 4, 10, 20, 30, 40}\n```\n这里的add表示“+”操作的事件名，__add是完成“+”操作的元方法的key值，这样我们就可以自定义两个表相加的操作了。类似的还有：\n\n事件名 | 对应操作（元方法）的key值 | 含义\n-|-|-\nsub | __sub | 减法\nmul | __mul | 乘法\ndiv | __div | 除法\nlen | __len | 取长度\neq | __eq | 相等\nindex | __index | 索引table[key]\nnewindex | __newindex | 索引赋值 table[key] = value\ncall | __call | 函数调用操作\n\n### __index与OOP中的继承\n---\n* 当你给一个表的元表设置了__index对应的域（元方法）时（注意，这里的元方法既可以是一个函数，也可以是另一个表），\n* 当你对这个表索引一个key时，如果这个表里不存在这个key时，解释器就会去这个表的元表找__index对应的域（元方法）\n* 如果元方法是一个函数，则以table和key作为参数调用它。如果是一个表，那就有趣了，就继续在__index对应的表里索引key\n* 假如它的元表（元表就是普通的Lua表）又有自己的元表，如果当前还是没有索引到key，那就继续去元表的元表里去索引\n* 直到索引到key，或者没有元表了，或者元表里没有再定义__index对应的域了\n\n想想看，表与元表的关系，和子类与父类的关系是不是很像呢。当把一个表A设置成另一个表B的元表时，表B就相当于同时拥有了A和B的所有属性和操作！\n\n然后还有那个__call，简直就是面向对象里给对象定义了调用运算符\"()\"\n","source":"_posts/Lua/Lua的元表与元方法.md","raw":"---\ntitle: Lua的元表与元方法\ncategories: Lua\ndate: 2019-03-18\n---\n\n### 元表（MetaTable）\n---\n* Lua中的每个值都可以有一个*元表*，这个*元表*就是一个普通的Lua表（table）；元表中的键所关联的那些值被称为*元方法*，而这些键则对应着不同的*事件名*\n* 元表用于定义原始值在特定操作下的行为，有点像函数重写的效果一样。只是这里的原始函数就是个nil（根本就没有函数，或者说重写了一个内容为空的函数）\n* 使用setmetatable来给Lua的一个表设置元表，用getmetatable来获取一个元表\n* 表一般拥有独立的元表，而其它类型的值则是整个类型共享一个元表。注意：在标准Lua中，不可以改变除表以外的其它值的元表，比如number、string等\n\n### 使用元表与元方法实现table的“操作符重载”\n---\n```\nlocal tab1 = {1, 2, 3, 4}\nlocal tab2 = {10, 20, 30, 40}\n\nlocal metaTab = {\n    __add = function (t1, t2)\n        for i = 1, #t2 do\n            table.insert(t1, t2[i])\n        end\n        return t1\n    end\n}\n\nsetmetatable(tab1, metaTab)\nlocal tab3 = tab1 + tab2\n-- tab3 = {1, 2, 3, 4, 10, 20, 30, 40}\n```\n这里的add表示“+”操作的事件名，__add是完成“+”操作的元方法的key值，这样我们就可以自定义两个表相加的操作了。类似的还有：\n\n事件名 | 对应操作（元方法）的key值 | 含义\n-|-|-\nsub | __sub | 减法\nmul | __mul | 乘法\ndiv | __div | 除法\nlen | __len | 取长度\neq | __eq | 相等\nindex | __index | 索引table[key]\nnewindex | __newindex | 索引赋值 table[key] = value\ncall | __call | 函数调用操作\n\n### __index与OOP中的继承\n---\n* 当你给一个表的元表设置了__index对应的域（元方法）时（注意，这里的元方法既可以是一个函数，也可以是另一个表），\n* 当你对这个表索引一个key时，如果这个表里不存在这个key时，解释器就会去这个表的元表找__index对应的域（元方法）\n* 如果元方法是一个函数，则以table和key作为参数调用它。如果是一个表，那就有趣了，就继续在__index对应的表里索引key\n* 假如它的元表（元表就是普通的Lua表）又有自己的元表，如果当前还是没有索引到key，那就继续去元表的元表里去索引\n* 直到索引到key，或者没有元表了，或者元表里没有再定义__index对应的域了\n\n想想看，表与元表的关系，和子类与父类的关系是不是很像呢。当把一个表A设置成另一个表B的元表时，表B就相当于同时拥有了A和B的所有属性和操作！\n\n然后还有那个__call，简直就是面向对象里给对象定义了调用运算符\"()\"\n","slug":"Lua/Lua的元表与元方法","published":1,"updated":"2019-04-25T03:06:00.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wv3f001uvsr71jw48p8j","content":"<h3 id=\"元表（MetaTable）\"><a href=\"#元表（MetaTable）\" class=\"headerlink\" title=\"元表（MetaTable）\"></a>元表（MetaTable）</h3><hr>\n<ul>\n<li>Lua中的每个值都可以有一个<em>元表</em>，这个<em>元表</em>就是一个普通的Lua表（table）；元表中的键所关联的那些值被称为<em>元方法</em>，而这些键则对应着不同的<em>事件名</em></li>\n<li>元表用于定义原始值在特定操作下的行为，有点像函数重写的效果一样。只是这里的原始函数就是个nil（根本就没有函数，或者说重写了一个内容为空的函数）</li>\n<li>使用setmetatable来给Lua的一个表设置元表，用getmetatable来获取一个元表</li>\n<li>表一般拥有独立的元表，而其它类型的值则是整个类型共享一个元表。注意：在标准Lua中，不可以改变除表以外的其它值的元表，比如number、string等</li>\n</ul>\n<h3 id=\"使用元表与元方法实现table的“操作符重载”\"><a href=\"#使用元表与元方法实现table的“操作符重载”\" class=\"headerlink\" title=\"使用元表与元方法实现table的“操作符重载”\"></a>使用元表与元方法实现table的“操作符重载”</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab1 = &#123;1, 2, 3, 4&#125;</span><br><span class=\"line\">local tab2 = &#123;10, 20, 30, 40&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">local metaTab = &#123;</span><br><span class=\"line\">    __add = function (t1, t2)</span><br><span class=\"line\">        for i = 1, #t2 do</span><br><span class=\"line\">            table.insert(t1, t2[i])</span><br><span class=\"line\">        end</span><br><span class=\"line\">        return t1</span><br><span class=\"line\">    end</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setmetatable(tab1, metaTab)</span><br><span class=\"line\">local tab3 = tab1 + tab2</span><br><span class=\"line\">-- tab3 = &#123;1, 2, 3, 4, 10, 20, 30, 40&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的add表示“+”操作的事件名，__add是完成“+”操作的元方法的key值，这样我们就可以自定义两个表相加的操作了。类似的还有：</p>\n<table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>对应操作（元方法）的key值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sub</td>\n<td>__sub</td>\n<td>减法</td>\n</tr>\n<tr>\n<td>mul</td>\n<td>__mul</td>\n<td>乘法</td>\n</tr>\n<tr>\n<td>div</td>\n<td>__div</td>\n<td>除法</td>\n</tr>\n<tr>\n<td>len</td>\n<td>__len</td>\n<td>取长度</td>\n</tr>\n<tr>\n<td>eq</td>\n<td>__eq</td>\n<td>相等</td>\n</tr>\n<tr>\n<td>index</td>\n<td>__index</td>\n<td>索引table[key]</td>\n</tr>\n<tr>\n<td>newindex</td>\n<td>__newindex</td>\n<td>索引赋值 table[key] = value</td>\n</tr>\n<tr>\n<td>call</td>\n<td>__call</td>\n<td>函数调用操作</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"index与OOP中的继承\"><a href=\"#index与OOP中的继承\" class=\"headerlink\" title=\"__index与OOP中的继承\"></a>__index与OOP中的继承</h3><hr>\n<ul>\n<li>当你给一个表的元表设置了__index对应的域（元方法）时（注意，这里的元方法既可以是一个函数，也可以是另一个表），</li>\n<li>当你对这个表索引一个key时，如果这个表里不存在这个key时，解释器就会去这个表的元表找__index对应的域（元方法）</li>\n<li>如果元方法是一个函数，则以table和key作为参数调用它。如果是一个表，那就有趣了，就继续在__index对应的表里索引key</li>\n<li>假如它的元表（元表就是普通的Lua表）又有自己的元表，如果当前还是没有索引到key，那就继续去元表的元表里去索引</li>\n<li>直到索引到key，或者没有元表了，或者元表里没有再定义__index对应的域了</li>\n</ul>\n<p>想想看，表与元表的关系，和子类与父类的关系是不是很像呢。当把一个表A设置成另一个表B的元表时，表B就相当于同时拥有了A和B的所有属性和操作！</p>\n<p>然后还有那个__call，简直就是面向对象里给对象定义了调用运算符”()”</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"元表（MetaTable）\"><a href=\"#元表（MetaTable）\" class=\"headerlink\" title=\"元表（MetaTable）\"></a>元表（MetaTable）</h3><hr>\n<ul>\n<li>Lua中的每个值都可以有一个<em>元表</em>，这个<em>元表</em>就是一个普通的Lua表（table）；元表中的键所关联的那些值被称为<em>元方法</em>，而这些键则对应着不同的<em>事件名</em></li>\n<li>元表用于定义原始值在特定操作下的行为，有点像函数重写的效果一样。只是这里的原始函数就是个nil（根本就没有函数，或者说重写了一个内容为空的函数）</li>\n<li>使用setmetatable来给Lua的一个表设置元表，用getmetatable来获取一个元表</li>\n<li>表一般拥有独立的元表，而其它类型的值则是整个类型共享一个元表。注意：在标准Lua中，不可以改变除表以外的其它值的元表，比如number、string等</li>\n</ul>\n<h3 id=\"使用元表与元方法实现table的“操作符重载”\"><a href=\"#使用元表与元方法实现table的“操作符重载”\" class=\"headerlink\" title=\"使用元表与元方法实现table的“操作符重载”\"></a>使用元表与元方法实现table的“操作符重载”</h3><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab1 = &#123;1, 2, 3, 4&#125;</span><br><span class=\"line\">local tab2 = &#123;10, 20, 30, 40&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">local metaTab = &#123;</span><br><span class=\"line\">    __add = function (t1, t2)</span><br><span class=\"line\">        for i = 1, #t2 do</span><br><span class=\"line\">            table.insert(t1, t2[i])</span><br><span class=\"line\">        end</span><br><span class=\"line\">        return t1</span><br><span class=\"line\">    end</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">setmetatable(tab1, metaTab)</span><br><span class=\"line\">local tab3 = tab1 + tab2</span><br><span class=\"line\">-- tab3 = &#123;1, 2, 3, 4, 10, 20, 30, 40&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的add表示“+”操作的事件名，__add是完成“+”操作的元方法的key值，这样我们就可以自定义两个表相加的操作了。类似的还有：</p>\n<table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>对应操作（元方法）的key值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sub</td>\n<td>__sub</td>\n<td>减法</td>\n</tr>\n<tr>\n<td>mul</td>\n<td>__mul</td>\n<td>乘法</td>\n</tr>\n<tr>\n<td>div</td>\n<td>__div</td>\n<td>除法</td>\n</tr>\n<tr>\n<td>len</td>\n<td>__len</td>\n<td>取长度</td>\n</tr>\n<tr>\n<td>eq</td>\n<td>__eq</td>\n<td>相等</td>\n</tr>\n<tr>\n<td>index</td>\n<td>__index</td>\n<td>索引table[key]</td>\n</tr>\n<tr>\n<td>newindex</td>\n<td>__newindex</td>\n<td>索引赋值 table[key] = value</td>\n</tr>\n<tr>\n<td>call</td>\n<td>__call</td>\n<td>函数调用操作</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"index与OOP中的继承\"><a href=\"#index与OOP中的继承\" class=\"headerlink\" title=\"__index与OOP中的继承\"></a>__index与OOP中的继承</h3><hr>\n<ul>\n<li>当你给一个表的元表设置了__index对应的域（元方法）时（注意，这里的元方法既可以是一个函数，也可以是另一个表），</li>\n<li>当你对这个表索引一个key时，如果这个表里不存在这个key时，解释器就会去这个表的元表找__index对应的域（元方法）</li>\n<li>如果元方法是一个函数，则以table和key作为参数调用它。如果是一个表，那就有趣了，就继续在__index对应的表里索引key</li>\n<li>假如它的元表（元表就是普通的Lua表）又有自己的元表，如果当前还是没有索引到key，那就继续去元表的元表里去索引</li>\n<li>直到索引到key，或者没有元表了，或者元表里没有再定义__index对应的域了</li>\n</ul>\n<p>想想看，表与元表的关系，和子类与父类的关系是不是很像呢。当把一个表A设置成另一个表B的元表时，表B就相当于同时拥有了A和B的所有属性和操作！</p>\n<p>然后还有那个__call，简直就是面向对象里给对象定义了调用运算符”()”</p>\n"},{"title":"Android开发中的名称缩写","date":"2019-07-07T16:00:00.000Z","_content":"\n### SDK ( Software Development Kit / 软件开发工具包 )\n----\n\n这是一个覆盖面相当广泛的名词，可以这么说：辅助开发某一类软件的相关文档、API必需资料、范例和工具的集合都可以叫做 \"SDK\"。在安卓开发中我们所说的SDK即为android SDK，它为开发者提供了库文件以及其他开发所用到的工具；一般说的SDK就是开发工具了，再加一个开发IDE，就搭建起一个开发环境了，比如 eclipse + android SDK 的IDE\n\nJava 开发的话也有 Java SDK 。我自己\n\n最常用的就是 Android SDK 中的 adb 这个工具了\n\n### NDK ( Native Development Kit / 本地开发工具包 ) \n---\n\n跟 android SDK 差不多也是一个开发工具包，是用来给安卓手机开发软件用的，但是和 SDK 不同的是它用的是 C 语言，而 android SDK 用的是 Java 语言\n\n### ADT ( Android Developer Tools / 安卓开发工具 )\n---\n\nGoogle 研发的一个插件，集成在 eclipse 中，为安卓开发提供专属开发环境，简单的说 ADT 就是 Android 在 Eclipse 上的开发工具，在 Eclipse 和 SDK 之间起到了一个桥梁的作用\n\n### ANT ( [Apache Ant](https://zh.wikipedia.org/wiki/Apache_Ant) )\n---\n\n是Apache的一个项目管理工具，是一个可将软件编译、测试、部署等步骤联系在一起加以自动化的工具，大多用于Java环境中的软件开发\n\n### JDK ( Java Development Kit / Java软件开发工具包 )\n---\n\nJava核心，包括Java运行环境、类库、Java开发工具，简单的说JDK就是面向Java开发人员使用的SDK\n","source":"_posts/Android/Android开发中的名称缩写.md","raw":"---\ntitle: Android开发中的名称缩写\ncategories: Android\ndate: 2019-07-08\n---\n\n### SDK ( Software Development Kit / 软件开发工具包 )\n----\n\n这是一个覆盖面相当广泛的名词，可以这么说：辅助开发某一类软件的相关文档、API必需资料、范例和工具的集合都可以叫做 \"SDK\"。在安卓开发中我们所说的SDK即为android SDK，它为开发者提供了库文件以及其他开发所用到的工具；一般说的SDK就是开发工具了，再加一个开发IDE，就搭建起一个开发环境了，比如 eclipse + android SDK 的IDE\n\nJava 开发的话也有 Java SDK 。我自己\n\n最常用的就是 Android SDK 中的 adb 这个工具了\n\n### NDK ( Native Development Kit / 本地开发工具包 ) \n---\n\n跟 android SDK 差不多也是一个开发工具包，是用来给安卓手机开发软件用的，但是和 SDK 不同的是它用的是 C 语言，而 android SDK 用的是 Java 语言\n\n### ADT ( Android Developer Tools / 安卓开发工具 )\n---\n\nGoogle 研发的一个插件，集成在 eclipse 中，为安卓开发提供专属开发环境，简单的说 ADT 就是 Android 在 Eclipse 上的开发工具，在 Eclipse 和 SDK 之间起到了一个桥梁的作用\n\n### ANT ( [Apache Ant](https://zh.wikipedia.org/wiki/Apache_Ant) )\n---\n\n是Apache的一个项目管理工具，是一个可将软件编译、测试、部署等步骤联系在一起加以自动化的工具，大多用于Java环境中的软件开发\n\n### JDK ( Java Development Kit / Java软件开发工具包 )\n---\n\nJava核心，包括Java运行环境、类库、Java开发工具，简单的说JDK就是面向Java开发人员使用的SDK\n","slug":"Android/Android开发中的名称缩写","published":1,"updated":"2019-07-08T13:13:12.264Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wv3g001vvsr7zjxuv3a1","content":"<h3 id=\"SDK-Software-Development-Kit-软件开发工具包\"><a href=\"#SDK-Software-Development-Kit-软件开发工具包\" class=\"headerlink\" title=\"SDK ( Software Development Kit / 软件开发工具包 )\"></a>SDK ( Software Development Kit / 软件开发工具包 )</h3><hr>\n<p>这是一个覆盖面相当广泛的名词，可以这么说：辅助开发某一类软件的相关文档、API必需资料、范例和工具的集合都可以叫做 “SDK”。在安卓开发中我们所说的SDK即为android SDK，它为开发者提供了库文件以及其他开发所用到的工具；一般说的SDK就是开发工具了，再加一个开发IDE，就搭建起一个开发环境了，比如 eclipse + android SDK 的IDE</p>\n<p>Java 开发的话也有 Java SDK 。我自己</p>\n<p>最常用的就是 Android SDK 中的 adb 这个工具了</p>\n<h3 id=\"NDK-Native-Development-Kit-本地开发工具包\"><a href=\"#NDK-Native-Development-Kit-本地开发工具包\" class=\"headerlink\" title=\"NDK ( Native Development Kit / 本地开发工具包 )\"></a>NDK ( Native Development Kit / 本地开发工具包 )</h3><hr>\n<p>跟 android SDK 差不多也是一个开发工具包，是用来给安卓手机开发软件用的，但是和 SDK 不同的是它用的是 C 语言，而 android SDK 用的是 Java 语言</p>\n<h3 id=\"ADT-Android-Developer-Tools-安卓开发工具\"><a href=\"#ADT-Android-Developer-Tools-安卓开发工具\" class=\"headerlink\" title=\"ADT ( Android Developer Tools / 安卓开发工具 )\"></a>ADT ( Android Developer Tools / 安卓开发工具 )</h3><hr>\n<p>Google 研发的一个插件，集成在 eclipse 中，为安卓开发提供专属开发环境，简单的说 ADT 就是 Android 在 Eclipse 上的开发工具，在 Eclipse 和 SDK 之间起到了一个桥梁的作用</p>\n<h3 id=\"ANT-Apache-Ant\"><a href=\"#ANT-Apache-Ant\" class=\"headerlink\" title=\"ANT ( Apache Ant )\"></a>ANT ( <a href=\"https://zh.wikipedia.org/wiki/Apache_Ant\" target=\"_blank\" rel=\"noopener\">Apache Ant</a> )</h3><hr>\n<p>是Apache的一个项目管理工具，是一个可将软件编译、测试、部署等步骤联系在一起加以自动化的工具，大多用于Java环境中的软件开发</p>\n<h3 id=\"JDK-Java-Development-Kit-Java软件开发工具包\"><a href=\"#JDK-Java-Development-Kit-Java软件开发工具包\" class=\"headerlink\" title=\"JDK ( Java Development Kit / Java软件开发工具包 )\"></a>JDK ( Java Development Kit / Java软件开发工具包 )</h3><hr>\n<p>Java核心，包括Java运行环境、类库、Java开发工具，简单的说JDK就是面向Java开发人员使用的SDK</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"SDK-Software-Development-Kit-软件开发工具包\"><a href=\"#SDK-Software-Development-Kit-软件开发工具包\" class=\"headerlink\" title=\"SDK ( Software Development Kit / 软件开发工具包 )\"></a>SDK ( Software Development Kit / 软件开发工具包 )</h3><hr>\n<p>这是一个覆盖面相当广泛的名词，可以这么说：辅助开发某一类软件的相关文档、API必需资料、范例和工具的集合都可以叫做 “SDK”。在安卓开发中我们所说的SDK即为android SDK，它为开发者提供了库文件以及其他开发所用到的工具；一般说的SDK就是开发工具了，再加一个开发IDE，就搭建起一个开发环境了，比如 eclipse + android SDK 的IDE</p>\n<p>Java 开发的话也有 Java SDK 。我自己</p>\n<p>最常用的就是 Android SDK 中的 adb 这个工具了</p>\n<h3 id=\"NDK-Native-Development-Kit-本地开发工具包\"><a href=\"#NDK-Native-Development-Kit-本地开发工具包\" class=\"headerlink\" title=\"NDK ( Native Development Kit / 本地开发工具包 )\"></a>NDK ( Native Development Kit / 本地开发工具包 )</h3><hr>\n<p>跟 android SDK 差不多也是一个开发工具包，是用来给安卓手机开发软件用的，但是和 SDK 不同的是它用的是 C 语言，而 android SDK 用的是 Java 语言</p>\n<h3 id=\"ADT-Android-Developer-Tools-安卓开发工具\"><a href=\"#ADT-Android-Developer-Tools-安卓开发工具\" class=\"headerlink\" title=\"ADT ( Android Developer Tools / 安卓开发工具 )\"></a>ADT ( Android Developer Tools / 安卓开发工具 )</h3><hr>\n<p>Google 研发的一个插件，集成在 eclipse 中，为安卓开发提供专属开发环境，简单的说 ADT 就是 Android 在 Eclipse 上的开发工具，在 Eclipse 和 SDK 之间起到了一个桥梁的作用</p>\n<h3 id=\"ANT-Apache-Ant\"><a href=\"#ANT-Apache-Ant\" class=\"headerlink\" title=\"ANT ( Apache Ant )\"></a>ANT ( <a href=\"https://zh.wikipedia.org/wiki/Apache_Ant\" target=\"_blank\" rel=\"noopener\">Apache Ant</a> )</h3><hr>\n<p>是Apache的一个项目管理工具，是一个可将软件编译、测试、部署等步骤联系在一起加以自动化的工具，大多用于Java环境中的软件开发</p>\n<h3 id=\"JDK-Java-Development-Kit-Java软件开发工具包\"><a href=\"#JDK-Java-Development-Kit-Java软件开发工具包\" class=\"headerlink\" title=\"JDK ( Java Development Kit / Java软件开发工具包 )\"></a>JDK ( Java Development Kit / Java软件开发工具包 )</h3><hr>\n<p>Java核心，包括Java运行环境、类库、Java开发工具，简单的说JDK就是面向Java开发人员使用的SDK</p>\n"},{"title":"Lua中的Table常见操作","date":"2019-03-16T16:00:00.000Z","_content":"\n* Lua中的表即table，它是Lua提供的唯一一个复杂数据结构。\n* Lua中的table可以用来表示数组或者关联数组等常见概念。\n* Lua中的模块、包以及面向对象等概念也是靠table来实现的。\n\n### 初始化\n---\n可以这样：\n```\nlocal table = {}\ntable[1] = \"A\"\ntable[2] = \"B\"\ntable[3] = \"C\"\n```\n也可以这样：\n```\nlocal table = {\n    [1] = \"A\",\n    [2] = \"B\",\n    [3] = \"C\"\n}\n```\n或者这样：\n```\nlocal table = {\n    \"A\",\n    \"B\",\n    \"C\"\n}\n```\n\n### Table操作\n---\n\n* **table.insert(tab, [pos,] value)**\n在tab的pos处插入value，并后移tab[pos],tab[pos + 1],...,tab[#tab]。默认插入到tab末尾,即pos的默认值为#tab + 1\n```\nlocal tab = {1, 2, 3}\ntable,insert(tab, 7)\nprint(tab[4])\n> 7\n```\n\n* **table.remove(tab [,pos])**\n移除tab中pos位置上的元素，并返回移除的值。默认移除最后一个元素\n```\nlocal tab = {1, 2, 3, 7}\ntable.remove(tab)\n# 现在tab的内容：{1, 2, 3} \n```\n\n* **table.sort(tab [, comp])**\n对tab进行排序，可自定义排序规则\n```\nlocal tab = {5, 2, 1, 7, 13}\nlocal comp = function(l, r) return l > r end\ntable.sort(tab, comp)\n# 现在tab的内容：{13, 7, 5, 2, 1}\n```\n\n* **table.concat(tab [, sep [, i [, j]]])**\n连接tab的各个元素，以sep分割各个元素,返回值为：\n`tab[i] .. sep .. tab[i + 1] ··· sep .. tab[j]`\n其中的各项参数默认值为：sep = \"\", i = 1, j = #tab\n```\nlocal tab = {\"A\", \"B\", \"C\"}\nprint(table.concat(tab, \"|\"))\n> A|B|C\nprint(table.concat(tab, \"\"))\n> ABC\n```\n\n* **table.move(tab1, begin1, end1, begin2 [, tab2])**\n将tab1中的元素移到tab2中，等同于下面这个多重赋值操作：\n`tab2[begin2], ··· = tab1[begin1], ··· , tab1[end1]`\n其中tab2的默认值为tab1。*其实感觉move这个函数名不够好，move给人的感觉是，拷贝后会把自己的给删除了；或者就是把自己的元素给别人了，自己不再拥有这些元素的控制权了。其实这里就是个单纯的拷贝操作*\n```\nlocal tab1 = {1, 2}\nlocal tab2 = {}\ntable.move(tab1, 1, 2, 1, tab2)\n# 现在tab1的内容：{1, 2}\n# 现在tab2的内容：{1, 2}\n```\n\n* **table.pack(...)**\n构建新的table\n```\nlocal tab = table.pack(\"A\", \"B\", \"C\")\n# 现在表tab的内容：{\"A\", \"B\", \"C\"}\n```\n\n* **table.unpack(tab [, i [, j]])**\n返回table中的元素，i默认为1，j默认为#tab；等价于\n`return tab[i], tab[i + 1], ··· ,tab[j]`\n","source":"_posts/Lua/Lua中的Table常见操作.md","raw":"---\ntitle: Lua中的Table常见操作\ncategories: Lua\ndate: 2019-03-17\n---\n\n* Lua中的表即table，它是Lua提供的唯一一个复杂数据结构。\n* Lua中的table可以用来表示数组或者关联数组等常见概念。\n* Lua中的模块、包以及面向对象等概念也是靠table来实现的。\n\n### 初始化\n---\n可以这样：\n```\nlocal table = {}\ntable[1] = \"A\"\ntable[2] = \"B\"\ntable[3] = \"C\"\n```\n也可以这样：\n```\nlocal table = {\n    [1] = \"A\",\n    [2] = \"B\",\n    [3] = \"C\"\n}\n```\n或者这样：\n```\nlocal table = {\n    \"A\",\n    \"B\",\n    \"C\"\n}\n```\n\n### Table操作\n---\n\n* **table.insert(tab, [pos,] value)**\n在tab的pos处插入value，并后移tab[pos],tab[pos + 1],...,tab[#tab]。默认插入到tab末尾,即pos的默认值为#tab + 1\n```\nlocal tab = {1, 2, 3}\ntable,insert(tab, 7)\nprint(tab[4])\n> 7\n```\n\n* **table.remove(tab [,pos])**\n移除tab中pos位置上的元素，并返回移除的值。默认移除最后一个元素\n```\nlocal tab = {1, 2, 3, 7}\ntable.remove(tab)\n# 现在tab的内容：{1, 2, 3} \n```\n\n* **table.sort(tab [, comp])**\n对tab进行排序，可自定义排序规则\n```\nlocal tab = {5, 2, 1, 7, 13}\nlocal comp = function(l, r) return l > r end\ntable.sort(tab, comp)\n# 现在tab的内容：{13, 7, 5, 2, 1}\n```\n\n* **table.concat(tab [, sep [, i [, j]]])**\n连接tab的各个元素，以sep分割各个元素,返回值为：\n`tab[i] .. sep .. tab[i + 1] ··· sep .. tab[j]`\n其中的各项参数默认值为：sep = \"\", i = 1, j = #tab\n```\nlocal tab = {\"A\", \"B\", \"C\"}\nprint(table.concat(tab, \"|\"))\n> A|B|C\nprint(table.concat(tab, \"\"))\n> ABC\n```\n\n* **table.move(tab1, begin1, end1, begin2 [, tab2])**\n将tab1中的元素移到tab2中，等同于下面这个多重赋值操作：\n`tab2[begin2], ··· = tab1[begin1], ··· , tab1[end1]`\n其中tab2的默认值为tab1。*其实感觉move这个函数名不够好，move给人的感觉是，拷贝后会把自己的给删除了；或者就是把自己的元素给别人了，自己不再拥有这些元素的控制权了。其实这里就是个单纯的拷贝操作*\n```\nlocal tab1 = {1, 2}\nlocal tab2 = {}\ntable.move(tab1, 1, 2, 1, tab2)\n# 现在tab1的内容：{1, 2}\n# 现在tab2的内容：{1, 2}\n```\n\n* **table.pack(...)**\n构建新的table\n```\nlocal tab = table.pack(\"A\", \"B\", \"C\")\n# 现在表tab的内容：{\"A\", \"B\", \"C\"}\n```\n\n* **table.unpack(tab [, i [, j]])**\n返回table中的元素，i默认为1，j默认为#tab；等价于\n`return tab[i], tab[i + 1], ··· ,tab[j]`\n","slug":"Lua/Lua中的Table常见操作","published":1,"updated":"2019-04-25T03:06:00.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wv3h001wvsr75jsenfue","content":"<ul>\n<li>Lua中的表即table，它是Lua提供的唯一一个复杂数据结构。</li>\n<li>Lua中的table可以用来表示数组或者关联数组等常见概念。</li>\n<li>Lua中的模块、包以及面向对象等概念也是靠table来实现的。</li>\n</ul>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><hr>\n<p>可以这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local table = &#123;&#125;</span><br><span class=\"line\">table[1] = &quot;A&quot;</span><br><span class=\"line\">table[2] = &quot;B&quot;</span><br><span class=\"line\">table[3] = &quot;C&quot;</span><br></pre></td></tr></table></figure></p>\n<p>也可以这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local table = &#123;</span><br><span class=\"line\">    [1] = &quot;A&quot;,</span><br><span class=\"line\">    [2] = &quot;B&quot;,</span><br><span class=\"line\">    [3] = &quot;C&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>或者这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local table = &#123;</span><br><span class=\"line\">    &quot;A&quot;,</span><br><span class=\"line\">    &quot;B&quot;,</span><br><span class=\"line\">    &quot;C&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Table操作\"><a href=\"#Table操作\" class=\"headerlink\" title=\"Table操作\"></a>Table操作</h3><hr>\n<ul>\n<li><p><strong>table.insert(tab, [pos,] value)</strong><br>在tab的pos处插入value，并后移tab[pos],tab[pos + 1],…,tab[#tab]。默认插入到tab末尾,即pos的默认值为#tab + 1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab = &#123;1, 2, 3&#125;</span><br><span class=\"line\">table,insert(tab, 7)</span><br><span class=\"line\">print(tab[4])</span><br><span class=\"line\">&gt; 7</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.remove(tab [,pos])</strong><br>移除tab中pos位置上的元素，并返回移除的值。默认移除最后一个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab = &#123;1, 2, 3, 7&#125;</span><br><span class=\"line\">table.remove(tab)</span><br><span class=\"line\"># 现在tab的内容：&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.sort(tab [, comp])</strong><br>对tab进行排序，可自定义排序规则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab = &#123;5, 2, 1, 7, 13&#125;</span><br><span class=\"line\">local comp = function(l, r) return l &gt; r end</span><br><span class=\"line\">table.sort(tab, comp)</span><br><span class=\"line\"># 现在tab的内容：&#123;13, 7, 5, 2, 1&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.concat(tab [, sep [, i [, j]]])</strong><br>连接tab的各个元素，以sep分割各个元素,返回值为：<br><code>tab[i] .. sep .. tab[i + 1] ··· sep .. tab[j]</code><br>其中的各项参数默认值为：sep = “”, i = 1, j = #tab</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab = &#123;&quot;A&quot;, &quot;B&quot;, &quot;C&quot;&#125;</span><br><span class=\"line\">print(table.concat(tab, &quot;|&quot;))</span><br><span class=\"line\">&gt; A|B|C</span><br><span class=\"line\">print(table.concat(tab, &quot;&quot;))</span><br><span class=\"line\">&gt; ABC</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.move(tab1, begin1, end1, begin2 [, tab2])</strong><br>将tab1中的元素移到tab2中，等同于下面这个多重赋值操作：<br><code>tab2[begin2], ··· = tab1[begin1], ··· , tab1[end1]</code><br>其中tab2的默认值为tab1。<em>其实感觉move这个函数名不够好，move给人的感觉是，拷贝后会把自己的给删除了；或者就是把自己的元素给别人了，自己不再拥有这些元素的控制权了。其实这里就是个单纯的拷贝操作</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab1 = &#123;1, 2&#125;</span><br><span class=\"line\">local tab2 = &#123;&#125;</span><br><span class=\"line\">table.move(tab1, 1, 2, 1, tab2)</span><br><span class=\"line\"># 现在tab1的内容：&#123;1, 2&#125;</span><br><span class=\"line\"># 现在tab2的内容：&#123;1, 2&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.pack(…)</strong><br>构建新的table</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab = table.pack(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class=\"line\"># 现在表tab的内容：&#123;&quot;A&quot;, &quot;B&quot;, &quot;C&quot;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.unpack(tab [, i [, j]])</strong><br>返回table中的元素，i默认为1，j默认为#tab；等价于<br><code>return tab[i], tab[i + 1], ··· ,tab[j]</code></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>Lua中的表即table，它是Lua提供的唯一一个复杂数据结构。</li>\n<li>Lua中的table可以用来表示数组或者关联数组等常见概念。</li>\n<li>Lua中的模块、包以及面向对象等概念也是靠table来实现的。</li>\n</ul>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><hr>\n<p>可以这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local table = &#123;&#125;</span><br><span class=\"line\">table[1] = &quot;A&quot;</span><br><span class=\"line\">table[2] = &quot;B&quot;</span><br><span class=\"line\">table[3] = &quot;C&quot;</span><br></pre></td></tr></table></figure></p>\n<p>也可以这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local table = &#123;</span><br><span class=\"line\">    [1] = &quot;A&quot;,</span><br><span class=\"line\">    [2] = &quot;B&quot;,</span><br><span class=\"line\">    [3] = &quot;C&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>或者这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local table = &#123;</span><br><span class=\"line\">    &quot;A&quot;,</span><br><span class=\"line\">    &quot;B&quot;,</span><br><span class=\"line\">    &quot;C&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Table操作\"><a href=\"#Table操作\" class=\"headerlink\" title=\"Table操作\"></a>Table操作</h3><hr>\n<ul>\n<li><p><strong>table.insert(tab, [pos,] value)</strong><br>在tab的pos处插入value，并后移tab[pos],tab[pos + 1],…,tab[#tab]。默认插入到tab末尾,即pos的默认值为#tab + 1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab = &#123;1, 2, 3&#125;</span><br><span class=\"line\">table,insert(tab, 7)</span><br><span class=\"line\">print(tab[4])</span><br><span class=\"line\">&gt; 7</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.remove(tab [,pos])</strong><br>移除tab中pos位置上的元素，并返回移除的值。默认移除最后一个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab = &#123;1, 2, 3, 7&#125;</span><br><span class=\"line\">table.remove(tab)</span><br><span class=\"line\"># 现在tab的内容：&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.sort(tab [, comp])</strong><br>对tab进行排序，可自定义排序规则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab = &#123;5, 2, 1, 7, 13&#125;</span><br><span class=\"line\">local comp = function(l, r) return l &gt; r end</span><br><span class=\"line\">table.sort(tab, comp)</span><br><span class=\"line\"># 现在tab的内容：&#123;13, 7, 5, 2, 1&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.concat(tab [, sep [, i [, j]]])</strong><br>连接tab的各个元素，以sep分割各个元素,返回值为：<br><code>tab[i] .. sep .. tab[i + 1] ··· sep .. tab[j]</code><br>其中的各项参数默认值为：sep = “”, i = 1, j = #tab</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab = &#123;&quot;A&quot;, &quot;B&quot;, &quot;C&quot;&#125;</span><br><span class=\"line\">print(table.concat(tab, &quot;|&quot;))</span><br><span class=\"line\">&gt; A|B|C</span><br><span class=\"line\">print(table.concat(tab, &quot;&quot;))</span><br><span class=\"line\">&gt; ABC</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.move(tab1, begin1, end1, begin2 [, tab2])</strong><br>将tab1中的元素移到tab2中，等同于下面这个多重赋值操作：<br><code>tab2[begin2], ··· = tab1[begin1], ··· , tab1[end1]</code><br>其中tab2的默认值为tab1。<em>其实感觉move这个函数名不够好，move给人的感觉是，拷贝后会把自己的给删除了；或者就是把自己的元素给别人了，自己不再拥有这些元素的控制权了。其实这里就是个单纯的拷贝操作</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab1 = &#123;1, 2&#125;</span><br><span class=\"line\">local tab2 = &#123;&#125;</span><br><span class=\"line\">table.move(tab1, 1, 2, 1, tab2)</span><br><span class=\"line\"># 现在tab1的内容：&#123;1, 2&#125;</span><br><span class=\"line\"># 现在tab2的内容：&#123;1, 2&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.pack(…)</strong><br>构建新的table</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local tab = table.pack(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class=\"line\"># 现在表tab的内容：&#123;&quot;A&quot;, &quot;B&quot;, &quot;C&quot;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>table.unpack(tab [, i [, j]])</strong><br>返回table中的元素，i默认为1，j默认为#tab；等价于<br><code>return tab[i], tab[i + 1], ··· ,tab[j]</code></p>\n</li>\n</ul>\n"},{"title":"心跳机制","date":"2019-05-30T16:00:00.000Z","_content":"\n### 心跳（HeartBeat）\n---\n\n在计算机领域中，有很多概念和机制的命名，都参考了现实生活中已有的事物或者概念，两者之间一般都具有共同或者相似的行为。\n\n例如：\n* 容器\n* 树\n* 迭代器/游标\n* 父类、子类\n* 神经网络\n* 心跳\n\n### 为何需要心跳机制\n---\n\n* C/S架构的软件，采用长连接时，通常并不会一直都会有数据传输的。连接处于空闲状态的时间占有相当比例。如果客户端发生崩溃、断网等异常情况时，除非在此连接上继续发送数据产生错误返回，否则服务器无法得知客户端真的出现异常情况了。想要及时得知这一情况并做相应处理的话，就需要心跳机制。\n* 另一方面，app经常需要和服务器及时同步一些数据，也可以通过心跳包发送过去。\n\n### TCP内置的KeepAlive保活机制\n---\n\n* 7,200,000 ms：TCP默认的心跳间隔时间是2个小时！，这在绝大多数APP中是无法忍受的。\n* 这就要提出另外一个问题：心跳间隔时间的不合理设置，可能会因为短暂的网络波动而断开健康的TCP连接。\n\n### 实践中的疑虑\n---\n\n参与开发中的一个项目，心跳的间隔时间是8秒。检测到玩家断线时，客户端会有断线重连的提示。\n\n现在遇到这样的bug：\n\n流程如下：\n\n玩家点击某个按钮 => 发送消息至服务器 => 服务器处理后，返回消息给客户端 => 客户端做出对应的UI表现\n\n玩家反馈：\n\n点击按钮没有任何反应，没有断线重连提示，服务器日志没有查到这位玩家发送的消息日志。\n\n我猜想：\n\n玩家在点击按钮的时候，正好网络波动网络消息没有发出去，他没有看见断线重连的提示，是因为：短暂之后（8秒之内）网络又好了。也就是说恰好网络波动只是出现在两次心跳之间，而没有被客户端检测到。所以玩家觉得网络没有任何问题（依据是客户端的断线重连提示），服务器日志却又查不到发送网络消息的日志。\n\n\n\n","source":"_posts/游戏开发/心跳机制.md","raw":"---\ntitle: 心跳机制\ncategories: 游戏开发\ndate: 2019-05-31\n---\n\n### 心跳（HeartBeat）\n---\n\n在计算机领域中，有很多概念和机制的命名，都参考了现实生活中已有的事物或者概念，两者之间一般都具有共同或者相似的行为。\n\n例如：\n* 容器\n* 树\n* 迭代器/游标\n* 父类、子类\n* 神经网络\n* 心跳\n\n### 为何需要心跳机制\n---\n\n* C/S架构的软件，采用长连接时，通常并不会一直都会有数据传输的。连接处于空闲状态的时间占有相当比例。如果客户端发生崩溃、断网等异常情况时，除非在此连接上继续发送数据产生错误返回，否则服务器无法得知客户端真的出现异常情况了。想要及时得知这一情况并做相应处理的话，就需要心跳机制。\n* 另一方面，app经常需要和服务器及时同步一些数据，也可以通过心跳包发送过去。\n\n### TCP内置的KeepAlive保活机制\n---\n\n* 7,200,000 ms：TCP默认的心跳间隔时间是2个小时！，这在绝大多数APP中是无法忍受的。\n* 这就要提出另外一个问题：心跳间隔时间的不合理设置，可能会因为短暂的网络波动而断开健康的TCP连接。\n\n### 实践中的疑虑\n---\n\n参与开发中的一个项目，心跳的间隔时间是8秒。检测到玩家断线时，客户端会有断线重连的提示。\n\n现在遇到这样的bug：\n\n流程如下：\n\n玩家点击某个按钮 => 发送消息至服务器 => 服务器处理后，返回消息给客户端 => 客户端做出对应的UI表现\n\n玩家反馈：\n\n点击按钮没有任何反应，没有断线重连提示，服务器日志没有查到这位玩家发送的消息日志。\n\n我猜想：\n\n玩家在点击按钮的时候，正好网络波动网络消息没有发出去，他没有看见断线重连的提示，是因为：短暂之后（8秒之内）网络又好了。也就是说恰好网络波动只是出现在两次心跳之间，而没有被客户端检测到。所以玩家觉得网络没有任何问题（依据是客户端的断线重连提示），服务器日志却又查不到发送网络消息的日志。\n\n\n\n","slug":"游戏开发/心跳机制","published":1,"updated":"2019-05-31T10:11:22.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wv3i001yvsr7shnd6y27","content":"<h3 id=\"心跳（HeartBeat）\"><a href=\"#心跳（HeartBeat）\" class=\"headerlink\" title=\"心跳（HeartBeat）\"></a>心跳（HeartBeat）</h3><hr>\n<p>在计算机领域中，有很多概念和机制的命名，都参考了现实生活中已有的事物或者概念，两者之间一般都具有共同或者相似的行为。</p>\n<p>例如：</p>\n<ul>\n<li>容器</li>\n<li>树</li>\n<li>迭代器/游标</li>\n<li>父类、子类</li>\n<li>神经网络</li>\n<li>心跳</li>\n</ul>\n<h3 id=\"为何需要心跳机制\"><a href=\"#为何需要心跳机制\" class=\"headerlink\" title=\"为何需要心跳机制\"></a>为何需要心跳机制</h3><hr>\n<ul>\n<li>C/S架构的软件，采用长连接时，通常并不会一直都会有数据传输的。连接处于空闲状态的时间占有相当比例。如果客户端发生崩溃、断网等异常情况时，除非在此连接上继续发送数据产生错误返回，否则服务器无法得知客户端真的出现异常情况了。想要及时得知这一情况并做相应处理的话，就需要心跳机制。</li>\n<li>另一方面，app经常需要和服务器及时同步一些数据，也可以通过心跳包发送过去。</li>\n</ul>\n<h3 id=\"TCP内置的KeepAlive保活机制\"><a href=\"#TCP内置的KeepAlive保活机制\" class=\"headerlink\" title=\"TCP内置的KeepAlive保活机制\"></a>TCP内置的KeepAlive保活机制</h3><hr>\n<ul>\n<li>7,200,000 ms：TCP默认的心跳间隔时间是2个小时！，这在绝大多数APP中是无法忍受的。</li>\n<li>这就要提出另外一个问题：心跳间隔时间的不合理设置，可能会因为短暂的网络波动而断开健康的TCP连接。</li>\n</ul>\n<h3 id=\"实践中的疑虑\"><a href=\"#实践中的疑虑\" class=\"headerlink\" title=\"实践中的疑虑\"></a>实践中的疑虑</h3><hr>\n<p>参与开发中的一个项目，心跳的间隔时间是8秒。检测到玩家断线时，客户端会有断线重连的提示。</p>\n<p>现在遇到这样的bug：</p>\n<p>流程如下：</p>\n<p>玩家点击某个按钮 =&gt; 发送消息至服务器 =&gt; 服务器处理后，返回消息给客户端 =&gt; 客户端做出对应的UI表现</p>\n<p>玩家反馈：</p>\n<p>点击按钮没有任何反应，没有断线重连提示，服务器日志没有查到这位玩家发送的消息日志。</p>\n<p>我猜想：</p>\n<p>玩家在点击按钮的时候，正好网络波动网络消息没有发出去，他没有看见断线重连的提示，是因为：短暂之后（8秒之内）网络又好了。也就是说恰好网络波动只是出现在两次心跳之间，而没有被客户端检测到。所以玩家觉得网络没有任何问题（依据是客户端的断线重连提示），服务器日志却又查不到发送网络消息的日志。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"心跳（HeartBeat）\"><a href=\"#心跳（HeartBeat）\" class=\"headerlink\" title=\"心跳（HeartBeat）\"></a>心跳（HeartBeat）</h3><hr>\n<p>在计算机领域中，有很多概念和机制的命名，都参考了现实生活中已有的事物或者概念，两者之间一般都具有共同或者相似的行为。</p>\n<p>例如：</p>\n<ul>\n<li>容器</li>\n<li>树</li>\n<li>迭代器/游标</li>\n<li>父类、子类</li>\n<li>神经网络</li>\n<li>心跳</li>\n</ul>\n<h3 id=\"为何需要心跳机制\"><a href=\"#为何需要心跳机制\" class=\"headerlink\" title=\"为何需要心跳机制\"></a>为何需要心跳机制</h3><hr>\n<ul>\n<li>C/S架构的软件，采用长连接时，通常并不会一直都会有数据传输的。连接处于空闲状态的时间占有相当比例。如果客户端发生崩溃、断网等异常情况时，除非在此连接上继续发送数据产生错误返回，否则服务器无法得知客户端真的出现异常情况了。想要及时得知这一情况并做相应处理的话，就需要心跳机制。</li>\n<li>另一方面，app经常需要和服务器及时同步一些数据，也可以通过心跳包发送过去。</li>\n</ul>\n<h3 id=\"TCP内置的KeepAlive保活机制\"><a href=\"#TCP内置的KeepAlive保活机制\" class=\"headerlink\" title=\"TCP内置的KeepAlive保活机制\"></a>TCP内置的KeepAlive保活机制</h3><hr>\n<ul>\n<li>7,200,000 ms：TCP默认的心跳间隔时间是2个小时！，这在绝大多数APP中是无法忍受的。</li>\n<li>这就要提出另外一个问题：心跳间隔时间的不合理设置，可能会因为短暂的网络波动而断开健康的TCP连接。</li>\n</ul>\n<h3 id=\"实践中的疑虑\"><a href=\"#实践中的疑虑\" class=\"headerlink\" title=\"实践中的疑虑\"></a>实践中的疑虑</h3><hr>\n<p>参与开发中的一个项目，心跳的间隔时间是8秒。检测到玩家断线时，客户端会有断线重连的提示。</p>\n<p>现在遇到这样的bug：</p>\n<p>流程如下：</p>\n<p>玩家点击某个按钮 =&gt; 发送消息至服务器 =&gt; 服务器处理后，返回消息给客户端 =&gt; 客户端做出对应的UI表现</p>\n<p>玩家反馈：</p>\n<p>点击按钮没有任何反应，没有断线重连提示，服务器日志没有查到这位玩家发送的消息日志。</p>\n<p>我猜想：</p>\n<p>玩家在点击按钮的时候，正好网络波动网络消息没有发出去，他没有看见断线重连的提示，是因为：短暂之后（8秒之内）网络又好了。也就是说恰好网络波动只是出现在两次心跳之间，而没有被客户端检测到。所以玩家觉得网络没有任何问题（依据是客户端的断线重连提示），服务器日志却又查不到发送网络消息的日志。</p>\n"},{"title":"Lua遍历Table的几种方式","date":"2019-03-16T16:00:00.000Z","_content":"\n### for语句 + #tab\n---\n这种方式只适合遍历被当作单纯的数组使用时的table，并且没有自定义元素的索引\n```\n# 先定义一个使用for语句 + #tab的遍历函数\nfunction Traversal(tab) \n    print(#tab .. |)\n    for i = 1, #tab do \n        print(tab[i]) \n    end \nend\n\nlocal tab = {0, 1, 2, 5, 9, 7}\nTraversal(tab)\n# 打印结果：6|0 1 2 5 9 7\n# 这个结果很符合预期\n\n# 现在假设tab的内容是这样的：\n\ntab = {0, 1, [4] = 2}\nTraversal(tab)\n# 打印结果：2|0 1\n\n# 或者下面这样：\n\ntab = {[2] = 0, 1, 2}\nTraversal(tab)\n# 打印结果：2|1 2\n\n# 显然当tab的索引不连续时，这种方式只把连续的元素打印出来了\n# 这是因为#tab的值只表示索引连续的元素个数，而不是tab的所有元素个数\n```\n\n### for语句 + pairs\n---\n这种方式几乎可以遍历各种形式的table，但是遍历的顺序可能不符合预期，因为它是按照key的hash值来顺序遍历的\n```\nfunction Traversal(tab) \n    for k, v in pairs(tab) do\n        print(k .. \":\" .. v)\n    end\nend\n\nlocal tab = {0, 1, 2, 5, 9, 7} \nTraversal(tab)\n# 打印结果：1:0 2:1 3:2 4:5 5:9 6:7\n\ntab = {[\"ad\"] = 0, 1, 2}\nTraversal(tab)\n# 打印结果：1:1 2:2 ad:0\n\ntab = {\"A\", \"B\", [9] = \"C\", 1, [5] = \"D\", 12}\nTraversal(tab)\n# 打印结果：1:A 2:B 3:1 4:12 5:D 9:C\n\nlocal tab = {[2]= \"A\", \"B\", [9] = \"C\", 1, [5] = \"D\", 12}\nTraversal(tab)\n# 打印结果：1:B 2:1 3:12 9:C 5:D\n# 注意：\"A\"没有打印出来，这就是为什么说它几乎能遍历所有形式的table\n# 但是几乎没有会像上面那样使用table。。。\n```\n\n### for语句 + ipairs\n---\n这种方式只是形式上和for + pairs很像，内部机制差异很大。首先它很容易就会中断遍历操作（for + pairs几乎不会中断操作），但是它也有自己的优势：可以保证遍历的顺序。\n```\nfunction Traversal(tab) \n    for k, v in ipairs(tab) do\n        print(k .. \":\" .. v)\n    end\nend\n\nlocal tab = {\"A\", 5, \"D\", 12}\nTraversal(tab)\n# 打印结果：1:A 2:5 3:D 4:12\n\ntab = {0, 123, 12, \"C\", [7] = 3}\nTraversal(tab)\n# 打印结果：1:0 2:123 3:12 4:C\n# 注意：在索引不连续时，中断了遍历\n\ntab = {[2]= \"A\", \"B\", [9] = \"C\", 1, [5] = \"D\", 12}\nTraversal(tab)\n# 打印结果：1:B 2:1 3:12\n```\n\n### 总结\n综上，在Lua的世界里，竟然找不到一个可以在任何情境下都能保证完全遍历出一个table！甚至在不要求遍历顺序的前提下，也找不到！为什么在一个编程语言里会出现这样的设计呢？要知道在像C++、JAVA之类的语言里，这简直是标配好不好！管你是普通数组还是关联数组，分分钟搞定。\n\n在我看来，感觉是因为table在Lua里面实在是太灵活了！\n* 没有类型限制，同一个table里可以同时存放字符、数值、函数甚至是另一个table！\n* 同一个table里既可以放单个元素，也能存放key-value形式的键值对\n\n就这么多了，记得选择合适自己需求的方式就行了","source":"_posts/Lua/Lua遍历Table的几种方式.md","raw":"---\ntitle: Lua遍历Table的几种方式\ncategories: Lua\ndate: 2019-03-17\n---\n\n### for语句 + #tab\n---\n这种方式只适合遍历被当作单纯的数组使用时的table，并且没有自定义元素的索引\n```\n# 先定义一个使用for语句 + #tab的遍历函数\nfunction Traversal(tab) \n    print(#tab .. |)\n    for i = 1, #tab do \n        print(tab[i]) \n    end \nend\n\nlocal tab = {0, 1, 2, 5, 9, 7}\nTraversal(tab)\n# 打印结果：6|0 1 2 5 9 7\n# 这个结果很符合预期\n\n# 现在假设tab的内容是这样的：\n\ntab = {0, 1, [4] = 2}\nTraversal(tab)\n# 打印结果：2|0 1\n\n# 或者下面这样：\n\ntab = {[2] = 0, 1, 2}\nTraversal(tab)\n# 打印结果：2|1 2\n\n# 显然当tab的索引不连续时，这种方式只把连续的元素打印出来了\n# 这是因为#tab的值只表示索引连续的元素个数，而不是tab的所有元素个数\n```\n\n### for语句 + pairs\n---\n这种方式几乎可以遍历各种形式的table，但是遍历的顺序可能不符合预期，因为它是按照key的hash值来顺序遍历的\n```\nfunction Traversal(tab) \n    for k, v in pairs(tab) do\n        print(k .. \":\" .. v)\n    end\nend\n\nlocal tab = {0, 1, 2, 5, 9, 7} \nTraversal(tab)\n# 打印结果：1:0 2:1 3:2 4:5 5:9 6:7\n\ntab = {[\"ad\"] = 0, 1, 2}\nTraversal(tab)\n# 打印结果：1:1 2:2 ad:0\n\ntab = {\"A\", \"B\", [9] = \"C\", 1, [5] = \"D\", 12}\nTraversal(tab)\n# 打印结果：1:A 2:B 3:1 4:12 5:D 9:C\n\nlocal tab = {[2]= \"A\", \"B\", [9] = \"C\", 1, [5] = \"D\", 12}\nTraversal(tab)\n# 打印结果：1:B 2:1 3:12 9:C 5:D\n# 注意：\"A\"没有打印出来，这就是为什么说它几乎能遍历所有形式的table\n# 但是几乎没有会像上面那样使用table。。。\n```\n\n### for语句 + ipairs\n---\n这种方式只是形式上和for + pairs很像，内部机制差异很大。首先它很容易就会中断遍历操作（for + pairs几乎不会中断操作），但是它也有自己的优势：可以保证遍历的顺序。\n```\nfunction Traversal(tab) \n    for k, v in ipairs(tab) do\n        print(k .. \":\" .. v)\n    end\nend\n\nlocal tab = {\"A\", 5, \"D\", 12}\nTraversal(tab)\n# 打印结果：1:A 2:5 3:D 4:12\n\ntab = {0, 123, 12, \"C\", [7] = 3}\nTraversal(tab)\n# 打印结果：1:0 2:123 3:12 4:C\n# 注意：在索引不连续时，中断了遍历\n\ntab = {[2]= \"A\", \"B\", [9] = \"C\", 1, [5] = \"D\", 12}\nTraversal(tab)\n# 打印结果：1:B 2:1 3:12\n```\n\n### 总结\n综上，在Lua的世界里，竟然找不到一个可以在任何情境下都能保证完全遍历出一个table！甚至在不要求遍历顺序的前提下，也找不到！为什么在一个编程语言里会出现这样的设计呢？要知道在像C++、JAVA之类的语言里，这简直是标配好不好！管你是普通数组还是关联数组，分分钟搞定。\n\n在我看来，感觉是因为table在Lua里面实在是太灵活了！\n* 没有类型限制，同一个table里可以同时存放字符、数值、函数甚至是另一个table！\n* 同一个table里既可以放单个元素，也能存放key-value形式的键值对\n\n就这么多了，记得选择合适自己需求的方式就行了","slug":"Lua/Lua遍历Table的几种方式","published":1,"updated":"2019-04-25T03:06:00.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy00wv3j0020vsr7np74l609","content":"<h3 id=\"for语句-tab\"><a href=\"#for语句-tab\" class=\"headerlink\" title=\"for语句 + #tab\"></a>for语句 + #tab</h3><hr>\n<p>这种方式只适合遍历被当作单纯的数组使用时的table，并且没有自定义元素的索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 先定义一个使用for语句 + #tab的遍历函数</span><br><span class=\"line\">function Traversal(tab) </span><br><span class=\"line\">    print(#tab .. |)</span><br><span class=\"line\">    for i = 1, #tab do </span><br><span class=\"line\">        print(tab[i]) </span><br><span class=\"line\">    end </span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local tab = &#123;0, 1, 2, 5, 9, 7&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：6|0 1 2 5 9 7</span><br><span class=\"line\"># 这个结果很符合预期</span><br><span class=\"line\"></span><br><span class=\"line\"># 现在假设tab的内容是这样的：</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;0, 1, [4] = 2&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：2|0 1</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者下面这样：</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;[2] = 0, 1, 2&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：2|1 2</span><br><span class=\"line\"></span><br><span class=\"line\"># 显然当tab的索引不连续时，这种方式只把连续的元素打印出来了</span><br><span class=\"line\"># 这是因为#tab的值只表示索引连续的元素个数，而不是tab的所有元素个数</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"for语句-pairs\"><a href=\"#for语句-pairs\" class=\"headerlink\" title=\"for语句 + pairs\"></a>for语句 + pairs</h3><hr>\n<p>这种方式几乎可以遍历各种形式的table，但是遍历的顺序可能不符合预期，因为它是按照key的hash值来顺序遍历的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Traversal(tab) </span><br><span class=\"line\">    for k, v in pairs(tab) do</span><br><span class=\"line\">        print(k .. &quot;:&quot; .. v)</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local tab = &#123;0, 1, 2, 5, 9, 7&#125; </span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:0 2:1 3:2 4:5 5:9 6:7</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;[&quot;ad&quot;] = 0, 1, 2&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:1 2:2 ad:0</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;&quot;A&quot;, &quot;B&quot;, [9] = &quot;C&quot;, 1, [5] = &quot;D&quot;, 12&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:A 2:B 3:1 4:12 5:D 9:C</span><br><span class=\"line\"></span><br><span class=\"line\">local tab = &#123;[2]= &quot;A&quot;, &quot;B&quot;, [9] = &quot;C&quot;, 1, [5] = &quot;D&quot;, 12&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:B 2:1 3:12 9:C 5:D</span><br><span class=\"line\"># 注意：&quot;A&quot;没有打印出来，这就是为什么说它几乎能遍历所有形式的table</span><br><span class=\"line\"># 但是几乎没有会像上面那样使用table。。。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"for语句-ipairs\"><a href=\"#for语句-ipairs\" class=\"headerlink\" title=\"for语句 + ipairs\"></a>for语句 + ipairs</h3><hr>\n<p>这种方式只是形式上和for + pairs很像，内部机制差异很大。首先它很容易就会中断遍历操作（for + pairs几乎不会中断操作），但是它也有自己的优势：可以保证遍历的顺序。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Traversal(tab) </span><br><span class=\"line\">    for k, v in ipairs(tab) do</span><br><span class=\"line\">        print(k .. &quot;:&quot; .. v)</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local tab = &#123;&quot;A&quot;, 5, &quot;D&quot;, 12&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:A 2:5 3:D 4:12</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;0, 123, 12, &quot;C&quot;, [7] = 3&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:0 2:123 3:12 4:C</span><br><span class=\"line\"># 注意：在索引不连续时，中断了遍历</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;[2]= &quot;A&quot;, &quot;B&quot;, [9] = &quot;C&quot;, 1, [5] = &quot;D&quot;, 12&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:B 2:1 3:12</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>综上，在Lua的世界里，竟然找不到一个可以在任何情境下都能保证完全遍历出一个table！甚至在不要求遍历顺序的前提下，也找不到！为什么在一个编程语言里会出现这样的设计呢？要知道在像C++、JAVA之类的语言里，这简直是标配好不好！管你是普通数组还是关联数组，分分钟搞定。</p>\n<p>在我看来，感觉是因为table在Lua里面实在是太灵活了！</p>\n<ul>\n<li>没有类型限制，同一个table里可以同时存放字符、数值、函数甚至是另一个table！</li>\n<li>同一个table里既可以放单个元素，也能存放key-value形式的键值对</li>\n</ul>\n<p>就这么多了，记得选择合适自己需求的方式就行了</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"for语句-tab\"><a href=\"#for语句-tab\" class=\"headerlink\" title=\"for语句 + #tab\"></a>for语句 + #tab</h3><hr>\n<p>这种方式只适合遍历被当作单纯的数组使用时的table，并且没有自定义元素的索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 先定义一个使用for语句 + #tab的遍历函数</span><br><span class=\"line\">function Traversal(tab) </span><br><span class=\"line\">    print(#tab .. |)</span><br><span class=\"line\">    for i = 1, #tab do </span><br><span class=\"line\">        print(tab[i]) </span><br><span class=\"line\">    end </span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local tab = &#123;0, 1, 2, 5, 9, 7&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：6|0 1 2 5 9 7</span><br><span class=\"line\"># 这个结果很符合预期</span><br><span class=\"line\"></span><br><span class=\"line\"># 现在假设tab的内容是这样的：</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;0, 1, [4] = 2&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：2|0 1</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者下面这样：</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;[2] = 0, 1, 2&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：2|1 2</span><br><span class=\"line\"></span><br><span class=\"line\"># 显然当tab的索引不连续时，这种方式只把连续的元素打印出来了</span><br><span class=\"line\"># 这是因为#tab的值只表示索引连续的元素个数，而不是tab的所有元素个数</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"for语句-pairs\"><a href=\"#for语句-pairs\" class=\"headerlink\" title=\"for语句 + pairs\"></a>for语句 + pairs</h3><hr>\n<p>这种方式几乎可以遍历各种形式的table，但是遍历的顺序可能不符合预期，因为它是按照key的hash值来顺序遍历的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Traversal(tab) </span><br><span class=\"line\">    for k, v in pairs(tab) do</span><br><span class=\"line\">        print(k .. &quot;:&quot; .. v)</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local tab = &#123;0, 1, 2, 5, 9, 7&#125; </span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:0 2:1 3:2 4:5 5:9 6:7</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;[&quot;ad&quot;] = 0, 1, 2&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:1 2:2 ad:0</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;&quot;A&quot;, &quot;B&quot;, [9] = &quot;C&quot;, 1, [5] = &quot;D&quot;, 12&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:A 2:B 3:1 4:12 5:D 9:C</span><br><span class=\"line\"></span><br><span class=\"line\">local tab = &#123;[2]= &quot;A&quot;, &quot;B&quot;, [9] = &quot;C&quot;, 1, [5] = &quot;D&quot;, 12&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:B 2:1 3:12 9:C 5:D</span><br><span class=\"line\"># 注意：&quot;A&quot;没有打印出来，这就是为什么说它几乎能遍历所有形式的table</span><br><span class=\"line\"># 但是几乎没有会像上面那样使用table。。。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"for语句-ipairs\"><a href=\"#for语句-ipairs\" class=\"headerlink\" title=\"for语句 + ipairs\"></a>for语句 + ipairs</h3><hr>\n<p>这种方式只是形式上和for + pairs很像，内部机制差异很大。首先它很容易就会中断遍历操作（for + pairs几乎不会中断操作），但是它也有自己的优势：可以保证遍历的顺序。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Traversal(tab) </span><br><span class=\"line\">    for k, v in ipairs(tab) do</span><br><span class=\"line\">        print(k .. &quot;:&quot; .. v)</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">local tab = &#123;&quot;A&quot;, 5, &quot;D&quot;, 12&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:A 2:5 3:D 4:12</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;0, 123, 12, &quot;C&quot;, [7] = 3&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:0 2:123 3:12 4:C</span><br><span class=\"line\"># 注意：在索引不连续时，中断了遍历</span><br><span class=\"line\"></span><br><span class=\"line\">tab = &#123;[2]= &quot;A&quot;, &quot;B&quot;, [9] = &quot;C&quot;, 1, [5] = &quot;D&quot;, 12&#125;</span><br><span class=\"line\">Traversal(tab)</span><br><span class=\"line\"># 打印结果：1:B 2:1 3:12</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>综上，在Lua的世界里，竟然找不到一个可以在任何情境下都能保证完全遍历出一个table！甚至在不要求遍历顺序的前提下，也找不到！为什么在一个编程语言里会出现这样的设计呢？要知道在像C++、JAVA之类的语言里，这简直是标配好不好！管你是普通数组还是关联数组，分分钟搞定。</p>\n<p>在我看来，感觉是因为table在Lua里面实在是太灵活了！</p>\n<ul>\n<li>没有类型限制，同一个table里可以同时存放字符、数值、函数甚至是另一个table！</li>\n<li>同一个table里既可以放单个元素，也能存放key-value形式的键值对</li>\n</ul>\n<p>就这么多了，记得选择合适自己需求的方式就行了</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjy00wuws0000vsr7sesx1u8e","category_id":"cjy00wux10003vsr7jxrvymhc","_id":"cjy00wux9000avsr7dh170uv0"},{"post_id":"cjy00wux00002vsr7vqtmjhee","category_id":"cjy00wux60007vsr7vtc6o122","_id":"cjy00wuxc000evsr7h0f5hl8v"},{"post_id":"cjy00wux30004vsr7ty8ra5yc","category_id":"cjy00wux9000bvsr7tf1maiqz","_id":"cjy00wuxe000ivsr74ybw29nw"},{"post_id":"cjy00wuxb000dvsr7quav3fx6","category_id":"cjy00wux60007vsr7vtc6o122","_id":"cjy00wuxf000lvsr7p4xkojl0"},{"post_id":"cjy00wuxc000gvsr7e3vmoptu","category_id":"cjy00wux10003vsr7jxrvymhc","_id":"cjy00wuxg000nvsr7a167bz57"},{"post_id":"cjy00wux40005vsr7mgjvvl4m","category_id":"cjy00wuxc000fvsr7mn9qjbcj","_id":"cjy00wuxh000qvsr79hsdhxph"},{"post_id":"cjy00wuxd000hvsr79ip2ht61","category_id":"cjy00wux9000bvsr7tf1maiqz","_id":"cjy00wuxh000rvsr7pt3ril7z"},{"post_id":"cjy00wux50006vsr7m32nko7u","category_id":"cjy00wuxe000jvsr7e4lk75ln","_id":"cjy00wuxi000tvsr70ofw2952"},{"post_id":"cjy00wux70008vsr719kux1bu","category_id":"cjy00wuxh000pvsr7tbomxaf3","_id":"cjy00wuxi000uvsr7okcrfuac"},{"post_id":"cjy00wux80009vsr7wyuwvf5j","category_id":"cjy00wuxh000svsr7ukxk9o1z","_id":"cjy00wuxi000wvsr781z0o4zr"},{"post_id":"cjy00wuxa000cvsr75xkxgoiq","category_id":"cjy00wuxi000vvsr7okjqxg8l","_id":"cjy00wuxj000yvsr7hdlehjez"},{"post_id":"cjy00wuxe000kvsr7j876ragi","category_id":"cjy00wuxi000xvsr7svrg83qw","_id":"cjy00wuxj0010vsr7utpakz22"},{"post_id":"cjy00wuxf000mvsr7ugh1x2zc","category_id":"cjy00wuxj000zvsr7l5gulrun","_id":"cjy00wuxk0012vsr7k7eu3316"},{"post_id":"cjy00wuxg000ovsr76m86v04w","category_id":"cjy00wuxj0011vsr7j7d4kbl4","_id":"cjy00wuxk0013vsr77h8is1c4"},{"post_id":"cjy00wv0g0016vsr7g79r33xp","category_id":"cjy00wuxh000svsr7ukxk9o1z","_id":"cjy00wv0l0019vsr7xzwfrrsa"},{"post_id":"cjy00wv0i0018vsr7xclcaz13","category_id":"cjy00wux60007vsr7vtc6o122","_id":"cjy00wv0l001avsr7mbtf8qgc"},{"post_id":"cjy00wv0e0015vsr7wd06dsbo","category_id":"cjy00wv0h0017vsr7vdt6ljpf","_id":"cjy00wv0l001bvsr71kqlimmj"},{"post_id":"cjy00wv26001cvsr7urj186ui","category_id":"cjy00wv28001evsr7rgf80p8h","_id":"cjy00wv2e001lvsr7wrubtsuw"},{"post_id":"cjy00wv2b001hvsr7nlhy45ex","category_id":"cjy00wv28001evsr7rgf80p8h","_id":"cjy00wv2e001mvsr7iuefsvhi"},{"post_id":"cjy00wv27001dvsr78lmy97gf","category_id":"cjy00wv28001evsr7rgf80p8h","_id":"cjy00wv2f001ovsr7rk6bjzvm"},{"post_id":"cjy00wv29001fvsr79rhgwd79","category_id":"cjy00wv28001evsr7rgf80p8h","_id":"cjy00wv2f001pvsr7xusrow4s"},{"post_id":"cjy00wv2a001gvsr7um6izzd2","category_id":"cjy00wv2e001nvsr7ucwrdi49","_id":"cjy00wv2f001rvsr733718mao"},{"post_id":"cjy00wv2d001jvsr78e1jr9ty","category_id":"cjy00wv2e001nvsr7ucwrdi49","_id":"cjy00wv2g001svsr7m79uilh5"},{"post_id":"cjy00wv3c001tvsr709lnagsj","category_id":"cjy00wv2e001nvsr7ucwrdi49","_id":"cjy00wv3i001xvsr75ke7i2ho"},{"post_id":"cjy00wv3f001uvsr71jw48p8j","category_id":"cjy00wv2e001nvsr7ucwrdi49","_id":"cjy00wv3j001zvsr7qbrik6t5"},{"post_id":"cjy00wv3g001vvsr7zjxuv3a1","category_id":"cjy00wv28001evsr7rgf80p8h","_id":"cjy00wv3k0021vsr7hb8l35az"},{"post_id":"cjy00wv3h001wvsr75jsenfue","category_id":"cjy00wv2e001nvsr7ucwrdi49","_id":"cjy00wv3l0023vsr7l5i18rmg"},{"post_id":"cjy00wv3j0020vsr7np74l609","category_id":"cjy00wv2e001nvsr7ucwrdi49","_id":"cjy00wv3l0024vsr792qei91u"},{"post_id":"cjy00wv3i001yvsr7shnd6y27","category_id":"cjy00wv3k0022vsr7y4z9nnz4","_id":"cjy00wv3m0025vsr7mcm4oa6x"}],"PostTag":[],"Tag":[]}}